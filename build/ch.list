
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <__vectors_base__>:
 8000000:	20000400 	.word	0x20000400
 8000004:	08000239 	.word	0x08000239
 8000008:	0800023b 	.word	0x0800023b
 800000c:	0800023b 	.word	0x0800023b
 8000010:	0800023b 	.word	0x0800023b
 8000014:	0800023b 	.word	0x0800023b
 8000018:	0800023b 	.word	0x0800023b
 800001c:	0800023b 	.word	0x0800023b
 8000020:	0800023b 	.word	0x0800023b
 8000024:	0800023b 	.word	0x0800023b
 8000028:	0800023b 	.word	0x0800023b
 800002c:	08005fd1 	.word	0x08005fd1
 8000030:	0800023b 	.word	0x0800023b
 8000034:	0800023b 	.word	0x0800023b
 8000038:	0800023b 	.word	0x0800023b
 800003c:	0800023b 	.word	0x0800023b
 8000040:	0800023b 	.word	0x0800023b
 8000044:	0800023b 	.word	0x0800023b
 8000048:	0800023b 	.word	0x0800023b
 800004c:	0800023b 	.word	0x0800023b
 8000050:	0800023b 	.word	0x0800023b
 8000054:	0800023b 	.word	0x0800023b
 8000058:	0800023b 	.word	0x0800023b
 800005c:	0800023b 	.word	0x0800023b
 8000060:	0800023b 	.word	0x0800023b
 8000064:	0800023b 	.word	0x0800023b
 8000068:	0800023b 	.word	0x0800023b
 800006c:	08001f81 	.word	0x08001f81
 8000070:	08001ff1 	.word	0x08001ff1
 8000074:	08002071 	.word	0x08002071
 8000078:	080020f1 	.word	0x080020f1
 800007c:	08002171 	.word	0x08002171
 8000080:	080021f1 	.word	0x080021f1
 8000084:	08002271 	.word	0x08002271
 8000088:	0800023b 	.word	0x0800023b
 800008c:	0800023b 	.word	0x0800023b
 8000090:	08002841 	.word	0x08002841
 8000094:	0800023b 	.word	0x0800023b
 8000098:	0800023b 	.word	0x0800023b
 800009c:	0800023b 	.word	0x0800023b
 80000a0:	0800023b 	.word	0x0800023b
 80000a4:	0800023b 	.word	0x0800023b
 80000a8:	0800023b 	.word	0x0800023b
 80000ac:	0800023b 	.word	0x0800023b
 80000b0:	080025f1 	.word	0x080025f1
 80000b4:	0800023b 	.word	0x0800023b
 80000b8:	0800023b 	.word	0x0800023b
 80000bc:	0800023b 	.word	0x0800023b
 80000c0:	0800023b 	.word	0x0800023b
 80000c4:	0800023b 	.word	0x0800023b
 80000c8:	0800023b 	.word	0x0800023b
 80000cc:	0800023b 	.word	0x0800023b
 80000d0:	0800023b 	.word	0x0800023b
 80000d4:	0800023b 	.word	0x0800023b
 80000d8:	0800023b 	.word	0x0800023b
 80000dc:	0800023b 	.word	0x0800023b
 80000e0:	0800023b 	.word	0x0800023b
 80000e4:	0800023b 	.word	0x0800023b
 80000e8:	0800023b 	.word	0x0800023b
 80000ec:	0800023b 	.word	0x0800023b
 80000f0:	0800023b 	.word	0x0800023b
 80000f4:	0800023b 	.word	0x0800023b
 80000f8:	0800023b 	.word	0x0800023b
 80000fc:	0800023b 	.word	0x0800023b
 8000100:	0800023b 	.word	0x0800023b
 8000104:	08002561 	.word	0x08002561
 8000108:	0800023b 	.word	0x0800023b
 800010c:	0800023b 	.word	0x0800023b
 8000110:	0800023b 	.word	0x0800023b
 8000114:	0800023b 	.word	0x0800023b
 8000118:	0800023b 	.word	0x0800023b
 800011c:	0800023b 	.word	0x0800023b
 8000120:	080022f1 	.word	0x080022f1
 8000124:	08002361 	.word	0x08002361
 8000128:	080023e1 	.word	0x080023e1
 800012c:	08002461 	.word	0x08002461
 8000130:	080024e1 	.word	0x080024e1
 8000134:	0800023b 	.word	0x0800023b
 8000138:	0800023b 	.word	0x0800023b
 800013c:	0800023b 	.word	0x0800023b
 8000140:	0800023b 	.word	0x0800023b
 8000144:	0800023b 	.word	0x0800023b
 8000148:	0800023b 	.word	0x0800023b
 800014c:	0800023b 	.word	0x0800023b
 8000150:	0800023b 	.word	0x0800023b
 8000154:	0800023b 	.word	0x0800023b
 8000158:	0800023b 	.word	0x0800023b
 800015c:	0800023b 	.word	0x0800023b

Disassembly of section .text:

08000160 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 8000160:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 8000162:	4826      	ldr	r0, [pc, #152]	; (80001fc <endfiniloop+0x6>)
                msr     MSP, r0
 8000164:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 8000168:	4825      	ldr	r0, [pc, #148]	; (8000200 <endfiniloop+0xa>)
                msr     PSP, r0
 800016a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                /* Initial VTOR position enforced.*/
                ldr     r0, =_vectors
 800016e:	4825      	ldr	r0, [pc, #148]	; (8000204 <endfiniloop+0xe>)
                ldr     r1, =SCB_VTOR
 8000170:	4925      	ldr	r1, [pc, #148]	; (8000208 <endfiniloop+0x12>)
                str     r0, [r1]
 8000172:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 8000174:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 8000176:	f380 8814 	msr	CONTROL, r0
                isb
 800017a:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __cpu_init
 800017e:	f001 fbe7 	bl	8001950 <__cpu_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000182:	f002 fd15 	bl	8002bb0 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 8000186:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 800018a:	4920      	ldr	r1, [pc, #128]	; (800020c <endfiniloop+0x16>)
                ldr     r2, =__main_stack_end__
 800018c:	4a1b      	ldr	r2, [pc, #108]	; (80001fc <endfiniloop+0x6>)

0800018e <msloop>:
msloop:
                cmp     r1, r2
 800018e:	4291      	cmp	r1, r2
                itt     lo
 8000190:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000192:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 8000196:	e7fa      	bcc.n	800018e <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 8000198:	491d      	ldr	r1, [pc, #116]	; (8000210 <endfiniloop+0x1a>)
                ldr     r2, =__process_stack_end__
 800019a:	4a19      	ldr	r2, [pc, #100]	; (8000200 <endfiniloop+0xa>)

0800019c <psloop>:
psloop:
                cmp     r1, r2
 800019c:	4291      	cmp	r1, r2
                itt     lo
 800019e:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001a0:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 80001a4:	e7fa      	bcc.n	800019c <psloop>

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                ldr     r1, =__textdata_base__
 80001a6:	491b      	ldr	r1, [pc, #108]	; (8000214 <endfiniloop+0x1e>)
                ldr     r2, =__data_base__
 80001a8:	4a1b      	ldr	r2, [pc, #108]	; (8000218 <endfiniloop+0x22>)
                ldr     r3, =__data_end__
 80001aa:	4b1c      	ldr	r3, [pc, #112]	; (800021c <endfiniloop+0x26>)

080001ac <dloop>:
dloop:
                cmp     r2, r3
 80001ac:	429a      	cmp	r2, r3
                ittt    lo
 80001ae:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 80001b0:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 80001b4:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 80001b8:	e7f8      	bcc.n	80001ac <dloop>

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the BSS
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                movs    r0, #0
 80001ba:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 80001bc:	4918      	ldr	r1, [pc, #96]	; (8000220 <endfiniloop+0x2a>)
                ldr     r2, =__bss_end__
 80001be:	4a19      	ldr	r2, [pc, #100]	; (8000224 <endfiniloop+0x2e>)

080001c0 <bloop>:
bloop:
                cmp     r1, r2
 80001c0:	4291      	cmp	r1, r2
                itt     lo
 80001c2:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001c4:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 80001c8:	e7fa      	bcc.n	80001c0 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 80001ca:	f001 fbd9 	bl	8001980 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 80001ce:	f001 fbc7 	bl	8001960 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 80001d2:	4c15      	ldr	r4, [pc, #84]	; (8000228 <endfiniloop+0x32>)
                ldr     r5, =__init_array_end__
 80001d4:	4d15      	ldr	r5, [pc, #84]	; (800022c <endfiniloop+0x36>)

080001d6 <initloop>:
initloop:
                cmp     r4, r5
 80001d6:	42ac      	cmp	r4, r5
                bge     endinitloop
 80001d8:	da03      	bge.n	80001e2 <endinitloop>
                ldr     r1, [r4], #4
 80001da:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80001de:	4788      	blx	r1
                b       initloop
 80001e0:	e7f9      	b.n	80001d6 <initloop>

080001e2 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 80001e2:	f00e fdad 	bl	800ed40 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 80001e6:	4c12      	ldr	r4, [pc, #72]	; (8000230 <endfiniloop+0x3a>)
                ldr     r5, =__fini_array_end__
 80001e8:	4d12      	ldr	r5, [pc, #72]	; (8000234 <endfiniloop+0x3e>)

080001ea <finiloop>:
finiloop:
                cmp     r4, r5
 80001ea:	42ac      	cmp	r4, r5
                bge     endfiniloop
 80001ec:	da03      	bge.n	80001f6 <endfiniloop>
                ldr     r1, [r4], #4
 80001ee:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80001f2:	4788      	blx	r1
                b       finiloop
 80001f4:	e7f9      	b.n	80001ea <finiloop>

080001f6 <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 80001f6:	f001 bbbb 	b.w	8001970 <__default_exit>
 80001fa:	0000      	.short	0x0000
                ldr     r0, =__main_stack_end__
 80001fc:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000200:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000204:	08000000 	.word	0x08000000
                ldr     r1, =SCB_VTOR
 8000208:	e000ed08 	.word	0xe000ed08
                ldr     r1, =__main_stack_base__
 800020c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000210:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 8000214:	08013390 	.word	0x08013390
                ldr     r2, =__data_base__
 8000218:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 800021c:	200008e4 	.word	0x200008e4
                ldr     r1, =__bss_base__
 8000220:	200008e8 	.word	0x200008e8
                ldr     r2, =__bss_end__
 8000224:	20002e10 	.word	0x20002e10
                ldr     r4, =__init_array_base__
 8000228:	08000160 	.word	0x08000160
                ldr     r5, =__init_array_end__
 800022c:	08000160 	.word	0x08000160
                ldr     r4, =__fini_array_base__
 8000230:	08000160 	.word	0x08000160
                ldr     r5, =__fini_array_end__
 8000234:	08000160 	.word	0x08000160

08000238 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 8000238:	e792      	b.n	8000160 <_crt0_entry>

0800023a <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 800023a:	f000 f800 	bl	800023e <_unhandled_exception>

0800023e <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 800023e:	e7fe      	b.n	800023e <_unhandled_exception>

08000240 <__port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  __port_switch
__port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8000240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                /* Saving FPU context.*/
                vpush   {s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 8000244:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 8000248:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 800024a:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 800024c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000250 <__port_thread_start>:
                bl      __stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8000250:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 8000252:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 8000256:	4628      	mov	r0, r5
                blx     r4
 8000258:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 800025a:	2000      	movs	r0, #0
                bl      chThdExit
 800025c:	f004 fa88 	bl	8004770 <chThdExit>

08000260 <.zombies>:
.zombies:       b       .zombies
 8000260:	e7fe      	b.n	8000260 <.zombies>

08000262 <__port_switch_from_isr>:
                bl      __stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_lock
#endif
                bl      chSchDoPreemption
 8000262:	f003 fdfd 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>

08000266 <__port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8000266:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000268:	e7fe      	b.n	8000268 <__port_exit_from_isr+0x2>
	...

0800026c <memcmp>:
 800026c:	2a03      	cmp	r2, #3
 800026e:	b510      	push	{r4, lr}
 8000270:	d916      	bls.n	80002a0 <memcmp+0x34>
 8000272:	ea40 0c01 	orr.w	ip, r0, r1
 8000276:	f01c 0f03 	tst.w	ip, #3
 800027a:	4604      	mov	r4, r0
 800027c:	460b      	mov	r3, r1
 800027e:	d122      	bne.n	80002c6 <memcmp+0x5a>
 8000280:	4619      	mov	r1, r3
 8000282:	4620      	mov	r0, r4
 8000284:	f8d1 e000 	ldr.w	lr, [r1]
 8000288:	f8d0 c000 	ldr.w	ip, [r0]
 800028c:	3304      	adds	r3, #4
 800028e:	45f4      	cmp	ip, lr
 8000290:	f104 0404 	add.w	r4, r4, #4
 8000294:	d117      	bne.n	80002c6 <memcmp+0x5a>
 8000296:	3a04      	subs	r2, #4
 8000298:	2a03      	cmp	r2, #3
 800029a:	4620      	mov	r0, r4
 800029c:	4619      	mov	r1, r3
 800029e:	d8ef      	bhi.n	8000280 <memcmp+0x14>
 80002a0:	1e54      	subs	r4, r2, #1
 80002a2:	b1a2      	cbz	r2, 80002ce <memcmp+0x62>
 80002a4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80002a8:	3901      	subs	r1, #1
 80002aa:	e001      	b.n	80002b0 <memcmp+0x44>
 80002ac:	18c3      	adds	r3, r0, r3
 80002ae:	d00c      	beq.n	80002ca <memcmp+0x5e>
 80002b0:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 80002b4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80002b8:	eba4 030c 	sub.w	r3, r4, ip
 80002bc:	4596      	cmp	lr, r2
 80002be:	d0f5      	beq.n	80002ac <memcmp+0x40>
 80002c0:	ebae 0002 	sub.w	r0, lr, r2
 80002c4:	bd10      	pop	{r4, pc}
 80002c6:	1e54      	subs	r4, r2, #1
 80002c8:	e7ec      	b.n	80002a4 <memcmp+0x38>
 80002ca:	4618      	mov	r0, r3
 80002cc:	bd10      	pop	{r4, pc}
 80002ce:	4610      	mov	r0, r2
 80002d0:	bd10      	pop	{r4, pc}
 80002d2:	bf00      	nop

080002d4 <memcpy>:
 80002d4:	4684      	mov	ip, r0
 80002d6:	ea41 0300 	orr.w	r3, r1, r0
 80002da:	f013 0303 	ands.w	r3, r3, #3
 80002de:	d149      	bne.n	8000374 <memcpy+0xa0>
 80002e0:	3a40      	subs	r2, #64	; 0x40
 80002e2:	d323      	bcc.n	800032c <memcpy+0x58>
 80002e4:	680b      	ldr	r3, [r1, #0]
 80002e6:	6003      	str	r3, [r0, #0]
 80002e8:	684b      	ldr	r3, [r1, #4]
 80002ea:	6043      	str	r3, [r0, #4]
 80002ec:	688b      	ldr	r3, [r1, #8]
 80002ee:	6083      	str	r3, [r0, #8]
 80002f0:	68cb      	ldr	r3, [r1, #12]
 80002f2:	60c3      	str	r3, [r0, #12]
 80002f4:	690b      	ldr	r3, [r1, #16]
 80002f6:	6103      	str	r3, [r0, #16]
 80002f8:	694b      	ldr	r3, [r1, #20]
 80002fa:	6143      	str	r3, [r0, #20]
 80002fc:	698b      	ldr	r3, [r1, #24]
 80002fe:	6183      	str	r3, [r0, #24]
 8000300:	69cb      	ldr	r3, [r1, #28]
 8000302:	61c3      	str	r3, [r0, #28]
 8000304:	6a0b      	ldr	r3, [r1, #32]
 8000306:	6203      	str	r3, [r0, #32]
 8000308:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800030a:	6243      	str	r3, [r0, #36]	; 0x24
 800030c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800030e:	6283      	str	r3, [r0, #40]	; 0x28
 8000310:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8000312:	62c3      	str	r3, [r0, #44]	; 0x2c
 8000314:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000316:	6303      	str	r3, [r0, #48]	; 0x30
 8000318:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800031a:	6343      	str	r3, [r0, #52]	; 0x34
 800031c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800031e:	6383      	str	r3, [r0, #56]	; 0x38
 8000320:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000322:	63c3      	str	r3, [r0, #60]	; 0x3c
 8000324:	3040      	adds	r0, #64	; 0x40
 8000326:	3140      	adds	r1, #64	; 0x40
 8000328:	3a40      	subs	r2, #64	; 0x40
 800032a:	d2db      	bcs.n	80002e4 <memcpy+0x10>
 800032c:	3230      	adds	r2, #48	; 0x30
 800032e:	d30b      	bcc.n	8000348 <memcpy+0x74>
 8000330:	680b      	ldr	r3, [r1, #0]
 8000332:	6003      	str	r3, [r0, #0]
 8000334:	684b      	ldr	r3, [r1, #4]
 8000336:	6043      	str	r3, [r0, #4]
 8000338:	688b      	ldr	r3, [r1, #8]
 800033a:	6083      	str	r3, [r0, #8]
 800033c:	68cb      	ldr	r3, [r1, #12]
 800033e:	60c3      	str	r3, [r0, #12]
 8000340:	3010      	adds	r0, #16
 8000342:	3110      	adds	r1, #16
 8000344:	3a10      	subs	r2, #16
 8000346:	d2f3      	bcs.n	8000330 <memcpy+0x5c>
 8000348:	320c      	adds	r2, #12
 800034a:	d305      	bcc.n	8000358 <memcpy+0x84>
 800034c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000350:	f840 3b04 	str.w	r3, [r0], #4
 8000354:	3a04      	subs	r2, #4
 8000356:	d2f9      	bcs.n	800034c <memcpy+0x78>
 8000358:	3204      	adds	r2, #4
 800035a:	d008      	beq.n	800036e <memcpy+0x9a>
 800035c:	07d2      	lsls	r2, r2, #31
 800035e:	bf1c      	itt	ne
 8000360:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000364:	f800 3b01 	strbne.w	r3, [r0], #1
 8000368:	d301      	bcc.n	800036e <memcpy+0x9a>
 800036a:	880b      	ldrh	r3, [r1, #0]
 800036c:	8003      	strh	r3, [r0, #0]
 800036e:	4660      	mov	r0, ip
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	2a08      	cmp	r2, #8
 8000376:	d313      	bcc.n	80003a0 <memcpy+0xcc>
 8000378:	078b      	lsls	r3, r1, #30
 800037a:	d0b1      	beq.n	80002e0 <memcpy+0xc>
 800037c:	f010 0303 	ands.w	r3, r0, #3
 8000380:	d0ae      	beq.n	80002e0 <memcpy+0xc>
 8000382:	f1c3 0304 	rsb	r3, r3, #4
 8000386:	1ad2      	subs	r2, r2, r3
 8000388:	07db      	lsls	r3, r3, #31
 800038a:	bf1c      	itt	ne
 800038c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000390:	f800 3b01 	strbne.w	r3, [r0], #1
 8000394:	d3a4      	bcc.n	80002e0 <memcpy+0xc>
 8000396:	f831 3b02 	ldrh.w	r3, [r1], #2
 800039a:	f820 3b02 	strh.w	r3, [r0], #2
 800039e:	e79f      	b.n	80002e0 <memcpy+0xc>
 80003a0:	3a04      	subs	r2, #4
 80003a2:	d3d9      	bcc.n	8000358 <memcpy+0x84>
 80003a4:	3a01      	subs	r2, #1
 80003a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80003aa:	f800 3b01 	strb.w	r3, [r0], #1
 80003ae:	d2f9      	bcs.n	80003a4 <memcpy+0xd0>
 80003b0:	780b      	ldrb	r3, [r1, #0]
 80003b2:	7003      	strb	r3, [r0, #0]
 80003b4:	784b      	ldrb	r3, [r1, #1]
 80003b6:	7043      	strb	r3, [r0, #1]
 80003b8:	788b      	ldrb	r3, [r1, #2]
 80003ba:	7083      	strb	r3, [r0, #2]
 80003bc:	4660      	mov	r0, ip
 80003be:	4770      	bx	lr

080003c0 <memset>:
 80003c0:	0783      	lsls	r3, r0, #30
 80003c2:	b530      	push	{r4, r5, lr}
 80003c4:	d048      	beq.n	8000458 <memset+0x98>
 80003c6:	1e54      	subs	r4, r2, #1
 80003c8:	2a00      	cmp	r2, #0
 80003ca:	d03f      	beq.n	800044c <memset+0x8c>
 80003cc:	4603      	mov	r3, r0
 80003ce:	b2ca      	uxtb	r2, r1
 80003d0:	e001      	b.n	80003d6 <memset+0x16>
 80003d2:	3c01      	subs	r4, #1
 80003d4:	d33a      	bcc.n	800044c <memset+0x8c>
 80003d6:	f803 2b01 	strb.w	r2, [r3], #1
 80003da:	079d      	lsls	r5, r3, #30
 80003dc:	d1f9      	bne.n	80003d2 <memset+0x12>
 80003de:	2c03      	cmp	r4, #3
 80003e0:	d92d      	bls.n	800043e <memset+0x7e>
 80003e2:	b2cd      	uxtb	r5, r1
 80003e4:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80003e8:	2c0f      	cmp	r4, #15
 80003ea:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80003ee:	d936      	bls.n	800045e <memset+0x9e>
 80003f0:	f1a4 0210 	sub.w	r2, r4, #16
 80003f4:	f022 0c0f 	bic.w	ip, r2, #15
 80003f8:	f103 0e20 	add.w	lr, r3, #32
 80003fc:	44e6      	add	lr, ip
 80003fe:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 8000402:	f103 0210 	add.w	r2, r3, #16
 8000406:	e942 5504 	strd	r5, r5, [r2, #-16]
 800040a:	e942 5502 	strd	r5, r5, [r2, #-8]
 800040e:	3210      	adds	r2, #16
 8000410:	4572      	cmp	r2, lr
 8000412:	d1f8      	bne.n	8000406 <memset+0x46>
 8000414:	f10c 0201 	add.w	r2, ip, #1
 8000418:	f014 0f0c 	tst.w	r4, #12
 800041c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8000420:	f004 0c0f 	and.w	ip, r4, #15
 8000424:	d013      	beq.n	800044e <memset+0x8e>
 8000426:	f1ac 0304 	sub.w	r3, ip, #4
 800042a:	f023 0303 	bic.w	r3, r3, #3
 800042e:	3304      	adds	r3, #4
 8000430:	4413      	add	r3, r2
 8000432:	f842 5b04 	str.w	r5, [r2], #4
 8000436:	4293      	cmp	r3, r2
 8000438:	d1fb      	bne.n	8000432 <memset+0x72>
 800043a:	f00c 0403 	and.w	r4, ip, #3
 800043e:	b12c      	cbz	r4, 800044c <memset+0x8c>
 8000440:	b2ca      	uxtb	r2, r1
 8000442:	441c      	add	r4, r3
 8000444:	f803 2b01 	strb.w	r2, [r3], #1
 8000448:	429c      	cmp	r4, r3
 800044a:	d1fb      	bne.n	8000444 <memset+0x84>
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	4664      	mov	r4, ip
 8000450:	4613      	mov	r3, r2
 8000452:	2c00      	cmp	r4, #0
 8000454:	d1f4      	bne.n	8000440 <memset+0x80>
 8000456:	e7f9      	b.n	800044c <memset+0x8c>
 8000458:	4603      	mov	r3, r0
 800045a:	4614      	mov	r4, r2
 800045c:	e7bf      	b.n	80003de <memset+0x1e>
 800045e:	461a      	mov	r2, r3
 8000460:	46a4      	mov	ip, r4
 8000462:	e7e0      	b.n	8000426 <memset+0x66>

08000464 <strchr>:
 8000464:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8000468:	4603      	mov	r3, r0
 800046a:	d044      	beq.n	80004f6 <strchr+0x92>
 800046c:	0782      	lsls	r2, r0, #30
 800046e:	d132      	bne.n	80004d6 <strchr+0x72>
 8000470:	b510      	push	{r4, lr}
 8000472:	6804      	ldr	r4, [r0, #0]
 8000474:	ea41 2e01 	orr.w	lr, r1, r1, lsl #8
 8000478:	ea4e 4e0e 	orr.w	lr, lr, lr, lsl #16
 800047c:	ea8e 0204 	eor.w	r2, lr, r4
 8000480:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8000484:	ea23 0302 	bic.w	r3, r3, r2
 8000488:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 800048c:	ea22 0204 	bic.w	r2, r2, r4
 8000490:	4313      	orrs	r3, r2
 8000492:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8000496:	d10f      	bne.n	80004b8 <strchr+0x54>
 8000498:	f850 4f04 	ldr.w	r4, [r0, #4]!
 800049c:	ea84 0c0e 	eor.w	ip, r4, lr
 80004a0:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 80004a4:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
 80004a8:	ea23 0304 	bic.w	r3, r3, r4
 80004ac:	ea22 020c 	bic.w	r2, r2, ip
 80004b0:	4313      	orrs	r3, r2
 80004b2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 80004b6:	d0ef      	beq.n	8000498 <strchr+0x34>
 80004b8:	7803      	ldrb	r3, [r0, #0]
 80004ba:	b923      	cbnz	r3, 80004c6 <strchr+0x62>
 80004bc:	e036      	b.n	800052c <strchr+0xc8>
 80004be:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d032      	beq.n	800052c <strchr+0xc8>
 80004c6:	4299      	cmp	r1, r3
 80004c8:	d1f9      	bne.n	80004be <strchr+0x5a>
 80004ca:	bd10      	pop	{r4, pc}
 80004cc:	428a      	cmp	r2, r1
 80004ce:	d011      	beq.n	80004f4 <strchr+0x90>
 80004d0:	079a      	lsls	r2, r3, #30
 80004d2:	4618      	mov	r0, r3
 80004d4:	d0cc      	beq.n	8000470 <strchr+0xc>
 80004d6:	4618      	mov	r0, r3
 80004d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80004dc:	2a00      	cmp	r2, #0
 80004de:	d1f5      	bne.n	80004cc <strchr+0x68>
 80004e0:	4610      	mov	r0, r2
 80004e2:	4770      	bx	lr
 80004e4:	0799      	lsls	r1, r3, #30
 80004e6:	4618      	mov	r0, r3
 80004e8:	d007      	beq.n	80004fa <strchr+0x96>
 80004ea:	4618      	mov	r0, r3
 80004ec:	7802      	ldrb	r2, [r0, #0]
 80004ee:	3301      	adds	r3, #1
 80004f0:	2a00      	cmp	r2, #0
 80004f2:	d1f7      	bne.n	80004e4 <strchr+0x80>
 80004f4:	4770      	bx	lr
 80004f6:	0782      	lsls	r2, r0, #30
 80004f8:	d1f7      	bne.n	80004ea <strchr+0x86>
 80004fa:	6802      	ldr	r2, [r0, #0]
 80004fc:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8000500:	ea23 0302 	bic.w	r3, r3, r2
 8000504:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8000508:	d108      	bne.n	800051c <strchr+0xb8>
 800050a:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800050e:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8000512:	ea23 0302 	bic.w	r3, r3, r2
 8000516:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800051a:	d0f6      	beq.n	800050a <strchr+0xa6>
 800051c:	7803      	ldrb	r3, [r0, #0]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d0e8      	beq.n	80004f4 <strchr+0x90>
 8000522:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8000526:	2b00      	cmp	r3, #0
 8000528:	d1fb      	bne.n	8000522 <strchr+0xbe>
 800052a:	4770      	bx	lr
 800052c:	4618      	mov	r0, r3
 800052e:	bd10      	pop	{r4, pc}

08000530 <strcmp>:
 8000530:	ea80 0c01 	eor.w	ip, r0, r1
 8000534:	f01c 0f03 	tst.w	ip, #3
 8000538:	d137      	bne.n	80005aa <strcmp+0x7a>
 800053a:	f010 0c03 	ands.w	ip, r0, #3
 800053e:	f020 0003 	bic.w	r0, r0, #3
 8000542:	f021 0103 	bic.w	r1, r1, #3
 8000546:	f850 2b04 	ldr.w	r2, [r0], #4
 800054a:	bf08      	it	eq
 800054c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000550:	d00e      	beq.n	8000570 <strcmp+0x40>
 8000552:	f08c 0c03 	eor.w	ip, ip, #3
 8000556:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800055a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800055e:	fa23 fc0c 	lsr.w	ip, r3, ip
 8000562:	f851 3b04 	ldr.w	r3, [r1], #4
 8000566:	ea42 020c 	orr.w	r2, r2, ip
 800056a:	ea43 030c 	orr.w	r3, r3, ip
 800056e:	bf00      	nop
 8000570:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 8000574:	429a      	cmp	r2, r3
 8000576:	bf01      	itttt	eq
 8000578:	ea2c 0c02 	biceq.w	ip, ip, r2
 800057c:	f01c 3f80 	tsteq.w	ip, #2155905152	; 0x80808080
 8000580:	f850 2b04 	ldreq.w	r2, [r0], #4
 8000584:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000588:	d0f2      	beq.n	8000570 <strcmp+0x40>
 800058a:	ea4f 6002 	mov.w	r0, r2, lsl #24
 800058e:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8000592:	2801      	cmp	r0, #1
 8000594:	bf28      	it	cs
 8000596:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 800059a:	bf08      	it	eq
 800059c:	0a1b      	lsreq	r3, r3, #8
 800059e:	d0f4      	beq.n	800058a <strcmp+0x5a>
 80005a0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80005a4:	0e00      	lsrs	r0, r0, #24
 80005a6:	1ac0      	subs	r0, r0, r3
 80005a8:	4770      	bx	lr
 80005aa:	f010 0f03 	tst.w	r0, #3
 80005ae:	d00a      	beq.n	80005c6 <strcmp+0x96>
 80005b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80005b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80005b8:	2a01      	cmp	r2, #1
 80005ba:	bf28      	it	cs
 80005bc:	429a      	cmpcs	r2, r3
 80005be:	d0f4      	beq.n	80005aa <strcmp+0x7a>
 80005c0:	eba2 0003 	sub.w	r0, r2, r3
 80005c4:	4770      	bx	lr
 80005c6:	f84d 5d04 	str.w	r5, [sp, #-4]!
 80005ca:	f850 2b04 	ldr.w	r2, [r0], #4
 80005ce:	f001 0503 	and.w	r5, r1, #3
 80005d2:	f021 0103 	bic.w	r1, r1, #3
 80005d6:	f851 3b04 	ldr.w	r3, [r1], #4
 80005da:	2d02      	cmp	r5, #2
 80005dc:	d026      	beq.n	800062c <strcmp+0xfc>
 80005de:	d84d      	bhi.n	800067c <strcmp+0x14c>
 80005e0:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
 80005e4:	ebb5 2f13 	cmp.w	r5, r3, lsr #8
 80005e8:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 80005ec:	ea2c 0c02 	bic.w	ip, ip, r2
 80005f0:	d10d      	bne.n	800060e <strcmp+0xde>
 80005f2:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 80005f6:	bf08      	it	eq
 80005f8:	f851 3b04 	ldreq.w	r3, [r1], #4
 80005fc:	d10a      	bne.n	8000614 <strcmp+0xe4>
 80005fe:	ea85 0502 	eor.w	r5, r5, r2
 8000602:	ebb5 6f03 	cmp.w	r5, r3, lsl #24
 8000606:	d10c      	bne.n	8000622 <strcmp+0xf2>
 8000608:	f850 2b04 	ldr.w	r2, [r0], #4
 800060c:	e7e8      	b.n	80005e0 <strcmp+0xb0>
 800060e:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000612:	e05b      	b.n	80006cc <strcmp+0x19c>
 8000614:	f03c 4c7f 	bics.w	ip, ip, #4278190080	; 0xff000000
 8000618:	d154      	bne.n	80006c4 <strcmp+0x194>
 800061a:	780b      	ldrb	r3, [r1, #0]
 800061c:	ea4f 6512 	mov.w	r5, r2, lsr #24
 8000620:	e054      	b.n	80006cc <strcmp+0x19c>
 8000622:	ea4f 6512 	mov.w	r5, r2, lsr #24
 8000626:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800062a:	e04f      	b.n	80006cc <strcmp+0x19c>
 800062c:	ea4f 4502 	mov.w	r5, r2, lsl #16
 8000630:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 8000634:	ea4f 4515 	mov.w	r5, r5, lsr #16
 8000638:	ea2c 0c02 	bic.w	ip, ip, r2
 800063c:	ebb5 4f13 	cmp.w	r5, r3, lsr #16
 8000640:	d118      	bne.n	8000674 <strcmp+0x144>
 8000642:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 8000646:	bf08      	it	eq
 8000648:	f851 3b04 	ldreq.w	r3, [r1], #4
 800064c:	d107      	bne.n	800065e <strcmp+0x12e>
 800064e:	ea85 0502 	eor.w	r5, r5, r2
 8000652:	ebb5 4f03 	cmp.w	r5, r3, lsl #16
 8000656:	d109      	bne.n	800066c <strcmp+0x13c>
 8000658:	f850 2b04 	ldr.w	r2, [r0], #4
 800065c:	e7e6      	b.n	800062c <strcmp+0xfc>
 800065e:	ea5f 4c0c 	movs.w	ip, ip, lsl #16
 8000662:	d12f      	bne.n	80006c4 <strcmp+0x194>
 8000664:	880b      	ldrh	r3, [r1, #0]
 8000666:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800066a:	e02f      	b.n	80006cc <strcmp+0x19c>
 800066c:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8000670:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000674:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8000678:	e028      	b.n	80006cc <strcmp+0x19c>
 800067a:	bf00      	nop
 800067c:	f002 05ff 	and.w	r5, r2, #255	; 0xff
 8000680:	ebb5 6f13 	cmp.w	r5, r3, lsr #24
 8000684:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 8000688:	ea2c 0c02 	bic.w	ip, ip, r2
 800068c:	d10d      	bne.n	80006aa <strcmp+0x17a>
 800068e:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 8000692:	bf08      	it	eq
 8000694:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000698:	d10a      	bne.n	80006b0 <strcmp+0x180>
 800069a:	ea85 0502 	eor.w	r5, r5, r2
 800069e:	ebb5 2f03 	cmp.w	r5, r3, lsl #8
 80006a2:	d10a      	bne.n	80006ba <strcmp+0x18a>
 80006a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80006a8:	e7e8      	b.n	800067c <strcmp+0x14c>
 80006aa:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80006ae:	e00d      	b.n	80006cc <strcmp+0x19c>
 80006b0:	f012 0fff 	tst.w	r2, #255	; 0xff
 80006b4:	d006      	beq.n	80006c4 <strcmp+0x194>
 80006b6:	f851 3b04 	ldr.w	r3, [r1], #4
 80006ba:	ea4f 2512 	mov.w	r5, r2, lsr #8
 80006be:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80006c2:	e003      	b.n	80006cc <strcmp+0x19c>
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bc20      	pop	{r5}
 80006ca:	4770      	bx	lr
 80006cc:	f005 02ff 	and.w	r2, r5, #255	; 0xff
 80006d0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80006d4:	2801      	cmp	r0, #1
 80006d6:	bf28      	it	cs
 80006d8:	4290      	cmpcs	r0, r2
 80006da:	bf04      	itt	eq
 80006dc:	0a2d      	lsreq	r5, r5, #8
 80006de:	0a1b      	lsreq	r3, r3, #8
 80006e0:	d0f4      	beq.n	80006cc <strcmp+0x19c>
 80006e2:	eba2 0000 	sub.w	r0, r2, r0
 80006e6:	bc20      	pop	{r5}
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <strcpy>:
 80006ec:	ea80 0201 	eor.w	r2, r0, r1
 80006f0:	4684      	mov	ip, r0
 80006f2:	f012 0f03 	tst.w	r2, #3
 80006f6:	d14f      	bne.n	8000798 <strcpy+0xac>
 80006f8:	f011 0f03 	tst.w	r1, #3
 80006fc:	d132      	bne.n	8000764 <strcpy+0x78>
 80006fe:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8000702:	f011 0f04 	tst.w	r1, #4
 8000706:	f851 3b04 	ldr.w	r3, [r1], #4
 800070a:	d00b      	beq.n	8000724 <strcpy+0x38>
 800070c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8000710:	439a      	bics	r2, r3
 8000712:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8000716:	bf04      	itt	eq
 8000718:	f84c 3b04 	streq.w	r3, [ip], #4
 800071c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000720:	d116      	bne.n	8000750 <strcpy+0x64>
 8000722:	bf00      	nop
 8000724:	f851 4b04 	ldr.w	r4, [r1], #4
 8000728:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 800072c:	439a      	bics	r2, r3
 800072e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8000732:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8000736:	d10b      	bne.n	8000750 <strcpy+0x64>
 8000738:	f84c 3b04 	str.w	r3, [ip], #4
 800073c:	43a2      	bics	r2, r4
 800073e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8000742:	bf04      	itt	eq
 8000744:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000748:	f84c 4b04 	streq.w	r4, [ip], #4
 800074c:	d0ea      	beq.n	8000724 <strcpy+0x38>
 800074e:	4623      	mov	r3, r4
 8000750:	f80c 3b01 	strb.w	r3, [ip], #1
 8000754:	f013 0fff 	tst.w	r3, #255	; 0xff
 8000758:	ea4f 2333 	mov.w	r3, r3, ror #8
 800075c:	d1f8      	bne.n	8000750 <strcpy+0x64>
 800075e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	f011 0f01 	tst.w	r1, #1
 8000768:	d006      	beq.n	8000778 <strcpy+0x8c>
 800076a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800076e:	f80c 2b01 	strb.w	r2, [ip], #1
 8000772:	2a00      	cmp	r2, #0
 8000774:	bf08      	it	eq
 8000776:	4770      	bxeq	lr
 8000778:	f011 0f02 	tst.w	r1, #2
 800077c:	d0bf      	beq.n	80006fe <strcpy+0x12>
 800077e:	f831 2b02 	ldrh.w	r2, [r1], #2
 8000782:	f012 0fff 	tst.w	r2, #255	; 0xff
 8000786:	bf16      	itet	ne
 8000788:	f82c 2b02 	strhne.w	r2, [ip], #2
 800078c:	f88c 2000 	strbeq.w	r2, [ip]
 8000790:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 8000794:	d1b3      	bne.n	80006fe <strcpy+0x12>
 8000796:	4770      	bx	lr
 8000798:	f811 2b01 	ldrb.w	r2, [r1], #1
 800079c:	f80c 2b01 	strb.w	r2, [ip], #1
 80007a0:	2a00      	cmp	r2, #0
 80007a2:	d1f9      	bne.n	8000798 <strcpy+0xac>
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop

080007a8 <strlen>:
 80007a8:	f020 0103 	bic.w	r1, r0, #3
 80007ac:	f010 0003 	ands.w	r0, r0, #3
 80007b0:	f1c0 0000 	rsb	r0, r0, #0
 80007b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80007b8:	f100 0c04 	add.w	ip, r0, #4
 80007bc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80007c0:	f06f 0200 	mvn.w	r2, #0
 80007c4:	bf1c      	itt	ne
 80007c6:	fa22 f20c 	lsrne.w	r2, r2, ip
 80007ca:	4313      	orrne	r3, r2
 80007cc:	f04f 0c01 	mov.w	ip, #1
 80007d0:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 80007d4:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 80007d8:	eba3 020c 	sub.w	r2, r3, ip
 80007dc:	ea22 0203 	bic.w	r2, r2, r3
 80007e0:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 80007e4:	bf04      	itt	eq
 80007e6:	f851 3b04 	ldreq.w	r3, [r1], #4
 80007ea:	3004      	addeq	r0, #4
 80007ec:	d0f4      	beq.n	80007d8 <strlen+0x30>
 80007ee:	f1c2 0100 	rsb	r1, r2, #0
 80007f2:	ea02 0201 	and.w	r2, r2, r1
 80007f6:	fab2 f282 	clz	r2, r2
 80007fa:	f1c2 021f 	rsb	r2, r2, #31
 80007fe:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8000802:	4770      	bx	lr

08000804 <strncmp>:
 8000804:	b3a2      	cbz	r2, 8000870 <strncmp+0x6c>
 8000806:	b530      	push	{r4, r5, lr}
 8000808:	ea40 0401 	orr.w	r4, r0, r1
 800080c:	07a4      	lsls	r4, r4, #30
 800080e:	4686      	mov	lr, r0
 8000810:	460b      	mov	r3, r1
 8000812:	d02a      	beq.n	800086a <strncmp+0x66>
 8000814:	7804      	ldrb	r4, [r0, #0]
 8000816:	780b      	ldrb	r3, [r1, #0]
 8000818:	42a3      	cmp	r3, r4
 800081a:	d12f      	bne.n	800087c <strncmp+0x78>
 800081c:	2a01      	cmp	r2, #1
 800081e:	d00c      	beq.n	800083a <strncmp+0x36>
 8000820:	4684      	mov	ip, r0
 8000822:	b154      	cbz	r4, 800083a <strncmp+0x36>
 8000824:	f81c 4f01 	ldrb.w	r4, [ip, #1]!
 8000828:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800082c:	429c      	cmp	r4, r3
 800082e:	d125      	bne.n	800087c <strncmp+0x78>
 8000830:	ea6f 030c 	mvn.w	r3, ip
 8000834:	4413      	add	r3, r2
 8000836:	18c3      	adds	r3, r0, r3
 8000838:	d1f3      	bne.n	8000822 <strncmp+0x1e>
 800083a:	2000      	movs	r0, #0
 800083c:	bd30      	pop	{r4, r5, pc}
 800083e:	4619      	mov	r1, r3
 8000840:	f8de 4000 	ldr.w	r4, [lr]
 8000844:	4670      	mov	r0, lr
 8000846:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 800084a:	ea23 0c04 	bic.w	ip, r3, r4
 800084e:	460b      	mov	r3, r1
 8000850:	f853 5b04 	ldr.w	r5, [r3], #4
 8000854:	f10e 0e04 	add.w	lr, lr, #4
 8000858:	42ac      	cmp	r4, r5
 800085a:	d10b      	bne.n	8000874 <strncmp+0x70>
 800085c:	3a04      	subs	r2, #4
 800085e:	d0ec      	beq.n	800083a <strncmp+0x36>
 8000860:	f01c 3f80 	tst.w	ip, #2155905152	; 0x80808080
 8000864:	d1e9      	bne.n	800083a <strncmp+0x36>
 8000866:	4670      	mov	r0, lr
 8000868:	4619      	mov	r1, r3
 800086a:	2a03      	cmp	r2, #3
 800086c:	d8e7      	bhi.n	800083e <strncmp+0x3a>
 800086e:	e7d1      	b.n	8000814 <strncmp+0x10>
 8000870:	4610      	mov	r0, r2
 8000872:	4770      	bx	lr
 8000874:	7804      	ldrb	r4, [r0, #0]
 8000876:	780b      	ldrb	r3, [r1, #0]
 8000878:	429c      	cmp	r4, r3
 800087a:	d0d1      	beq.n	8000820 <strncmp+0x1c>
 800087c:	1ae0      	subs	r0, r4, r3
 800087e:	bd30      	pop	{r4, r5, pc}

08000880 <strpbrk>:
 8000880:	4684      	mov	ip, r0
 8000882:	7800      	ldrb	r0, [r0, #0]
 8000884:	b1b8      	cbz	r0, 80008b6 <strpbrk+0x36>
 8000886:	b500      	push	{lr}
 8000888:	468e      	mov	lr, r1
 800088a:	7809      	ldrb	r1, [r1, #0]
 800088c:	4672      	mov	r2, lr
 800088e:	460b      	mov	r3, r1
 8000890:	b919      	cbnz	r1, 800089a <strpbrk+0x1a>
 8000892:	e00b      	b.n	80008ac <strpbrk+0x2c>
 8000894:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8000898:	b143      	cbz	r3, 80008ac <strpbrk+0x2c>
 800089a:	4298      	cmp	r0, r3
 800089c:	d1fa      	bne.n	8000894 <strpbrk+0x14>
 800089e:	7813      	ldrb	r3, [r2, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	bf14      	ite	ne
 80008a4:	4660      	movne	r0, ip
 80008a6:	2000      	moveq	r0, #0
 80008a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80008ac:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
 80008b0:	2800      	cmp	r0, #0
 80008b2:	d1eb      	bne.n	800088c <strpbrk+0xc>
 80008b4:	e7f3      	b.n	800089e <strpbrk+0x1e>
 80008b6:	4770      	bx	lr

080008b8 <strspn>:
 80008b8:	b510      	push	{r4, lr}
 80008ba:	468e      	mov	lr, r1
 80008bc:	7801      	ldrb	r1, [r0, #0]
 80008be:	b199      	cbz	r1, 80008e8 <strspn+0x30>
 80008c0:	4604      	mov	r4, r0
 80008c2:	4684      	mov	ip, r0
 80008c4:	f89e 0000 	ldrb.w	r0, [lr]
 80008c8:	b158      	cbz	r0, 80008e2 <strspn+0x2a>
 80008ca:	4672      	mov	r2, lr
 80008cc:	4603      	mov	r3, r0
 80008ce:	e002      	b.n	80008d6 <strspn+0x1e>
 80008d0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80008d4:	b12b      	cbz	r3, 80008e2 <strspn+0x2a>
 80008d6:	428b      	cmp	r3, r1
 80008d8:	d1fa      	bne.n	80008d0 <strspn+0x18>
 80008da:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 80008de:	2900      	cmp	r1, #0
 80008e0:	d1f2      	bne.n	80008c8 <strspn+0x10>
 80008e2:	ebac 0004 	sub.w	r0, ip, r4
 80008e6:	bd10      	pop	{r4, pc}
 80008e8:	4608      	mov	r0, r1
 80008ea:	bd10      	pop	{r4, pc}
 80008ec:	0000      	movs	r0, r0
	...

080008f0 <_mmcsd_get_capacity>:
  /* One or two pieces?*/
  if (startidx < endidx) {
    return (data[startidx] >> startoff) |               /* Two pieces case. */
           ((data[endidx] & endmask) << (32U - startoff));
  }
  return (data[startidx] & endmask) >> startoff;        /* One piece case.  */
 80008f0:	68c3      	ldr	r3, [r0, #12]
uint32_t _mmcsd_get_capacity(const uint32_t *csd) {
  uint32_t a, b, c;

  osalDbgCheck(NULL != csd);

  switch (_mmcsd_get_slice(csd, MMCSD_CSD_10_CSD_STRUCTURE_SLICE)) {
 80008f2:	0f9b      	lsrs	r3, r3, #30
 80008f4:	d00c      	beq.n	8000910 <_mmcsd_get_capacity+0x20>
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d108      	bne.n	800090c <_mmcsd_get_capacity+0x1c>
           ((data[endidx] & endmask) << (32U - startoff));
 80008fa:	6883      	ldr	r3, [r0, #8]
    return (data[startidx] >> startoff) |               /* Two pieces case. */
 80008fc:	88c2      	ldrh	r2, [r0, #6]
           ((data[endidx] & endmask) << (32U - startoff));
 80008fe:	0418      	lsls	r0, r3, #16
 8000900:	f400 107c 	and.w	r0, r0, #4128768	; 0x3f0000
    return (data[startidx] >> startoff) |               /* Two pieces case. */
 8000904:	4310      	orrs	r0, r2
    b = _mmcsd_get_slice(csd, MMCSD_CSD_10_C_SIZE_MULT_SLICE);
    c = _mmcsd_get_slice(csd, MMCSD_CSD_10_READ_BL_LEN_SLICE);
    return ((a + 1U) << (b + 2U)) << (c - 9U);  /* 2^9 == MMCSD_BLOCK_SIZE. */
  case 1:
    /* CSD version 2.0.*/
    return 1024U * (_mmcsd_get_slice(csd, MMCSD_CSD_20_C_SIZE_SLICE) + 1U);
 8000906:	3001      	adds	r0, #1
 8000908:	0280      	lsls	r0, r0, #10
  default:
    /* Reserved value detected.*/
    break;
  }
  return 0U;
}
 800090a:	4770      	bx	lr
  switch (_mmcsd_get_slice(csd, MMCSD_CSD_10_CSD_STRUCTURE_SLICE)) {
 800090c:	2000      	movs	r0, #0
 800090e:	4770      	bx	lr
           ((data[endidx] & endmask) << (32U - startoff));
 8000910:	f640 73fc 	movw	r3, #4092	; 0xffc
uint32_t _mmcsd_get_capacity(const uint32_t *csd) {
 8000914:	b430      	push	{r4, r5}
    return (data[startidx] >> startoff) |               /* Two pieces case. */
 8000916:	e9d0 4501 	ldrd	r4, r5, [r0, #4]
           ((data[endidx] & endmask) << (32U - startoff));
 800091a:	ea03 0085 	and.w	r0, r3, r5, lsl #2
  return (data[startidx] & endmask) >> startoff;        /* One piece case.  */
 800091e:	f3c4 31c2 	ubfx	r1, r4, #15, #3
    return (data[startidx] >> startoff) |               /* Two pieces case. */
 8000922:	ea40 7094 	orr.w	r0, r0, r4, lsr #30
  return (data[startidx] & endmask) >> startoff;        /* One piece case.  */
 8000926:	f3c5 4203 	ubfx	r2, r5, #16, #4
    return ((a + 1U) << (b + 2U)) << (c - 9U);  /* 2^9 == MMCSD_BLOCK_SIZE. */
 800092a:	3102      	adds	r1, #2
 800092c:	3001      	adds	r0, #1
 800092e:	3a09      	subs	r2, #9
 8000930:	4088      	lsls	r0, r1
 8000932:	4090      	lsls	r0, r2
}
 8000934:	bc30      	pop	{r4, r5}
 8000936:	4770      	bx	lr
	...

08000940 <sdcSync>:
bool sdcSync(SDCDriver *sdcp) {
  bool result;

  osalDbgCheck(sdcp != NULL);

  if (sdcp->state != BLK_READY) {
 8000940:	7900      	ldrb	r0, [r0, #4]
  result = sdc_lld_sync(sdcp);

  /* Synchronization operation finished.*/
  sdcp->state = BLK_READY;
  return result;
}
 8000942:	3805      	subs	r0, #5
 8000944:	bf18      	it	ne
 8000946:	2001      	movne	r0, #1
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	0000      	movs	r0, r0
	...

08000950 <sdcGetInfo>:
 */
bool sdcGetInfo(SDCDriver *sdcp, BlockDeviceInfo *bdip) {

  osalDbgCheck((sdcp != NULL) && (bdip != NULL));

  if (sdcp->state != BLK_READY) {
 8000950:	7903      	ldrb	r3, [r0, #4]
 8000952:	2b05      	cmp	r3, #5
 8000954:	d106      	bne.n	8000964 <sdcGetInfo+0x14>
    return HAL_FAILED;
  }

  bdip->blk_num = sdcp->capacity;
  bdip->blk_size = MMCSD_BLOCK_SIZE;
 8000956:	f44f 7300 	mov.w	r3, #512	; 0x200
  bdip->blk_num = sdcp->capacity;
 800095a:	6a82      	ldr	r2, [r0, #40]	; 0x28

  return HAL_SUCCESS;
 800095c:	2000      	movs	r0, #0
  bdip->blk_size = MMCSD_BLOCK_SIZE;
 800095e:	e9c1 3200 	strd	r3, r2, [r1]
  return HAL_SUCCESS;
 8000962:	4770      	bx	lr
    return HAL_FAILED;
 8000964:	2001      	movs	r0, #1
}
 8000966:	4770      	bx	lr
	...

08000970 <_ctl.lto_priv.0>:
#else
    break;
#endif
  }
  return MSG_OK;
}
 8000970:	2000      	movs	r0, #0
 8000972:	4770      	bx	lr
	...

08000980 <sduRequestsHook>:
 * @retval true         Message handled internally.
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 8000980:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
 8000984:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8000988:	2a20      	cmp	r2, #32
 800098a:	d001      	beq.n	8000990 <sduRequestsHook+0x10>
      return true;
    default:
      return false;
    }
  }
  return false;
 800098c:	2000      	movs	r0, #0
}
 800098e:	4770      	bx	lr
    switch (usbp->setup[1]) {
 8000990:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
 8000994:	4603      	mov	r3, r0
 8000996:	2a21      	cmp	r2, #33	; 0x21
 8000998:	d80b      	bhi.n	80009b2 <sduRequestsHook+0x32>
 800099a:	2a1f      	cmp	r2, #31
 800099c:	d9f6      	bls.n	800098c <sduRequestsHook+0xc>
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 800099e:	2107      	movs	r1, #7
 80009a0:	2200      	movs	r2, #0
bool sduRequestsHook(USBDriver *usbp) {
 80009a2:	b410      	push	{r4}
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 80009a4:	4c07      	ldr	r4, [pc, #28]	; (80009c4 <sduRequestsHook+0x44>)
      return true;
 80009a6:	2001      	movs	r0, #1
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 80009a8:	e9c3 411a 	strd	r4, r1, [r3, #104]	; 0x68
 80009ac:	671a      	str	r2, [r3, #112]	; 0x70
}
 80009ae:	bc10      	pop	{r4}
 80009b0:	4770      	bx	lr
    switch (usbp->setup[1]) {
 80009b2:	2a22      	cmp	r2, #34	; 0x22
 80009b4:	d1ea      	bne.n	800098c <sduRequestsHook+0xc>
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80009b6:	2200      	movs	r2, #0
      return true;
 80009b8:	2001      	movs	r0, #1
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80009ba:	e9c3 221a 	strd	r2, r2, [r3, #104]	; 0x68
 80009be:	671a      	str	r2, [r3, #112]	; 0x70
      return true;
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	20000810 	.word	0x20000810
	...

080009d0 <sduInterruptTransmitted>:
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  (void)ep;
}
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
	...

080009e0 <set_address>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 80009e0:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
 *
 * @notapi
 */
void usb_lld_set_address(USBDriver *usbp) {

  STM32_USB->DADDR = (uint32_t)(usbp->address) | DADDR_EF;
 80009e4:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <set_address+0x24>)
 80009e6:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
 80009ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
static void set_address(USBDriver *usbp) {
 80009ee:	b510      	push	{r4, lr}
 80009f0:	64d3      	str	r3, [r2, #76]	; 0x4c
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 80009f2:	6843      	ldr	r3, [r0, #4]
static void set_address(USBDriver *usbp) {
 80009f4:	4604      	mov	r4, r0
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	b10b      	cbz	r3, 80009fe <set_address+0x1e>
 80009fa:	2101      	movs	r1, #1
 80009fc:	4798      	blx	r3
  usbp->state = USB_SELECTED;
 80009fe:	2303      	movs	r3, #3
 8000a00:	7023      	strb	r3, [r4, #0]
}
 8000a02:	bd10      	pop	{r4, pc}
 8000a04:	40005c00 	.word	0x40005c00
	...

08000a10 <usbStartTransmitI>:
 * @param[in] n         transaction size
 *
 * @iclass
 */
void usbStartTransmitI(USBDriver *usbp, usbep_t ep,
                       const uint8_t *buf, size_t n) {
 8000a10:	b4f0      	push	{r4, r5, r6, r7}
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000a12:	2401      	movs	r4, #1
 8000a14:	f8b0 c008 	ldrh.w	ip, [r0, #8]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 8000a18:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8000a1c:	68ed      	ldr	r5, [r5, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000a1e:	408c      	lsls	r4, r1
 8000a20:	ea44 040c 	orr.w	r4, r4, ip
 8000a24:	8104      	strh	r4, [r0, #8]
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  /* Transfer initialization.*/
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize) {
 8000a26:	8a2c      	ldrh	r4, [r5, #16]
  /*lint -restore*/
  isp->txbuf  = buf;
  isp->txsize = n;
  isp->txcnt  = 0;
 8000a28:	2700      	movs	r7, #0
 8000a2a:	429c      	cmp	r4, r3
 8000a2c:	bf28      	it	cs
 8000a2e:	461c      	movcs	r4, r3
  isp = usbp->epc[ep]->in_state;
 8000a30:	6968      	ldr	r0, [r5, #20]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8000a32:	4e1b      	ldr	r6, [pc, #108]	; (8000aa0 <usbStartTransmitI+0x90>)
    n = (size_t)usbp->epc[ep]->in_maxsize;
  }

  isp->txlast = n;
 8000a34:	e9c0 2402 	strd	r2, r4, [r0, #8]
  isp->txcnt  = 0;
 8000a38:	6047      	str	r7, [r0, #4]
  isp->txsize = n;
 8000a3a:	6003      	str	r3, [r0, #0]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8000a3c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8000a3e:	0108      	lsls	r0, r1, #4
 8000a40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000a44:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8000a48:	58c0      	ldr	r0, [r0, r3]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8000a4a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8000a4e:	605c      	str	r4, [r3, #4]
  while (i > 0) {
 8000a50:	b1a4      	cbz	r4, 8000a7c <usbStartTransmitI+0x6c>
 8000a52:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 8000a56:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8000a5a:	0040      	lsls	r0, r0, #1
 8000a5c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8000a60:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8000a64:	1d03      	adds	r3, r0, #4
 8000a66:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8000a6a:	e000      	b.n	8000a6e <usbStartTransmitI+0x5e>
 8000a6c:	3304      	adds	r3, #4
    w  = *buf++;
 8000a6e:	4604      	mov	r4, r0
    w |= *buf++ << 8;
 8000a70:	f832 5b02 	ldrh.w	r5, [r2], #2
  while (i > 0) {
 8000a74:	459c      	cmp	ip, r3
    *pmap++ = (stm32_usb_pma_t)w;
 8000a76:	4618      	mov	r0, r3
 8000a78:	6025      	str	r5, [r4, #0]
  while (i > 0) {
 8000a7a:	d1f7      	bne.n	8000a6c <usbStartTransmitI+0x5c>
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
}
 8000a7c:	bcf0      	pop	{r4, r5, r6, r7}
  usb_packet_write_from_buffer(ep, isp->txbuf, n);

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 8000a7e:	4a08      	ldr	r2, [pc, #32]	; (8000aa0 <usbStartTransmitI+0x90>)
 8000a80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8000a84:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8000a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a8c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8000a90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a98:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	40005c00 	.word	0x40005c00
	...

08000ab0 <obnotify.lto_priv.0>:
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 8000ab0:	6b43      	ldr	r3, [r0, #52]	; 0x34
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8000ab2:	f8d3 248c 	ldr.w	r2, [r3, #1164]	; 0x48c
 8000ab6:	6810      	ldr	r0, [r2, #0]
 8000ab8:	7801      	ldrb	r1, [r0, #0]
 8000aba:	2904      	cmp	r1, #4
 8000abc:	d102      	bne.n	8000ac4 <obnotify.lto_priv.0+0x14>
 8000abe:	7a19      	ldrb	r1, [r3, #8]
 8000ac0:	2902      	cmp	r1, #2
 8000ac2:	d000      	beq.n	8000ac6 <obnotify.lto_priv.0+0x16>
 8000ac4:	4770      	bx	lr
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8000ac6:	f04f 0c01 	mov.w	ip, #1
static void obnotify(io_buffers_queue_t *bqp) {
 8000aca:	b510      	push	{r4, lr}
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8000acc:	7911      	ldrb	r1, [r2, #4]
 8000ace:	f8b0 e008 	ldrh.w	lr, [r0, #8]
 8000ad2:	fa0c f201 	lsl.w	r2, ip, r1
 8000ad6:	ea12 020e 	ands.w	r2, r2, lr
 8000ada:	d000      	beq.n	8000ade <obnotify.lto_priv.0+0x2e>
}
 8000adc:	bd10      	pop	{r4, pc}
uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
                           size_t *sizep) {

  osalDbgCheckClassI();

  if (obqIsEmptyI(obqp)) {
 8000ade:	e9d3 c415 	ldrd	ip, r4, [r3, #84]	; 0x54
 8000ae2:	45a4      	cmp	ip, r4
 8000ae4:	d006      	beq.n	8000af4 <obnotify.lto_priv.0+0x44>
    *sizep = 0U;
    return NULL;
  }

  /* Buffer size.*/
  *sizep = *((size_t *)(void *)obqp->brdptr);
 8000ae6:	4622      	mov	r2, r4
 8000ae8:	f852 3b04 	ldr.w	r3, [r2], #4
 8000aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8000af0:	f7ff bf8e 	b.w	8000a10 <usbStartTransmitI>
  if (obqIsEmptyI(obqp)) {
 8000af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d0f5      	beq.n	8000ae6 <obnotify.lto_priv.0+0x36>
    *sizep = 0U;
 8000afa:	4613      	mov	r3, r2
 8000afc:	e7f6      	b.n	8000aec <obnotify.lto_priv.0+0x3c>
 8000afe:	bf00      	nop

08000b00 <_usb_ep0out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8000b00:	b538      	push	{r3, r4, r5, lr}

  (void)ep;
  switch (usbp->ep0state) {
 8000b02:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8000b06:	4604      	mov	r4, r0
  switch (usbp->ep0state) {
 8000b08:	2b15      	cmp	r3, #21
 8000b0a:	d82a      	bhi.n	8000b62 <_usb_ep0out+0x62>
 8000b0c:	e8df f003 	tbb	[pc, r3]
 8000b10:	2929290b 	.word	0x2929290b
 8000b14:	290b2929 	.word	0x290b2929
 8000b18:	0b0b0b29 	.word	0x0b0b0b29
 8000b1c:	29292929 	.word	0x29292929
 8000b20:	29292929 	.word	0x29292929
 8000b24:	2a38      	.short	0x2a38
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8000b26:	f248 0080 	movw	r0, #32896	; 0x8080
 8000b2a:	491b      	ldr	r1, [pc, #108]	; (8000b98 <_usb_ep0out+0x98>)
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
    usb_lld_stall_out(usbp, 0);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8000b2c:	6863      	ldr	r3, [r4, #4]
 8000b2e:	680a      	ldr	r2, [r1, #0]
 8000b30:	681d      	ldr	r5, [r3, #0]
 8000b32:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8000b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000b3a:	f082 0210 	eor.w	r2, r2, #16
 8000b3e:	4302      	orrs	r2, r0
 8000b40:	600a      	str	r2, [r1, #0]
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8000b42:	680b      	ldr	r3, [r1, #0]
 8000b44:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8000b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b4c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000b50:	4303      	orrs	r3, r0
 8000b52:	600b      	str	r3, [r1, #0]
 8000b54:	b115      	cbz	r5, 8000b5c <_usb_ep0out+0x5c>
 8000b56:	2106      	movs	r1, #6
 8000b58:	4620      	mov	r0, r4
 8000b5a:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 8000b5c:	2306      	movs	r3, #6
 8000b5e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 8000b62:	bd38      	pop	{r3, r4, r5, pc}
    usbp->ep0state = USB_EP0_IN_SENDING_STS;
 8000b64:	220b      	movs	r2, #11
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000b66:	2330      	movs	r3, #48	; 0x30
 8000b68:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
 8000b6c:	f383 8811 	msr	BASEPRI, r3
    usbStartTransmitI(usbp, 0, NULL, 0);
 8000b70:	2300      	movs	r3, #0
 8000b72:	461a      	mov	r2, r3
 8000b74:	4619      	mov	r1, r3
 8000b76:	f7ff ff4b 	bl	8000a10 <usbStartTransmitI>
 8000b7a:	f381 8811 	msr	BASEPRI, r1
}
 8000b7e:	bd38      	pop	{r3, r4, r5, pc}
    if (usbGetReceiveTransactionSizeX(usbp, 0) != 0U) {
 8000b80:	68c3      	ldr	r3, [r0, #12]
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d1eb      	bne.n	8000b62 <_usb_ep0out+0x62>
    if (usbp->ep0endcb != NULL) {
 8000b8a:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8000b8c:	b103      	cbz	r3, 8000b90 <_usb_ep0out+0x90>
      usbp->ep0endcb(usbp);
 8000b8e:	4798      	blx	r3
    usbp->ep0state = USB_EP0_STP_WAITING;
 8000b90:	2300      	movs	r3, #0
 8000b92:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 8000b96:	bd38      	pop	{r3, r4, r5, pc}
 8000b98:	40005c00 	.word	0x40005c00
 8000b9c:	00000000 	.word	0x00000000

08000ba0 <sdc_lld_collect_errors>:
 * @notapi
 */
static void sdc_lld_collect_errors(SDCDriver *sdcp, uint32_t sta) {
  uint32_t errors = SDC_NO_ERROR;

  if (sta & SDIO_STA_CCRCFAIL)
 8000ba0:	f001 0301 	and.w	r3, r1, #1
    errors |= SDC_CMD_CRC_ERROR;
  if (sta & SDIO_STA_DCRCFAIL)
 8000ba4:	078a      	lsls	r2, r1, #30
    errors |= SDC_DATA_CRC_ERROR;
 8000ba6:	bf48      	it	mi
 8000ba8:	f043 0302 	orrmi.w	r3, r3, #2
  if (sta & SDIO_STA_CTIMEOUT)
 8000bac:	074a      	lsls	r2, r1, #29
    errors |= SDC_COMMAND_TIMEOUT;
 8000bae:	bf48      	it	mi
 8000bb0:	f043 0308 	orrmi.w	r3, r3, #8
  if (sta & SDIO_STA_DTIMEOUT)
 8000bb4:	070a      	lsls	r2, r1, #28
    errors |= SDC_DATA_TIMEOUT;
 8000bb6:	bf48      	it	mi
 8000bb8:	f043 0304 	orrmi.w	r3, r3, #4
  if (sta & SDIO_STA_TXUNDERR)
 8000bbc:	06ca      	lsls	r2, r1, #27
    errors |= SDC_TX_UNDERRUN;
 8000bbe:	bf48      	it	mi
 8000bc0:	f043 0310 	orrmi.w	r3, r3, #16
  if (sta & SDIO_STA_RXOVERR)
 8000bc4:	068a      	lsls	r2, r1, #26
    errors |= SDC_RX_OVERRUN;
 8000bc6:	bf48      	it	mi
 8000bc8:	f043 0320 	orrmi.w	r3, r3, #32
  if (sta & SDIO_STA_STBITERR)
 8000bcc:	058a      	lsls	r2, r1, #22
    errors |= SDC_STARTBIT_ERROR;

  sdcp->errors |= errors;
 8000bce:	6b42      	ldr	r2, [r0, #52]	; 0x34
    errors |= SDC_STARTBIT_ERROR;
 8000bd0:	bf48      	it	mi
 8000bd2:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
  sdcp->errors |= errors;
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	6343      	str	r3, [r0, #52]	; 0x34
}
 8000bda:	4770      	bx	lr
 8000bdc:	0000      	movs	r0, r0
	...

08000be0 <sdc_lld_error_cleanup>:
static void sdc_lld_error_cleanup(SDCDriver *sdcp,
                                  uint32_t n,
                                  uint32_t *resp) {
  uint32_t sta;

  dmaStreamDisable(sdcp->dma);
 8000be0:	f04f 0c0e 	mov.w	ip, #14
                                  uint32_t *resp) {
 8000be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Clearing status.*/
  sta                = sdcp->sdio->STA;
  sdcp->sdio->ICR   = sta;
  sdcp->sdio->DCTRL = 0U;
 8000be8:	2700      	movs	r7, #0
                                  uint32_t *resp) {
 8000bea:	460d      	mov	r5, r1
 8000bec:	4616      	mov	r6, r2
  sta                = sdcp->sdio->STA;
 8000bee:	e9d0 2311 	ldrd	r2, r3, [r0, #68]	; 0x44
  dmaStreamDisable(sdcp->dma);
 8000bf2:	e9d2 8e00 	ldrd	r8, lr, [r2]
 8000bf6:	f8de 1000 	ldr.w	r1, [lr]
 8000bfa:	f021 010f 	bic.w	r1, r1, #15
 8000bfe:	f8ce 1000 	str.w	r1, [lr]
 8000c02:	7b52      	ldrb	r2, [r2, #13]
 8000c04:	fa0c f202 	lsl.w	r2, ip, r2
 8000c08:	f8c8 2004 	str.w	r2, [r8, #4]
  sta                = sdcp->sdio->STA;
 8000c0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
  sdcp->sdio->ICR   = sta;
 8000c0e:	6399      	str	r1, [r3, #56]	; 0x38
  sdcp->sdio->DCTRL = 0U;
 8000c10:	62df      	str	r7, [r3, #44]	; 0x2c
  sdc_lld_collect_errors(sdcp, sta);
 8000c12:	f7ff ffc5 	bl	8000ba0 <sdc_lld_collect_errors>

  if (n > 1U) {
 8000c16:	2d01      	cmp	r5, #1
 8000c18:	d801      	bhi.n	8000c1e <sdc_lld_error_cleanup+0x3e>
    sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_STOP_TRANSMISSION, 0, resp);
  }
}
 8000c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
bool sdc_lld_send_cmd_short_crc(SDCDriver *sdcp, uint8_t cmd, uint32_t arg,
                                uint32_t *resp) {
  uint32_t sta;

  sdcp->sdio->ARG = arg;
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8000c1e:	f240 424c 	movw	r2, #1100	; 0x44c
 8000c22:	4604      	mov	r4, r0
  sdcp->sdio->ARG = arg;
 8000c24:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000c26:	609f      	str	r7, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8000c28:	60da      	str	r2, [r3, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8000c2a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c2c:	f011 0045 	ands.w	r0, r1, #69	; 0x45
 8000c30:	d0fb      	beq.n	8000c2a <sdc_lld_error_cleanup+0x4a>
                                     SDIO_STA_CCRCFAIL)) == 0U)
    ;
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0U) {
 8000c32:	f011 0f05 	tst.w	r1, #5
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 8000c36:	6398      	str	r0, [r3, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0U) {
 8000c38:	d103      	bne.n	8000c42 <sdc_lld_error_cleanup+0x62>
    sdc_lld_collect_errors(sdcp, sta);
    return HAL_FAILED;
  }
  *resp = sdcp->sdio->RESP1;
 8000c3a:	695b      	ldr	r3, [r3, #20]
 8000c3c:	6033      	str	r3, [r6, #0]
}
 8000c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sdc_lld_collect_errors(sdcp, sta);
 8000c42:	4620      	mov	r0, r4
}
 8000c44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    sdc_lld_collect_errors(sdcp, sta);
 8000c48:	f7ff bfaa 	b.w	8000ba0 <sdc_lld_collect_errors>
 8000c4c:	0000      	movs	r0, r0
	...

08000c50 <sdc_lld_is_card_inserted>:
#if HAL_USE_SDC
/* Board-related functions related to the SDC driver.*/
bool sdc_lld_is_card_inserted(SDCDriver *sdcp) {

  (void)sdcp;
  return !palReadPad(GPIOF, GPIOF_SD_DETECT);
 8000c50:	4b03      	ldr	r3, [pc, #12]	; (8000c60 <sdc_lld_is_card_inserted+0x10>)
 8000c52:	6898      	ldr	r0, [r3, #8]
 8000c54:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
}
 8000c58:	f3c0 20c0 	ubfx	r0, r0, #11, #1
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	40011c00 	.word	0x40011c00
	...

08000c70 <__idle_thread.lto_priv.0>:
__STATIC_FORCEINLINE void port_wait_for_interrupt(void) {

#if CORTEX_ENABLE_WFI_IDLE == TRUE
  __WFI();
#endif
}
 8000c70:	e7fe      	b.n	8000c70 <__idle_thread.lto_priv.0>
 8000c72:	bf00      	nop
	...

08000c80 <chCoreAllocFromTop>:
 8000c80:	2330      	movs	r3, #48	; 0x30
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 8000c82:	b410      	push	{r4}
 8000c84:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000c88:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <chCoreAllocFromTop+0x38>)
 8000c8a:	4249      	negs	r1, r1
 8000c8c:	685c      	ldr	r4, [r3, #4]
 8000c8e:	1a20      	subs	r0, r4, r0
 8000c90:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000c92:	6819      	ldr	r1, [r3, #0]
  prev = p - offset;
 8000c94:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000c96:	428a      	cmp	r2, r1
 8000c98:	d307      	bcc.n	8000caa <chCoreAllocFromTop+0x2a>
 8000c9a:	4294      	cmp	r4, r2
 8000c9c:	d305      	bcc.n	8000caa <chCoreAllocFromTop+0x2a>
  ch_memcore.topmem = prev;
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 8000ca6:	bc10      	pop	{r4}
 8000ca8:	4770      	bx	lr
    return NULL;
 8000caa:	2000      	movs	r0, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	f383 8811 	msr	BASEPRI, r3
}
 8000cb2:	bc10      	pop	{r4}
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	200010e0 	.word	0x200010e0
 8000cbc:	00000000 	.word	0x00000000

08000cc0 <__ch_delegate_fn0>:
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn0(va_list *argsp) {
  delegate_fn0_t fn0 = (delegate_fn0_t)va_arg(*argsp, delegate_fn0_t);
 8000cc0:	6803      	ldr	r3, [r0, #0]
 8000cc2:	1d1a      	adds	r2, r3, #4
 8000cc4:	6002      	str	r2, [r0, #0]
  return fn0();
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4718      	bx	r3
 8000cca:	bf00      	nop
 8000ccc:	0000      	movs	r0, r0
	...

08000cd0 <__ch_delegate_fn1>:
 * @brief   Veneer for functions with one parameter.
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn1(va_list *argsp) {
 8000cd0:	4602      	mov	r2, r0
  delegate_fn1_t fn1 = (delegate_fn1_t)va_arg(*argsp, delegate_fn1_t);
 8000cd2:	6803      	ldr	r3, [r0, #0]
 8000cd4:	1d19      	adds	r1, r3, #4
 8000cd6:	6001      	str	r1, [r0, #0]
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
  return fn1(p1);
 8000cd8:	6858      	ldr	r0, [r3, #4]
  delegate_fn1_t fn1 = (delegate_fn1_t)va_arg(*argsp, delegate_fn1_t);
 8000cda:	f853 1b08 	ldr.w	r1, [r3], #8
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
 8000cde:	6013      	str	r3, [r2, #0]
  return fn1(p1);
 8000ce0:	4708      	bx	r1
 8000ce2:	bf00      	nop
	...

08000cf0 <__ch_delegate_fn2>:
 * @brief   Veneer for functions with two parameters.
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn2(va_list *argsp) {
 8000cf0:	4603      	mov	r3, r0
  delegate_fn2_t fn2 = (delegate_fn2_t)va_arg(*argsp, delegate_fn2_t);
 8000cf2:	6802      	ldr	r2, [r0, #0]
msg_t __ch_delegate_fn2(va_list *argsp) {
 8000cf4:	b430      	push	{r4, r5}
  delegate_fn2_t fn2 = (delegate_fn2_t)va_arg(*argsp, delegate_fn2_t);
 8000cf6:	1d11      	adds	r1, r2, #4
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
 8000cf8:	6850      	ldr	r0, [r2, #4]
  delegate_fn2_t fn2 = (delegate_fn2_t)va_arg(*argsp, delegate_fn2_t);
 8000cfa:	6019      	str	r1, [r3, #0]
 8000cfc:	6814      	ldr	r4, [r2, #0]
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 8000cfe:	f102 050c 	add.w	r5, r2, #12
  return fn2(p1, p2);
 8000d02:	6891      	ldr	r1, [r2, #8]
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 8000d04:	601d      	str	r5, [r3, #0]
  return fn2(p1, p2);
 8000d06:	4623      	mov	r3, r4
}
 8000d08:	bc30      	pop	{r4, r5}
  return fn2(p1, p2);
 8000d0a:	4718      	bx	r3
 8000d0c:	0000      	movs	r0, r0
	...

08000d10 <__ch_delegate_fn3>:
 * @brief   Veneer for functions with three parameters.
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn3(va_list *argsp) {
 8000d10:	4602      	mov	r2, r0
  delegate_fn3_t fn3 = (delegate_fn3_t)va_arg(*argsp, delegate_fn3_t);
 8000d12:	6803      	ldr	r3, [r0, #0]
msg_t __ch_delegate_fn3(va_list *argsp) {
 8000d14:	b430      	push	{r4, r5}
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 8000d16:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
  delegate_fn3_t fn3 = (delegate_fn3_t)va_arg(*argsp, delegate_fn3_t);
 8000d1a:	1d1c      	adds	r4, r3, #4
 8000d1c:	6014      	str	r4, [r2, #0]
 8000d1e:	681c      	ldr	r4, [r3, #0]
  msg_t p3 = (msg_t)va_arg(*argsp, msg_t);
 8000d20:	f103 0510 	add.w	r5, r3, #16
 8000d24:	6015      	str	r5, [r2, #0]
  return fn3(p1, p2, p3);
 8000d26:	68da      	ldr	r2, [r3, #12]
 8000d28:	4623      	mov	r3, r4
}
 8000d2a:	bc30      	pop	{r4, r5}
  return fn3(p1, p2, p3);
 8000d2c:	4718      	bx	r3
 8000d2e:	bf00      	nop

08000d30 <__ch_delegate_fn4>:
 * @brief   Veneer for functions with four parameters.
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn4(va_list *argsp) {
 8000d30:	4684      	mov	ip, r0
  delegate_fn4_t fn4 = (delegate_fn4_t)va_arg(*argsp, delegate_fn4_t);
 8000d32:	6803      	ldr	r3, [r0, #0]
msg_t __ch_delegate_fn4(va_list *argsp) {
 8000d34:	b430      	push	{r4, r5}
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 8000d36:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
  delegate_fn4_t fn4 = (delegate_fn4_t)va_arg(*argsp, delegate_fn4_t);
 8000d3a:	1d1c      	adds	r4, r3, #4
  msg_t p3 = (msg_t)va_arg(*argsp, msg_t);
 8000d3c:	68da      	ldr	r2, [r3, #12]
  delegate_fn4_t fn4 = (delegate_fn4_t)va_arg(*argsp, delegate_fn4_t);
 8000d3e:	f8cc 4000 	str.w	r4, [ip]
 8000d42:	681c      	ldr	r4, [r3, #0]
  msg_t p4 = (msg_t)va_arg(*argsp, msg_t);
 8000d44:	f103 0514 	add.w	r5, r3, #20
 8000d48:	f8cc 5000 	str.w	r5, [ip]
  return fn4(p1, p2, p3, p4);
 8000d4c:	691b      	ldr	r3, [r3, #16]
 8000d4e:	46a4      	mov	ip, r4
}
 8000d50:	bc30      	pop	{r4, r5}
  return fn4(p1, p2, p3, p4);
 8000d52:	4760      	bx	ip
	...

08000d60 <chCoreAllocAlignedI.lto_priv.0>:
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <chCoreAllocAlignedI.lto_priv.0+0x1c>)
 8000d62:	4249      	negs	r1, r1
 8000d64:	685a      	ldr	r2, [r3, #4]
 8000d66:	1a10      	subs	r0, r2, r0
 8000d68:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000d6a:	6819      	ldr	r1, [r3, #0]
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	d303      	bcc.n	8000d78 <chCoreAllocAlignedI.lto_priv.0+0x18>
 8000d70:	4282      	cmp	r2, r0
 8000d72:	d301      	bcc.n	8000d78 <chCoreAllocAlignedI.lto_priv.0+0x18>
  ch_memcore.topmem = prev;
 8000d74:	6058      	str	r0, [r3, #4]
  return p;
 8000d76:	4770      	bx	lr
    return NULL;
 8000d78:	2000      	movs	r0, #0
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 8000d7a:	4770      	bx	lr
 8000d7c:	200010e0 	.word	0x200010e0

08000d80 <get_descriptor.lto_priv.0>:
                                           uint8_t dindex,
                                           uint16_t lang) {

  (void)usbp;
  (void)lang;
  switch (dtype) {
 8000d80:	2902      	cmp	r1, #2
 8000d82:	d006      	beq.n	8000d92 <get_descriptor.lto_priv.0+0x12>
 8000d84:	2903      	cmp	r1, #3
 8000d86:	d006      	beq.n	8000d96 <get_descriptor.lto_priv.0+0x16>
  case USB_DESCRIPTOR_DEVICE:
    return &vcom_device_descriptor;
 8000d88:	2901      	cmp	r1, #1
 8000d8a:	4807      	ldr	r0, [pc, #28]	; (8000da8 <get_descriptor.lto_priv.0+0x28>)
 8000d8c:	bf18      	it	ne
 8000d8e:	2000      	movne	r0, #0
 8000d90:	4770      	bx	lr
  switch (dtype) {
 8000d92:	4806      	ldr	r0, [pc, #24]	; (8000dac <get_descriptor.lto_priv.0+0x2c>)
 8000d94:	4770      	bx	lr
  case USB_DESCRIPTOR_CONFIGURATION:
    return &vcom_configuration_descriptor;
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
 8000d96:	2a03      	cmp	r2, #3
 8000d98:	d803      	bhi.n	8000da2 <get_descriptor.lto_priv.0+0x22>
      return &vcom_strings[dindex];
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <get_descriptor.lto_priv.0+0x30>)
 8000d9c:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 8000da0:	4770      	bx	lr
  }
  return NULL;
 8000da2:	2000      	movs	r0, #0
}
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	080127b4 	.word	0x080127b4
 8000dac:	08012768 	.word	0x08012768
 8000db0:	0801283c 	.word	0x0801283c
	...

08000dc0 <sof_handler.lto_priv.0>:
}

/*
 * Handles the USB driver global events.
 */
static void sof_handler(USBDriver *usbp) {
 8000dc0:	b538      	push	{r3, r4, r5, lr}
 8000dc2:	2330      	movs	r3, #48	; 0x30
 8000dc4:	f383 8811 	msr	BASEPRI, r3
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8000dc8:	4b20      	ldr	r3, [pc, #128]	; (8000e4c <sof_handler.lto_priv.0+0x8c>)
 8000dca:	f8d3 248c 	ldr.w	r2, [r3, #1164]	; 0x48c
 8000dce:	6810      	ldr	r0, [r2, #0]
 8000dd0:	7801      	ldrb	r1, [r0, #0]
 8000dd2:	2904      	cmp	r1, #4
 8000dd4:	d102      	bne.n	8000ddc <sof_handler.lto_priv.0+0x1c>
 8000dd6:	7a19      	ldrb	r1, [r3, #8]
 8000dd8:	2902      	cmp	r1, #2
 8000dda:	d003      	beq.n	8000de4 <sof_handler.lto_priv.0+0x24>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f383 8811 	msr	BASEPRI, r3
  (void)usbp;

  osalSysLockFromISR();
  sduSOFHookI(&SDU1);
  osalSysUnlockFromISR();
}
 8000de2:	bd38      	pop	{r3, r4, r5, pc}
  if (usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8000de4:	f04f 0c01 	mov.w	ip, #1
 8000de8:	7911      	ldrb	r1, [r2, #4]
 8000dea:	f8b0 e008 	ldrh.w	lr, [r0, #8]
 8000dee:	fa0c f201 	lsl.w	r2, ip, r1
 8000df2:	ea12 0f0e 	tst.w	r2, lr
 8000df6:	d1f1      	bne.n	8000ddc <sof_handler.lto_priv.0+0x1c>

  osalDbgCheckClassI();

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 8000df8:	e9d3 4215 	ldrd	r4, r2, [r3, #84]	; 0x54
 8000dfc:	4294      	cmp	r4, r2
 8000dfe:	d1ed      	bne.n	8000ddc <sof_handler.lto_priv.0+0x1c>
 8000e00:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8000e02:	2c00      	cmp	r4, #0
 8000e04:	d0ea      	beq.n	8000ddc <sof_handler.lto_priv.0+0x1c>
 8000e06:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 8000e08:	2c00      	cmp	r4, #0
 8000e0a:	d0e7      	beq.n	8000ddc <sof_handler.lto_priv.0+0x1c>
    size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 8000e0c:	3c04      	subs	r4, #4

    if (size > 0U) {
 8000e0e:	1aa4      	subs	r4, r4, r2
 8000e10:	d0e4      	beq.n	8000ddc <sof_handler.lto_priv.0+0x1c>

      /* Writing size field in the buffer.*/
      *((size_t *)(void *)obqp->bwrptr) = size;
 8000e12:	6014      	str	r4, [r2, #0]

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
 8000e14:	6d1c      	ldr	r4, [r3, #80]	; 0x50
      obqp->bwrptr += obqp->bsize;
 8000e16:	6e1d      	ldr	r5, [r3, #96]	; 0x60
      obqp->bcounter--;
 8000e18:	3c01      	subs	r4, #1
 8000e1a:	651c      	str	r4, [r3, #80]	; 0x50
      if (obqp->bwrptr >= obqp->btop) {
 8000e1c:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
      obqp->bwrptr += obqp->bsize;
 8000e1e:	4415      	add	r5, r2
      if (obqp->bwrptr >= obqp->btop) {
 8000e20:	42a5      	cmp	r5, r4
        obqp->bwrptr = obqp->buffers;
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;
 8000e22:	f04f 0400 	mov.w	r4, #0
      obqp->bwrptr += obqp->bsize;
 8000e26:	655d      	str	r5, [r3, #84]	; 0x54
        obqp->bwrptr = obqp->buffers;
 8000e28:	bf28      	it	cs
 8000e2a:	6e9d      	ldrcs	r5, [r3, #104]	; 0x68
      obqp->ptr = NULL;
 8000e2c:	66dc      	str	r4, [r3, #108]	; 0x6c
        obqp->bwrptr = obqp->buffers;
 8000e2e:	bf28      	it	cs
 8000e30:	655d      	strcs	r5, [r3, #84]	; 0x54
  if (obqIsEmptyI(obqp)) {
 8000e32:	42aa      	cmp	r2, r5
 8000e34:	d004      	beq.n	8000e40 <sof_handler.lto_priv.0+0x80>
  *sizep = *((size_t *)(void *)obqp->brdptr);
 8000e36:	f852 3b04 	ldr.w	r3, [r2], #4
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8000e3a:	f7ff fde9 	bl	8000a10 <usbStartTransmitI>
 8000e3e:	e7cd      	b.n	8000ddc <sof_handler.lto_priv.0+0x1c>
  if (obqIsEmptyI(obqp)) {
 8000e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d0f7      	beq.n	8000e36 <sof_handler.lto_priv.0+0x76>
    *sizep = 0U;
 8000e46:	4623      	mov	r3, r4
    return NULL;
 8000e48:	4622      	mov	r2, r4
 8000e4a:	e7f6      	b.n	8000e3a <sof_handler.lto_priv.0+0x7a>
 8000e4c:	20000b34 	.word	0x20000b34

08000e50 <test_stream_putchar>:
/*===========================================================================*/
/* Module local functions.                                                   */
/*===========================================================================*/

#if (TEST_CFG_CHIBIOS_SUPPORT == TRUE) || defined(__DOXYGEN__)
static int test_stream_putchar(int c) {
 8000e50:	b510      	push	{r4, lr}
 8000e52:	4604      	mov	r4, r0

  streamPut(chtest.stream, (uint8_t)c);
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <test_stream_putchar+0x14>)
 8000e56:	b2e1      	uxtb	r1, r4
 8000e58:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000e5a:	6803      	ldr	r3, [r0, #0]
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	4798      	blx	r3

  return c;
}
 8000e60:	4620      	mov	r0, r4
 8000e62:	bd10      	pop	{r4, pc}
 8000e64:	200010f4 	.word	0x200010f4
	...

08000e70 <rt_test_002_001_execute>:

static void rt_test_002_001_execute(void) {
  bool result;

  /* [2.1.1] Testing Ready List integrity.*/
  test_set_step(1);
 8000e70:	2201      	movs	r2, #1
static void rt_test_002_001_execute(void) {
 8000e72:	b410      	push	{r4}
  test_set_step(1);
 8000e74:	4c3e      	ldr	r4, [pc, #248]	; (8000f70 <rt_test_002_001_execute+0x100>)
 8000e76:	2330      	movs	r3, #48	; 0x30
 8000e78:	6022      	str	r2, [r4, #0]
 8000e7a:	f383 8811 	msr	BASEPRI, r3
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
    ch_priority_queue_t *pqp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    pqp = oip->rlist.pqueue.next;
 8000e7e:	493d      	ldr	r1, [pc, #244]	; (8000f74 <rt_test_002_001_execute+0x104>)
 8000e80:	680a      	ldr	r2, [r1, #0]
    while (pqp != &oip->rlist.pqueue) {
 8000e82:	428a      	cmp	r2, r1
 8000e84:	d05d      	beq.n	8000f42 <rt_test_002_001_execute+0xd2>
    n = (cnt_t)0;
 8000e86:	2300      	movs	r3, #0
      n++;
      pqp = pqp->next;
 8000e88:	6812      	ldr	r2, [r2, #0]
      n++;
 8000e8a:	3301      	adds	r3, #1
    while (pqp != &oip->rlist.pqueue) {
 8000e8c:	428a      	cmp	r2, r1
 8000e8e:	d1fb      	bne.n	8000e88 <rt_test_002_001_execute+0x18>
    }

    /* Scanning the ready list backward.*/
    pqp = oip->rlist.pqueue.prev;
 8000e90:	684a      	ldr	r2, [r1, #4]
    while (pqp != &oip->rlist.pqueue) {
 8000e92:	428a      	cmp	r2, r1
 8000e94:	d041      	beq.n	8000f1a <rt_test_002_001_execute+0xaa>
      n--;
      pqp = pqp->prev;
 8000e96:	6852      	ldr	r2, [r2, #4]
      n--;
 8000e98:	3b01      	subs	r3, #1
    while (pqp != &oip->rlist.pqueue) {
 8000e9a:	428a      	cmp	r2, r1
 8000e9c:	d1fb      	bne.n	8000e96 <rt_test_002_001_execute+0x26>
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d13b      	bne.n	8000f1a <rt_test_002_001_execute+0xaa>
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f383 8811 	msr	BASEPRI, r3
    test_assert(result == false, "ready list check failed");
  }
  test_end_step(1);

  /* [2.1.2] Testing Virtual Timers List integrity.*/
  test_set_step(2);
 8000ea8:	2002      	movs	r0, #2
 8000eaa:	2230      	movs	r2, #48	; 0x30
 8000eac:	6020      	str	r0, [r4, #0]
 8000eae:	f382 8811 	msr	BASEPRI, r2
    ch_delta_list_t *dlp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    dlp = oip->vtlist.dlist.next;
    while (dlp != &oip->vtlist.dlist) {
 8000eb2:	4831      	ldr	r0, [pc, #196]	; (8000f78 <rt_test_002_001_execute+0x108>)
    dlp = oip->vtlist.dlist.next;
 8000eb4:	690a      	ldr	r2, [r1, #16]
    while (dlp != &oip->vtlist.dlist) {
 8000eb6:	4282      	cmp	r2, r0
 8000eb8:	d049      	beq.n	8000f4e <rt_test_002_001_execute+0xde>
      n++;
      dlp = dlp->next;
 8000eba:	6812      	ldr	r2, [r2, #0]
      n++;
 8000ebc:	3301      	adds	r3, #1
    while (dlp != &oip->vtlist.dlist) {
 8000ebe:	4282      	cmp	r2, r0
 8000ec0:	d1fb      	bne.n	8000eba <rt_test_002_001_execute+0x4a>
    }

    /* Scanning the timers list backward.*/
    dlp = oip->vtlist.dlist.prev;
 8000ec2:	694a      	ldr	r2, [r1, #20]
    while (dlp != &oip->vtlist.dlist) {
 8000ec4:	4282      	cmp	r2, r0
 8000ec6:	d032      	beq.n	8000f2e <rt_test_002_001_execute+0xbe>
      n--;
      dlp = dlp->prev;
 8000ec8:	6852      	ldr	r2, [r2, #4]
      n--;
 8000eca:	3b01      	subs	r3, #1
    while (dlp != &oip->vtlist.dlist) {
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	d1fb      	bne.n	8000ec8 <rt_test_002_001_execute+0x58>
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8000ed0:	bb6b      	cbnz	r3, 8000f2e <rt_test_002_001_execute+0xbe>
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	f383 8811 	msr	BASEPRI, r3
    test_assert(result == false, "virtual timers list check failed");
  }
  test_end_step(2);

  /* [2.1.3] Testing Registry List integrity.*/
  test_set_step(3);
 8000ed8:	2003      	movs	r0, #3
 8000eda:	2230      	movs	r2, #48	; 0x30
 8000edc:	6020      	str	r0, [r4, #0]
 8000ede:	f382 8811 	msr	BASEPRI, r2
    rqp = REG_HEADER(oip);

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    qp = rqp->next;
    while (qp != rqp) {
 8000ee2:	4826      	ldr	r0, [pc, #152]	; (8000f7c <rt_test_002_001_execute+0x10c>)
    qp = rqp->next;
 8000ee4:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    while (qp != rqp) {
 8000ee6:	4282      	cmp	r2, r0
 8000ee8:	d03e      	beq.n	8000f68 <rt_test_002_001_execute+0xf8>
      n++;
      qp = qp->next;
 8000eea:	6812      	ldr	r2, [r2, #0]
      n++;
 8000eec:	3301      	adds	r3, #1
    while (qp != rqp) {
 8000eee:	4282      	cmp	r2, r0
 8000ef0:	d1fb      	bne.n	8000eea <rt_test_002_001_execute+0x7a>
    }

    /* Scanning the ready list backward.*/
    qp = rqp->prev;
 8000ef2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
    while (qp != rqp) {
 8000ef4:	4282      	cmp	r2, r0
 8000ef6:	d02e      	beq.n	8000f56 <rt_test_002_001_execute+0xe6>
      n--;
      qp = qp->prev;
 8000ef8:	6852      	ldr	r2, [r2, #4]
      n--;
 8000efa:	3b01      	subs	r3, #1
    while (qp != rqp) {
 8000efc:	4282      	cmp	r2, r0
 8000efe:	d1fb      	bne.n	8000ef8 <rt_test_002_001_execute+0x88>
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8000f00:	bb4b      	cbnz	r3, 8000f56 <rt_test_002_001_execute+0xe6>
 8000f02:	2300      	movs	r3, #0
 8000f04:	f383 8811 	msr	BASEPRI, r3
    test_assert(result == false, "registry list check failed");
  }
  test_end_step(3);

  /* [2.1.4] Testing Port-defined integrity.*/
  test_set_step(4);
 8000f08:	2104      	movs	r1, #4
 8000f0a:	2230      	movs	r2, #48	; 0x30
 8000f0c:	6021      	str	r1, [r4, #0]
 8000f0e:	f382 8811 	msr	BASEPRI, r2
 8000f12:	f383 8811 	msr	BASEPRI, r3
    result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
    chSysUnlock();
    test_assert(result == false, "port layer check failed");
  }
  test_end_step(4);
}
 8000f16:	bc10      	pop	{r4}
 8000f18:	4770      	bx	lr
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f383 8811 	msr	BASEPRI, r3
/*===========================================================================*/

bool __test_fail(const char *msg) {

  chtest.local_fail      = true;
  chtest.global_fail     = true;
 8000f20:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8000f24:	4a16      	ldr	r2, [pc, #88]	; (8000f80 <rt_test_002_001_execute+0x110>)
  chtest.global_fail     = true;
 8000f26:	80a3      	strh	r3, [r4, #4]
  chtest.failure_message = msg;
 8000f28:	60a2      	str	r2, [r4, #8]
 8000f2a:	bc10      	pop	{r4}
 8000f2c:	4770      	bx	lr
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f383 8811 	msr	BASEPRI, r3
  chtest.global_fail     = true;
 8000f34:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8000f38:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <rt_test_002_001_execute+0x114>)
  chtest.global_fail     = true;
 8000f3a:	80a3      	strh	r3, [r4, #4]
  chtest.failure_message = msg;
 8000f3c:	60a2      	str	r2, [r4, #8]
 8000f3e:	bc10      	pop	{r4}
 8000f40:	4770      	bx	lr
    pqp = oip->rlist.pqueue.prev;
 8000f42:	684a      	ldr	r2, [r1, #4]
    while (pqp != &oip->rlist.pqueue) {
 8000f44:	428a      	cmp	r2, r1
    n = (cnt_t)0;
 8000f46:	bf18      	it	ne
 8000f48:	2300      	movne	r3, #0
    while (pqp != &oip->rlist.pqueue) {
 8000f4a:	d1a4      	bne.n	8000e96 <rt_test_002_001_execute+0x26>
 8000f4c:	e7a9      	b.n	8000ea2 <rt_test_002_001_execute+0x32>
    dlp = oip->vtlist.dlist.prev;
 8000f4e:	694a      	ldr	r2, [r1, #20]
    while (dlp != &oip->vtlist.dlist) {
 8000f50:	4282      	cmp	r2, r0
 8000f52:	d1b9      	bne.n	8000ec8 <rt_test_002_001_execute+0x58>
 8000f54:	e7bd      	b.n	8000ed2 <rt_test_002_001_execute+0x62>
 8000f56:	2300      	movs	r3, #0
 8000f58:	f383 8811 	msr	BASEPRI, r3
  chtest.global_fail     = true;
 8000f5c:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8000f60:	4a09      	ldr	r2, [pc, #36]	; (8000f88 <rt_test_002_001_execute+0x118>)
  chtest.global_fail     = true;
 8000f62:	80a3      	strh	r3, [r4, #4]
  chtest.failure_message = msg;
 8000f64:	60a2      	str	r2, [r4, #8]
 8000f66:	e7e0      	b.n	8000f2a <rt_test_002_001_execute+0xba>
    qp = rqp->prev;
 8000f68:	6aca      	ldr	r2, [r1, #44]	; 0x2c
    while (qp != rqp) {
 8000f6a:	4282      	cmp	r2, r0
 8000f6c:	d1c4      	bne.n	8000ef8 <rt_test_002_001_execute+0x88>
 8000f6e:	e7c8      	b.n	8000f02 <rt_test_002_001_execute+0x92>
 8000f70:	200010f4 	.word	0x200010f4
 8000f74:	20001050 	.word	0x20001050
 8000f78:	20001060 	.word	0x20001060
 8000f7c:	20001078 	.word	0x20001078
 8000f80:	08010138 	.word	0x08010138
 8000f84:	08010150 	.word	0x08010150
 8000f88:	08010174 	.word	0x08010174
 8000f8c:	00000000 	.word	0x00000000

08000f90 <rt_test_002_003_execute>:

static void rt_test_002_003_execute(void) {

  /* [2.3.1] Testing chSysSuspend(), chSysDisable() and
     chSysEnable().*/
  test_set_step(1);
 8000f90:	2101      	movs	r1, #1
 8000f92:	4a07      	ldr	r2, [pc, #28]	; (8000fb0 <rt_test_002_003_execute+0x20>)
 8000f94:	2330      	movs	r3, #48	; 0x30
 8000f96:	6011      	str	r1, [r2, #0]
 8000f98:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8000f9c:	b662      	cpsie	i
  __ASM volatile ("cpsid i" : : : "memory");
 8000f9e:	b672      	cpsid	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000fa0:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8000fa4:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8000fac:	b662      	cpsie	i
    chSysDisable();
    chSysSuspend();
    chSysEnable();
  }
  test_end_step(1);
}
 8000fae:	4770      	bx	lr
 8000fb0:	200010f4 	.word	0x200010f4
	...

08000fc0 <rt_test_003_001_execute>:

static void rt_test_003_001_execute(void) {

  /* [3.1.1] A System Tick Counter increment is expected, the test
     simply hangs if it does not happen.*/
  test_set_step(1);
 8000fc0:	2201      	movs	r2, #1
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000fc2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000fc6:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <rt_test_003_001_execute+0x18>)
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000fcc:	b292      	uxth	r2, r2
 8000fce:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  {
    systime_t time = chVTGetSystemTimeX();
    while (time == chVTGetSystemTimeX()) {
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d0fb      	beq.n	8000fce <rt_test_003_001_execute+0xe>
        _sim_check_for_interrupts();
#endif
    }
  }
  test_end_step(1);
}
 8000fd6:	4770      	bx	lr
 8000fd8:	200010f4 	.word	0x200010f4
 8000fdc:	00000000 	.word	0x00000000

08000fe0 <rt_test_003_002_execute>:
    test_assert(b == false, "in range");
  }
  test_end_step(2);

  /* [3.2.3] Checking boundaries for start > end.*/
  test_set_step(3);
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	4b01      	ldr	r3, [pc, #4]	; (8000fe8 <rt_test_003_002_execute+0x8>)
 8000fe4:	601a      	str	r2, [r3, #0]
    test_assert(b == true, "not in range");
    b = chTimeIsInRangeX((systime_t)10, (systime_t)100, (systime_t)10);
    test_assert(b == false, "in range");
  }
  test_end_step(3);
}
 8000fe6:	4770      	bx	lr
 8000fe8:	200010f4 	.word	0x200010f4
 8000fec:	00000000 	.word	0x00000000

08000ff0 <thread>:
 *
 * @api
 */
void test_emit_token(char token) {

  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <thread+0x18>)
 8000ff2:	68da      	ldr	r2, [r3, #12]
 8000ff4:	f103 0120 	add.w	r1, r3, #32
 8000ff8:	428a      	cmp	r2, r1
 8000ffa:	d203      	bcs.n	8001004 <thread+0x14>
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 8000ffc:	7801      	ldrb	r1, [r0, #0]
    *chtest.tokp++ = token;
 8000ffe:	1c50      	adds	r0, r2, #1
 8001000:	60d8      	str	r0, [r3, #12]
 8001002:	7011      	strb	r1, [r2, #0]
}
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	200010f4 	.word	0x200010f4
 800100c:	00000000 	.word	0x00000000

08001010 <rt_test_006_001_setup>:
 *   the state of the reference are tested.
 * .
 */

static void rt_test_006_001_setup(void) {
  tr1 = NULL;
 8001010:	2200      	movs	r2, #0
 8001012:	4b01      	ldr	r3, [pc, #4]	; (8001018 <rt_test_006_001_setup+0x8>)
 8001014:	601a      	str	r2, [r3, #0]
}
 8001016:	4770      	bx	lr
 8001018:	20001ac4 	.word	0x20001ac4
 800101c:	00000000 	.word	0x00000000

08001020 <rt_test_007_001_setup>:
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  ch_queue_init(&sp->queue);
  sp->cnt = n;
 8001020:	2201      	movs	r2, #1
 *
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {

  qp->next = qp;
 8001022:	4b02      	ldr	r3, [pc, #8]	; (800102c <rt_test_007_001_setup+0xc>)
  qp->prev = qp;
 8001024:	e9c3 3300 	strd	r3, r3, [r3]
 8001028:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_007_001_setup(void) {
  chSemObjectInit(&sem1, 1);
}
 800102a:	4770      	bx	lr
 800102c:	20001224 	.word	0x20001224

08001030 <rt_test_007_005_setup>:
 8001030:	2200      	movs	r2, #0
  qp->next = qp;
 8001032:	4b02      	ldr	r3, [pc, #8]	; (800103c <rt_test_007_005_setup+0xc>)
  qp->prev = qp;
 8001034:	e9c3 3300 	strd	r3, r3, [r3]
 8001038:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_007_005_setup(void) {
  chSemObjectInit(&sem1, 0);
}
 800103a:	4770      	bx	lr
 800103c:	20001224 	.word	0x20001224

08001040 <rt_test_007_002_setup>:
 8001040:	2200      	movs	r2, #0
 8001042:	4b02      	ldr	r3, [pc, #8]	; (800104c <rt_test_007_002_setup+0xc>)
 8001044:	e9c3 3300 	strd	r3, r3, [r3]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	4770      	bx	lr
 800104c:	20001224 	.word	0x20001224

08001050 <rt_test_007_003_setup>:
 8001050:	2200      	movs	r2, #0
 8001052:	4b02      	ldr	r3, [pc, #8]	; (800105c <rt_test_007_003_setup+0xc>)
 8001054:	e9c3 3300 	strd	r3, r3, [r3]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	4770      	bx	lr
 800105c:	20001224 	.word	0x20001224

08001060 <rt_test_007_004_setup>:
 8001060:	2200      	movs	r2, #0
 8001062:	4b02      	ldr	r3, [pc, #8]	; (800106c <rt_test_007_004_setup+0xc>)
 8001064:	e9c3 3300 	strd	r3, r3, [r3]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	4770      	bx	lr
 800106c:	20001224 	.word	0x20001224

08001070 <rt_test_008_005_setup>:
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  ch_queue_init(&mp->queue);
  mp->owner = NULL;
 8001070:	2200      	movs	r2, #0
  qp->next = qp;
 8001072:	4b02      	ldr	r3, [pc, #8]	; (800107c <rt_test_008_005_setup+0xc>)
  qp->prev = qp;
 8001074:	e9c3 3300 	strd	r3, r3, [r3]
 8001078:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_008_005_setup(void) {
  chMtxObjectInit(&m1);
}
 800107a:	4770      	bx	lr
 800107c:	20000818 	.word	0x20000818

08001080 <rt_test_008_001_setup>:
 8001080:	2200      	movs	r2, #0
 8001082:	4b02      	ldr	r3, [pc, #8]	; (800108c <rt_test_008_001_setup+0xc>)
 8001084:	e9c3 3300 	strd	r3, r3, [r3]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	4770      	bx	lr
 800108c:	20000818 	.word	0x20000818

08001090 <rt_test_008_004_setup>:
 8001090:	2100      	movs	r1, #0
  qp->next = qp;
 8001092:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <rt_test_008_004_setup+0x14>)
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <rt_test_008_004_setup+0x18>)
  qp->prev = qp;
 8001096:	e9c2 2200 	strd	r2, r2, [r2]
 800109a:	e9c3 3300 	strd	r3, r3, [r3]
 800109e:	6091      	str	r1, [r2, #8]
 80010a0:	6099      	str	r1, [r3, #8]
}
 80010a2:	4770      	bx	lr
 80010a4:	20000818 	.word	0x20000818
 80010a8:	20000828 	.word	0x20000828
 80010ac:	00000000 	.word	0x00000000

080010b0 <rt_test_008_008_setup>:
 80010b0:	2100      	movs	r1, #0
  qp->next = qp;
 80010b2:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <rt_test_008_008_setup+0x14>)
 80010b4:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <rt_test_008_008_setup+0x18>)
 80010b6:	e9c3 3101 	strd	r3, r1, [r3, #4]
  qp->prev = qp;
 80010ba:	e9c2 2200 	strd	r2, r2, [r2]
  qp->next = qp;
 80010be:	601b      	str	r3, [r3, #0]
 */

static void rt_test_008_008_setup(void) {
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	20000818 	.word	0x20000818
 80010c8:	20000800 	.word	0x20000800
 80010cc:	00000000 	.word	0x00000000

080010d0 <rt_test_008_007_setup>:
 80010d0:	2100      	movs	r1, #0
 80010d2:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <rt_test_008_007_setup+0x14>)
 80010d4:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <rt_test_008_007_setup+0x18>)
 80010d6:	e9c3 3101 	strd	r3, r1, [r3, #4]
 80010da:	e9c2 2200 	strd	r2, r2, [r2]
 80010de:	601b      	str	r3, [r3, #0]
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20000818 	.word	0x20000818
 80010e8:	20000800 	.word	0x20000800
 80010ec:	00000000 	.word	0x00000000

080010f0 <rt_test_008_009_setup>:
 80010f0:	2000      	movs	r0, #0
 80010f2:	4a06      	ldr	r2, [pc, #24]	; (800110c <rt_test_008_009_setup+0x1c>)
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <rt_test_008_009_setup+0x20>)
 80010f6:	4907      	ldr	r1, [pc, #28]	; (8001114 <rt_test_008_009_setup+0x24>)
  qp->prev = qp;
 80010f8:	e9c3 3300 	strd	r3, r3, [r3]
 80010fc:	e9c1 1100 	strd	r1, r1, [r1]
  qp->next = qp;
 8001100:	6012      	str	r2, [r2, #0]
  qp->prev = qp;
 8001102:	6052      	str	r2, [r2, #4]
 8001104:	6090      	str	r0, [r2, #8]
 8001106:	6098      	str	r0, [r3, #8]

static void rt_test_008_009_setup(void) {
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	20000818 	.word	0x20000818
 8001110:	20000828 	.word	0x20000828
 8001114:	20000800 	.word	0x20000800
	...

08001120 <h1>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <h1+0x18>)
 8001122:	68da      	ldr	r2, [r3, #12]
 8001124:	f103 0120 	add.w	r1, r3, #32
 8001128:	428a      	cmp	r2, r1
 800112a:	d203      	bcs.n	8001134 <h1+0x14>
    *chtest.tokp++ = token;
 800112c:	2141      	movs	r1, #65	; 0x41
 800112e:	1c50      	adds	r0, r2, #1
 8001130:	60d8      	str	r0, [r3, #12]
 8001132:	7011      	strb	r1, [r2, #0]
 ****************************************************************************/

static EVENTSOURCE_DECL(es1);
static EVENTSOURCE_DECL(es2);

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	200010f4 	.word	0x200010f4
 800113c:	00000000 	.word	0x00000000

08001140 <h2>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <h2+0x18>)
 8001142:	68da      	ldr	r2, [r3, #12]
 8001144:	f103 0120 	add.w	r1, r3, #32
 8001148:	428a      	cmp	r2, r1
 800114a:	d203      	bcs.n	8001154 <h2+0x14>
    *chtest.tokp++ = token;
 800114c:	2142      	movs	r1, #66	; 0x42
 800114e:	1c50      	adds	r0, r2, #1
 8001150:	60d8      	str	r0, [r3, #12]
 8001152:	7011      	strb	r1, [r2, #0]
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	200010f4 	.word	0x200010f4
 800115c:	00000000 	.word	0x00000000

08001160 <h3>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <h3+0x18>)
 8001162:	68da      	ldr	r2, [r3, #12]
 8001164:	f103 0120 	add.w	r1, r3, #32
 8001168:	428a      	cmp	r2, r1
 800116a:	d203      	bcs.n	8001174 <h3+0x14>
    *chtest.tokp++ = token;
 800116c:	2143      	movs	r1, #67	; 0x43
 800116e:	1c50      	adds	r0, r2, #1
 8001170:	60d8      	str	r0, [r3, #12]
 8001172:	7011      	strb	r1, [r2, #0]
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	200010f4 	.word	0x200010f4
 800117c:	00000000 	.word	0x00000000

08001180 <rt_test_010_001_execute>:
 * - [10.1.4] An Event Listener is unregistered, the Event Source must
 *   not have listeners.
 * .
 */

static void rt_test_010_001_execute(void) {
 8001180:	b4f0      	push	{r4, r5, r6, r7}
  }
  test_end_step(1);

  /* [10.1.2] Two Event Listeners are registered on the Event Source,
     the Event Source is tested to have listeners.*/
  test_set_step(2);
 8001182:	2702      	movs	r7, #2
 */
void chEvtObjectInit(event_source_t *esp) {

  chDbgCheck(esp != NULL);

  esp->next = (event_listener_t *)esp;
 8001184:	4a38      	ldr	r2, [pc, #224]	; (8001268 <rt_test_010_001_execute+0xe8>)
 8001186:	4c39      	ldr	r4, [pc, #228]	; (800126c <rt_test_010_001_execute+0xec>)
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001188:	2030      	movs	r0, #48	; 0x30
static void rt_test_010_001_execute(void) {
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	6012      	str	r2, [r2, #0]
  test_set_step(2);
 800118e:	6027      	str	r7, [r4, #0]
 8001190:	f380 8811 	msr	BASEPRI, r0
  chDbgCheck((esp != NULL) && (elp != NULL));

  elp->next     = esp->next;
  esp->next     = elp;
  elp->listener = currtp;
  elp->events   = events;
 8001194:	2301      	movs	r3, #1
  elp->flags    = (eventflags_t)0;
  elp->wflags   = wflags;
 8001196:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  elp->events   = events;
 800119a:	9307      	str	r3, [sp, #28]
  elp->flags    = (eventflags_t)0;
 800119c:	2300      	movs	r3, #0
  elp->next     = esp->next;
 800119e:	6811      	ldr	r1, [r2, #0]
 *
 * @xclass
 */
static inline thread_t *chThdGetSelfX(void) {

  return __sch_get_currthread();
 80011a0:	4d33      	ldr	r5, [pc, #204]	; (8001270 <rt_test_010_001_execute+0xf0>)
 80011a2:	9105      	str	r1, [sp, #20]
 80011a4:	68e9      	ldr	r1, [r5, #12]
  elp->wflags   = wflags;
 80011a6:	e9cd 3608 	strd	r3, r6, [sp, #32]
  elp->listener = currtp;
 80011aa:	9106      	str	r1, [sp, #24]
  esp->next     = elp;
 80011ac:	a905      	add	r1, sp, #20
 80011ae:	6011      	str	r1, [r2, #0]
 80011b0:	f383 8811 	msr	BASEPRI, r3
 80011b4:	f380 8811 	msr	BASEPRI, r0
 80011b8:	68ed      	ldr	r5, [r5, #12]
  elp->events   = events;
 80011ba:	9702      	str	r7, [sp, #8]
  elp->listener = currtp;
 80011bc:	9501      	str	r5, [sp, #4]
  elp->next     = esp->next;
 80011be:	6815      	ldr	r5, [r2, #0]
  elp->wflags   = wflags;
 80011c0:	9604      	str	r6, [sp, #16]
  elp->next     = esp->next;
 80011c2:	9500      	str	r5, [sp, #0]
  esp->next     = elp;
 80011c4:	466d      	mov	r5, sp
  elp->flags    = (eventflags_t)0;
 80011c6:	9303      	str	r3, [sp, #12]
  esp->next     = elp;
 80011c8:	6015      	str	r5, [r2, #0]
 80011ca:	f383 8811 	msr	BASEPRI, r3
 80011ce:	f380 8811 	msr	BASEPRI, r0
  if (!condition) {
 80011d2:	6816      	ldr	r6, [r2, #0]
 80011d4:	4296      	cmp	r6, r2
 80011d6:	d037      	beq.n	8001248 <rt_test_010_001_execute+0xc8>
 80011d8:	f383 8811 	msr	BASEPRI, r3
  }
  test_end_step(2);

  /* [10.1.3] An Event Listener is unregistered, the Event Source must
     still have listeners.*/
  test_set_step(3);
 80011dc:	2303      	movs	r3, #3
 80011de:	6023      	str	r3, [r4, #0]
 80011e0:	f380 8811 	msr	BASEPRI, r0
  event_listener_t *p;

  chDbgCheck((esp != NULL) && (elp != NULL));

  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
 80011e4:	4613      	mov	r3, r2
static inline void chSysLock(void) {

  port_lock();
  __stats_start_measure_crit_thd();
  __dbg_check_lock();
}
 80011e6:	e001      	b.n	80011ec <rt_test_010_001_execute+0x6c>
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->next != (event_listener_t *)esp) {
  /*lint -restore*/
    if (p->next == elp) {
 80011e8:	428b      	cmp	r3, r1
 80011ea:	d037      	beq.n	800125c <rt_test_010_001_execute+0xdc>
  while (p->next != (event_listener_t *)esp) {
 80011ec:	4618      	mov	r0, r3
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d1f9      	bne.n	80011e8 <rt_test_010_001_execute+0x68>
 80011f4:	2300      	movs	r3, #0
 80011f6:	f383 8811 	msr	BASEPRI, r3
 80011fa:	2130      	movs	r1, #48	; 0x30
 80011fc:	f381 8811 	msr	BASEPRI, r1
 8001200:	6810      	ldr	r0, [r2, #0]
 8001202:	4290      	cmp	r0, r2
 8001204:	d020      	beq.n	8001248 <rt_test_010_001_execute+0xc8>
 8001206:	f383 8811 	msr	BASEPRI, r3
  }
  test_end_step(3);

  /* [10.1.4] An Event Listener is unregistered, the Event Source must
     not have listeners.*/
  test_set_step(4);
 800120a:	2304      	movs	r3, #4
 800120c:	6023      	str	r3, [r4, #0]
 800120e:	f381 8811 	msr	BASEPRI, r1
  p = (event_listener_t *)esp;
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <rt_test_010_001_execute+0xe8>)
 8001214:	e001      	b.n	800121a <rt_test_010_001_execute+0x9a>
    if (p->next == elp) {
 8001216:	42ab      	cmp	r3, r5
 8001218:	d023      	beq.n	8001262 <rt_test_010_001_execute+0xe2>
  while (p->next != (event_listener_t *)esp) {
 800121a:	4619      	mov	r1, r3
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4293      	cmp	r3, r2
 8001220:	d1f9      	bne.n	8001216 <rt_test_010_001_execute+0x96>
 8001222:	2300      	movs	r3, #0
 8001224:	f383 8811 	msr	BASEPRI, r3
 8001228:	2130      	movs	r1, #48	; 0x30
 800122a:	f381 8811 	msr	BASEPRI, r1
 800122e:	6811      	ldr	r1, [r2, #0]
 8001230:	4291      	cmp	r1, r2
  chtest.global_fail     = true;
 8001232:	bf1f      	itttt	ne
 8001234:	f240 1201 	movwne	r2, #257	; 0x101
  chtest.failure_message = msg;
 8001238:	490e      	ldrne	r1, [pc, #56]	; (8001274 <rt_test_010_001_execute+0xf4>)
  chtest.global_fail     = true;
 800123a:	80a2      	strhne	r2, [r4, #4]
  chtest.failure_message = msg;
 800123c:	60a1      	strne	r1, [r4, #8]
 800123e:	f383 8811 	msr	BASEPRI, r3
  {
    chEvtUnregister(&es1, &el2);
    test_assert_lock(!chEvtIsListeningI(&es1), "stuck listener");
  }
  test_end_step(4);
}
 8001242:	b00a      	add	sp, #40	; 0x28
 8001244:	bcf0      	pop	{r4, r5, r6, r7}
 8001246:	4770      	bx	lr
  chtest.global_fail     = true;
 8001248:	f240 1201 	movw	r2, #257	; 0x101
  chtest.failure_message = msg;
 800124c:	490a      	ldr	r1, [pc, #40]	; (8001278 <rt_test_010_001_execute+0xf8>)
  chtest.global_fail     = true;
 800124e:	80a2      	strh	r2, [r4, #4]
  chtest.failure_message = msg;
 8001250:	60a1      	str	r1, [r4, #8]
 8001252:	f383 8811 	msr	BASEPRI, r3
 8001256:	b00a      	add	sp, #40	; 0x28
 8001258:	bcf0      	pop	{r4, r5, r6, r7}
 800125a:	4770      	bx	lr
      p->next = elp->next;
 800125c:	9b05      	ldr	r3, [sp, #20]
 800125e:	6003      	str	r3, [r0, #0]
      break;
 8001260:	e7c8      	b.n	80011f4 <rt_test_010_001_execute+0x74>
      p->next = elp->next;
 8001262:	9b00      	ldr	r3, [sp, #0]
 8001264:	600b      	str	r3, [r1, #0]
      break;
 8001266:	e7dc      	b.n	8001222 <rt_test_010_001_execute+0xa2>
 8001268:	20000808 	.word	0x20000808
 800126c:	200010f4 	.word	0x200010f4
 8001270:	20001050 	.word	0x20001050
 8001274:	0801019c 	.word	0x0801019c
 8001278:	08010190 	.word	0x08010190
 800127c:	00000000 	.word	0x00000000

08001280 <rt_test_010_002_setup>:
 8001280:	2330      	movs	r3, #48	; 0x30
 8001282:	f383 8811 	msr	BASEPRI, r3
 8001286:	2300      	movs	r3, #0
 8001288:	4a02      	ldr	r2, [pc, #8]	; (8001294 <rt_test_010_002_setup+0x14>)
 800128a:	68d2      	ldr	r2, [r2, #12]
 800128c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800128e:	f383 8811 	msr	BASEPRI, r3
 8001292:	4770      	bx	lr
 8001294:	20001050 	.word	0x20001050
	...

080012a0 <rt_test_010_003_setup>:
 80012a0:	2330      	movs	r3, #48	; 0x30
 80012a2:	f383 8811 	msr	BASEPRI, r3
 80012a6:	2300      	movs	r3, #0
 80012a8:	4a02      	ldr	r2, [pc, #8]	; (80012b4 <rt_test_010_003_setup+0x14>)
 80012aa:	68d2      	ldr	r2, [r2, #12]
 80012ac:	63d3      	str	r3, [r2, #60]	; 0x3c
 80012ae:	f383 8811 	msr	BASEPRI, r3
 80012b2:	4770      	bx	lr
 80012b4:	20001050 	.word	0x20001050
	...

080012c0 <rt_test_010_004_setup>:
 80012c0:	2330      	movs	r3, #48	; 0x30
 80012c2:	f383 8811 	msr	BASEPRI, r3
 80012c6:	2300      	movs	r3, #0
 80012c8:	4a02      	ldr	r2, [pc, #8]	; (80012d4 <rt_test_010_004_setup+0x14>)
 80012ca:	68d2      	ldr	r2, [r2, #12]
 80012cc:	63d3      	str	r3, [r2, #60]	; 0x3c
 80012ce:	f383 8811 	msr	BASEPRI, r3
 80012d2:	4770      	bx	lr
 80012d4:	20001050 	.word	0x20001050
	...

080012e0 <rt_test_010_005_setup>:
 80012e0:	2330      	movs	r3, #48	; 0x30
 80012e2:	f383 8811 	msr	BASEPRI, r3
 80012e6:	2300      	movs	r3, #0
 80012e8:	4a02      	ldr	r2, [pc, #8]	; (80012f4 <rt_test_010_005_setup+0x14>)
 80012ea:	68d2      	ldr	r2, [r2, #12]
 80012ec:	63d3      	str	r3, [r2, #60]	; 0x3c
 80012ee:	f383 8811 	msr	BASEPRI, r3
 80012f2:	4770      	bx	lr
 80012f4:	20001050 	.word	0x20001050
	...

08001300 <rt_test_010_006_setup>:
 8001300:	2330      	movs	r3, #48	; 0x30
 8001302:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chDbgCheckClassI();

  m = currtp->epending & events;
  currtp->epending &= ~events;
 8001306:	2300      	movs	r3, #0
 8001308:	4a02      	ldr	r2, [pc, #8]	; (8001314 <rt_test_010_006_setup+0x14>)
 800130a:	68d2      	ldr	r2, [r2, #12]
 800130c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800130e:	f383 8811 	msr	BASEPRI, r3
 * .
 */

static void rt_test_010_006_setup(void) {
  chEvtGetAndClearEvents(ALL_EVENTS);
}
 8001312:	4770      	bx	lr
 8001314:	20001050 	.word	0x20001050
	...

08001320 <rt_test_010_007_setup>:
 8001320:	2330      	movs	r3, #48	; 0x30
 8001322:	f383 8811 	msr	BASEPRI, r3
 8001326:	2300      	movs	r3, #0
 8001328:	4a04      	ldr	r2, [pc, #16]	; (800133c <rt_test_010_007_setup+0x1c>)
 800132a:	68d2      	ldr	r2, [r2, #12]
 800132c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800132e:	f383 8811 	msr	BASEPRI, r3
  esp->next = (event_listener_t *)esp;
 8001332:	4a03      	ldr	r2, [pc, #12]	; (8001340 <rt_test_010_007_setup+0x20>)
 8001334:	4b03      	ldr	r3, [pc, #12]	; (8001344 <rt_test_010_007_setup+0x24>)
 8001336:	6012      	str	r2, [r2, #0]
 8001338:	601b      	str	r3, [r3, #0]

static void rt_test_010_007_setup(void) {
  chEvtGetAndClearEvents(ALL_EVENTS);
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
}
 800133a:	4770      	bx	lr
 800133c:	20001050 	.word	0x20001050
 8001340:	20000808 	.word	0x20000808
 8001344:	2000080c 	.word	0x2000080c
	...

08001350 <dyn_thread1.lto_priv.0>:
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <dyn_thread1.lto_priv.0+0x18>)
 8001352:	68da      	ldr	r2, [r3, #12]
 8001354:	f103 0120 	add.w	r1, r3, #32
 8001358:	428a      	cmp	r2, r1
 800135a:	d203      	bcs.n	8001364 <dyn_thread1.lto_priv.0+0x14>
 800135c:	7801      	ldrb	r1, [r0, #0]
 800135e:	1c50      	adds	r0, r2, #1
 8001360:	60d8      	str	r0, [r3, #12]
 8001362:	7011      	strb	r1, [r2, #0]
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	200010f4 	.word	0x200010f4
 800136c:	00000000 	.word	0x00000000

08001370 <rt_test_011_001_setup>:
  /*lint -save -e9033 [10.8] Required cast operations.*/
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
  /*lint restore*/

  /* Initializing the heap header.*/
  heapp->provider = NULL;
 8001370:	2000      	movs	r0, #0
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <rt_test_011_001_setup+0x34>)
  heapp->provider = NULL;
 8001374:	4a0c      	ldr	r2, [pc, #48]	; (80013a8 <rt_test_011_001_setup+0x38>)
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8001376:	1dd9      	adds	r1, r3, #7
 8001378:	f021 0107 	bic.w	r1, r1, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 800137c:	1acb      	subs	r3, r1, r3
  H_FREE_NEXT(&heapp->header) = hp;
  H_FREE_PAGES(&heapp->header) = 0;
  H_FREE_NEXT(hp) = NULL;
  H_FREE_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 800137e:	f5c3 6306 	rsb	r3, r3, #2144	; 0x860
 8001382:	3308      	adds	r3, #8
 8001384:	08db      	lsrs	r3, r3, #3
  H_FREE_NEXT(&heapp->header) = hp;
 8001386:	60d1      	str	r1, [r2, #12]
  H_FREE_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8001388:	604b      	str	r3, [r1, #4]
  heapp->area.base = (uint8_t *)(void *)hp;
  heapp->area.size = H_FREE_FULLSIZE(hp);
 800138a:	3301      	adds	r3, #1
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	6093      	str	r3, [r2, #8]
  qp->next = qp;
 8001390:	f102 0314 	add.w	r3, r2, #20
  qp->prev = qp;
 8001394:	e9c2 3305 	strd	r3, r3, [r2, #20]
  heapp->area.base = (uint8_t *)(void *)hp;
 8001398:	6051      	str	r1, [r2, #4]
  heapp->provider = NULL;
 800139a:	6010      	str	r0, [r2, #0]
  H_FREE_PAGES(&heapp->header) = 0;
 800139c:	6110      	str	r0, [r2, #16]
  H_FREE_NEXT(hp) = NULL;
 800139e:	6008      	str	r0, [r1, #0]
 80013a0:	61d0      	str	r0, [r2, #28]
 * .
 */

static void rt_test_011_001_setup(void) {
  chHeapObjectInit(&heap1, test_buffer, sizeof test_buffer);
}
 80013a2:	4770      	bx	lr
 80013a4:	20001240 	.word	0x20001240
 80013a8:	200011f0 	.word	0x200011f0
 80013ac:	00000000 	.word	0x00000000

080013b0 <rt_test_011_002_setup>:
  chDbgCheck((mp != NULL) &&
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
 80013b0:	2200      	movs	r2, #0
  mp->object_size = size;
 80013b2:	f44f 70d8 	mov.w	r0, #432	; 0x1b0
  mp->align = align;
 80013b6:	2104      	movs	r1, #4
  mp->next = NULL;
 80013b8:	4b02      	ldr	r3, [pc, #8]	; (80013c4 <rt_test_011_002_setup+0x14>)
  mp->object_size = size;
 80013ba:	e9c3 2000 	strd	r2, r0, [r3]
  mp->provider = provider;
 80013be:	e9c3 1202 	strd	r1, r2, [r3, #8]
 * .
 */

static void rt_test_011_002_setup(void) {
  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}
 80013c2:	4770      	bx	lr
 80013c4:	20001214 	.word	0x20001214
	...

080013d0 <tmo.lto_priv.0>:

static void tmo(virtual_timer_t *vtp, void *param) {

  (void)vtp;
  (void)param;
}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
	...

080013e0 <__sch_wakeup.lto_priv.0>:
 80013e0:	2330      	movs	r3, #48	; 0x30
 80013e2:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = threadref(p);

  (void)vtp;

  chSysLockFromISR();
  switch (tp->state) {
 80013e6:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80013ea:	2b0c      	cmp	r3, #12
 80013ec:	d810      	bhi.n	8001410 <__sch_wakeup.lto_priv.0+0x30>
 80013ee:	e8df f003 	tbb	[pc, r3]
 80013f2:	0f2a      	.short	0x0f2a
 80013f4:	070b260f 	.word	0x070b260f
 80013f8:	0f0f0b0f 	.word	0x0f0f0b0f
 80013fc:	0f0f      	.short	0x0f0f
 80013fe:	0b          	.byte	0x0b
 80013ff:	00          	.byte	0x00
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 8001400:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 8001402:	6893      	ldr	r3, [r2, #8]
 8001404:	3301      	adds	r3, #1
 8001406:	6093      	str	r3, [r2, #8]
 *
 * @notapi
 */
static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {

  p->prev->next = p->next;
 8001408:	e9d1 3200 	ldrd	r3, r2, [r1]
 800140c:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 800140e:	605a      	str	r2, [r3, #4]
  tp->state = CH_STATE_READY;
 8001410:	2200      	movs	r2, #0
static void __sch_wakeup(virtual_timer_t *vtp, void *p) {
 8001412:	b410      	push	{r4}
    /* Any other state, nothing to do.*/
    break;
  }

  /* Standard message for timeout conditions.*/
  tp->u.rdymsg = MSG_TIMEOUT;
 8001414:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001418:	698b      	ldr	r3, [r1, #24]
                                                           ch_priority_queue_t *p) {

  /* Scanning priority queue, the list is assumed to be mostly empty.*/
  do {
    pqp = pqp->next;
  } while (unlikely(pqp->prio >= p->prio));
 800141a:	6888      	ldr	r0, [r1, #8]
  tp->u.rdymsg = MSG_TIMEOUT;
 800141c:	62cc      	str	r4, [r1, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 800141e:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
    pqp = pqp->next;
 8001422:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001424:	689a      	ldr	r2, [r3, #8]
 8001426:	4282      	cmp	r2, r0
 8001428:	d2fb      	bcs.n	8001422 <__sch_wakeup.lto_priv.0+0x42>

  /* Insertion on prev.*/
  p->next       = pqp;
  p->prev       = pqp->prev;
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	2000      	movs	r0, #0
 800142e:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 8001432:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 8001434:	6059      	str	r1, [r3, #4]
 8001436:	f380 8811 	msr	BASEPRI, r0
  /* Goes behind peers because it went to sleep voluntarily.*/
  (void) __sch_ready_behind(tp);
  chSysUnlockFromISR();

  return;
}
 800143a:	bc10      	pop	{r4}
 800143c:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 800143e:	2200      	movs	r2, #0
 8001440:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001442:	601a      	str	r2, [r3, #0]
    break;
 8001444:	e7e4      	b.n	8001410 <__sch_wakeup.lto_priv.0+0x30>
 8001446:	2300      	movs	r3, #0
 8001448:	f383 8811 	msr	BASEPRI, r3
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop

08001450 <chMtxUnlockS>:
 8001450:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <chMtxUnlockS+0x64>)
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    currtp->mtxlist = mp->next;

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8001452:	6802      	ldr	r2, [r0, #0]
void chMtxUnlockS(mutex_t *mp) {
 8001454:	b410      	push	{r4}
 8001456:	68dc      	ldr	r4, [r3, #12]
    currtp->mtxlist = mp->next;
 8001458:	68c3      	ldr	r3, [r0, #12]
    if (chMtxQueueNotEmptyS(mp)) {
 800145a:	4282      	cmp	r2, r0
    currtp->mtxlist = mp->next;
 800145c:	6423      	str	r3, [r4, #64]	; 0x40
    if (chMtxQueueNotEmptyS(mp)) {
 800145e:	d025      	beq.n	80014ac <chMtxUnlockS+0x5c>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = currtp->realprio;
 8001460:	6c61      	ldr	r1, [r4, #68]	; 0x44
      lmp = currtp->mtxlist;
      while (lmp != NULL) {
 8001462:	b14b      	cbz	r3, 8001478 <chMtxUnlockS+0x28>
  return (bool)(qp->next != qp);
 8001464:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8001466:	4293      	cmp	r3, r2
 8001468:	d003      	beq.n	8001472 <chMtxUnlockS+0x22>
 800146a:	6892      	ldr	r2, [r2, #8]
 800146c:	4291      	cmp	r1, r2
 800146e:	bf38      	it	cc
 8001470:	4611      	movcc	r1, r2
            ((threadref(lmp->queue.next))->hdr.pqueue.prio > newprio)) {
          newprio = threadref(lmp->queue.next)->hdr.pqueue.prio;
        }
        lmp = lmp->next;
 8001472:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1f5      	bne.n	8001464 <chMtxUnlockS+0x14>
  tp->state = CH_STATE_READY;
 8001478:	f04f 0c00 	mov.w	ip, #0
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      currtp->hdr.pqueue.prio = newprio;
 800147c:	60a1      	str	r1, [r4, #8]
  ch_queue_t *p = qp->next;
 800147e:	6803      	ldr	r3, [r0, #0]
  qp->next       = p->next;
 8001480:	681a      	ldr	r2, [r3, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = threadref(ch_queue_fifo_remove(&mp->queue));
      mp->owner = tp;
      mp->next = tp->mtxlist;
 8001482:	6c19      	ldr	r1, [r3, #64]	; 0x40
  } while (unlikely(pqp->prio >= p->prio));
 8001484:	689c      	ldr	r4, [r3, #8]
  qp->next       = p->next;
 8001486:	6002      	str	r2, [r0, #0]
  qp->next->prev = qp;
 8001488:	6050      	str	r0, [r2, #4]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800148a:	699a      	ldr	r2, [r3, #24]
 800148c:	e9c0 3102 	strd	r3, r1, [r0, #8]
      tp->mtxlist = mp;
 8001490:	6418      	str	r0, [r3, #64]	; 0x40
  tp->state = CH_STATE_READY;
 8001492:	f883 c028 	strb.w	ip, [r3, #40]	; 0x28
    pqp = pqp->next;
 8001496:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001498:	6891      	ldr	r1, [r2, #8]
 800149a:	42a1      	cmp	r1, r4
 800149c:	d2fb      	bcs.n	8001496 <chMtxUnlockS+0x46>
  p->prev       = pqp->prev;
 800149e:	6851      	ldr	r1, [r2, #4]
      mp->owner = NULL;
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 80014a0:	bc10      	pop	{r4}
 80014a2:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 80014a6:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 80014a8:	6053      	str	r3, [r2, #4]
 80014aa:	4770      	bx	lr
      mp->owner = NULL;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	bc10      	pop	{r4}
      mp->owner = NULL;
 80014b0:	6093      	str	r3, [r2, #8]
}
 80014b2:	4770      	bx	lr
 80014b4:	20001050 	.word	0x20001050
	...

080014c0 <sdc_lld_wait_transaction_end>:
                                         uint32_t *resp) {
 80014c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014c4:	2330      	movs	r3, #48	; 0x30
 80014c6:	4606      	mov	r6, r0
 80014c8:	4688      	mov	r8, r1
 80014ca:	4617      	mov	r7, r2
 80014cc:	f383 8811 	msr	BASEPRI, r3
  if (sdcp->sdio->MASK != 0U) {
 80014d0:	6c85      	ldr	r5, [r0, #72]	; 0x48
 80014d2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80014d4:	bb1b      	cbnz	r3, 800151e <sdc_lld_wait_transaction_end+0x5e>
  dmaWaitCompletion(sdcp->dma);
 80014d6:	6c71      	ldr	r1, [r6, #68]	; 0x44
 80014d8:	684c      	ldr	r4, [r1, #4]
 80014da:	6863      	ldr	r3, [r4, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1fc      	bne.n	80014da <sdc_lld_wait_transaction_end+0x1a>
 80014e0:	220e      	movs	r2, #14
 80014e2:	6820      	ldr	r0, [r4, #0]
 80014e4:	f020 000f 	bic.w	r0, r0, #15
 80014e8:	6020      	str	r0, [r4, #0]
 80014ea:	7b48      	ldrb	r0, [r1, #13]
 80014ec:	6809      	ldr	r1, [r1, #0]
 80014ee:	4082      	lsls	r2, r0
 80014f0:	604a      	str	r2, [r1, #4]
  sdcp->sdio->MASK  = 0U;
 80014f2:	63eb      	str	r3, [r5, #60]	; 0x3c
  sdcp->sdio->DCTRL = 0U;
 80014f4:	62eb      	str	r3, [r5, #44]	; 0x2c
  if ((sdcp->sdio->STA & SDIO_STA_DATAEND) == 0U) {
 80014f6:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80014f8:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80014fc:	d00a      	beq.n	8001514 <sdc_lld_wait_transaction_end+0x54>
  sdcp->sdio->ICR = SDIO_ICR_ALL_FLAGS;
 80014fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001502:	63aa      	str	r2, [r5, #56]	; 0x38
 8001504:	f383 8811 	msr	BASEPRI, r3
  if (n > 1U)
 8001508:	f1b8 0f01 	cmp.w	r8, #1
 800150c:	d81c      	bhi.n	8001548 <sdc_lld_wait_transaction_end+0x88>
  return HAL_SUCCESS;
 800150e:	4618      	mov	r0, r3
}
 8001510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001514:	f380 8811 	msr	BASEPRI, r0
    return HAL_FAILED;
 8001518:	2001      	movs	r0, #1
}
 800151a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  if (unlikely(TIME_IMMEDIATE == timeout)) {
    return MSG_TIMEOUT;
  }

  *trp = tp;
 800151e:	4602      	mov	r2, r0

  chDbgAssert(otp != chSysGetIdleThreadX(), "sleeping in idle thread");
  chDbgAssert(otp->owner == oip, "invalid core");

  /* New state.*/
  otp->state = newstate;
 8001520:	2503      	movs	r5, #3
  otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
  ntp->state = CH_STATE_CURRENT;
 8001522:	2401      	movs	r4, #1
 8001524:	4b14      	ldr	r3, [pc, #80]	; (8001578 <sdc_lld_wait_transaction_end+0xb8>)
 8001526:	68d9      	ldr	r1, [r3, #12]
  ch_priority_queue_t *p = pqp->next;
 8001528:	6818      	ldr	r0, [r3, #0]
 800152a:	f842 1f3c 	str.w	r1, [r2, #60]!
  otp->state = newstate;
 800152e:	f881 5028 	strb.w	r5, [r1, #40]	; 0x28
  tp->u.wttrp = trp;
 8001532:	62ca      	str	r2, [r1, #44]	; 0x2c
  pqp->next       = p->next;
 8001534:	6802      	ldr	r2, [r0, #0]
  pqp->next->prev = pqp;
 8001536:	6053      	str	r3, [r2, #4]
  pqp->next       = p->next;
 8001538:	601a      	str	r2, [r3, #0]
  ntp->state = CH_STATE_CURRENT;
 800153a:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
  __instance_set_currthread(oip, ntp);
 800153e:	60d8      	str	r0, [r3, #12]
  if (ntp->hdr.pqueue.prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
 8001540:	f7fe fe7e 	bl	8000240 <__port_switch>
  sdcp->sdio->MASK  = 0U;
 8001544:	6cb5      	ldr	r5, [r6, #72]	; 0x48
 8001546:	e7c6      	b.n	80014d6 <sdc_lld_wait_transaction_end+0x16>
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8001548:	f240 414c 	movw	r1, #1100	; 0x44c
  sdcp->sdio->ARG = arg;
 800154c:	6cb2      	ldr	r2, [r6, #72]	; 0x48
 800154e:	6093      	str	r3, [r2, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8001550:	60d1      	str	r1, [r2, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8001552:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001554:	f011 0345 	ands.w	r3, r1, #69	; 0x45
 8001558:	d0fb      	beq.n	8001552 <sdc_lld_wait_transaction_end+0x92>
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 800155a:	6393      	str	r3, [r2, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0U) {
 800155c:	f011 0305 	ands.w	r3, r1, #5
 8001560:	d104      	bne.n	800156c <sdc_lld_wait_transaction_end+0xac>
  *resp = sdcp->sdio->RESP1;
 8001562:	6952      	ldr	r2, [r2, #20]
  return HAL_SUCCESS;
 8001564:	4618      	mov	r0, r3
  *resp = sdcp->sdio->RESP1;
 8001566:	603a      	str	r2, [r7, #0]
}
 8001568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sdc_lld_collect_errors(sdcp, sta);
 800156c:	4630      	mov	r0, r6
 800156e:	f7ff fb17 	bl	8000ba0 <sdc_lld_collect_errors>
    return HAL_FAILED;
 8001572:	2001      	movs	r0, #1
 8001574:	e7cc      	b.n	8001510 <sdc_lld_wait_transaction_end+0x50>
 8001576:	bf00      	nop
 8001578:	20001050 	.word	0x20001050
 800157c:	00000000 	.word	0x00000000

08001580 <chThdYield>:
 8001580:	2330      	movs	r3, #48	; 0x30
void chThdYield(void) {
 8001582:	b510      	push	{r4, lr}
 8001584:	f383 8811 	msr	BASEPRI, r3
 *
 * @sclass
 */
void chSchDoYieldS(void) {
  os_instance_t *oip = currcore;
  thread_t *tp = __instance_get_currthread(oip);
 8001588:	4b10      	ldr	r3, [pc, #64]	; (80015cc <chThdYield+0x4c>)
 800158a:	68d9      	ldr	r1, [r3, #12]

  chDbgCheckClassS();

  /* If this function has been called then it is likely there are threads
     at same priority level.*/
  if (likely(firstprio(&oip->rlist.pqueue) >= tp->hdr.pqueue.prio)) {
 800158c:	6818      	ldr	r0, [r3, #0]
 800158e:	688a      	ldr	r2, [r1, #8]
 8001590:	6884      	ldr	r4, [r0, #8]
 8001592:	4294      	cmp	r4, r2
 8001594:	d315      	bcc.n	80015c2 <chThdYield+0x42>
 8001596:	6804      	ldr	r4, [r0, #0]
  pqp->next->prev = pqp;
 8001598:	6063      	str	r3, [r4, #4]
  pqp->next       = p->next;
 800159a:	601c      	str	r4, [r3, #0]
  ntp->state = CH_STATE_CURRENT;
 800159c:	2401      	movs	r4, #1
  __instance_set_currthread(oip, ntp);
 800159e:	60d8      	str	r0, [r3, #12]
  tp->state = CH_STATE_READY;
 80015a0:	2300      	movs	r3, #0
  ntp->state = CH_STATE_CURRENT;
 80015a2:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
  tp->state = CH_STATE_READY;
 80015a6:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80015aa:	698b      	ldr	r3, [r1, #24]
    pqp = pqp->next;
 80015ac:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80015ae:	689c      	ldr	r4, [r3, #8]
 80015b0:	42a2      	cmp	r2, r4
 80015b2:	d9fb      	bls.n	80015ac <chThdYield+0x2c>
  p->prev       = pqp->prev;
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 80015ba:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 80015bc:	6059      	str	r1, [r3, #4]
  chSysSwitch(ntp, otp);
 80015be:	f7fe fe3f 	bl	8000240 <__port_switch>
 80015c2:	2300      	movs	r3, #0
 80015c4:	f383 8811 	msr	BASEPRI, r3
}
 80015c8:	bd10      	pop	{r4, pc}
 80015ca:	bf00      	nop
 80015cc:	20001050 	.word	0x20001050

080015d0 <chMsgSend>:
 * @param[in] msg       the message
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 80015d0:	b538      	push	{r3, r4, r5, lr}
 80015d2:	4b1a      	ldr	r3, [pc, #104]	; (800163c <chMsgSend+0x6c>)
 80015d4:	2230      	movs	r2, #48	; 0x30
 80015d6:	68dc      	ldr	r4, [r3, #12]
 80015d8:	f382 8811 	msr	BASEPRI, r2
  p->prev       = qp->prev;
 80015dc:	6b82      	ldr	r2, [r0, #56]	; 0x38

  chDbgCheck(tp != NULL);

  chSysLock();
  currtp->u.sentmsg = msg;
  __ch_msg_insert(&tp->msgqueue, currtp);
 80015de:	f100 0534 	add.w	r5, r0, #52	; 0x34
  p->next       = qp;
 80015e2:	6025      	str	r5, [r4, #0]
  currtp->u.sentmsg = msg;
 80015e4:	62e1      	str	r1, [r4, #44]	; 0x2c
  p->prev       = qp->prev;
 80015e6:	6062      	str	r2, [r4, #4]
  p->prev->next = p;
 80015e8:	6014      	str	r4, [r2, #0]
  if (tp->state == CH_STATE_WTMSG) {
 80015ea:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
  qp->prev      = p;
 80015ee:	6384      	str	r4, [r0, #56]	; 0x38
 80015f0:	2a0e      	cmp	r2, #14
 80015f2:	d013      	beq.n	800161c <chMsgSend+0x4c>
  otp->state = newstate;
 80015f4:	220c      	movs	r2, #12
  ntp->state = CH_STATE_CURRENT;
 80015f6:	f04f 0c01 	mov.w	ip, #1
  thread_t *otp = __instance_get_currthread(oip);
 80015fa:	68d9      	ldr	r1, [r3, #12]
  ch_priority_queue_t *p = pqp->next;
 80015fc:	6818      	ldr	r0, [r3, #0]
  otp->state = newstate;
 80015fe:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pqp->next       = p->next;
 8001602:	6802      	ldr	r2, [r0, #0]
  pqp->next->prev = pqp;
 8001604:	6053      	str	r3, [r2, #4]
  pqp->next       = p->next;
 8001606:	601a      	str	r2, [r3, #0]
  ntp->state = CH_STATE_CURRENT;
 8001608:	f880 c028 	strb.w	ip, [r0, #40]	; 0x28
  __instance_set_currthread(oip, ntp);
 800160c:	60d8      	str	r0, [r3, #12]
  chSysSwitch(ntp, otp);
 800160e:	f7fe fe17 	bl	8000240 <__port_switch>
    (void) chSchReadyI(tp);
  }
  chSchGoSleepS(CH_STATE_SNDMSGQ);
  msg = currtp->u.rdymsg;
 8001612:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001614:	2300      	movs	r3, #0
 8001616:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return msg;
}
 800161a:	bd38      	pop	{r3, r4, r5, pc}
  tp->state = CH_STATE_READY;
 800161c:	2100      	movs	r1, #0
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800161e:	6982      	ldr	r2, [r0, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8001620:	6885      	ldr	r5, [r0, #8]
  tp->state = CH_STATE_READY;
 8001622:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    pqp = pqp->next;
 8001626:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001628:	6891      	ldr	r1, [r2, #8]
 800162a:	42a9      	cmp	r1, r5
 800162c:	d2fb      	bcs.n	8001626 <chMsgSend+0x56>
  p->prev       = pqp->prev;
 800162e:	6851      	ldr	r1, [r2, #4]
 8001630:	e9c0 2100 	strd	r2, r1, [r0]
  p->prev->next = p;
 8001634:	6008      	str	r0, [r1, #0]
  pqp->prev     = p;
 8001636:	6050      	str	r0, [r2, #4]
  return __sch_ready_behind(tp);
 8001638:	e7dc      	b.n	80015f4 <chMsgSend+0x24>
 800163a:	bf00      	nop
 800163c:	20001050 	.word	0x20001050

08001640 <msg_thread1>:

/****************************************************************************
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(msg_thread1, p) {
 8001640:	b510      	push	{r4, lr}
 8001642:	4604      	mov	r4, r0

  chMsgSend(p, 'A');
 8001644:	2141      	movs	r1, #65	; 0x41
 8001646:	f7ff ffc3 	bl	80015d0 <chMsgSend>
  chMsgSend(p, 'B');
 800164a:	2142      	movs	r1, #66	; 0x42
 800164c:	4620      	mov	r0, r4
 800164e:	f7ff ffbf 	bl	80015d0 <chMsgSend>
  chMsgSend(p, 'C');
 8001652:	2143      	movs	r1, #67	; 0x43
 8001654:	4620      	mov	r0, r4
 8001656:	f7ff ffbb 	bl	80015d0 <chMsgSend>
  chMsgSend(p, 'D');
 800165a:	4620      	mov	r0, r4
}
 800165c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMsgSend(p, 'D');
 8001660:	2144      	movs	r1, #68	; 0x44
 8001662:	f7ff bfb5 	b.w	80015d0 <chMsgSend>
 8001666:	bf00      	nop
	...

08001670 <thread1.lto_priv.1>:
static THD_FUNCTION(thread1, p) {
 8001670:	b510      	push	{r4, lr}
 8001672:	2330      	movs	r3, #48	; 0x30
 8001674:	4604      	mov	r4, r0
 8001676:	f383 8811 	msr	BASEPRI, r3
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && ch_queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && ch_queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (--sp->cnt < (cnt_t)0) {
 800167a:	4a16      	ldr	r2, [pc, #88]	; (80016d4 <thread1.lto_priv.1+0x64>)
 800167c:	6893      	ldr	r3, [r2, #8]
 800167e:	3b01      	subs	r3, #1
 8001680:	2b00      	cmp	r3, #0
 8001682:	6093      	str	r3, [r2, #8]
 8001684:	db0d      	blt.n	80016a2 <thread1.lto_priv.1+0x32>
 8001686:	2300      	movs	r3, #0
 8001688:	f383 8811 	msr	BASEPRI, r3
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 800168c:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <thread1.lto_priv.1+0x68>)
 800168e:	68da      	ldr	r2, [r3, #12]
 8001690:	f103 0120 	add.w	r1, r3, #32
 8001694:	428a      	cmp	r2, r1
 8001696:	d203      	bcs.n	80016a0 <thread1.lto_priv.1+0x30>
  test_emit_token(*(char *)p);
 8001698:	7821      	ldrb	r1, [r4, #0]
    *chtest.tokp++ = token;
 800169a:	1c50      	adds	r0, r2, #1
 800169c:	60d8      	str	r0, [r3, #12]
 800169e:	7011      	strb	r1, [r2, #0]
}
 80016a0:	bd10      	pop	{r4, pc}
  otp->state = newstate;
 80016a2:	f04f 0e05 	mov.w	lr, #5
  ntp->state = CH_STATE_CURRENT;
 80016a6:	f04f 0c01 	mov.w	ip, #1
 80016aa:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <thread1.lto_priv.1+0x6c>)
  p->prev       = qp->prev;
 80016ac:	6850      	ldr	r0, [r2, #4]
 80016ae:	68d9      	ldr	r1, [r3, #12]
 80016b0:	e9c1 2000 	strd	r2, r0, [r1]
    thread_t *currtp = chThdGetSelfX();
    currtp->u.wtsemp = sp;
 80016b4:	62ca      	str	r2, [r1, #44]	; 0x2c
  p->prev->next = p;
 80016b6:	6001      	str	r1, [r0, #0]
  ch_priority_queue_t *p = pqp->next;
 80016b8:	6818      	ldr	r0, [r3, #0]
  otp->state = newstate;
 80016ba:	f881 e028 	strb.w	lr, [r1, #40]	; 0x28
  qp->prev      = p;
 80016be:	6051      	str	r1, [r2, #4]
  pqp->next       = p->next;
 80016c0:	6802      	ldr	r2, [r0, #0]
  pqp->next->prev = pqp;
 80016c2:	6053      	str	r3, [r2, #4]
  pqp->next       = p->next;
 80016c4:	601a      	str	r2, [r3, #0]
  ntp->state = CH_STATE_CURRENT;
 80016c6:	f880 c028 	strb.w	ip, [r0, #40]	; 0x28
  __instance_set_currthread(oip, ntp);
 80016ca:	60d8      	str	r0, [r3, #12]
  chSysSwitch(ntp, otp);
 80016cc:	f7fe fdb8 	bl	8000240 <__port_switch>
    sem_insert(&sp->queue, currtp);
    chSchGoSleepS(CH_STATE_WTSEM);

    return currtp->u.rdymsg;
 80016d0:	e7d9      	b.n	8001686 <thread1.lto_priv.1+0x16>
 80016d2:	bf00      	nop
 80016d4:	20001224 	.word	0x20001224
 80016d8:	200010f4 	.word	0x200010f4
 80016dc:	20001050 	.word	0x20001050

080016e0 <bmk_thread3.lto_priv.0>:
 80016e0:	2330      	movs	r3, #48	; 0x30
  (void)chMsgSend(tp, 0);
  return n;
}
#endif

static THD_FUNCTION(bmk_thread3, p) {
 80016e2:	b570      	push	{r4, r5, r6, lr}
 80016e4:	f383 8811 	msr	BASEPRI, r3
 80016e8:	4b1e      	ldr	r3, [pc, #120]	; (8001764 <bmk_thread3.lto_priv.0+0x84>)
 80016ea:	68d9      	ldr	r1, [r3, #12]
  return (bool)(lp->next != lp);
 80016ec:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 80016ee:	f101 0c30 	add.w	ip, r1, #48	; 0x30
 80016f2:	4594      	cmp	ip, r2
  tp->state = CH_STATE_READY;
 80016f4:	bf18      	it	ne
 80016f6:	f04f 0e00 	movne.w	lr, #0
  currtp->u.exitcode = msg;
 80016fa:	62c8      	str	r0, [r1, #44]	; 0x2c
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 80016fc:	d113      	bne.n	8001726 <bmk_thread3.lto_priv.0+0x46>
  if (unlikely(currtp->refs == (trefs_t)0)) {
 80016fe:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
 8001702:	b32a      	cbz	r2, 8001750 <bmk_thread3.lto_priv.0+0x70>
  otp->state = newstate;
 8001704:	220f      	movs	r2, #15
  ntp->state = CH_STATE_CURRENT;
 8001706:	f04f 0c01 	mov.w	ip, #1
  ch_priority_queue_t *p = pqp->next;
 800170a:	6818      	ldr	r0, [r3, #0]
  otp->state = newstate;
 800170c:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pqp->next       = p->next;
 8001710:	6802      	ldr	r2, [r0, #0]
  pqp->next->prev = pqp;
 8001712:	6053      	str	r3, [r2, #4]
  ntp->state = CH_STATE_CURRENT;
 8001714:	f880 c028 	strb.w	ip, [r0, #40]	; 0x28
  pqp->next       = p->next;
 8001718:	601a      	str	r2, [r3, #0]

  chThdExit((msg_t)p);
}
 800171a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  __instance_set_currthread(oip, ntp);
 800171e:	60d8      	str	r0, [r3, #12]
  chSysSwitch(ntp, otp);
 8001720:	f7fe bd8e 	b.w	8000240 <__port_switch>
 8001724:	4622      	mov	r2, r4
  lp->next = p->next;
 8001726:	6814      	ldr	r4, [r2, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001728:	6990      	ldr	r0, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800172a:	6896      	ldr	r6, [r2, #8]
  lp->next = p->next;
 800172c:	630c      	str	r4, [r1, #48]	; 0x30
  tp->state = CH_STATE_READY;
 800172e:	f882 e028 	strb.w	lr, [r2, #40]	; 0x28
    pqp = pqp->next;
 8001732:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001734:	6885      	ldr	r5, [r0, #8]
 8001736:	42b5      	cmp	r5, r6
 8001738:	d2fb      	bcs.n	8001732 <bmk_thread3.lto_priv.0+0x52>
  p->prev       = pqp->prev;
 800173a:	6845      	ldr	r5, [r0, #4]
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 800173c:	4564      	cmp	r4, ip
  p->next       = pqp;
 800173e:	6010      	str	r0, [r2, #0]
  p->prev       = pqp->prev;
 8001740:	6055      	str	r5, [r2, #4]
  p->prev->next = p;
 8001742:	602a      	str	r2, [r5, #0]
  pqp->prev     = p;
 8001744:	6042      	str	r2, [r0, #4]
 8001746:	d1ed      	bne.n	8001724 <bmk_thread3.lto_priv.0+0x44>
  if (unlikely(currtp->refs == (trefs_t)0)) {
 8001748:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
 800174c:	2a00      	cmp	r2, #0
 800174e:	d1d9      	bne.n	8001704 <bmk_thread3.lto_priv.0+0x24>
    if (unlikely(((currtp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC))) {
 8001750:	f891 2029 	ldrb.w	r2, [r1, #41]	; 0x29
 8001754:	0792      	lsls	r2, r2, #30
 8001756:	d1d5      	bne.n	8001704 <bmk_thread3.lto_priv.0+0x24>
  p->prev->next = p->next;
 8001758:	e9d1 2004 	ldrd	r2, r0, [r1, #16]
 800175c:	6002      	str	r2, [r0, #0]
  p->next->prev = p->prev;
 800175e:	6050      	str	r0, [r2, #4]
  return p;
 8001760:	e7d0      	b.n	8001704 <bmk_thread3.lto_priv.0+0x24>
 8001762:	bf00      	nop
 8001764:	20001050 	.word	0x20001050
	...

08001770 <bmk_thread4.lto_priv.0>:

static THD_FUNCTION(bmk_thread4, p) {
 8001770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001772:	4c0d      	ldr	r4, [pc, #52]	; (80017a8 <bmk_thread4.lto_priv.0+0x38>)
 8001774:	2330      	movs	r3, #48	; 0x30
 8001776:	68e7      	ldr	r7, [r4, #12]
 8001778:	f383 8811 	msr	BASEPRI, r3
  otp->state = newstate;
 800177c:	2603      	movs	r6, #3
  ntp->state = CH_STATE_CURRENT;
 800177e:	2501      	movs	r5, #1
  thread_t *otp = __instance_get_currthread(oip);
 8001780:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 8001782:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 8001784:	f881 6028 	strb.w	r6, [r1, #40]	; 0x28
  pqp->next       = p->next;
 8001788:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 800178a:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 800178c:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
  pqp->next       = p->next;
 8001790:	6023      	str	r3, [r4, #0]
  __instance_set_currthread(oip, ntp);
 8001792:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8001794:	f7fe fd54 	bl	8000240 <__port_switch>
  (void)p;
  chSysLock();
  do {
    chSchGoSleepS(CH_STATE_SUSPENDED);
    msg = self->u.rdymsg;
  } while (msg == MSG_OK);
 8001798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0f0      	beq.n	8001780 <bmk_thread4.lto_priv.0+0x10>
 800179e:	2300      	movs	r3, #0
 80017a0:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
}
 80017a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20001050 	.word	0x20001050
 80017ac:	00000000 	.word	0x00000000

080017b0 <bmk_thread7.lto_priv.0>:

#if CH_CFG_USE_SEMAPHORES
static THD_FUNCTION(bmk_thread7, p) {
 80017b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017b4:	4f17      	ldr	r7, [pc, #92]	; (8001814 <bmk_thread7.lto_priv.0+0x64>)
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 80017b6:	68fb      	ldr	r3, [r7, #12]

  (void)p;
  while (!chThdShouldTerminateX())
 80017b8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80017bc:	075a      	lsls	r2, r3, #29
 80017be:	d427      	bmi.n	8001810 <bmk_thread7.lto_priv.0+0x60>
 80017c0:	f04f 0830 	mov.w	r8, #48	; 0x30
  otp->state = newstate;
 80017c4:	2605      	movs	r6, #5
  ntp->state = CH_STATE_CURRENT;
 80017c6:	2501      	movs	r5, #1
 80017c8:	4c13      	ldr	r4, [pc, #76]	; (8001818 <bmk_thread7.lto_priv.0+0x68>)
 80017ca:	e007      	b.n	80017dc <bmk_thread7.lto_priv.0+0x2c>
 80017cc:	2300      	movs	r3, #0
 80017ce:	f383 8811 	msr	BASEPRI, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80017d8:	075b      	lsls	r3, r3, #29
 80017da:	d419      	bmi.n	8001810 <bmk_thread7.lto_priv.0+0x60>
 80017dc:	f388 8811 	msr	BASEPRI, r8
  if (--sp->cnt < (cnt_t)0) {
 80017e0:	68a3      	ldr	r3, [r4, #8]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	60a3      	str	r3, [r4, #8]
 80017e8:	daf0      	bge.n	80017cc <bmk_thread7.lto_priv.0+0x1c>
  return __sch_get_currthread();
 80017ea:	68f9      	ldr	r1, [r7, #12]
  p->prev       = qp->prev;
 80017ec:	6863      	ldr	r3, [r4, #4]
  ch_priority_queue_t *p = pqp->next;
 80017ee:	6838      	ldr	r0, [r7, #0]
    currtp->u.wtsemp = sp;
 80017f0:	62cc      	str	r4, [r1, #44]	; 0x2c
  p->prev       = qp->prev;
 80017f2:	e9c1 4300 	strd	r4, r3, [r1]
  p->prev->next = p;
 80017f6:	6019      	str	r1, [r3, #0]
  otp->state = newstate;
 80017f8:	f881 6028 	strb.w	r6, [r1, #40]	; 0x28
  pqp->next       = p->next;
 80017fc:	6803      	ldr	r3, [r0, #0]
  qp->prev      = p;
 80017fe:	6061      	str	r1, [r4, #4]
  pqp->next->prev = pqp;
 8001800:	605f      	str	r7, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8001802:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
  pqp->next       = p->next;
 8001806:	603b      	str	r3, [r7, #0]
  __instance_set_currthread(oip, ntp);
 8001808:	60f8      	str	r0, [r7, #12]
  chSysSwitch(ntp, otp);
 800180a:	f7fe fd19 	bl	8000240 <__port_switch>
    return currtp->u.rdymsg;
 800180e:	e7dd      	b.n	80017cc <bmk_thread7.lto_priv.0+0x1c>
    chSemWait(&sem1);
}
 8001810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001814:	20001050 	.word	0x20001050
 8001818:	20001230 	.word	0x20001230
 800181c:	00000000 	.word	0x00000000

08001820 <bmk_thread8.lto_priv.0>:
#endif

static THD_FUNCTION(bmk_thread8, p) {
 8001820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001824:	2730      	movs	r7, #48	; 0x30
  ntp->state = CH_STATE_CURRENT;
 8001826:	f04f 0801 	mov.w	r8, #1
  tp->state = CH_STATE_READY;
 800182a:	2600      	movs	r6, #0
 800182c:	4605      	mov	r5, r0
 800182e:	4c18      	ldr	r4, [pc, #96]	; (8001890 <bmk_thread8.lto_priv.0+0x70>)
 8001830:	f387 8811 	msr	BASEPRI, r7
  thread_t *tp = __instance_get_currthread(oip);
 8001834:	68e1      	ldr	r1, [r4, #12]
  if (likely(firstprio(&oip->rlist.pqueue) >= tp->hdr.pqueue.prio)) {
 8001836:	6820      	ldr	r0, [r4, #0]
 8001838:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800183c:	6883      	ldr	r3, [r0, #8]
 800183e:	4563      	cmp	r3, ip
 8001840:	d313      	bcc.n	800186a <bmk_thread8.lto_priv.0+0x4a>
 8001842:	6802      	ldr	r2, [r0, #0]
  pqp->next->prev = pqp;
 8001844:	6054      	str	r4, [r2, #4]
  ntp->state = CH_STATE_CURRENT;
 8001846:	f880 8028 	strb.w	r8, [r0, #40]	; 0x28
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800184a:	698b      	ldr	r3, [r1, #24]
  pqp->next       = p->next;
 800184c:	6022      	str	r2, [r4, #0]
  __instance_set_currthread(oip, ntp);
 800184e:	60e0      	str	r0, [r4, #12]
  tp->state = CH_STATE_READY;
 8001850:	f881 6028 	strb.w	r6, [r1, #40]	; 0x28
    pqp = pqp->next;
 8001854:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	4594      	cmp	ip, r2
 800185a:	d9fb      	bls.n	8001854 <bmk_thread8.lto_priv.0+0x34>
  p->prev       = pqp->prev;
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 8001862:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 8001864:	6059      	str	r1, [r3, #4]
  chSysSwitch(ntp, otp);
 8001866:	f7fe fceb 	bl	8000240 <__port_switch>
 800186a:	f386 8811 	msr	BASEPRI, r6

  do {
    chThdYield();
    chThdYield();
 800186e:	f7ff fe87 	bl	8001580 <chThdYield>
    chThdYield();
 8001872:	f7ff fe85 	bl	8001580 <chThdYield>
    chThdYield();
 8001876:	f7ff fe83 	bl	8001580 <chThdYield>
    (*(uint32_t *)p) += 4;
 800187a:	682b      	ldr	r3, [r5, #0]
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 800187c:	68e2      	ldr	r2, [r4, #12]
 800187e:	3304      	adds	r3, #4
 8001880:	602b      	str	r3, [r5, #0]
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while(!chThdShouldTerminateX());
 8001882:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 8001886:	075b      	lsls	r3, r3, #29
 8001888:	d5d2      	bpl.n	8001830 <bmk_thread8.lto_priv.0+0x10>
}
 800188a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800188e:	bf00      	nop
 8001890:	20001050 	.word	0x20001050
	...

080018a0 <parse_arguments>:

/*===========================================================================*/
/* Module local functions.                                                   */
/*===========================================================================*/

static char *parse_arguments(char *str, char **saveptr) {
 80018a0:	b538      	push	{r3, r4, r5, lr}
 80018a2:	460d      	mov	r5, r1
  char *p;

  if (str != NULL)
 80018a4:	b1b0      	cbz	r0, 80018d4 <parse_arguments+0x34>
 80018a6:	4604      	mov	r4, r0
    *saveptr = str;
 80018a8:	6028      	str	r0, [r5, #0]
  if (!p) {
    return NULL;
  }

  /* Skipping white space.*/
  p += strspn(p, " \t");
 80018aa:	4620      	mov	r0, r4
 80018ac:	4910      	ldr	r1, [pc, #64]	; (80018f0 <parse_arguments+0x50>)
 80018ae:	f7ff f803 	bl	80008b8 <strspn>

  if (*p == '"') {
 80018b2:	5c21      	ldrb	r1, [r4, r0]
  p += strspn(p, " \t");
 80018b4:	4404      	add	r4, r0
  if (*p == '"') {
 80018b6:	2922      	cmp	r1, #34	; 0x22
 80018b8:	d012      	beq.n	80018e0 <parse_arguments+0x40>
    p++;
    *saveptr = strpbrk(p, "\"");
  }
  else {
    /* The delimiter is white space.*/
    *saveptr = strpbrk(p, " \t");
 80018ba:	4620      	mov	r0, r4
 80018bc:	490c      	ldr	r1, [pc, #48]	; (80018f0 <parse_arguments+0x50>)
 80018be:	f7fe ffdf 	bl	8000880 <strpbrk>
  }

  /* Replacing the delimiter with a zero.*/
  if (*saveptr != NULL) {
 80018c2:	b198      	cbz	r0, 80018ec <parse_arguments+0x4c>
    *(*saveptr)++ = '\0';
 80018c4:	2300      	movs	r3, #0
 80018c6:	1c42      	adds	r2, r0, #1
 80018c8:	602a      	str	r2, [r5, #0]
 80018ca:	7003      	strb	r3, [r0, #0]
  }

  return *p != '\0' ? p : NULL;
 80018cc:	7823      	ldrb	r3, [r4, #0]
 80018ce:	b123      	cbz	r3, 80018da <parse_arguments+0x3a>
}
 80018d0:	4620      	mov	r0, r4
 80018d2:	bd38      	pop	{r3, r4, r5, pc}
  p = *saveptr;
 80018d4:	680c      	ldr	r4, [r1, #0]
  if (!p) {
 80018d6:	2c00      	cmp	r4, #0
 80018d8:	d1e7      	bne.n	80018aa <parse_arguments+0xa>
    return NULL;
 80018da:	2400      	movs	r4, #0
}
 80018dc:	4620      	mov	r0, r4
 80018de:	bd38      	pop	{r3, r4, r5, pc}
    p++;
 80018e0:	3401      	adds	r4, #1
    *saveptr = strpbrk(p, "\"");
 80018e2:	4620      	mov	r0, r4
 80018e4:	f7fe fdbe 	bl	8000464 <strchr>
  if (*saveptr != NULL) {
 80018e8:	2800      	cmp	r0, #0
 80018ea:	d1eb      	bne.n	80018c4 <parse_arguments+0x24>
 80018ec:	6028      	str	r0, [r5, #0]
 80018ee:	e7ed      	b.n	80018cc <parse_arguments+0x2c>
 80018f0:	080101ac 	.word	0x080101ac
	...

08001900 <test_rt>:
  } while (tp != NULL);
}
#endif

#if (SHELL_CMD_TEST_ENABLED == TRUE) || defined(__DOXYGEN__)
static THD_FUNCTION(test_rt, arg) {
 8001900:	4602      	mov	r2, r0
 */
bool test_execute_stream(BaseSequentialStream *stream,
                         const testsuite_t *tsp) {

  /* Output initialization using streams.*/
  chtest.stream  = stream;
 8001902:	4b03      	ldr	r3, [pc, #12]	; (8001910 <test_rt+0x10>)
  chtest.putchar = test_stream_putchar;
 8001904:	4903      	ldr	r1, [pc, #12]	; (8001914 <test_rt+0x14>)

  /* Test execution.*/
  return test_execute_inner(tsp);
 8001906:	4804      	ldr	r0, [pc, #16]	; (8001918 <test_rt+0x18>)
  chtest.stream  = stream;
 8001908:	e9c3 1208 	strd	r1, r2, [r3, #32]
  return test_execute_inner(tsp);
 800190c:	f00e ba60 	b.w	800fdd0 <test_execute_inner.isra.0>
 8001910:	200010f4 	.word	0x200010f4
 8001914:	08000e51 	.word	0x08000e51
 8001918:	080125ac 	.word	0x080125ac
 800191c:	00000000 	.word	0x00000000

08001920 <test_oslib>:
  BaseSequentialStream *chp = (BaseSequentialStream *)arg;
  test_execute(chp, &rt_test_suite);
}

static THD_FUNCTION(test_oslib, arg) {
 8001920:	4602      	mov	r2, r0
  chtest.stream  = stream;
 8001922:	4b03      	ldr	r3, [pc, #12]	; (8001930 <test_oslib+0x10>)
  chtest.putchar = test_stream_putchar;
 8001924:	4903      	ldr	r1, [pc, #12]	; (8001934 <test_oslib+0x14>)
  return test_execute_inner(tsp);
 8001926:	4804      	ldr	r0, [pc, #16]	; (8001938 <test_oslib+0x18>)
  chtest.stream  = stream;
 8001928:	e9c3 1208 	strd	r1, r2, [r3, #32]
  return test_execute_inner(tsp);
 800192c:	f00e ba50 	b.w	800fdd0 <test_execute_inner.isra.0>
 8001930:	200010f4 	.word	0x200010f4
 8001934:	08000e51 	.word	0x08000e51
 8001938:	080120ac 	.word	0x080120ac
 800193c:	00000000 	.word	0x00000000

08001940 <rt_test_007_001_teardown>:
  chSemResetWithMessage(sp, n, MSG_RESET);
 8001940:	2100      	movs	r1, #0
 8001942:	4801      	ldr	r0, [pc, #4]	; (8001948 <rt_test_007_001_teardown+0x8>)
 8001944:	f00c bfbc 	b.w	800e8c0 <chSemResetWithMessage.constprop.0>
 8001948:	20001224 	.word	0x20001224
 800194c:	00000000 	.word	0x00000000

08001950 <__cpu_init>:

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
	...

08001960 <__late_init>:
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
	...

08001970 <__default_exit>:
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
/*lint -restore*/

  while (true) {
 8001970:	e7fe      	b.n	8001970 <__default_exit>
 8001972:	bf00      	nop
	...

08001980 <__init_ram_areas>:
#endif

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8001980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001982:	4d15      	ldr	r5, [pc, #84]	; (80019d8 <__init_ram_areas+0x58>)
 8001984:	4f15      	ldr	r7, [pc, #84]	; (80019dc <__init_ram_areas+0x5c>)
 8001986:	4916      	ldr	r1, [pc, #88]	; (80019e0 <__init_ram_areas+0x60>)
 8001988:	4816      	ldr	r0, [pc, #88]	; (80019e4 <__init_ram_areas+0x64>)
 800198a:	4a17      	ldr	r2, [pc, #92]	; (80019e8 <__init_ram_areas+0x68>)
 800198c:	f105 0470 	add.w	r4, r5, #112	; 0x70
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8001990:	4281      	cmp	r1, r0
 8001992:	d90d      	bls.n	80019b0 <__init_ram_areas+0x30>
 8001994:	4603      	mov	r3, r0
 8001996:	3a04      	subs	r2, #4
      *p = *tp;
 8001998:	f852 6f04 	ldr.w	r6, [r2, #4]!
 800199c:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->clear_area) {
 80019a0:	4299      	cmp	r1, r3
 80019a2:	d8f9      	bhi.n	8001998 <__init_ram_areas+0x18>
      p++;
 80019a4:	1e4b      	subs	r3, r1, #1
 80019a6:	1a1b      	subs	r3, r3, r0
 80019a8:	f023 0303 	bic.w	r3, r3, #3
 80019ac:	3304      	adds	r3, #4
 80019ae:	4418      	add	r0, r3
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 80019b0:	4287      	cmp	r7, r0
 80019b2:	d907      	bls.n	80019c4 <__init_ram_areas+0x44>
      *p = 0;
 80019b4:	1e7a      	subs	r2, r7, #1
 80019b6:	1a12      	subs	r2, r2, r0
 80019b8:	f022 0203 	bic.w	r2, r2, #3
 80019bc:	2100      	movs	r1, #0
 80019be:	3204      	adds	r2, #4
 80019c0:	f7fe fcfe 	bl	80003c0 <memset>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT0_AREAS_NUMBER]);
 80019c4:	42a5      	cmp	r5, r4
 80019c6:	d005      	beq.n	80019d4 <__init_ram_areas+0x54>
    uint32_t *p = rap->init_area;
 80019c8:	e9d5 2004 	ldrd	r2, r0, [r5, #16]
    while (p < rap->no_init_area) {
 80019cc:	e9d5 1706 	ldrd	r1, r7, [r5, #24]
 80019d0:	3510      	adds	r5, #16
 80019d2:	e7dd      	b.n	8001990 <__init_ram_areas+0x10>
     for self-modifying code.*/
  SCB_CleanDCache();
  SCB_InvalidateICache();
#endif
#endif
}
 80019d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019d6:	bf00      	nop
 80019d8:	080120dc 	.word	0x080120dc
 80019dc:	20002e10 	.word	0x20002e10
 80019e0:	20002e10 	.word	0x20002e10
 80019e4:	20002e10 	.word	0x20002e10
 80019e8:	08013474 	.word	0x08013474
 80019ec:	00000000 	.word	0x00000000

080019f0 <sdc_lld_is_write_protected>:
bool sdc_lld_sync(SDCDriver *sdcp) {

  /* CHTODO: Implement.*/
  (void)sdcp;
  return HAL_SUCCESS;
}
 80019f0:	2000      	movs	r0, #0
 80019f2:	4770      	bx	lr
	...

08001a00 <usbStartReceiveI>:
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001a00:	f04f 0c01 	mov.w	ip, #1
                      uint8_t *buf, size_t n) {
 8001a04:	b570      	push	{r4, r5, r6, lr}
  osp->rxcnt  = 0;
 8001a06:	2500      	movs	r5, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001a08:	8946      	ldrh	r6, [r0, #10]
  osp = usbp->epc[ep]->out_state;
 8001a0a:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 8001a0e:	68e4      	ldr	r4, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001a10:	fa0c fe01 	lsl.w	lr, ip, r1
 8001a14:	ea4e 0e06 	orr.w	lr, lr, r6
 8001a18:	f8a0 e00a 	strh.w	lr, [r0, #10]
  osp = usbp->epc[ep]->out_state;
 8001a1c:	69a0      	ldr	r0, [r4, #24]
  osp->rxcnt  = 0;
 8001a1e:	e9c0 5201 	strd	r5, r2, [r0, #4]
  osp->rxsize = n;
 8001a22:	6003      	str	r3, [r0, #0]
  if (osp->rxsize == 0U) {       /* Special case for zero sized packets.*/
 8001a24:	b133      	cbz	r3, 8001a34 <usbStartReceiveI+0x34>
    osp->rxpkts = (uint16_t)((osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 8001a26:	8a62      	ldrh	r2, [r4, #18]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	4413      	add	r3, r2
 8001a2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a30:	fa1f fc83 	uxth.w	ip, r3
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 8001a34:	4a08      	ldr	r2, [pc, #32]	; (8001a58 <usbStartReceiveI+0x58>)
 8001a36:	f8a0 c00c 	strh.w	ip, [r0, #12]
 8001a3a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001a3e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a46:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a52:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8001a56:	bd70      	pop	{r4, r5, r6, pc}
 8001a58:	40005c00 	.word	0x40005c00
 8001a5c:	00000000 	.word	0x00000000

08001a60 <ibnotify.lto_priv.0>:
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 8001a60:	6b43      	ldr	r3, [r0, #52]	; 0x34
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001a62:	f8d3 248c 	ldr.w	r2, [r3, #1164]	; 0x48c
 8001a66:	6810      	ldr	r0, [r2, #0]
 8001a68:	7801      	ldrb	r1, [r0, #0]
 8001a6a:	2904      	cmp	r1, #4
 8001a6c:	d000      	beq.n	8001a70 <ibnotify.lto_priv.0+0x10>
 8001a6e:	4770      	bx	lr
 8001a70:	7a19      	ldrb	r1, [r3, #8]
 8001a72:	2902      	cmp	r1, #2
 8001a74:	d1fb      	bne.n	8001a6e <ibnotify.lto_priv.0+0xe>
  if (usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 8001a76:	f04f 0c01 	mov.w	ip, #1
static void ibnotify(io_buffers_queue_t *bqp) {
 8001a7a:	b500      	push	{lr}
  if (usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 8001a7c:	7951      	ldrb	r1, [r2, #5]
 8001a7e:	f8b0 e00a 	ldrh.w	lr, [r0, #10]
 8001a82:	fa0c f201 	lsl.w	r2, ip, r1
 8001a86:	ea12 0f0e 	tst.w	r2, lr
 8001a8a:	d001      	beq.n	8001a90 <ibnotify.lto_priv.0+0x30>
}
 8001a8c:	f85d fb04 	ldr.w	pc, [sp], #4
  if (ibqIsFullI(ibqp)) {
 8001a90:	e9d3 2c07 	ldrd	r2, ip, [r3, #28]
 8001a94:	4562      	cmp	r2, ip
 8001a96:	d006      	beq.n	8001aa6 <ibnotify.lto_priv.0+0x46>
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 8001a98:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 8001a9c:	f85d eb04 	ldr.w	lr, [sp], #4
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 8001aa0:	3204      	adds	r2, #4
 8001aa2:	f7ff bfad 	b.w	8001a00 <usbStartReceiveI>
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1ef      	bne.n	8001a8c <ibnotify.lto_priv.0+0x2c>
 8001aac:	e7f4      	b.n	8001a98 <ibnotify.lto_priv.0+0x38>
 8001aae:	bf00      	nop

08001ab0 <_usb_ep0setup>:
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8001ab0:	b570      	push	{r4, r5, r6, lr}
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 8001ab2:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8001ab6:	4604      	mov	r4, r0
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 8001ab8:	b113      	cbz	r3, 8001ac0 <_usb_ep0setup+0x10>
    usbp->ep0state = USB_EP0_STP_WAITING;
 8001aba:	2300      	movs	r3, #0
 8001abc:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
  udp = USB_GET_DESCRIPTOR(ep);
 8001ac0:	4bba      	ldr	r3, [pc, #744]	; (8001dac <_usb_ep0setup+0x2fc>)
  usbReadSetup(usbp, ep, usbp->setup);
 8001ac2:	f104 0274 	add.w	r2, r4, #116	; 0x74
 8001ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ac8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001acc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8001ad0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
  pmap = USB_ADDR2PTR(udp->RXADDR0);
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001ada:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	f103 0010 	add.w	r0, r3, #16
 8001ae4:	4619      	mov	r1, r3
    *(uint16_t *)(void *)buf = (uint16_t)*pmap++;
 8001ae6:	3304      	adds	r3, #4
 8001ae8:	6809      	ldr	r1, [r1, #0]
  for (n = 0; n < 4; n++) {
 8001aea:	4283      	cmp	r3, r0
    *(uint16_t *)(void *)buf = (uint16_t)*pmap++;
 8001aec:	f822 1b02 	strh.w	r1, [r2], #2
  for (n = 0; n < 4; n++) {
 8001af0:	d1f8      	bne.n	8001ae4 <_usb_ep0setup+0x34>
  if ((usbp->config->requests_hook_cb == NULL) ||
 8001af2:	6863      	ldr	r3, [r4, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	b303      	cbz	r3, 8001b3a <_usb_ep0setup+0x8a>
      !(usbp->config->requests_hook_cb(usbp))) {
 8001af8:	4620      	mov	r0, r4
 8001afa:	4798      	blx	r3
  if ((usbp->config->requests_hook_cb == NULL) ||
 8001afc:	b1e8      	cbz	r0, 8001b3a <_usb_ep0setup+0x8a>
  if (usbp->ep0n > max) {
 8001afe:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8001b00:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
  max = (size_t)get_hword(&usbp->setup[6]);
 8001b04:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
  if (usbp->ep0n > max) {
 8001b08:	429a      	cmp	r2, r3
    usbp->ep0n = max;
 8001b0a:	bf3c      	itt	cc
 8001b0c:	4613      	movcc	r3, r2
 8001b0e:	66e2      	strcc	r2, [r4, #108]	; 0x6c
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8001b10:	060a      	lsls	r2, r1, #24
 8001b12:	f100 80d7 	bmi.w	8001cc4 <_usb_ep0setup+0x214>
    if (usbp->ep0n != 0U) {
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 8091 	beq.w	8001c3e <_usb_ep0setup+0x18e>
      usbp->ep0state = USB_EP0_OUT_RX;
 8001b1c:	2215      	movs	r2, #21
 8001b1e:	2330      	movs	r3, #48	; 0x30
 8001b20:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8001b24:	f383 8811 	msr	BASEPRI, r3
      usbStartReceiveI(usbp, 0, (uint8_t *)usbp->ep0next, usbp->ep0n);
 8001b28:	2100      	movs	r1, #0
 8001b2a:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
 8001b2e:	4620      	mov	r0, r4
 8001b30:	f7ff ff66 	bl	8001a00 <usbStartReceiveI>
 8001b34:	f381 8811 	msr	BASEPRI, r1
}
 8001b38:	bd70      	pop	{r4, r5, r6, pc}
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 8001b3a:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
 8001b3e:	f011 0660 	ands.w	r6, r1, #96	; 0x60
 8001b42:	d11c      	bne.n	8001b7e <_usb_ep0setup+0xce>
           ((uint32_t)usbp->setup[1] << 8U))) {
 8001b44:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001b48:	f001 037f 	and.w	r3, r1, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 8001b4c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001b50:	f240 3202 	movw	r2, #770	; 0x302
 8001b54:	4293      	cmp	r3, r2
 8001b56:	f000 8165 	beq.w	8001e24 <_usb_ep0setup+0x374>
 8001b5a:	d84f      	bhi.n	8001bfc <_usb_ep0setup+0x14c>
 8001b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b60:	f000 8114 	beq.w	8001d8c <_usb_ep0setup+0x2dc>
 8001b64:	d92a      	bls.n	8001bbc <_usb_ep0setup+0x10c>
 8001b66:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8001b6a:	f000 8127 	beq.w	8001dbc <_usb_ep0setup+0x30c>
 8001b6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b72:	d104      	bne.n	8001b7e <_usb_ep0setup+0xce>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8001b74:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	f000 80d2 	beq.w	8001d22 <_usb_ep0setup+0x272>
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8001b7e:	f248 0080 	movw	r0, #32896	; 0x8080
 8001b82:	498a      	ldr	r1, [pc, #552]	; (8001dac <_usb_ep0setup+0x2fc>)
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8001b84:	6863      	ldr	r3, [r4, #4]
 8001b86:	680a      	ldr	r2, [r1, #0]
 8001b88:	681d      	ldr	r5, [r3, #0]
 8001b8a:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8001b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b92:	f082 0210 	eor.w	r2, r2, #16
 8001b96:	4302      	orrs	r2, r0
 8001b98:	600a      	str	r2, [r1, #0]
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8001b9a:	680b      	ldr	r3, [r1, #0]
 8001b9c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ba4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001ba8:	4303      	orrs	r3, r0
 8001baa:	600b      	str	r3, [r1, #0]
 8001bac:	b115      	cbz	r5, 8001bb4 <_usb_ep0setup+0x104>
 8001bae:	2106      	movs	r1, #6
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	47a8      	blx	r5
      usbp->ep0state = USB_EP0_ERROR;
 8001bb4:	2306      	movs	r3, #6
 8001bb6:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 8001bba:	bd70      	pop	{r4, r5, r6, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d05b      	beq.n	8001c78 <_usb_ep0setup+0x1c8>
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d14b      	bne.n	8001c5c <_usb_ep0setup+0x1ac>
    if ((usbp->setup[4] & 0x80U) != 0U) {
 8001bc4:	f994 0078 	ldrsb.w	r0, [r4, #120]	; 0x78
 8001bc8:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 8001bcc:	2800      	cmp	r0, #0
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 8001bce:	4877      	ldr	r0, [pc, #476]	; (8001dac <_usb_ep0setup+0x2fc>)
 8001bd0:	f002 020f 	and.w	r2, r2, #15
 8001bd4:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8001bd8:	f2c0 8093 	blt.w	8001d02 <_usb_ep0setup+0x252>
  switch (STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) {
 8001bdc:	f412 5240 	ands.w	r2, r2, #12288	; 0x3000
 8001be0:	d0cd      	beq.n	8001b7e <_usb_ep0setup+0xce>
 8001be2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8001be6:	f04f 0002 	mov.w	r0, #2
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	f000 8093 	beq.w	8001d18 <_usb_ep0setup+0x268>
 8001bf2:	4d6f      	ldr	r5, [pc, #444]	; (8001db0 <_usb_ep0setup+0x300>)
 8001bf4:	6722      	str	r2, [r4, #112]	; 0x70
 8001bf6:	e9c4 501a 	strd	r5, r0, [r4, #104]	; 0x68
        return true;
 8001bfa:	e783      	b.n	8001b04 <_usb_ep0setup+0x54>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001bfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c00:	f000 8108 	beq.w	8001e14 <_usb_ep0setup+0x364>
 8001c04:	d940      	bls.n	8001c88 <_usb_ep0setup+0x1d8>
 8001c06:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8001c0a:	d131      	bne.n	8001c70 <_usb_ep0setup+0x1c0>
      if (usbp->state == USB_ACTIVE) {
 8001c0c:	7823      	ldrb	r3, [r4, #0]
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	f000 8091 	beq.w	8001d36 <_usb_ep0setup+0x286>
      if (usbp->setup[2] != 0U) {
 8001c14:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8001c18:	b14b      	cbz	r3, 8001c2e <_usb_ep0setup+0x17e>
        usbp->state = USB_ACTIVE;
 8001c1a:	2104      	movs	r1, #4
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8001c1c:	6862      	ldr	r2, [r4, #4]
        usbp->configuration = usbp->setup[2];
 8001c1e:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
        usbp->state = USB_ACTIVE;
 8001c22:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8001c24:	6813      	ldr	r3, [r2, #0]
 8001c26:	b113      	cbz	r3, 8001c2e <_usb_ep0setup+0x17e>
 8001c28:	2102      	movs	r1, #2
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	4798      	blx	r3
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8001c34:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8001c38:	6723      	str	r3, [r4, #112]	; 0x70
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8001c3a:	060b      	lsls	r3, r1, #24
 8001c3c:	d452      	bmi.n	8001ce4 <_usb_ep0setup+0x234>
      usbp->ep0state = USB_EP0_IN_SENDING_STS;
 8001c3e:	220b      	movs	r2, #11
 8001c40:	2330      	movs	r3, #48	; 0x30
 8001c42:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8001c46:	f383 8811 	msr	BASEPRI, r3
      usbStartTransmitI(usbp, 0, NULL, 0);
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	461a      	mov	r2, r3
 8001c50:	4619      	mov	r1, r3
 8001c52:	f7fe fedd 	bl	8000a10 <usbStartTransmitI>
 8001c56:	f381 8811 	msr	BASEPRI, r1
}
 8001c5a:	bd70      	pop	{r4, r5, r6, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d18e      	bne.n	8001b7e <_usb_ep0setup+0xce>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 8001c60:	2202      	movs	r2, #2
 8001c62:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8001c66:	6723      	str	r3, [r4, #112]	; 0x70
 8001c68:	66a0      	str	r0, [r4, #104]	; 0x68
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	66e2      	str	r2, [r4, #108]	; 0x6c
    return true;
 8001c6e:	e749      	b.n	8001b04 <_usb_ep0setup+0x54>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001c70:	f640 4202 	movw	r2, #3074	; 0xc02
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d182      	bne.n	8001b7e <_usb_ep0setup+0xce>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 8001c78:	2202      	movs	r2, #2
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	4b4d      	ldr	r3, [pc, #308]	; (8001db4 <_usb_ep0setup+0x304>)
 8001c7e:	e9c4 201b 	strd	r2, r0, [r4, #108]	; 0x6c
 8001c82:	66a3      	str	r3, [r4, #104]	; 0x68
 8001c84:	4613      	mov	r3, r2
 8001c86:	e73d      	b.n	8001b04 <_usb_ep0setup+0x54>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001c88:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001c8c:	f000 80bd 	beq.w	8001e0a <_usb_ep0setup+0x35a>
 8001c90:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	f63f af72 	bhi.w	8001b7e <_usb_ep0setup+0xce>
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8001c9a:	6862      	ldr	r2, [r4, #4]
 8001c9c:	4620      	mov	r0, r4
 8001c9e:	6855      	ldr	r5, [r2, #4]
 8001ca0:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
 8001ca4:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8001ca8:	f894 1077 	ldrb.w	r1, [r4, #119]	; 0x77
 8001cac:	47a8      	blx	r5
    if (dp == NULL) {
 8001cae:	2800      	cmp	r0, #0
 8001cb0:	f43f af65 	beq.w	8001b7e <_usb_ep0setup+0xce>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 8001cb4:	e9d0 3200 	ldrd	r3, r2, [r0]
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8001cb8:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 8001cbc:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
 8001cc0:	6726      	str	r6, [r4, #112]	; 0x70
    return true;
 8001cc2:	e71f      	b.n	8001b04 <_usb_ep0setup+0x54>
    if (usbp->ep0n != 0U) {
 8001cc4:	b173      	cbz	r3, 8001ce4 <_usb_ep0setup+0x234>
      usbp->ep0state = USB_EP0_IN_TX;
 8001cc6:	2209      	movs	r2, #9
 8001cc8:	2330      	movs	r3, #48	; 0x30
 8001cca:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8001cce:	f383 8811 	msr	BASEPRI, r3
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
 8001cd8:	4620      	mov	r0, r4
 8001cda:	f7fe fe99 	bl	8000a10 <usbStartTransmitI>
 8001cde:	f381 8811 	msr	BASEPRI, r1
}
 8001ce2:	bd70      	pop	{r4, r5, r6, pc}
      usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 8001ce4:	2214      	movs	r2, #20
 8001ce6:	2330      	movs	r3, #48	; 0x30
 8001ce8:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8001cec:	f383 8811 	msr	BASEPRI, r3
      usbStartReceiveI(usbp, 0, NULL, 0);
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	f7ff fe82 	bl	8001a00 <usbStartReceiveI>
 8001cfc:	f381 8811 	msr	BASEPRI, r1
}
 8001d00:	bd70      	pop	{r4, r5, r6, pc}
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 8001d02:	f012 0230 	ands.w	r2, r2, #48	; 0x30
 8001d06:	f43f af3a 	beq.w	8001b7e <_usb_ep0setup+0xce>
 8001d0a:	2a10      	cmp	r2, #16
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8001d0c:	f04f 0002 	mov.w	r0, #2
 8001d10:	f04f 0200 	mov.w	r2, #0
 8001d14:	f47f af6d 	bne.w	8001bf2 <_usb_ep0setup+0x142>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 8001d18:	4d27      	ldr	r5, [pc, #156]	; (8001db8 <_usb_ep0setup+0x308>)
 8001d1a:	6722      	str	r2, [r4, #112]	; 0x70
 8001d1c:	e9c4 501a 	strd	r5, r0, [r4, #104]	; 0x68
        return true;
 8001d20:	e6f0      	b.n	8001b04 <_usb_ep0setup+0x54>
      usbp->status |= 2U;
 8001d22:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8001d26:	e9c4 661b 	strd	r6, r6, [r4, #108]	; 0x6c
      usbp->status |= 2U;
 8001d2a:	f043 0302 	orr.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8001d2e:	66a6      	str	r6, [r4, #104]	; 0x68
      usbp->status |= 2U;
 8001d30:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
      return true;
 8001d34:	e781      	b.n	8001c3a <_usb_ep0setup+0x18a>
 8001d36:	2330      	movs	r3, #48	; 0x30
 8001d38:	f383 8811 	msr	BASEPRI, r3
  usbp->pmnext = 64U;
 8001d3c:	2140      	movs	r1, #64	; 0x40
  for (i = 1; i <= USB_ENDPOINTS_NUMBER; i++) {
 8001d3e:	2201      	movs	r2, #1
  usbp->transmitting &= 1U;
 8001d40:	68a3      	ldr	r3, [r4, #8]
    usbp->epc[i] = NULL;
 8001d42:	e9c4 6605 	strd	r6, r6, [r4, #20]
 8001d46:	e9c4 6607 	strd	r6, r6, [r4, #28]
 8001d4a:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
  usbp->transmitting &= 1U;
 8001d4e:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
    usbp->epc[i] = NULL;
 8001d52:	6126      	str	r6, [r4, #16]
  usbp->transmitting &= 1U;
 8001d54:	60a3      	str	r3, [r4, #8]
  usbp->pmnext = 64U;
 8001d56:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
    STM32_USB->EPR[i] = STM32_USB->EPR[i];
 8001d5a:	0093      	lsls	r3, r2, #2
 8001d5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001d60:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001d64:	6819      	ldr	r1, [r3, #0]
  for (i = 1; i <= USB_ENDPOINTS_NUMBER; i++) {
 8001d66:	3201      	adds	r2, #1
 8001d68:	2a08      	cmp	r2, #8
    STM32_USB->EPR[i] = STM32_USB->EPR[i];
 8001d6a:	6019      	str	r1, [r3, #0]
    STM32_USB->EPR[i] = 0U;
 8001d6c:	601e      	str	r6, [r3, #0]
  for (i = 1; i <= USB_ENDPOINTS_NUMBER; i++) {
 8001d6e:	d1f4      	bne.n	8001d5a <_usb_ep0setup+0x2aa>
 8001d70:	f386 8811 	msr	BASEPRI, r6
        usbp->state = USB_SELECTED;
 8001d74:	2103      	movs	r1, #3
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8001d76:	6863      	ldr	r3, [r4, #4]
        usbp->configuration = 0U;
 8001d78:	f884 607f 	strb.w	r6, [r4, #127]	; 0x7f
        usbp->state = USB_SELECTED;
 8001d7c:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f43f af47 	beq.w	8001c14 <_usb_ep0setup+0x164>
 8001d86:	4620      	mov	r0, r4
 8001d88:	4798      	blx	r3
 8001d8a:	e743      	b.n	8001c14 <_usb_ep0setup+0x164>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8001d8c:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	f47f aef4 	bne.w	8001b7e <_usb_ep0setup+0xce>
      usbp->status &= ~2U;
 8001d96:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8001d9a:	e9c4 661b 	strd	r6, r6, [r4, #108]	; 0x6c
      usbp->status &= ~2U;
 8001d9e:	f023 0302 	bic.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8001da2:	66a6      	str	r6, [r4, #104]	; 0x68
      usbp->status &= ~2U;
 8001da4:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
      return true;
 8001da8:	e747      	b.n	8001c3a <_usb_ep0setup+0x18a>
 8001daa:	bf00      	nop
 8001dac:	40005c00 	.word	0x40005c00
 8001db0:	08011b58 	.word	0x08011b58
 8001db4:	08012870 	.word	0x08012870
 8001db8:	08011e84 	.word	0x08011e84
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8001dbc:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f47f aedc 	bne.w	8001b7e <_usb_ep0setup+0xce>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8001dc6:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 8001dca:	f012 030f 	ands.w	r3, r2, #15
 8001dce:	d017      	beq.n	8001e00 <_usb_ep0setup+0x350>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001dd6:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001dda:	f012 0f80 	tst.w	r2, #128	; 0x80

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID) {
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	d13d      	bne.n	8001e5e <_usb_ep0setup+0x3ae>
  if ((STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) != EPR_STAT_RX_VALID) {
 8001de2:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8001de6:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8001dea:	d009      	beq.n	8001e00 <_usb_ep0setup+0x350>
    EPR_SET_STAT_TX(ep, EPR_STAT_RX_NAK);
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8001df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001df6:	f442 4220 	orr.w	r2, r2, #40960	; 0xa000
 8001dfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dfe:	601a      	str	r2, [r3, #0]
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8001e00:	2300      	movs	r3, #0
 8001e02:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 8001e06:	6723      	str	r3, [r4, #112]	; 0x70
    return true;
 8001e08:	e717      	b.n	8001c3a <_usb_ep0setup+0x18a>
    usbSetupTransfer(usbp, NULL, 0, set_address);
 8001e0a:	4b24      	ldr	r3, [pc, #144]	; (8001e9c <_usb_ep0setup+0x3ec>)
 8001e0c:	e9c4 661a 	strd	r6, r6, [r4, #104]	; 0x68
 8001e10:	6723      	str	r3, [r4, #112]	; 0x70
    return true;
 8001e12:	e712      	b.n	8001c3a <_usb_ep0setup+0x18a>
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 8001e14:	2201      	movs	r2, #1
 8001e16:	f104 037f 	add.w	r3, r4, #127	; 0x7f
 8001e1a:	66a3      	str	r3, [r4, #104]	; 0x68
 8001e1c:	6726      	str	r6, [r4, #112]	; 0x70
 8001e1e:	4613      	mov	r3, r2
 8001e20:	66e2      	str	r2, [r4, #108]	; 0x6c
    return true;
 8001e22:	e66f      	b.n	8001b04 <_usb_ep0setup+0x54>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8001e24:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f47f aea8 	bne.w	8001b7e <_usb_ep0setup+0xce>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8001e2e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
 8001e32:	f013 020f 	ands.w	r2, r3, #15
 8001e36:	d0e3      	beq.n	8001e00 <_usb_ep0setup+0x350>
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8001e38:	4819      	ldr	r0, [pc, #100]	; (8001ea0 <_usb_ep0setup+0x3f0>)
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8001e3a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001e3e:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8001e42:	d11d      	bne.n	8001e80 <_usb_ep0setup+0x3d0>
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8001e44:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e4c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001e50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e58:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 8001e5c:	e7d0      	b.n	8001e00 <_usb_ep0setup+0x350>
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID) {
 8001e5e:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8001e62:	2a30      	cmp	r2, #48	; 0x30
 8001e64:	d0cc      	beq.n	8001e00 <_usb_ep0setup+0x350>
    EPR_SET_STAT_TX(ep, EPR_STAT_TX_NAK);
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8001e6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e70:	f082 0220 	eor.w	r2, r2, #32
 8001e74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	e7bf      	b.n	8001e00 <_usb_ep0setup+0x350>
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8001e80:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8001e84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e88:	f083 0310 	eor.w	r3, r3, #16
 8001e8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e94:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 8001e98:	e7b2      	b.n	8001e00 <_usb_ep0setup+0x350>
 8001e9a:	bf00      	nop
 8001e9c:	080009e1 	.word	0x080009e1
 8001ea0:	40005c00 	.word	0x40005c00
	...

08001eb0 <_usb_ep0in>:
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8001eb0:	b538      	push	{r3, r4, r5, lr}
  switch (usbp->ep0state) {
 8001eb2:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8001eb6:	4604      	mov	r4, r0
  switch (usbp->ep0state) {
 8001eb8:	2b15      	cmp	r3, #21
 8001eba:	d81f      	bhi.n	8001efc <_usb_ep0in+0x4c>
 8001ebc:	e8df f003 	tbb	[pc, r3]
 8001ec0:	1e1e1e1f 	.word	0x1e1e1e1f
 8001ec4:	1e1f1e1e 	.word	0x1e1f1e1e
 8001ec8:	3e100b1e 	.word	0x3e100b1e
 8001ecc:	1e1e1e1e 	.word	0x1e1e1e1e
 8001ed0:	1e1e1e1e 	.word	0x1e1e1e1e
 8001ed4:	1f1f      	.short	0x1f1f
    if ((usbp->ep0n < max) &&
 8001ed6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    max = (size_t)get_hword(&usbp->setup[6]);
 8001ed8:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
    if ((usbp->ep0n < max) &&
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d334      	bcc.n	8001f4a <_usb_ep0in+0x9a>
    usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 8001ee0:	2214      	movs	r2, #20
 8001ee2:	2330      	movs	r3, #48	; 0x30
 8001ee4:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8001ee8:	f383 8811 	msr	BASEPRI, r3
    usbStartReceiveI(usbp, 0, NULL, 0);
 8001eec:	2300      	movs	r3, #0
 8001eee:	4620      	mov	r0, r4
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f7ff fd84 	bl	8001a00 <usbStartReceiveI>
 8001ef8:	f381 8811 	msr	BASEPRI, r1
}
 8001efc:	bd38      	pop	{r3, r4, r5, pc}
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8001efe:	f248 0080 	movw	r0, #32896	; 0x8080
 8001f02:	491c      	ldr	r1, [pc, #112]	; (8001f74 <_usb_ep0in+0xc4>)
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8001f04:	6863      	ldr	r3, [r4, #4]
 8001f06:	680a      	ldr	r2, [r1, #0]
 8001f08:	681d      	ldr	r5, [r3, #0]
 8001f0a:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8001f0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f12:	f082 0210 	eor.w	r2, r2, #16
 8001f16:	4302      	orrs	r2, r0
 8001f18:	600a      	str	r2, [r1, #0]
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8001f1a:	680b      	ldr	r3, [r1, #0]
 8001f1c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f24:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001f28:	4303      	orrs	r3, r0
 8001f2a:	600b      	str	r3, [r1, #0]
 8001f2c:	b115      	cbz	r5, 8001f34 <_usb_ep0in+0x84>
 8001f2e:	2106      	movs	r1, #6
 8001f30:	4620      	mov	r0, r4
 8001f32:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 8001f34:	2306      	movs	r3, #6
 8001f36:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 8001f3a:	bd38      	pop	{r3, r4, r5, pc}
    if (usbp->ep0endcb != NULL) {
 8001f3c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8001f3e:	b103      	cbz	r3, 8001f42 <_usb_ep0in+0x92>
      usbp->ep0endcb(usbp);
 8001f40:	4798      	blx	r3
    usbp->ep0state = USB_EP0_STP_WAITING;
 8001f42:	2300      	movs	r3, #0
 8001f44:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 8001f48:	bd38      	pop	{r3, r4, r5, pc}
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 8001f4a:	68c2      	ldr	r2, [r0, #12]
 8001f4c:	8a11      	ldrh	r1, [r2, #16]
 8001f4e:	fbb3 f2f1 	udiv	r2, r3, r1
 8001f52:	fb01 3112 	mls	r1, r1, r2, r3
    if ((usbp->ep0n < max) &&
 8001f56:	2900      	cmp	r1, #0
 8001f58:	d1c2      	bne.n	8001ee0 <_usb_ep0in+0x30>
 8001f5a:	2330      	movs	r3, #48	; 0x30
 8001f5c:	f383 8811 	msr	BASEPRI, r3
      usbStartTransmitI(usbp, 0, NULL, 0);
 8001f60:	460b      	mov	r3, r1
 8001f62:	460a      	mov	r2, r1
 8001f64:	f7fe fd54 	bl	8000a10 <usbStartTransmitI>
 8001f68:	f381 8811 	msr	BASEPRI, r1
      usbp->ep0state = USB_EP0_IN_WAITING_TX0;
 8001f6c:	230a      	movs	r3, #10
 8001f6e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 8001f72:	bd38      	pop	{r3, r4, r5, pc}
 8001f74:	40005c00 	.word	0x40005c00
	...

08001f80 <Vector6C>:
/**
 * @brief   DMA1 stream 1 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8001f80:	b508      	push	{r3, lr}
 */
void dmaServeInterrupt(const stm32_dma_stream_t *dmastp) {
  uint32_t flags;
  uint32_t selfindex = (uint32_t)dmastp->selfindex;

  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001f82:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <Vector6C+0x58>)
 8001f84:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 8001f86:	689a      	ldr	r2, [r3, #8]
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001f88:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 8001f8c:	4211      	tst	r1, r2
 8001f8e:	d005      	beq.n	8001f9c <Vector6C+0x1c>
    dmastp->dma->IFCR = flags << dmastp->shift;
    if (dma.streams[selfindex].func) {
 8001f90:	4a12      	ldr	r2, [pc, #72]	; (8001fdc <Vector6C+0x5c>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001f92:	6059      	str	r1, [r3, #4]
    if (dma.streams[selfindex].func) {
 8001f94:	6893      	ldr	r3, [r2, #8]
 8001f96:	b10b      	cbz	r3, 8001f9c <Vector6C+0x1c>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 8001f98:	68d0      	ldr	r0, [r2, #12]
 8001f9a:	4798      	blx	r3
 8001f9c:	2330      	movs	r3, #48	; 0x30
 8001f9e:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to @p __port_switch_from_isr().
 */
void __port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <Vector6C+0x60>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8001faa:	d102      	bne.n	8001fb2 <Vector6C+0x32>
 8001fac:	f383 8811 	msr	BASEPRI, r3
}
 8001fb0:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001fb2:	f3ef 8309 	mrs	r3, PSP

    /* The port_extctx structure is pointed by the S-PSP register.*/
    ectxp = (struct port_extctx *)psp;

    /* Setting up a fake XPSR register value.*/
    ectxp->xpsr = 0x01000000U;
 8001fb6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    psp -= sizeof (struct port_extctx);
 8001fba:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8001fbc:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001fbe:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8001fc2:	4a08      	ldr	r2, [pc, #32]	; (8001fe4 <Vector6C+0x64>)
 8001fc4:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8001fc6:	68d2      	ldr	r2, [r2, #12]
    /* Writing back the modified S-PSP value.*/
    __set_PSP(psp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8001fc8:	6889      	ldr	r1, [r1, #8]
 8001fca:	6892      	ldr	r2, [r2, #8]
 8001fcc:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8001fce:	bf8c      	ite	hi
 8001fd0:	4a05      	ldrhi	r2, [pc, #20]	; (8001fe8 <Vector6C+0x68>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8001fd2:	4a06      	ldrls	r2, [pc, #24]	; (8001fec <Vector6C+0x6c>)
 8001fd4:	619a      	str	r2, [r3, #24]
 8001fd6:	bd08      	pop	{r3, pc}
 8001fd8:	40020000 	.word	0x40020000
 8001fdc:	20001140 	.word	0x20001140
 8001fe0:	e000ed00 	.word	0xe000ed00
 8001fe4:	20001050 	.word	0x20001050
 8001fe8:	08000263 	.word	0x08000263
 8001fec:	08000266 	.word	0x08000266

08001ff0 <Vector70>:
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001ff0:	4b16      	ldr	r3, [pc, #88]	; (800204c <Vector70+0x5c>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8001ff2:	b510      	push	{r4, lr}
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001ff4:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 8001ff6:	69da      	ldr	r2, [r3, #28]
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001ff8:	0909      	lsrs	r1, r1, #4
 8001ffa:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 8001ffe:	4211      	tst	r1, r2
 8002000:	d006      	beq.n	8002010 <Vector70+0x20>
    if (dma.streams[selfindex].func) {
 8002002:	4813      	ldr	r0, [pc, #76]	; (8002050 <Vector70+0x60>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 8002004:	010a      	lsls	r2, r1, #4
    if (dma.streams[selfindex].func) {
 8002006:	6904      	ldr	r4, [r0, #16]
    dmastp->dma->IFCR = flags << dmastp->shift;
 8002008:	605a      	str	r2, [r3, #4]
    if (dma.streams[selfindex].func) {
 800200a:	b10c      	cbz	r4, 8002010 <Vector70+0x20>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 800200c:	6940      	ldr	r0, [r0, #20]
 800200e:	47a0      	blx	r4
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002010:	2330      	movs	r3, #48	; 0x30
 8002012:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8002016:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <Vector70+0x64>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800201e:	d102      	bne.n	8002026 <Vector70+0x36>
 8002020:	f383 8811 	msr	BASEPRI, r3
}
 8002024:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002026:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 800202a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    psp -= sizeof (struct port_extctx);
 800202e:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8002030:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002032:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8002036:	4a08      	ldr	r2, [pc, #32]	; (8002058 <Vector70+0x68>)
 8002038:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 800203a:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 800203c:	6889      	ldr	r1, [r1, #8]
 800203e:	6892      	ldr	r2, [r2, #8]
 8002040:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8002042:	bf8c      	ite	hi
 8002044:	4a05      	ldrhi	r2, [pc, #20]	; (800205c <Vector70+0x6c>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8002046:	4a06      	ldrls	r2, [pc, #24]	; (8002060 <Vector70+0x70>)
 8002048:	619a      	str	r2, [r3, #24]
 800204a:	bd10      	pop	{r4, pc}
 800204c:	40020000 	.word	0x40020000
 8002050:	20001140 	.word	0x20001140
 8002054:	e000ed00 	.word	0xe000ed00
 8002058:	20001050 	.word	0x20001050
 800205c:	08000263 	.word	0x08000263
 8002060:	08000266 	.word	0x08000266
	...

08002070 <Vector74>:
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8002070:	4b16      	ldr	r3, [pc, #88]	; (80020cc <Vector74+0x5c>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8002072:	b510      	push	{r4, lr}
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8002074:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 8002076:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8002078:	0a09      	lsrs	r1, r1, #8
 800207a:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 800207e:	4211      	tst	r1, r2
 8002080:	d006      	beq.n	8002090 <Vector74+0x20>
    if (dma.streams[selfindex].func) {
 8002082:	4813      	ldr	r0, [pc, #76]	; (80020d0 <Vector74+0x60>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 8002084:	020a      	lsls	r2, r1, #8
    if (dma.streams[selfindex].func) {
 8002086:	6984      	ldr	r4, [r0, #24]
    dmastp->dma->IFCR = flags << dmastp->shift;
 8002088:	605a      	str	r2, [r3, #4]
    if (dma.streams[selfindex].func) {
 800208a:	b10c      	cbz	r4, 8002090 <Vector74+0x20>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 800208c:	69c0      	ldr	r0, [r0, #28]
 800208e:	47a0      	blx	r4
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002090:	2330      	movs	r3, #48	; 0x30
 8002092:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8002096:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <Vector74+0x64>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800209e:	d102      	bne.n	80020a6 <Vector74+0x36>
 80020a0:	f383 8811 	msr	BASEPRI, r3
}
 80020a4:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80020a6:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 80020aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    psp -= sizeof (struct port_extctx);
 80020ae:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 80020b0:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80020b2:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 80020b6:	4a08      	ldr	r2, [pc, #32]	; (80020d8 <Vector74+0x68>)
 80020b8:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 80020ba:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 80020bc:	6889      	ldr	r1, [r1, #8]
 80020be:	6892      	ldr	r2, [r2, #8]
 80020c0:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 80020c2:	bf8c      	ite	hi
 80020c4:	4a05      	ldrhi	r2, [pc, #20]	; (80020dc <Vector74+0x6c>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 80020c6:	4a06      	ldrls	r2, [pc, #24]	; (80020e0 <Vector74+0x70>)
 80020c8:	619a      	str	r2, [r3, #24]
 80020ca:	bd10      	pop	{r4, pc}
 80020cc:	40020000 	.word	0x40020000
 80020d0:	20001140 	.word	0x20001140
 80020d4:	e000ed00 	.word	0xe000ed00
 80020d8:	20001050 	.word	0x20001050
 80020dc:	08000263 	.word	0x08000263
 80020e0:	08000266 	.word	0x08000266
	...

080020f0 <Vector78>:
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 80020f0:	4b16      	ldr	r3, [pc, #88]	; (800214c <Vector78+0x5c>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 80020f2:	b510      	push	{r4, lr}
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 80020f4:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 80020f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 80020f8:	0b09      	lsrs	r1, r1, #12
 80020fa:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 80020fe:	4211      	tst	r1, r2
 8002100:	d006      	beq.n	8002110 <Vector78+0x20>
    if (dma.streams[selfindex].func) {
 8002102:	4813      	ldr	r0, [pc, #76]	; (8002150 <Vector78+0x60>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 8002104:	030a      	lsls	r2, r1, #12
    if (dma.streams[selfindex].func) {
 8002106:	6a04      	ldr	r4, [r0, #32]
    dmastp->dma->IFCR = flags << dmastp->shift;
 8002108:	605a      	str	r2, [r3, #4]
    if (dma.streams[selfindex].func) {
 800210a:	b10c      	cbz	r4, 8002110 <Vector78+0x20>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 800210c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800210e:	47a0      	blx	r4
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002110:	2330      	movs	r3, #48	; 0x30
 8002112:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8002116:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <Vector78+0x64>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800211e:	d102      	bne.n	8002126 <Vector78+0x36>
 8002120:	f383 8811 	msr	BASEPRI, r3
}
 8002124:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002126:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 800212a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    psp -= sizeof (struct port_extctx);
 800212e:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8002130:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002132:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8002136:	4a08      	ldr	r2, [pc, #32]	; (8002158 <Vector78+0x68>)
 8002138:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 800213a:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 800213c:	6889      	ldr	r1, [r1, #8]
 800213e:	6892      	ldr	r2, [r2, #8]
 8002140:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8002142:	bf8c      	ite	hi
 8002144:	4a05      	ldrhi	r2, [pc, #20]	; (800215c <Vector78+0x6c>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8002146:	4a06      	ldrls	r2, [pc, #24]	; (8002160 <Vector78+0x70>)
 8002148:	619a      	str	r2, [r3, #24]
 800214a:	bd10      	pop	{r4, pc}
 800214c:	40020000 	.word	0x40020000
 8002150:	20001140 	.word	0x20001140
 8002154:	e000ed00 	.word	0xe000ed00
 8002158:	20001050 	.word	0x20001050
 800215c:	08000263 	.word	0x08000263
 8002160:	08000266 	.word	0x08000266
	...

08002170 <Vector7C>:
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8002170:	4b16      	ldr	r3, [pc, #88]	; (80021cc <Vector7C+0x5c>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8002172:	b510      	push	{r4, lr}
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8002174:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 8002176:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8002178:	0c09      	lsrs	r1, r1, #16
 800217a:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 800217e:	4211      	tst	r1, r2
 8002180:	d006      	beq.n	8002190 <Vector7C+0x20>
    if (dma.streams[selfindex].func) {
 8002182:	4813      	ldr	r0, [pc, #76]	; (80021d0 <Vector7C+0x60>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 8002184:	040a      	lsls	r2, r1, #16
    if (dma.streams[selfindex].func) {
 8002186:	6a84      	ldr	r4, [r0, #40]	; 0x28
    dmastp->dma->IFCR = flags << dmastp->shift;
 8002188:	605a      	str	r2, [r3, #4]
    if (dma.streams[selfindex].func) {
 800218a:	b10c      	cbz	r4, 8002190 <Vector7C+0x20>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 800218c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800218e:	47a0      	blx	r4
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002190:	2330      	movs	r3, #48	; 0x30
 8002192:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8002196:	4b0f      	ldr	r3, [pc, #60]	; (80021d4 <Vector7C+0x64>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800219e:	d102      	bne.n	80021a6 <Vector7C+0x36>
 80021a0:	f383 8811 	msr	BASEPRI, r3
}
 80021a4:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80021a6:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 80021aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    psp -= sizeof (struct port_extctx);
 80021ae:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 80021b0:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80021b2:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 80021b6:	4a08      	ldr	r2, [pc, #32]	; (80021d8 <Vector7C+0x68>)
 80021b8:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 80021ba:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 80021bc:	6889      	ldr	r1, [r1, #8]
 80021be:	6892      	ldr	r2, [r2, #8]
 80021c0:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 80021c2:	bf8c      	ite	hi
 80021c4:	4a05      	ldrhi	r2, [pc, #20]	; (80021dc <Vector7C+0x6c>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 80021c6:	4a06      	ldrls	r2, [pc, #24]	; (80021e0 <Vector7C+0x70>)
 80021c8:	619a      	str	r2, [r3, #24]
 80021ca:	bd10      	pop	{r4, pc}
 80021cc:	40020000 	.word	0x40020000
 80021d0:	20001140 	.word	0x20001140
 80021d4:	e000ed00 	.word	0xe000ed00
 80021d8:	20001050 	.word	0x20001050
 80021dc:	08000263 	.word	0x08000263
 80021e0:	08000266 	.word	0x08000266
	...

080021f0 <Vector80>:
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 80021f0:	4b16      	ldr	r3, [pc, #88]	; (800224c <Vector80+0x5c>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 80021f2:	b510      	push	{r4, lr}
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 80021f4:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 80021f6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 80021f8:	0d09      	lsrs	r1, r1, #20
 80021fa:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 80021fe:	4211      	tst	r1, r2
 8002200:	d006      	beq.n	8002210 <Vector80+0x20>
    if (dma.streams[selfindex].func) {
 8002202:	4813      	ldr	r0, [pc, #76]	; (8002250 <Vector80+0x60>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 8002204:	050a      	lsls	r2, r1, #20
    if (dma.streams[selfindex].func) {
 8002206:	6b04      	ldr	r4, [r0, #48]	; 0x30
    dmastp->dma->IFCR = flags << dmastp->shift;
 8002208:	605a      	str	r2, [r3, #4]
    if (dma.streams[selfindex].func) {
 800220a:	b10c      	cbz	r4, 8002210 <Vector80+0x20>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 800220c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800220e:	47a0      	blx	r4
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002210:	2330      	movs	r3, #48	; 0x30
 8002212:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8002216:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <Vector80+0x64>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800221e:	d102      	bne.n	8002226 <Vector80+0x36>
 8002220:	f383 8811 	msr	BASEPRI, r3
}
 8002224:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002226:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 800222a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    psp -= sizeof (struct port_extctx);
 800222e:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8002230:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002232:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8002236:	4a08      	ldr	r2, [pc, #32]	; (8002258 <Vector80+0x68>)
 8002238:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 800223a:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 800223c:	6889      	ldr	r1, [r1, #8]
 800223e:	6892      	ldr	r2, [r2, #8]
 8002240:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8002242:	bf8c      	ite	hi
 8002244:	4a05      	ldrhi	r2, [pc, #20]	; (800225c <Vector80+0x6c>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8002246:	4a06      	ldrls	r2, [pc, #24]	; (8002260 <Vector80+0x70>)
 8002248:	619a      	str	r2, [r3, #24]
 800224a:	bd10      	pop	{r4, pc}
 800224c:	40020000 	.word	0x40020000
 8002250:	20001140 	.word	0x20001140
 8002254:	e000ed00 	.word	0xe000ed00
 8002258:	20001050 	.word	0x20001050
 800225c:	08000263 	.word	0x08000263
 8002260:	08000266 	.word	0x08000266
	...

08002270 <Vector84>:
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8002270:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <Vector84+0x60>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8002272:	b510      	push	{r4, lr}
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8002274:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 8002276:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 800227a:	0e09      	lsrs	r1, r1, #24
 800227c:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 8002280:	4211      	tst	r1, r2
 8002282:	d006      	beq.n	8002292 <Vector84+0x22>
    if (dma.streams[selfindex].func) {
 8002284:	4813      	ldr	r0, [pc, #76]	; (80022d4 <Vector84+0x64>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 8002286:	060a      	lsls	r2, r1, #24
    if (dma.streams[selfindex].func) {
 8002288:	6b84      	ldr	r4, [r0, #56]	; 0x38
    dmastp->dma->IFCR = flags << dmastp->shift;
 800228a:	605a      	str	r2, [r3, #4]
    if (dma.streams[selfindex].func) {
 800228c:	b10c      	cbz	r4, 8002292 <Vector84+0x22>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 800228e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8002290:	47a0      	blx	r4
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002292:	2330      	movs	r3, #48	; 0x30
 8002294:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8002298:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <Vector84+0x68>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80022a0:	d102      	bne.n	80022a8 <Vector84+0x38>
 80022a2:	f383 8811 	msr	BASEPRI, r3
}
 80022a6:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80022a8:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 80022ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    psp -= sizeof (struct port_extctx);
 80022b0:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 80022b2:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80022b4:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 80022b8:	4a08      	ldr	r2, [pc, #32]	; (80022dc <Vector84+0x6c>)
 80022ba:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 80022bc:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 80022be:	6889      	ldr	r1, [r1, #8]
 80022c0:	6892      	ldr	r2, [r2, #8]
 80022c2:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 80022c4:	bf8c      	ite	hi
 80022c6:	4a06      	ldrhi	r2, [pc, #24]	; (80022e0 <Vector84+0x70>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 80022c8:	4a06      	ldrls	r2, [pc, #24]	; (80022e4 <Vector84+0x74>)
 80022ca:	619a      	str	r2, [r3, #24]
 80022cc:	bd10      	pop	{r4, pc}
 80022ce:	bf00      	nop
 80022d0:	40020000 	.word	0x40020000
 80022d4:	20001140 	.word	0x20001140
 80022d8:	e000ed00 	.word	0xe000ed00
 80022dc:	20001050 	.word	0x20001050
 80022e0:	08000263 	.word	0x08000263
 80022e4:	08000266 	.word	0x08000266
	...

080022f0 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 80022f0:	b508      	push	{r3, lr}
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 80022f2:	4b15      	ldr	r3, [pc, #84]	; (8002348 <Vector120+0x58>)
 80022f4:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 80022f6:	689a      	ldr	r2, [r3, #8]
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 80022f8:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 80022fc:	4211      	tst	r1, r2
 80022fe:	d005      	beq.n	800230c <Vector120+0x1c>
    if (dma.streams[selfindex].func) {
 8002300:	4a12      	ldr	r2, [pc, #72]	; (800234c <Vector120+0x5c>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 8002302:	6059      	str	r1, [r3, #4]
    if (dma.streams[selfindex].func) {
 8002304:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002306:	b10b      	cbz	r3, 800230c <Vector120+0x1c>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 8002308:	6c50      	ldr	r0, [r2, #68]	; 0x44
 800230a:	4798      	blx	r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800230c:	2330      	movs	r3, #48	; 0x30
 800230e:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8002312:	4b0f      	ldr	r3, [pc, #60]	; (8002350 <Vector120+0x60>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800231a:	d102      	bne.n	8002322 <Vector120+0x32>
 800231c:	f383 8811 	msr	BASEPRI, r3
}
 8002320:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002322:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8002326:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    psp -= sizeof (struct port_extctx);
 800232a:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 800232c:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800232e:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8002332:	4a08      	ldr	r2, [pc, #32]	; (8002354 <Vector120+0x64>)
 8002334:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8002336:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8002338:	6889      	ldr	r1, [r1, #8]
 800233a:	6892      	ldr	r2, [r2, #8]
 800233c:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 800233e:	bf8c      	ite	hi
 8002340:	4a05      	ldrhi	r2, [pc, #20]	; (8002358 <Vector120+0x68>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8002342:	4a06      	ldrls	r2, [pc, #24]	; (800235c <Vector120+0x6c>)
 8002344:	619a      	str	r2, [r3, #24]
 8002346:	bd08      	pop	{r3, pc}
 8002348:	40020400 	.word	0x40020400
 800234c:	20001140 	.word	0x20001140
 8002350:	e000ed00 	.word	0xe000ed00
 8002354:	20001050 	.word	0x20001050
 8002358:	08000263 	.word	0x08000263
 800235c:	08000266 	.word	0x08000266

08002360 <Vector124>:
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8002360:	4b16      	ldr	r3, [pc, #88]	; (80023bc <Vector124+0x5c>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 8002362:	b510      	push	{r4, lr}
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8002364:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 8002366:	69da      	ldr	r2, [r3, #28]
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8002368:	0909      	lsrs	r1, r1, #4
 800236a:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 800236e:	4211      	tst	r1, r2
 8002370:	d006      	beq.n	8002380 <Vector124+0x20>
    if (dma.streams[selfindex].func) {
 8002372:	4813      	ldr	r0, [pc, #76]	; (80023c0 <Vector124+0x60>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 8002374:	010a      	lsls	r2, r1, #4
    if (dma.streams[selfindex].func) {
 8002376:	6c84      	ldr	r4, [r0, #72]	; 0x48
    dmastp->dma->IFCR = flags << dmastp->shift;
 8002378:	605a      	str	r2, [r3, #4]
    if (dma.streams[selfindex].func) {
 800237a:	b10c      	cbz	r4, 8002380 <Vector124+0x20>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 800237c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800237e:	47a0      	blx	r4
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002380:	2330      	movs	r3, #48	; 0x30
 8002382:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8002386:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <Vector124+0x64>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800238e:	d102      	bne.n	8002396 <Vector124+0x36>
 8002390:	f383 8811 	msr	BASEPRI, r3
}
 8002394:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002396:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 800239a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    psp -= sizeof (struct port_extctx);
 800239e:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 80023a0:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80023a2:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 80023a6:	4a08      	ldr	r2, [pc, #32]	; (80023c8 <Vector124+0x68>)
 80023a8:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 80023aa:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 80023ac:	6889      	ldr	r1, [r1, #8]
 80023ae:	6892      	ldr	r2, [r2, #8]
 80023b0:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 80023b2:	bf8c      	ite	hi
 80023b4:	4a05      	ldrhi	r2, [pc, #20]	; (80023cc <Vector124+0x6c>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 80023b6:	4a06      	ldrls	r2, [pc, #24]	; (80023d0 <Vector124+0x70>)
 80023b8:	619a      	str	r2, [r3, #24]
 80023ba:	bd10      	pop	{r4, pc}
 80023bc:	40020400 	.word	0x40020400
 80023c0:	20001140 	.word	0x20001140
 80023c4:	e000ed00 	.word	0xe000ed00
 80023c8:	20001050 	.word	0x20001050
 80023cc:	08000263 	.word	0x08000263
 80023d0:	08000266 	.word	0x08000266
	...

080023e0 <Vector128>:
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 80023e0:	4b16      	ldr	r3, [pc, #88]	; (800243c <Vector128+0x5c>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 80023e2:	b510      	push	{r4, lr}
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 80023e4:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 80023e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 80023e8:	0a09      	lsrs	r1, r1, #8
 80023ea:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 80023ee:	4211      	tst	r1, r2
 80023f0:	d006      	beq.n	8002400 <Vector128+0x20>
    if (dma.streams[selfindex].func) {
 80023f2:	4813      	ldr	r0, [pc, #76]	; (8002440 <Vector128+0x60>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 80023f4:	020a      	lsls	r2, r1, #8
    if (dma.streams[selfindex].func) {
 80023f6:	6d04      	ldr	r4, [r0, #80]	; 0x50
    dmastp->dma->IFCR = flags << dmastp->shift;
 80023f8:	605a      	str	r2, [r3, #4]
    if (dma.streams[selfindex].func) {
 80023fa:	b10c      	cbz	r4, 8002400 <Vector128+0x20>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 80023fc:	6d40      	ldr	r0, [r0, #84]	; 0x54
 80023fe:	47a0      	blx	r4
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002400:	2330      	movs	r3, #48	; 0x30
 8002402:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <Vector128+0x64>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800240e:	d102      	bne.n	8002416 <Vector128+0x36>
 8002410:	f383 8811 	msr	BASEPRI, r3
}
 8002414:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002416:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 800241a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    psp -= sizeof (struct port_extctx);
 800241e:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8002420:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002422:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8002426:	4a08      	ldr	r2, [pc, #32]	; (8002448 <Vector128+0x68>)
 8002428:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 800242a:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 800242c:	6889      	ldr	r1, [r1, #8]
 800242e:	6892      	ldr	r2, [r2, #8]
 8002430:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8002432:	bf8c      	ite	hi
 8002434:	4a05      	ldrhi	r2, [pc, #20]	; (800244c <Vector128+0x6c>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8002436:	4a06      	ldrls	r2, [pc, #24]	; (8002450 <Vector128+0x70>)
 8002438:	619a      	str	r2, [r3, #24]
 800243a:	bd10      	pop	{r4, pc}
 800243c:	40020400 	.word	0x40020400
 8002440:	20001140 	.word	0x20001140
 8002444:	e000ed00 	.word	0xe000ed00
 8002448:	20001050 	.word	0x20001050
 800244c:	08000263 	.word	0x08000263
 8002450:	08000266 	.word	0x08000266
	...

08002460 <Vector12C>:
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8002460:	4b16      	ldr	r3, [pc, #88]	; (80024bc <Vector12C+0x5c>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8002462:	b510      	push	{r4, lr}
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8002464:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 8002466:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8002468:	0b09      	lsrs	r1, r1, #12
 800246a:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 800246e:	4211      	tst	r1, r2
 8002470:	d006      	beq.n	8002480 <Vector12C+0x20>
    if (dma.streams[selfindex].func) {
 8002472:	4813      	ldr	r0, [pc, #76]	; (80024c0 <Vector12C+0x60>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 8002474:	030a      	lsls	r2, r1, #12
    if (dma.streams[selfindex].func) {
 8002476:	6d84      	ldr	r4, [r0, #88]	; 0x58
    dmastp->dma->IFCR = flags << dmastp->shift;
 8002478:	605a      	str	r2, [r3, #4]
    if (dma.streams[selfindex].func) {
 800247a:	b10c      	cbz	r4, 8002480 <Vector12C+0x20>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 800247c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800247e:	47a0      	blx	r4
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002480:	2330      	movs	r3, #48	; 0x30
 8002482:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8002486:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <Vector12C+0x64>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800248e:	d102      	bne.n	8002496 <Vector12C+0x36>
 8002490:	f383 8811 	msr	BASEPRI, r3
}
 8002494:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002496:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 800249a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    psp -= sizeof (struct port_extctx);
 800249e:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 80024a0:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80024a2:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 80024a6:	4a08      	ldr	r2, [pc, #32]	; (80024c8 <Vector12C+0x68>)
 80024a8:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 80024aa:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 80024ac:	6889      	ldr	r1, [r1, #8]
 80024ae:	6892      	ldr	r2, [r2, #8]
 80024b0:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 80024b2:	bf8c      	ite	hi
 80024b4:	4a05      	ldrhi	r2, [pc, #20]	; (80024cc <Vector12C+0x6c>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 80024b6:	4a06      	ldrls	r2, [pc, #24]	; (80024d0 <Vector12C+0x70>)
 80024b8:	619a      	str	r2, [r3, #24]
 80024ba:	bd10      	pop	{r4, pc}
 80024bc:	40020400 	.word	0x40020400
 80024c0:	20001140 	.word	0x20001140
 80024c4:	e000ed00 	.word	0xe000ed00
 80024c8:	20001050 	.word	0x20001050
 80024cc:	08000263 	.word	0x08000263
 80024d0:	08000266 	.word	0x08000266
	...

080024e0 <Vector130>:
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 80024e0:	4b16      	ldr	r3, [pc, #88]	; (800253c <Vector130+0x5c>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 80024e2:	b510      	push	{r4, lr}
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 80024e4:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 80024e6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 80024e8:	0c09      	lsrs	r1, r1, #16
 80024ea:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 80024ee:	4211      	tst	r1, r2
 80024f0:	d006      	beq.n	8002500 <Vector130+0x20>
    if (dma.streams[selfindex].func) {
 80024f2:	4813      	ldr	r0, [pc, #76]	; (8002540 <Vector130+0x60>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 80024f4:	040a      	lsls	r2, r1, #16
    if (dma.streams[selfindex].func) {
 80024f6:	6e04      	ldr	r4, [r0, #96]	; 0x60
    dmastp->dma->IFCR = flags << dmastp->shift;
 80024f8:	605a      	str	r2, [r3, #4]
    if (dma.streams[selfindex].func) {
 80024fa:	b10c      	cbz	r4, 8002500 <Vector130+0x20>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 80024fc:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80024fe:	47a0      	blx	r4
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002500:	2330      	movs	r3, #48	; 0x30
 8002502:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8002506:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <Vector130+0x64>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800250e:	d102      	bne.n	8002516 <Vector130+0x36>
 8002510:	f383 8811 	msr	BASEPRI, r3
}
 8002514:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002516:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 800251a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    psp -= sizeof (struct port_extctx);
 800251e:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8002520:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002522:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8002526:	4a08      	ldr	r2, [pc, #32]	; (8002548 <Vector130+0x68>)
 8002528:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 800252a:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 800252c:	6889      	ldr	r1, [r1, #8]
 800252e:	6892      	ldr	r2, [r2, #8]
 8002530:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8002532:	bf8c      	ite	hi
 8002534:	4a05      	ldrhi	r2, [pc, #20]	; (800254c <Vector130+0x6c>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8002536:	4a06      	ldrls	r2, [pc, #24]	; (8002550 <Vector130+0x70>)
 8002538:	619a      	str	r2, [r3, #24]
 800253a:	bd10      	pop	{r4, pc}
 800253c:	40020400 	.word	0x40020400
 8002540:	20001140 	.word	0x20001140
 8002544:	e000ed00 	.word	0xe000ed00
 8002548:	20001050 	.word	0x20001050
 800254c:	08000263 	.word	0x08000263
 8002550:	08000266 	.word	0x08000266
	...

08002560 <Vector104>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002560:	2330      	movs	r3, #48	; 0x30
OSAL_IRQ_HANDLER(STM32_SDIO_HANDLER) {
 8002562:	b410      	push	{r4}
 8002564:	f383 8811 	msr	BASEPRI, r3
  SDIO->MASK = 0U;
 8002568:	2100      	movs	r1, #0
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 800256a:	481b      	ldr	r0, [pc, #108]	; (80025d8 <Vector104+0x78>)
 800256c:	4a1b      	ldr	r2, [pc, #108]	; (80025dc <Vector104+0x7c>)
 800256e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002570:	63d1      	str	r1, [r2, #60]	; 0x3c
 8002572:	b173      	cbz	r3, 8002592 <Vector104+0x32>
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8002574:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8002576:	689c      	ldr	r4, [r3, #8]
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 8002578:	63c1      	str	r1, [r0, #60]	; 0x3c
    tp->u.rdymsg = msg;
 800257a:	62d9      	str	r1, [r3, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 800257c:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    pqp = pqp->next;
 8002580:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8002582:	6891      	ldr	r1, [r2, #8]
 8002584:	42a1      	cmp	r1, r4
 8002586:	d2fb      	bcs.n	8002580 <Vector104+0x20>
  p->prev       = pqp->prev;
 8002588:	6851      	ldr	r1, [r2, #4]
 800258a:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 800258e:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 8002590:	6053      	str	r3, [r2, #4]
 8002592:	2300      	movs	r3, #0
 8002594:	f383 8811 	msr	BASEPRI, r3
 8002598:	2330      	movs	r3, #48	; 0x30
 800259a:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 800259e:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <Vector104+0x80>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80025a6:	d103      	bne.n	80025b0 <Vector104+0x50>
 80025a8:	f383 8811 	msr	BASEPRI, r3
}
 80025ac:	bc10      	pop	{r4}
 80025ae:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80025b0:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 80025b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    psp -= sizeof (struct port_extctx);
 80025b8:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 80025ba:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80025bc:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 80025c0:	4a08      	ldr	r2, [pc, #32]	; (80025e4 <Vector104+0x84>)
 80025c2:	bc10      	pop	{r4}
 80025c4:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 80025c6:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 80025c8:	6889      	ldr	r1, [r1, #8]
 80025ca:	6892      	ldr	r2, [r2, #8]
 80025cc:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 80025ce:	bf8c      	ite	hi
 80025d0:	4a05      	ldrhi	r2, [pc, #20]	; (80025e8 <Vector104+0x88>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 80025d2:	4a06      	ldrls	r2, [pc, #24]	; (80025ec <Vector104+0x8c>)
 80025d4:	619a      	str	r2, [r3, #24]
 80025d6:	4770      	bx	lr
 80025d8:	200008e8 	.word	0x200008e8
 80025dc:	40018000 	.word	0x40018000
 80025e0:	e000ed00 	.word	0xe000ed00
 80025e4:	20001050 	.word	0x20001050
 80025e8:	08000263 	.word	0x08000263
 80025ec:	08000266 	.word	0x08000266

080025f0 <VectorB0>:
/**
 * @brief   Interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80025f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 80025f4:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 80025f8:	f8da 3010 	ldr.w	r3, [sl, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 80025fc:	f8da 200c 	ldr.w	r2, [sl, #12]
 8002600:	4013      	ands	r3, r2
 8002602:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 8002604:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 8002606:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 8002608:	f8ca 2010 	str.w	r2, [sl, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 800260c:	d40b      	bmi.n	8002626 <VectorB0+0x36>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800260e:	2330      	movs	r3, #48	; 0x30
 8002610:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8002614:	4b54      	ldr	r3, [pc, #336]	; (8002768 <VectorB0+0x178>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800261c:	d16b      	bne.n	80026f6 <VectorB0+0x106>
 800261e:	f383 8811 	msr	BASEPRI, r3
}
 8002622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002626:	2330      	movs	r3, #48	; 0x30
 8002628:	f383 8811 	msr	BASEPRI, r3
    lasttime = chTimeAddX(vtlp->lasttime, vtp->dlist.delta);
    vtlp->lasttime = lasttime;

    /* Removing the timer from the list, marking it as not armed.*/
    (void) ch_dlist_dequeue(&vtp->dlist);
    vtp->dlist.next = NULL;
 800262c:	f04f 0900 	mov.w	r9, #0
 8002630:	4e4e      	ldr	r6, [pc, #312]	; (800276c <VectorB0+0x17c>)
 8002632:	f106 0710 	add.w	r7, r6, #16
 8002636:	f04f 0830 	mov.w	r8, #48	; 0x30
    vtp = (virtual_timer_t *)vtlp->dlist.next;
 800263a:	6934      	ldr	r4, [r6, #16]
 800263c:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 8002640:	8bb3      	ldrh	r3, [r6, #28]
    if (nowdelta < vtp->dlist.delta) {
 8002642:	68a0      	ldr	r0, [r4, #8]
 8002644:	b292      	uxth	r2, r2
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8002646:	1ad1      	subs	r1, r2, r3
  return systime + (systime_t)interval;
 8002648:	4403      	add	r3, r0
 800264a:	b29d      	uxth	r5, r3
  return (sysinterval_t)((systime_t)(end - start));
 800264c:	b28b      	uxth	r3, r1
 800264e:	4283      	cmp	r3, r0
 8002650:	d335      	bcc.n	80026be <VectorB0+0xce>
 *
 * @notapi
 */
static inline ch_delta_list_t *ch_dlist_dequeue(ch_delta_list_t *dlp) {

  dlp->prev->next = dlp->next;
 8002652:	e9d4 3200 	ldrd	r3, r2, [r4]
    vtlp->lasttime = lasttime;
 8002656:	83b5      	strh	r5, [r6, #28]
 8002658:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 800265a:	605a      	str	r2, [r3, #4]
    vtp->dlist.next = NULL;
 800265c:	f8c4 9000 	str.w	r9, [r4]

    /* If the list becomes empty then the alarm is disabled.*/
    if (ch_dlist_isempty(&vtlp->dlist)) {
 8002660:	6933      	ldr	r3, [r6, #16]
 8002662:	42bb      	cmp	r3, r7
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

#if ST_LLD_NUM_ALARMS == 1
  STM32_ST_TIM->DIER = 0U;
 8002664:	bf08      	it	eq
 8002666:	f8ca 900c 	streq.w	r9, [sl, #12]
 800266a:	f389 8811 	msr	BASEPRI, r9
    /* The callback is invoked outside the kernel critical section, it
       is re-entered on the callback return. Note that "lasttime" can be
       modified within the callback if some timer function is called.*/
    chSysUnlockFromISR();

    vtp->func(vtp, vtp->par);
 800266e:	4620      	mov	r0, r4
 8002670:	e9d4 3103 	ldrd	r3, r1, [r4, #12]
 8002674:	4798      	blx	r3
 8002676:	f388 8811 	msr	BASEPRI, r8

    chSysLockFromISR();

    /* If a reload is defined the timer needs to be restarted.*/
    if (unlikely(vtp->reload > (sysinterval_t)0)) {
 800267a:	6962      	ldr	r2, [r4, #20]
 800267c:	2a00      	cmp	r2, #0
 800267e:	d0dc      	beq.n	800263a <VectorB0+0x4a>
  return (systime_t)STM32_ST_TIM->CNT;
 8002680:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 8002684:	b289      	uxth	r1, r1
 8002686:	1b4d      	subs	r5, r1, r5
 8002688:	b2ad      	uxth	r5, r5
      now = chVTGetSystemTimeX();
      nowdelta = chTimeDiffX(lasttime, now);

#if !defined(CH_VT_RFCU_DISABLED)
      /* Checking if the required reload is feasible.*/
      if (nowdelta > vtp->reload) {
 800268a:	42aa      	cmp	r2, r5
 800268c:	d347      	bcc.n	800271e <VectorB0+0x12e>
  return (bool)(dlhp == dlhp->next);
 800268e:	6930      	ldr	r0, [r6, #16]
      /* Enqueuing the timer again using the calculated delta.*/
      delay = vtp->reload - nowdelta;
#endif

      /* Special case where the timers list is empty.*/
      if (ch_dlist_isempty(&vtlp->dlist)) {
 8002690:	42b8      	cmp	r0, r7
 8002692:	d05f      	beq.n	8002754 <VectorB0+0x164>
  while (likely(dlp->delta < delta)) {
 8002694:	6883      	ldr	r3, [r0, #8]
 8002696:	429a      	cmp	r2, r3
 8002698:	d904      	bls.n	80026a4 <VectorB0+0xb4>
    dlp = dlp->next;
 800269a:	6800      	ldr	r0, [r0, #0]
    delta -= dlp->delta;
 800269c:	1ad2      	subs	r2, r2, r3
  while (likely(dlp->delta < delta)) {
 800269e:	6883      	ldr	r3, [r0, #8]
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d3fa      	bcc.n	800269a <VectorB0+0xaa>
  dlhp->delta = (sysinterval_t)-1;
 80026a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  dlp->delta      = delta;
 80026a8:	60a2      	str	r2, [r4, #8]
  dlp->delta -= delta;
 80026aa:	6883      	ldr	r3, [r0, #8]
  dlp->next       = dlhp;
 80026ac:	6020      	str	r0, [r4, #0]
  dlp->delta -= delta;
 80026ae:	1a9a      	subs	r2, r3, r2
  dlp->prev       = dlp->next->prev;
 80026b0:	6843      	ldr	r3, [r0, #4]
 80026b2:	6063      	str	r3, [r4, #4]
  dlp->prev->next = dlp;
 80026b4:	601c      	str	r4, [r3, #0]
  dlp->delta -= delta;
 80026b6:	e9c0 4201 	strd	r4, r2, [r0, #4]
  dlhp->delta = (sysinterval_t)-1;
 80026ba:	61b1      	str	r1, [r6, #24]
}
 80026bc:	e7bb      	b.n	8002636 <VectorB0+0x46>
      ch_dlist_insert(&vtlp->dlist, &vtp->dlist, delta);
    }
  }

  /* If the list is empty, nothing else to do.*/
  if (ch_dlist_isempty(&vtlp->dlist)) {
 80026be:	42bc      	cmp	r4, r7
 80026c0:	d015      	beq.n	80026ee <VectorB0+0xfe>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  vtlp->lasttime += nowdelta;
  vtp->dlist.delta -= nowdelta;
 80026c2:	1ac3      	subs	r3, r0, r3
 80026c4:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
  vtlp->lasttime += nowdelta;
 80026c8:	83b2      	strh	r2, [r6, #28]
  vtp->dlist.delta -= nowdelta;
 80026ca:	60a3      	str	r3, [r4, #8]
  if (delay < currdelta) {
 80026cc:	bf28      	it	cs
 80026ce:	f44f 437f 	movcs.w	r3, #65280	; 0xff00
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	bf38      	it	cc
 80026d6:	2302      	movcc	r3, #2
  return systime + (systime_t)interval;
 80026d8:	18d1      	adds	r1, r2, r3
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80026da:	b289      	uxth	r1, r1
 80026dc:	f8ca 1034 	str.w	r1, [sl, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 80026e0:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 80026e4:	b289      	uxth	r1, r1
  return (sysinterval_t)((systime_t)(end - start));
 80026e6:	1a8a      	subs	r2, r1, r2
 80026e8:	b292      	uxth	r2, r2
    if (likely(nowdelta < delay)) {
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d220      	bcs.n	8002730 <VectorB0+0x140>
 80026ee:	2300      	movs	r3, #0
 80026f0:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void osalSysUnlockFromISR(void) {

  chSysUnlockFromISR();
}
 80026f4:	e78b      	b.n	800260e <VectorB0+0x1e>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80026f6:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 80026fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    psp -= sizeof (struct port_extctx);
 80026fe:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8002700:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002702:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8002706:	4a19      	ldr	r2, [pc, #100]	; (800276c <VectorB0+0x17c>)
 8002708:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 800270a:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 800270c:	6889      	ldr	r1, [r1, #8]
 800270e:	6892      	ldr	r2, [r2, #8]
 8002710:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8002712:	bf8c      	ite	hi
 8002714:	4a16      	ldrhi	r2, [pc, #88]	; (8002770 <VectorB0+0x180>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8002716:	4a17      	ldrls	r2, [pc, #92]	; (8002774 <VectorB0+0x184>)
 8002718:	619a      	str	r2, [r3, #24]
 800271a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param[in] mask      fault flags to be added
 */
void chRFCUCollectFaultsI(rfcu_mask_t mask) {

#if CH_CFG_SMP_MODE == FALSE
  currcore->rfcu.mask |= mask;
 800271e:	6b73      	ldr	r3, [r6, #52]	; 0x34
  return (bool)(dlhp == dlhp->next);
 8002720:	6930      	ldr	r0, [r6, #16]
 8002722:	f043 0302 	orr.w	r3, r3, #2
      if (ch_dlist_isempty(&vtlp->dlist)) {
 8002726:	42b8      	cmp	r0, r7
 8002728:	6373      	str	r3, [r6, #52]	; 0x34
 800272a:	d018      	beq.n	800275e <VectorB0+0x16e>
 800272c:	462a      	mov	r2, r5
 800272e:	e7b1      	b.n	8002694 <VectorB0+0xa4>
    if (likely(nowdelta < delay)) {
 8002730:	2202      	movs	r2, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8002732:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    currdelta += (sysinterval_t)1;
 8002736:	3201      	adds	r2, #1
  return systime + (systime_t)interval;
 8002738:	188b      	adds	r3, r1, r2
 800273a:	b29b      	uxth	r3, r3
 800273c:	6363      	str	r3, [r4, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 800273e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002740:	b280      	uxth	r0, r0
  return (sysinterval_t)((systime_t)(end - start));
 8002742:	1a43      	subs	r3, r0, r1
 8002744:	b29b      	uxth	r3, r3
    if (likely(nowdelta < delay)) {
 8002746:	4293      	cmp	r3, r2
 8002748:	d20b      	bcs.n	8002762 <VectorB0+0x172>
 800274a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800274c:	f043 0301 	orr.w	r3, r3, #1
 8002750:	6373      	str	r3, [r6, #52]	; 0x34
#else
  ch_system.rfcu.mask |= mask;
#endif

  CH_CFG_RUNTIME_FAULTS_HOOK(mask);
}
 8002752:	e7cc      	b.n	80026ee <VectorB0+0xfe>
        delay = vtp->reload - nowdelta;
 8002754:	1b52      	subs	r2, r2, r5
        vt_insert_first(vtlp, vtp, now, delay);
 8002756:	4620      	mov	r0, r4
 8002758:	f00c f9aa 	bl	800eab0 <vt_insert_first.constprop.0>
        return;
 800275c:	e7c7      	b.n	80026ee <VectorB0+0xfe>
        delay = (sysinterval_t)0;
 800275e:	2200      	movs	r2, #0
 8002760:	e7f9      	b.n	8002756 <VectorB0+0x166>
 8002762:	4601      	mov	r1, r0
 8002764:	e7e7      	b.n	8002736 <VectorB0+0x146>
 8002766:	bf00      	nop
 8002768:	e000ed00 	.word	0xe000ed00
 800276c:	20001050 	.word	0x20001050
 8002770:	08000263 	.word	0x08000263
 8002774:	08000266 	.word	0x08000266
	...

08002780 <usb_lld_init_endpoint>:
  const USBEndpointConfig *epcp = usbp->epc[ep];
 8002780:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 8002784:	b570      	push	{r4, r5, r6, lr}
  const USBEndpointConfig *epcp = usbp->epc[ep];
 8002786:	68dd      	ldr	r5, [r3, #12]
  switch (epcp->ep_mode & USB_EP_MODE_TYPE) {
 8002788:	682b      	ldr	r3, [r5, #0]
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	2b03      	cmp	r3, #3
 8002790:	d141      	bne.n	8002816 <usb_lld_init_endpoint+0x96>
 8002792:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  dp = USB_GET_DESCRIPTOR(ep);
 8002796:	4b26      	ldr	r3, [pc, #152]	; (8002830 <usb_lld_init_endpoint+0xb0>)
  if (epcp->in_state != NULL) {
 8002798:	696c      	ldr	r4, [r5, #20]
  dp = USB_GET_DESCRIPTOR(ep);
 800279a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800279c:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 80027a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80027a4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80027a8:	eb03 1c01 	add.w	ip, r3, r1, lsl #4
  if (epcp->in_state != NULL) {
 80027ac:	b17c      	cbz	r4, 80027ce <usb_lld_init_endpoint+0x4e>
    dp->TXCOUNT0 = 0U;
 80027ae:	2400      	movs	r4, #0
 80027b0:	f8cc 4004 	str.w	r4, [ip, #4]
    dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 80027b4:	8a2c      	ldrh	r4, [r5, #16]
  next = usbp->pmnext;
 80027b6:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
  usbp->pmnext += (size + 1U) & ~1U;
 80027ba:	3401      	adds	r4, #1
 80027bc:	f024 0401 	bic.w	r4, r4, #1
 80027c0:	4434      	add	r4, r6
 80027c2:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
    epr |= EPR_STAT_TX_NAK;
 80027c6:	f042 0220 	orr.w	r2, r2, #32
    dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 80027ca:	f84e 6003 	str.w	r6, [lr, r3]
  if (epcp->out_state != NULL) {
 80027ce:	69ab      	ldr	r3, [r5, #24]
 80027d0:	b1bb      	cbz	r3, 8002802 <usb_lld_init_endpoint+0x82>
    if (epcp->out_maxsize > 62) {
 80027d2:	8a6b      	ldrh	r3, [r5, #18]
 80027d4:	2b3e      	cmp	r3, #62	; 0x3e
 80027d6:	d824      	bhi.n	8002822 <usb_lld_init_endpoint+0xa2>
      nblocks = ((((uint32_t)(epcp->out_maxsize - 1U) | 1U) + 1U) / 2U) << 10;
 80027d8:	1e5c      	subs	r4, r3, #1
 80027da:	f044 0401 	orr.w	r4, r4, #1
 80027de:	3401      	adds	r4, #1
 80027e0:	0264      	lsls	r4, r4, #9
 80027e2:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
    dp->RXCOUNT0 = nblocks;
 80027e6:	f8cc 400c 	str.w	r4, [ip, #12]
  usbp->pmnext += (size + 1U) & ~1U;
 80027ea:	3301      	adds	r3, #1
  next = usbp->pmnext;
 80027ec:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
  usbp->pmnext += (size + 1U) & ~1U;
 80027f0:	f023 0301 	bic.w	r3, r3, #1
 80027f4:	4423      	add	r3, r4
 80027f6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    epr |= EPR_STAT_RX_NAK;
 80027fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 80027fe:	f8cc 4008 	str.w	r4, [ip, #8]
  STM32_USB->EPR[ep] = STM32_USB->EPR[ep];
 8002802:	008b      	lsls	r3, r1, #2
 8002804:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002808:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800280c:	6818      	ldr	r0, [r3, #0]
  STM32_USB->EPR[ep] = epr | ep;
 800280e:	4311      	orrs	r1, r2
  STM32_USB->EPR[ep] = STM32_USB->EPR[ep];
 8002810:	6018      	str	r0, [r3, #0]
  STM32_USB->EPR[ep] = epr | ep;
 8002812:	6019      	str	r1, [r3, #0]
}
 8002814:	bd70      	pop	{r4, r5, r6, pc}
    epr = EPR_EP_TYPE_BULK;
 8002816:	2b00      	cmp	r3, #0
 8002818:	bf0c      	ite	eq
 800281a:	f44f 7200 	moveq.w	r2, #512	; 0x200
 800281e:	2200      	movne	r2, #0
 8002820:	e7b9      	b.n	8002796 <usb_lld_init_endpoint+0x16>
      nblocks = (((((uint32_t)epcp->out_maxsize - 1U) | 0x1FU) / 32U) << 10) |
 8002822:	4c04      	ldr	r4, [pc, #16]	; (8002834 <usb_lld_init_endpoint+0xb4>)
 8002824:	1e5d      	subs	r5, r3, #1
 8002826:	096d      	lsrs	r5, r5, #5
 8002828:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 800282c:	b2a4      	uxth	r4, r4
 800282e:	e7da      	b.n	80027e6 <usb_lld_init_endpoint+0x66>
 8002830:	40005c00 	.word	0x40005c00
 8002834:	ffff8000 	.word	0xffff8000
	...

08002840 <Vector90>:
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 8002840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  istr = STM32_USB->ISTR;
 8002844:	4cb8      	ldr	r4, [pc, #736]	; (8002b28 <Vector90+0x2e8>)
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 8002846:	b085      	sub	sp, #20
  istr = STM32_USB->ISTR;
 8002848:	6c65      	ldr	r5, [r4, #68]	; 0x44
  STM32_USB->ISTR = ~istr;
 800284a:	43eb      	mvns	r3, r5
  if ((istr & ISTR_RESET) != 0U) {
 800284c:	056e      	lsls	r6, r5, #21
  STM32_USB->ISTR = ~istr;
 800284e:	6463      	str	r3, [r4, #68]	; 0x44
  if ((istr & ISTR_RESET) != 0U) {
 8002850:	f100 8134 	bmi.w	8002abc <Vector90+0x27c>
  if ((istr & ISTR_SUSP) != 0U) {
 8002854:	0528      	lsls	r0, r5, #20
 8002856:	f100 8115 	bmi.w	8002a84 <Vector90+0x244>
  if ((istr & ISTR_WKUP) != 0U) {
 800285a:	04e9      	lsls	r1, r5, #19
 800285c:	d504      	bpl.n	8002868 <Vector90+0x28>
    uint32_t fnr = STM32_USB->FNR;
 800285e:	4bb2      	ldr	r3, [pc, #712]	; (8002b28 <Vector90+0x2e8>)
 8002860:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    if ((fnr & FNR_RXDP) == 0U) {
 8002862:	0412      	lsls	r2, r2, #16
 8002864:	f140 817d 	bpl.w	8002b62 <Vector90+0x322>
  if ((istr & ISTR_SOF) != 0U) {
 8002868:	05af      	lsls	r7, r5, #22
 800286a:	d507      	bpl.n	800287c <Vector90+0x3c>
    _usb_isr_invoke_sof_cb(usbp);
 800286c:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 8002b2c <Vector90+0x2ec>
 8002870:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	b10b      	cbz	r3, 800287c <Vector90+0x3c>
 8002878:	4648      	mov	r0, r9
 800287a:	4798      	blx	r3
  while ((istr & ISTR_CTR) != 0U) {
 800287c:	042e      	lsls	r6, r5, #16
 800287e:	d544      	bpl.n	800290a <Vector90+0xca>
 8002880:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 8002b2c <Vector90+0x2ec>
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8002884:	f8df a2a0 	ldr.w	sl, [pc, #672]	; 8002b28 <Vector90+0x2e8>
        _usb_isr_invoke_out_cb(usbp, ep);
 8002888:	46cb      	mov	fp, r9
 800288a:	e01f      	b.n	80028cc <Vector90+0x8c>
    USBInEndpointState *isp = epcp->in_state;
 800288c:	6975      	ldr	r5, [r6, #20]
    EPR_CLEAR_CTR_TX(ep);
 800288e:	681c      	ldr	r4, [r3, #0]
    isp->txcnt += isp->txlast;
 8002890:	686a      	ldr	r2, [r5, #4]
 8002892:	68e8      	ldr	r0, [r5, #12]
    n = isp->txsize - isp->txcnt;
 8002894:	682f      	ldr	r7, [r5, #0]
    EPR_CLEAR_CTR_TX(ep);
 8002896:	f424 4478 	bic.w	r4, r4, #63488	; 0xf800
    isp->txcnt += isp->txlast;
 800289a:	4402      	add	r2, r0
    EPR_CLEAR_CTR_TX(ep);
 800289c:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 80028a0:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
    if (n > 0U) {
 80028a4:	1abf      	subs	r7, r7, r2
    EPR_CLEAR_CTR_TX(ep);
 80028a6:	601c      	str	r4, [r3, #0]
    isp->txcnt += isp->txlast;
 80028a8:	606a      	str	r2, [r5, #4]
    if (n > 0U) {
 80028aa:	d13c      	bne.n	8002926 <Vector90+0xe6>
      _usb_isr_invoke_in_cb(usbp, ep);
 80028ac:	2201      	movs	r2, #1
 80028ae:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 80028b2:	68b4      	ldr	r4, [r6, #8]
 80028b4:	408a      	lsls	r2, r1
 80028b6:	ea23 0302 	bic.w	r3, r3, r2
 80028ba:	f8a9 3008 	strh.w	r3, [r9, #8]
 80028be:	b10c      	cbz	r4, 80028c4 <Vector90+0x84>
        _usb_isr_invoke_out_cb(usbp, ep);
 80028c0:	4658      	mov	r0, fp
 80028c2:	47a0      	blx	r4
    istr = STM32_USB->ISTR;
 80028c4:	f8da 5044 	ldr.w	r5, [sl, #68]	; 0x44
  while ((istr & ISTR_CTR) != 0U) {
 80028c8:	042b      	lsls	r3, r5, #16
 80028ca:	d51e      	bpl.n	800290a <Vector90+0xca>
  uint32_t ep = istr & ISTR_EP_ID_MASK;
 80028cc:	f005 010f 	and.w	r1, r5, #15
 80028d0:	008b      	lsls	r3, r1, #2
 80028d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
  const USBEndpointConfig *epcp = usbp->epc[ep];
 80028d6:	1c8f      	adds	r7, r1, #2
 80028d8:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80028dc:	eb09 0287 	add.w	r2, r9, r7, lsl #2
  if ((istr & ISTR_DIR) == 0U) {
 80028e0:	06ec      	lsls	r4, r5, #27
  uint32_t epr = STM32_USB->EPR[ep];
 80028e2:	6818      	ldr	r0, [r3, #0]
  const USBEndpointConfig *epcp = usbp->epc[ep];
 80028e4:	6856      	ldr	r6, [r2, #4]
  if ((istr & ISTR_DIR) == 0U) {
 80028e6:	d5d1      	bpl.n	800288c <Vector90+0x4c>
    EPR_CLEAR_CTR_RX(ep);
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	f422 4278 	bic.w	r2, r2, #63488	; 0xf800
 80028ee:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80028f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028f6:	601a      	str	r2, [r3, #0]
    if (epr & EPR_SETUP) {
 80028f8:	0502      	lsls	r2, r0, #20
 80028fa:	d548      	bpl.n	800298e <Vector90+0x14e>
      _usb_isr_invoke_setup_cb(usbp, ep);
 80028fc:	6873      	ldr	r3, [r6, #4]
 80028fe:	4658      	mov	r0, fp
 8002900:	4798      	blx	r3
    istr = STM32_USB->ISTR;
 8002902:	f8da 5044 	ldr.w	r5, [sl, #68]	; 0x44
  while ((istr & ISTR_CTR) != 0U) {
 8002906:	042b      	lsls	r3, r5, #16
 8002908:	d4e0      	bmi.n	80028cc <Vector90+0x8c>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800290a:	2330      	movs	r3, #48	; 0x30
 800290c:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8002910:	4b87      	ldr	r3, [pc, #540]	; (8002b30 <Vector90+0x2f0>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002918:	f040 810e 	bne.w	8002b38 <Vector90+0x2f8>
 800291c:	f383 8811 	msr	BASEPRI, r3
}
 8002920:	b005      	add	sp, #20
 8002922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (n > epcp->in_maxsize)
 8002926:	8a34      	ldrh	r4, [r6, #16]
      isp->txbuf += isp->txlast;
 8002928:	68ae      	ldr	r6, [r5, #8]
 800292a:	42bc      	cmp	r4, r7
 800292c:	bf28      	it	cs
 800292e:	463c      	movcs	r4, r7
 8002930:	4430      	add	r0, r6
      isp->txlast = n;
 8002932:	e9c5 0402 	strd	r0, r4, [r5, #8]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8002936:	f8da 5050 	ldr.w	r5, [sl, #80]	; 0x50
 800293a:	010a      	lsls	r2, r1, #4
 800293c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8002940:	f505 45c0 	add.w	r5, r5, #24576	; 0x6000
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8002944:	5952      	ldr	r2, [r2, r5]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8002946:	eb05 1101 	add.w	r1, r5, r1, lsl #4
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 800294a:	604c      	str	r4, [r1, #4]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 800294c:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 8002950:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
 8002954:	0049      	lsls	r1, r1, #1
  while (i > 0) {
 8002956:	b16c      	cbz	r4, 8002974 <Vector90+0x134>
 8002958:	3c01      	subs	r4, #1
 800295a:	0864      	lsrs	r4, r4, #1
 800295c:	1d0a      	adds	r2, r1, #4
 800295e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8002962:	e000      	b.n	8002966 <Vector90+0x126>
 8002964:	3204      	adds	r2, #4
    w  = *buf++;
 8002966:	460d      	mov	r5, r1
    w |= *buf++ << 8;
 8002968:	f830 6b02 	ldrh.w	r6, [r0], #2
  while (i > 0) {
 800296c:	42a2      	cmp	r2, r4
    *pmap++ = (stm32_usb_pma_t)w;
 800296e:	4611      	mov	r1, r2
 8002970:	602e      	str	r6, [r5, #0]
  while (i > 0) {
 8002972:	d1f7      	bne.n	8002964 <Vector90+0x124>
      EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 800297a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800297e:	f082 0230 	eor.w	r2, r2, #48	; 0x30
 8002982:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002986:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	e79a      	b.n	80028c4 <Vector90+0x84>
  while (i >= 2U) {
 800298e:	f240 30fe 	movw	r0, #1022	; 0x3fe
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8002992:	f8da 2050 	ldr.w	r2, [sl, #80]	; 0x50
      USBOutEndpointState *osp = epcp->out_state;
 8002996:	f8d6 e018 	ldr.w	lr, [r6, #24]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 800299a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800299e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 80029a2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 80029a6:	6895      	ldr	r5, [r2, #8]
  n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 80029a8:	68d4      	ldr	r4, [r2, #12]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 80029aa:	f105 5500 	add.w	r5, r5, #536870912	; 0x20000000
      n = usb_packet_read_to_buffer(ep, osp->rxbuf);
 80029ae:	f8de 2008 	ldr.w	r2, [lr, #8]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 80029b2:	f505 5540 	add.w	r5, r5, #12288	; 0x3000
  while (i >= 2U) {
 80029b6:	4204      	tst	r4, r0
  n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 80029b8:	9402      	str	r4, [sp, #8]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 80029ba:	ea4f 0545 	mov.w	r5, r5, lsl #1
  n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 80029be:	f3c4 0809 	ubfx	r8, r4, #0, #10
      n = usb_packet_read_to_buffer(ep, osp->rxbuf);
 80029c2:	9201      	str	r2, [sp, #4]
  while (i >= 2U) {
 80029c4:	f000 80e5 	beq.w	8002b92 <Vector90+0x352>
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 80029c8:	462c      	mov	r4, r5
 80029ca:	f1a8 0202 	sub.w	r2, r8, #2
 80029ce:	0852      	lsrs	r2, r2, #1
 80029d0:	f105 0c04 	add.w	ip, r5, #4
 80029d4:	9203      	str	r2, [sp, #12]
 80029d6:	eb0c 0c82 	add.w	ip, ip, r2, lsl #2
 80029da:	9a01      	ldr	r2, [sp, #4]
 80029dc:	1c90      	adds	r0, r2, #2
    uint32_t w = *pmap++;
 80029de:	4622      	mov	r2, r4
 80029e0:	6812      	ldr	r2, [r2, #0]
 80029e2:	3404      	adds	r4, #4
    *buf++ = (uint8_t)w;
 80029e4:	f800 2c02 	strb.w	r2, [r0, #-2]
  while (i >= 2U) {
 80029e8:	45a4      	cmp	ip, r4
    *buf++ = (uint8_t)(w >> 8);
 80029ea:	ea4f 2212 	mov.w	r2, r2, lsr #8
  while (i >= 2U) {
 80029ee:	f100 0002 	add.w	r0, r0, #2
    *buf++ = (uint8_t)(w >> 8);
 80029f2:	f800 2c03 	strb.w	r2, [r0, #-3]
  while (i >= 2U) {
 80029f6:	d1f2      	bne.n	80029de <Vector90+0x19e>
 80029f8:	9a03      	ldr	r2, [sp, #12]
    *buf++ = (uint8_t)(w >> 8);
 80029fa:	9801      	ldr	r0, [sp, #4]
 80029fc:	3201      	adds	r2, #1
    uint32_t w = *pmap++;
 80029fe:	eb05 0582 	add.w	r5, r5, r2, lsl #2
    *buf++ = (uint8_t)(w >> 8);
 8002a02:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8002a06:	9201      	str	r2, [sp, #4]
    i -= 2U;
 8002a08:	9a02      	ldr	r2, [sp, #8]
 8002a0a:	f002 0201 	and.w	r2, r2, #1
  if (i >= 1U) {
 8002a0e:	b112      	cbz	r2, 8002a16 <Vector90+0x1d6>
    *buf = (uint8_t)*pmap;
 8002a10:	682a      	ldr	r2, [r5, #0]
 8002a12:	9801      	ldr	r0, [sp, #4]
 8002a14:	7002      	strb	r2, [r0, #0]
      osp->rxbuf += n;
 8002a16:	f8de 0008 	ldr.w	r0, [lr, #8]
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 8002a1a:	8a74      	ldrh	r4, [r6, #18]
      osp->rxbuf += n;
 8002a1c:	4440      	add	r0, r8
 8002a1e:	f8ce 0008 	str.w	r0, [lr, #8]
      osp->rxcnt  += n;
 8002a22:	f8de 0004 	ldr.w	r0, [lr, #4]
      osp->rxpkts -= 1U;
 8002a26:	f8be 200c 	ldrh.w	r2, [lr, #12]
      osp->rxcnt  += n;
 8002a2a:	4440      	add	r0, r8
 8002a2c:	f8ce 0004 	str.w	r0, [lr, #4]
      osp->rxsize -= n;
 8002a30:	f8de 0000 	ldr.w	r0, [lr]
      osp->rxpkts -= 1U;
 8002a34:	3a01      	subs	r2, #1
 8002a36:	b292      	uxth	r2, r2
      osp->rxsize -= n;
 8002a38:	eba0 0008 	sub.w	r0, r0, r8
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 8002a3c:	4544      	cmp	r4, r8
      osp->rxpkts -= 1U;
 8002a3e:	f8ae 200c 	strh.w	r2, [lr, #12]
      osp->rxsize -= n;
 8002a42:	f8ce 0000 	str.w	r0, [lr]
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 8002a46:	d800      	bhi.n	8002a4a <Vector90+0x20a>
 8002a48:	b97a      	cbnz	r2, 8002a6a <Vector90+0x22a>
        _usb_isr_invoke_out_cb(usbp, ep);
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	408a      	lsls	r2, r1
 8002a54:	68dc      	ldr	r4, [r3, #12]
 8002a56:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 8002a5a:	ea23 0302 	bic.w	r3, r3, r2
 8002a5e:	f8a9 300a 	strh.w	r3, [r9, #10]
 8002a62:	2c00      	cmp	r4, #0
 8002a64:	f47f af2c 	bne.w	80028c0 <Vector90+0x80>
 8002a68:	e72c      	b.n	80028c4 <Vector90+0x84>
        EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a70:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002a74:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8002a78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	e71f      	b.n	80028c4 <Vector90+0x84>
    STM32_USB->CNTR |= CNTR_FSUSP;
 8002a84:	4a28      	ldr	r2, [pc, #160]	; (8002b28 <Vector90+0x2e8>)
  if (usbp->state != USB_SUSPENDED) {
 8002a86:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8002b2c <Vector90+0x2ec>
 8002a8a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002a8c:	f043 0308 	orr.w	r3, r3, #8
 8002a90:	6413      	str	r3, [r2, #64]	; 0x40
 8002a92:	f899 3000 	ldrb.w	r3, [r9]
 8002a96:	2b05      	cmp	r3, #5
 8002a98:	f43f aedf 	beq.w	800285a <Vector90+0x1a>
    usbp->state       = USB_SUSPENDED;
 8002a9c:	2105      	movs	r1, #5
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8002a9e:	f8d9 2004 	ldr.w	r2, [r9, #4]
    usbp->saved_state = usbp->state;
 8002aa2:	f889 3080 	strb.w	r3, [r9, #128]	; 0x80
    usbp->state       = USB_SUSPENDED;
 8002aa6:	f889 1000 	strb.w	r1, [r9]
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8002aaa:	6813      	ldr	r3, [r2, #0]
 8002aac:	b113      	cbz	r3, 8002ab4 <Vector90+0x274>
 8002aae:	2104      	movs	r1, #4
 8002ab0:	4648      	mov	r0, r9
 8002ab2:	4798      	blx	r3
    usbp->transmitting  = 0;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f8c9 3008 	str.w	r3, [r9, #8]
 8002aba:	e6ce      	b.n	800285a <Vector90+0x1a>
  usbp->status        = 0;
 8002abc:	2600      	movs	r6, #0
  usbp->state         = USB_READY;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8002b2c <Vector90+0x2ec>
    usbp->epc[i] = NULL;
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	4631      	mov	r1, r6
 8002ac8:	f109 000c 	add.w	r0, r9, #12
  usbp->state         = USB_READY;
 8002acc:	f889 3000 	strb.w	r3, [r9]
  usbp->status        = 0;
 8002ad0:	f8c9 607c 	str.w	r6, [r9, #124]	; 0x7c
  usbp->transmitting  = 0;
 8002ad4:	f8c9 6008 	str.w	r6, [r9, #8]
    usbp->epc[i] = NULL;
 8002ad8:	f7fd fc72 	bl	80003c0 <memset>
  if (usbp->config->sof_cb != NULL)
 8002adc:	f8d9 3004 	ldr.w	r3, [r9, #4]
  usbp->ep0state = USB_EP0_STP_WAITING;
 8002ae0:	f889 6064 	strb.w	r6, [r9, #100]	; 0x64
 8002ae4:	68db      	ldr	r3, [r3, #12]
  STM32_USB->DADDR  = DADDR_EF;
 8002ae6:	f04f 0c80 	mov.w	ip, #128	; 0x80
    cntr |= CNTR_SOFM;
 8002aea:	42b3      	cmp	r3, r6
 8002aec:	bf0c      	ite	eq
 8002aee:	f44f 473c 	moveq.w	r7, #48128	; 0xbc00
 8002af2:	f44f 473e 	movne.w	r7, #48640	; 0xbe00
  usbp->pmnext = 64U;
 8002af6:	2240      	movs	r2, #64	; 0x40
  usbp->epc[0] = &ep0config;
 8002af8:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <Vector90+0x2f4>)
  STM32_USB->BTABLE = BTABLE_ADDR;
 8002afa:	6526      	str	r6, [r4, #80]	; 0x50
  usb_lld_init_endpoint(usbp, 0U);
 8002afc:	4631      	mov	r1, r6
  STM32_USB->ISTR   = 0U;
 8002afe:	6466      	str	r6, [r4, #68]	; 0x44
  usb_lld_init_endpoint(usbp, 0U);
 8002b00:	4648      	mov	r0, r9
  STM32_USB->DADDR  = DADDR_EF;
 8002b02:	f8c4 c04c 	str.w	ip, [r4, #76]	; 0x4c
  STM32_USB->CNTR = cntr;
 8002b06:	6427      	str	r7, [r4, #64]	; 0x40
  usbp->epc[0] = &ep0config;
 8002b08:	f8c9 300c 	str.w	r3, [r9, #12]
  usbp->pmnext = 64U;
 8002b0c:	f8c9 2084 	str.w	r2, [r9, #132]	; 0x84
  usb_lld_init_endpoint(usbp, 0U);
 8002b10:	f7ff fe36 	bl	8002780 <usb_lld_init_endpoint>
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 8002b14:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f43f ae9a 	beq.w	8002854 <Vector90+0x14>
 8002b20:	4631      	mov	r1, r6
 8002b22:	4648      	mov	r0, r9
 8002b24:	4798      	blx	r3
 8002b26:	e695      	b.n	8002854 <Vector90+0x14>
 8002b28:	40005c00 	.word	0x40005c00
 8002b2c:	20000fc4 	.word	0x20000fc4
 8002b30:	e000ed00 	.word	0xe000ed00
 8002b34:	08011e0c 	.word	0x08011e0c
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002b38:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8002b3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    psp -= sizeof (struct port_extctx);
 8002b40:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8002b42:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002b44:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8002b48:	4a13      	ldr	r2, [pc, #76]	; (8002b98 <Vector90+0x358>)
 8002b4a:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8002b4c:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8002b4e:	6889      	ldr	r1, [r1, #8]
 8002b50:	6892      	ldr	r2, [r2, #8]
 8002b52:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8002b54:	bf8c      	ite	hi
 8002b56:	4a11      	ldrhi	r2, [pc, #68]	; (8002b9c <Vector90+0x35c>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8002b58:	4a11      	ldrls	r2, [pc, #68]	; (8002ba0 <Vector90+0x360>)
 8002b5a:	619a      	str	r2, [r3, #24]
}
 8002b5c:	b005      	add	sp, #20
 8002b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 8002b62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (usbp->state == USB_SUSPENDED) {
 8002b64:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8002ba4 <Vector90+0x364>
 8002b68:	f022 0208 	bic.w	r2, r2, #8
 8002b6c:	641a      	str	r2, [r3, #64]	; 0x40
 8002b6e:	f899 1000 	ldrb.w	r1, [r9]
 8002b72:	2905      	cmp	r1, #5
 8002b74:	f47f ae78 	bne.w	8002868 <Vector90+0x28>
    usbp->state = usbp->saved_state;
 8002b78:	f899 2080 	ldrb.w	r2, [r9, #128]	; 0x80
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8002b7c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    usbp->state = usbp->saved_state;
 8002b80:	f889 2000 	strb.w	r2, [r9]
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f43f ae6e 	beq.w	8002868 <Vector90+0x28>
 8002b8c:	4648      	mov	r0, r9
 8002b8e:	4798      	blx	r3
 8002b90:	e66a      	b.n	8002868 <Vector90+0x28>
  i = n;
 8002b92:	4642      	mov	r2, r8
 8002b94:	e73b      	b.n	8002a0e <Vector90+0x1ce>
 8002b96:	bf00      	nop
 8002b98:	20001050 	.word	0x20001050
 8002b9c:	08000263 	.word	0x08000263
 8002ba0:	08000266 	.word	0x08000266
 8002ba4:	20000fc4 	.word	0x20000fc4
	...

08002bb0 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8002bb0:	4a1b      	ldr	r2, [pc, #108]	; (8002c20 <__early_init+0x70>)
 8002bb2:	6813      	ldr	r3, [r2, #0]
 8002bb4:	f043 0301 	orr.w	r3, r3, #1
 8002bb8:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8002bba:	6813      	ldr	r3, [r2, #0]
 8002bbc:	0798      	lsls	r0, r3, #30
 8002bbe:	d5fc      	bpl.n	8002bba <__early_init+0xa>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8002bc0:	2000      	movs	r0, #0
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8002bc2:	6813      	ldr	r3, [r2, #0]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8002bc4:	4916      	ldr	r1, [pc, #88]	; (8002c20 <__early_init+0x70>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8002bc6:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 8002bca:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8002bcc:	6050      	str	r0, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8002bce:	684b      	ldr	r3, [r1, #4]
 8002bd0:	f013 0f0c 	tst.w	r3, #12
 8002bd4:	d1fb      	bne.n	8002bce <__early_init+0x1e>
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 8002bd6:	680b      	ldr	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8002bd8:	4a11      	ldr	r2, [pc, #68]	; (8002c20 <__early_init+0x70>)
  RCC->CR |= RCC_CR_HSEON;
 8002bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bde:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8002be0:	6813      	ldr	r3, [r2, #0]
 8002be2:	0399      	lsls	r1, r3, #14
 8002be4:	d5fc      	bpl.n	8002be0 <__early_init+0x30>
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8002be6:	6853      	ldr	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8002be8:	490d      	ldr	r1, [pc, #52]	; (8002c20 <__early_init+0x70>)
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8002bea:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8002bee:	6053      	str	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
 8002bf0:	6813      	ldr	r3, [r2, #0]
 8002bf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bf6:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8002bf8:	680b      	ldr	r3, [r1, #0]
 8002bfa:	019b      	lsls	r3, r3, #6
 8002bfc:	d5fc      	bpl.n	8002bf8 <__early_init+0x48>
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8002bfe:	2012      	movs	r0, #18
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 8002c00:	4a08      	ldr	r2, [pc, #32]	; (8002c24 <__early_init+0x74>)
  FLASH->ACR = STM32_FLASHBITS;
 8002c02:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <__early_init+0x78>)
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 8002c04:	604a      	str	r2, [r1, #4]
  FLASH->ACR = STM32_FLASHBITS;
 8002c06:	6018      	str	r0, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8002c08:	684b      	ldr	r3, [r1, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8002c0a:	4a05      	ldr	r2, [pc, #20]	; (8002c20 <__early_init+0x70>)
  RCC->CFGR |= STM32_SW;
 8002c0c:	f043 0302 	orr.w	r3, r3, #2
 8002c10:	604b      	str	r3, [r1, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8002c12:	6853      	ldr	r3, [r2, #4]
 8002c14:	f003 030c 	and.w	r3, r3, #12
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d1fa      	bne.n	8002c12 <__early_init+0x62>
}
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	40021000 	.word	0x40021000
 8002c24:	001d6400 	.word	0x001d6400
 8002c28:	40022000 	.word	0x40022000
 8002c2c:	00000000 	.word	0x00000000

08002c30 <chVTDoResetI>:
  return (bool)(dlhp->next == dlp);
 8002c30:	4b29      	ldr	r3, [pc, #164]	; (8002cd8 <chVTDoResetI+0xa8>)
void chVTDoResetI(virtual_timer_t *vtp) {
 8002c32:	b430      	push	{r4, r5}
 8002c34:	691a      	ldr	r2, [r3, #16]
  if (!ch_dlist_isfirst(&vtlp->dlist, &vtp->dlist)) {
 8002c36:	4290      	cmp	r0, r2
 8002c38:	d00e      	beq.n	8002c58 <chVTDoResetI+0x28>
  dlp->prev->next = dlp->next;
 8002c3a:	6802      	ldr	r2, [r0, #0]
    vtp->dlist.next->delta += vtp->dlist.delta;
 8002c3c:	6884      	ldr	r4, [r0, #8]
 8002c3e:	6891      	ldr	r1, [r2, #8]
    vtp->dlist.next = NULL;
 8002c40:	2500      	movs	r5, #0
    vtp->dlist.next->delta += vtp->dlist.delta;
 8002c42:	4421      	add	r1, r4
 8002c44:	6844      	ldr	r4, [r0, #4]
 8002c46:	6022      	str	r2, [r4, #0]
 8002c48:	e9c2 4101 	strd	r4, r1, [r2, #4]
    vtlp->dlist.delta = (sysinterval_t)-1;
 8002c4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    vtp->dlist.next = NULL;
 8002c50:	6005      	str	r5, [r0, #0]
    vtlp->dlist.delta = (sysinterval_t)-1;
 8002c52:	619a      	str	r2, [r3, #24]
}
 8002c54:	bc30      	pop	{r4, r5}
 8002c56:	4770      	bx	lr
  dlhp->next       = dlp->next;
 8002c58:	461a      	mov	r2, r3
  vtp->dlist.next = NULL;
 8002c5a:	2400      	movs	r4, #0
 8002c5c:	6801      	ldr	r1, [r0, #0]
 8002c5e:	f842 1f10 	str.w	r1, [r2, #16]!
  dlhp->next->prev = dlhp;
 8002c62:	604a      	str	r2, [r1, #4]
 8002c64:	6004      	str	r4, [r0, #0]
  return (bool)(dlhp == dlhp->next);
 8002c66:	6919      	ldr	r1, [r3, #16]
  if (ch_dlist_isempty(&vtlp->dlist)) {
 8002c68:	4291      	cmp	r1, r2
 8002c6a:	d02e      	beq.n	8002cca <chVTDoResetI+0x9a>
 8002c6c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  vtlp->dlist.next->delta += vtp->dlist.delta;
 8002c70:	688a      	ldr	r2, [r1, #8]
 8002c72:	6880      	ldr	r0, [r0, #8]
 8002c74:	4402      	add	r2, r0
 8002c76:	608a      	str	r2, [r1, #8]
 8002c78:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002c7a:	8b98      	ldrh	r0, [r3, #28]
 8002c7c:	b289      	uxth	r1, r1
 8002c7e:	1a08      	subs	r0, r1, r0
 8002c80:	b280      	uxth	r0, r0
  if (nowdelta >= vtlp->dlist.next->delta) {
 8002c82:	4282      	cmp	r2, r0
 8002c84:	d9e6      	bls.n	8002c54 <chVTDoResetI+0x24>
  delta = vtlp->dlist.next->delta - nowdelta;
 8002c86:	1a12      	subs	r2, r2, r0
 8002c88:	f5b2 4f7f 	cmp.w	r2, #65280	; 0xff00
 8002c8c:	bf28      	it	cs
 8002c8e:	f44f 427f 	movcs.w	r2, #65280	; 0xff00
 8002c92:	2a02      	cmp	r2, #2
 8002c94:	bf38      	it	cc
 8002c96:	2202      	movcc	r2, #2
  return systime + (systime_t)interval;
 8002c98:	1888      	adds	r0, r1, r2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8002c9a:	b280      	uxth	r0, r0
 8002c9c:	6360      	str	r0, [r4, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8002c9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002ca0:	b280      	uxth	r0, r0
  return (sysinterval_t)((systime_t)(end - start));
 8002ca2:	1a41      	subs	r1, r0, r1
 8002ca4:	b289      	uxth	r1, r1
    if (likely(nowdelta < delay)) {
 8002ca6:	4291      	cmp	r1, r2
 8002ca8:	d3d4      	bcc.n	8002c54 <chVTDoResetI+0x24>
 8002caa:	2202      	movs	r2, #2
    currdelta += (sysinterval_t)1;
 8002cac:	3201      	adds	r2, #1
  return systime + (systime_t)interval;
 8002cae:	1881      	adds	r1, r0, r2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8002cb0:	b289      	uxth	r1, r1
 8002cb2:	6361      	str	r1, [r4, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8002cb4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002cb6:	b289      	uxth	r1, r1
  return (sysinterval_t)((systime_t)(end - start));
 8002cb8:	1a08      	subs	r0, r1, r0
 8002cba:	b280      	uxth	r0, r0
    if (likely(nowdelta < delay)) {
 8002cbc:	4290      	cmp	r0, r2
 8002cbe:	d208      	bcs.n	8002cd2 <chVTDoResetI+0xa2>
  currcore->rfcu.mask |= mask;
 8002cc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cc2:	f042 0201 	orr.w	r2, r2, #1
 8002cc6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002cc8:	e7c4      	b.n	8002c54 <chVTDoResetI+0x24>
  STM32_ST_TIM->DIER = 0U;
 8002cca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002cce:	60dc      	str	r4, [r3, #12]
 * @api
 */
void stStopAlarm(void) {

  st_lld_stop_alarm();
}
 8002cd0:	e7c0      	b.n	8002c54 <chVTDoResetI+0x24>
  return (systime_t)STM32_ST_TIM->CNT;
 8002cd2:	4608      	mov	r0, r1
 8002cd4:	e7ea      	b.n	8002cac <chVTDoResetI+0x7c>
 8002cd6:	bf00      	nop
 8002cd8:	20001050 	.word	0x20001050
 8002cdc:	00000000 	.word	0x00000000

08002ce0 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8002ce0:	b570      	push	{r4, r5, r6, lr}
  thread_t *tp = __instance_get_currthread(currcore);
 8002ce2:	4c19      	ldr	r4, [pc, #100]	; (8002d48 <chSchGoSleepTimeoutS+0x68>)
  if (TIME_INFINITE != timeout) {
 8002ce4:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8002ce6:	4605      	mov	r5, r0
  thread_t *tp = __instance_get_currthread(currcore);
 8002ce8:	68e6      	ldr	r6, [r4, #12]
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8002cea:	b086      	sub	sp, #24
  if (TIME_INFINITE != timeout) {
 8002cec:	d01c      	beq.n	8002d28 <chSchGoSleepTimeoutS+0x48>
  vtp->func    = vtfunc;
 8002cee:	4b17      	ldr	r3, [pc, #92]	; (8002d4c <chSchGoSleepTimeoutS+0x6c>)
  vt_enqueue(vtlp, vtp, delay);
 8002cf0:	4668      	mov	r0, sp
  vtp->func    = vtfunc;
 8002cf2:	e9cd 3603 	strd	r3, r6, [sp, #12]
  vtp->reload  = (sysinterval_t)0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	9305      	str	r3, [sp, #20]
  vt_enqueue(vtlp, vtp, delay);
 8002cfa:	f00b ff19 	bl	800eb30 <vt_enqueue.constprop.0>
  ntp->state = CH_STATE_CURRENT;
 8002cfe:	2201      	movs	r2, #1
  thread_t *otp = __instance_get_currthread(oip);
 8002d00:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 8002d02:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 8002d04:	f881 5028 	strb.w	r5, [r1, #40]	; 0x28
  pqp->next       = p->next;
 8002d08:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 8002d0a:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8002d0c:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  pqp->next       = p->next;
 8002d10:	6023      	str	r3, [r4, #0]
  __instance_set_currthread(oip, ntp);
 8002d12:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8002d14:	f7fd fa94 	bl	8000240 <__port_switch>
    if (chVTIsArmedI(&vt)) {
 8002d18:	9b00      	ldr	r3, [sp, #0]
 8002d1a:	b113      	cbz	r3, 8002d22 <chSchGoSleepTimeoutS+0x42>
      chVTDoResetI(&vt);
 8002d1c:	4668      	mov	r0, sp
 8002d1e:	f7ff ff87 	bl	8002c30 <chVTDoResetI>
}
 8002d22:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002d24:	b006      	add	sp, #24
 8002d26:	bd70      	pop	{r4, r5, r6, pc}
  ntp->state = CH_STATE_CURRENT;
 8002d28:	2201      	movs	r2, #1
  ch_priority_queue_t *p = pqp->next;
 8002d2a:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 8002d2c:	f886 5028 	strb.w	r5, [r6, #40]	; 0x28
  pqp->next       = p->next;
 8002d30:	6803      	ldr	r3, [r0, #0]
  chSysSwitch(ntp, otp);
 8002d32:	4631      	mov	r1, r6
  pqp->next->prev = pqp;
 8002d34:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8002d36:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  __instance_set_currthread(oip, ntp);
 8002d3a:	60e0      	str	r0, [r4, #12]
  pqp->next       = p->next;
 8002d3c:	6023      	str	r3, [r4, #0]
  chSysSwitch(ntp, otp);
 8002d3e:	f7fd fa7f 	bl	8000240 <__port_switch>
}
 8002d42:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002d44:	b006      	add	sp, #24
 8002d46:	bd70      	pop	{r4, r5, r6, pc}
 8002d48:	20001050 	.word	0x20001050
 8002d4c:	080013e1 	.word	0x080013e1

08002d50 <obqPutTimeout>:
                    sysinterval_t timeout) {
 8002d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002d52:	2330      	movs	r3, #48	; 0x30
 8002d54:	4604      	mov	r4, r0
 8002d56:	460e      	mov	r6, r1
 8002d58:	f383 8811 	msr	BASEPRI, r3
  if (obqp->ptr == NULL) {
 8002d5c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002d5e:	b313      	cbz	r3, 8002da6 <obqPutTimeout+0x56>
  *obqp->ptr = b;
 8002d60:	701e      	strb	r6, [r3, #0]
  if (obqp->ptr >= obqp->top) {
 8002d62:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
  obqp->ptr++;
 8002d66:	3301      	adds	r3, #1
  if (obqp->ptr >= obqp->top) {
 8002d68:	4293      	cmp	r3, r2
  obqp->ptr++;
 8002d6a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (obqp->ptr >= obqp->top) {
 8002d6c:	d203      	bcs.n	8002d76 <obqPutTimeout+0x26>
 8002d6e:	2000      	movs	r0, #0
 8002d70:	f380 8811 	msr	BASEPRI, r0
}
 8002d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8002d76:	69e2      	ldr	r2, [r4, #28]
  *((size_t *)(void *)obqp->bwrptr) = size;
 8002d78:	6923      	ldr	r3, [r4, #16]
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8002d7a:	3a04      	subs	r2, #4
  *((size_t *)(void *)obqp->bwrptr) = size;
 8002d7c:	601a      	str	r2, [r3, #0]
  obqp->bcounter--;
 8002d7e:	68e2      	ldr	r2, [r4, #12]
  if (obqp->bwrptr >= obqp->btop) {
 8002d80:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
  obqp->bcounter--;
 8002d84:	3a01      	subs	r2, #1
 8002d86:	60e2      	str	r2, [r4, #12]
  obqp->ptr = NULL;
 8002d88:	2200      	movs	r2, #0
  obqp->bwrptr += obqp->bsize;
 8002d8a:	4403      	add	r3, r0
  if (obqp->bwrptr >= obqp->btop) {
 8002d8c:	428b      	cmp	r3, r1
  obqp->bwrptr += obqp->bsize;
 8002d8e:	6123      	str	r3, [r4, #16]
    obqp->bwrptr = obqp->buffers;
 8002d90:	bf28      	it	cs
 8002d92:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
  obqp->ptr = NULL;
 8002d94:	62a2      	str	r2, [r4, #40]	; 0x28
    obqp->bwrptr = obqp->buffers;
 8002d96:	bf28      	it	cs
 8002d98:	6123      	strcs	r3, [r4, #16]
  if (obqp->notify != NULL) {
 8002d9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0e6      	beq.n	8002d6e <obqPutTimeout+0x1e>
    obqp->notify(obqp);
 8002da0:	4620      	mov	r0, r4
 8002da2:	4798      	blx	r3
 8002da4:	e7e3      	b.n	8002d6e <obqPutTimeout+0x1e>
 8002da6:	4615      	mov	r5, r2
  return __sch_get_currthread();
 8002da8:	4f11      	ldr	r7, [pc, #68]	; (8002df0 <obqPutTimeout+0xa0>)
 8002daa:	e00a      	b.n	8002dc2 <obqPutTimeout+0x72>
  p->prev       = qp->prev;
 8002dac:	6862      	ldr	r2, [r4, #4]
    return MSG_TIMEOUT;
  }

  ch_queue_insert(&tqp->queue, (ch_queue_t *)currtp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002dae:	4629      	mov	r1, r5
 8002db0:	e9c3 4200 	strd	r4, r2, [r3]
 8002db4:	2004      	movs	r0, #4
  p->prev->next = p;
 8002db6:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 8002db8:	6063      	str	r3, [r4, #4]
 8002dba:	f7ff ff91 	bl	8002ce0 <chSchGoSleepTimeoutS>
    if (msg < MSG_OK) {
 8002dbe:	2800      	cmp	r0, #0
 8002dc0:	db08      	blt.n	8002dd4 <obqPutTimeout+0x84>
  while (obqIsFullI(obqp)) {
 8002dc2:	68e3      	ldr	r3, [r4, #12]
 8002dc4:	b953      	cbnz	r3, 8002ddc <obqPutTimeout+0x8c>
    if (obqp->suspended) {
 8002dc6:	7a23      	ldrb	r3, [r4, #8]
 8002dc8:	b97b      	cbnz	r3, 8002dea <obqPutTimeout+0x9a>
 8002dca:	68fb      	ldr	r3, [r7, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 8002dcc:	2d00      	cmp	r5, #0
 8002dce:	d1ed      	bne.n	8002dac <obqPutTimeout+0x5c>
    return MSG_TIMEOUT;
 8002dd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f383 8811 	msr	BASEPRI, r3
}
 8002dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8002ddc:	6922      	ldr	r2, [r4, #16]
  obqp->top = obqp->bwrptr + obqp->bsize;
 8002dde:	69e1      	ldr	r1, [r4, #28]
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8002de0:	1d13      	adds	r3, r2, #4
  obqp->top = obqp->bwrptr + obqp->bsize;
 8002de2:	440a      	add	r2, r1
 8002de4:	e9c4 320a 	strd	r3, r2, [r4, #40]	; 0x28
    if (msg != MSG_OK) {
 8002de8:	e7ba      	b.n	8002d60 <obqPutTimeout+0x10>
      return MSG_RESET;
 8002dea:	f06f 0001 	mvn.w	r0, #1
 8002dee:	e7f1      	b.n	8002dd4 <obqPutTimeout+0x84>
 8002df0:	20001050 	.word	0x20001050
	...

08002e00 <_put.lto_priv.0>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
 8002e00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e04:	3044      	adds	r0, #68	; 0x44
 8002e06:	f7ff bfa3 	b.w	8002d50 <obqPutTimeout>
 8002e0a:	bf00      	nop
 8002e0c:	0000      	movs	r0, r0
	...

08002e10 <_putt.lto_priv.0>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
 8002e10:	3044      	adds	r0, #68	; 0x44
 8002e12:	f7ff bf9d 	b.w	8002d50 <obqPutTimeout>
 8002e16:	bf00      	nop
	...

08002e20 <ibqGetTimeout>:
msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, sysinterval_t timeout) {
 8002e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e22:	2330      	movs	r3, #48	; 0x30
 8002e24:	4604      	mov	r4, r0
 8002e26:	f383 8811 	msr	BASEPRI, r3
  if (ibqp->ptr == NULL) {
 8002e2a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002e2c:	b313      	cbz	r3, 8002e74 <ibqGetTimeout+0x54>
  if (ibqp->ptr >= ibqp->top) {
 8002e2e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  msg = (msg_t)*ibqp->ptr;
 8002e30:	f813 6b01 	ldrb.w	r6, [r3], #1
  if (ibqp->ptr >= ibqp->top) {
 8002e34:	4293      	cmp	r3, r2
  ibqp->ptr++;
 8002e36:	62a3      	str	r3, [r4, #40]	; 0x28
  if (ibqp->ptr >= ibqp->top) {
 8002e38:	d204      	bcs.n	8002e44 <ibqGetTimeout+0x24>
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	f383 8811 	msr	BASEPRI, r3
}
 8002e40:	4630      	mov	r0, r6
 8002e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ibqp->bcounter--;
 8002e44:	68e2      	ldr	r2, [r4, #12]
  ibqp->brdptr += ibqp->bsize;
 8002e46:	6963      	ldr	r3, [r4, #20]
  ibqp->bcounter--;
 8002e48:	3a01      	subs	r2, #1
 8002e4a:	60e2      	str	r2, [r4, #12]
  ibqp->ptr = NULL;
 8002e4c:	2200      	movs	r2, #0
  ibqp->brdptr += ibqp->bsize;
 8002e4e:	69e1      	ldr	r1, [r4, #28]
  ibqp->ptr = NULL;
 8002e50:	62a2      	str	r2, [r4, #40]	; 0x28
  ibqp->brdptr += ibqp->bsize;
 8002e52:	440b      	add	r3, r1
  if (ibqp->brdptr >= ibqp->btop) {
 8002e54:	69a1      	ldr	r1, [r4, #24]
  ibqp->brdptr += ibqp->bsize;
 8002e56:	6163      	str	r3, [r4, #20]
  if (ibqp->brdptr >= ibqp->btop) {
 8002e58:	428b      	cmp	r3, r1
    ibqp->brdptr = ibqp->buffers;
 8002e5a:	bf24      	itt	cs
 8002e5c:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
 8002e5e:	6163      	strcs	r3, [r4, #20]
  if (ibqp->notify != NULL) {
 8002e60:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0e9      	beq.n	8002e3a <ibqGetTimeout+0x1a>
    ibqp->notify(ibqp);
 8002e66:	4620      	mov	r0, r4
 8002e68:	4798      	blx	r3
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	f383 8811 	msr	BASEPRI, r3
}
 8002e70:	4630      	mov	r0, r6
 8002e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e74:	460d      	mov	r5, r1
 8002e76:	4f12      	ldr	r7, [pc, #72]	; (8002ec0 <ibqGetTimeout+0xa0>)
 8002e78:	e00a      	b.n	8002e90 <ibqGetTimeout+0x70>
  p->prev       = qp->prev;
 8002e7a:	6862      	ldr	r2, [r4, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002e7c:	4629      	mov	r1, r5
 8002e7e:	e9c3 4200 	strd	r4, r2, [r3]
 8002e82:	2004      	movs	r0, #4
  p->prev->next = p;
 8002e84:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 8002e86:	6063      	str	r3, [r4, #4]
 8002e88:	f7ff ff2a 	bl	8002ce0 <chSchGoSleepTimeoutS>
    if (msg < MSG_OK) {
 8002e8c:	1e06      	subs	r6, r0, #0
 8002e8e:	dbd4      	blt.n	8002e3a <ibqGetTimeout+0x1a>
  while (ibqIsEmptyI(ibqp)) {
 8002e90:	68e3      	ldr	r3, [r4, #12]
 8002e92:	b95b      	cbnz	r3, 8002eac <ibqGetTimeout+0x8c>
    if (ibqp->suspended) {
 8002e94:	7a23      	ldrb	r3, [r4, #8]
 8002e96:	b983      	cbnz	r3, 8002eba <ibqGetTimeout+0x9a>
 8002e98:	68fb      	ldr	r3, [r7, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 8002e9a:	2d00      	cmp	r5, #0
 8002e9c:	d1ed      	bne.n	8002e7a <ibqGetTimeout+0x5a>
    return MSG_TIMEOUT;
 8002e9e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	f383 8811 	msr	BASEPRI, r3
}
 8002ea8:	4630      	mov	r0, r6
 8002eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8002eac:	6963      	ldr	r3, [r4, #20]
  ibqp->top = ibqp->ptr + *((size_t *)(void *)ibqp->brdptr);
 8002eae:	681a      	ldr	r2, [r3, #0]
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8002eb0:	3304      	adds	r3, #4
  ibqp->top = ibqp->ptr + *((size_t *)(void *)ibqp->brdptr);
 8002eb2:	441a      	add	r2, r3
 8002eb4:	e9c4 320a 	strd	r3, r2, [r4, #40]	; 0x28
    if (msg != MSG_OK) {
 8002eb8:	e7ba      	b.n	8002e30 <ibqGetTimeout+0x10>
      return MSG_RESET;
 8002eba:	f06f 0601 	mvn.w	r6, #1
 8002ebe:	e7bc      	b.n	8002e3a <ibqGetTimeout+0x1a>
 8002ec0:	20001050 	.word	0x20001050
	...

08002ed0 <_get.lto_priv.0>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, TIME_INFINITE);
 8002ed0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ed4:	300c      	adds	r0, #12
 8002ed6:	f7ff bfa3 	b.w	8002e20 <ibqGetTimeout>
 8002eda:	bf00      	nop
 8002edc:	0000      	movs	r0, r0
	...

08002ee0 <_gett.lto_priv.0>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, timeout);
 8002ee0:	300c      	adds	r0, #12
 8002ee2:	f7ff bf9d 	b.w	8002e20 <ibqGetTimeout>
 8002ee6:	bf00      	nop
	...

08002ef0 <ibqReadTimeout>:
                      size_t n, sysinterval_t timeout) {
 8002ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ef4:	2430      	movs	r4, #48	; 0x30
 8002ef6:	4681      	mov	r9, r0
 8002ef8:	460d      	mov	r5, r1
 8002efa:	4617      	mov	r7, r2
 8002efc:	461e      	mov	r6, r3
 8002efe:	f384 8811 	msr	BASEPRI, r4
  size_t r = 0;
 8002f02:	2400      	movs	r4, #0
 8002f04:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8003020 <ibqReadTimeout+0x130>
    if (ibqp->ptr == NULL) {
 8002f08:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 8002f0c:	2900      	cmp	r1, #0
 8002f0e:	d041      	beq.n	8002f94 <ibqReadTimeout+0xa4>
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 8002f10:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
    if (size > (n - r)) {
 8002f14:	eba7 0a04 	sub.w	sl, r7, r4
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 8002f18:	1a52      	subs	r2, r2, r1
    if (size > (n - r)) {
 8002f1a:	4592      	cmp	sl, r2
 8002f1c:	bf28      	it	cs
 8002f1e:	4692      	movcs	sl, r2
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 8002f20:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8002f24:	d946      	bls.n	8002fb4 <ibqReadTimeout+0xc4>
      memcpy(bp, ibqp->ptr, BUFFERS_CHUNKS_SIZE);
 8002f26:	462b      	mov	r3, r5
 8002f28:	f101 0a40 	add.w	sl, r1, #64	; 0x40
 8002f2c:	f8d1 e000 	ldr.w	lr, [r1]
 8002f30:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8002f34:	6888      	ldr	r0, [r1, #8]
 8002f36:	68ca      	ldr	r2, [r1, #12]
 8002f38:	3110      	adds	r1, #16
 8002f3a:	4551      	cmp	r1, sl
 8002f3c:	f8c3 e000 	str.w	lr, [r3]
 8002f40:	f8c3 c004 	str.w	ip, [r3, #4]
 8002f44:	6098      	str	r0, [r3, #8]
 8002f46:	60da      	str	r2, [r3, #12]
 8002f48:	f103 0310 	add.w	r3, r3, #16
 8002f4c:	d1ee      	bne.n	8002f2c <ibqReadTimeout+0x3c>
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 8002f4e:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
    if (ibqp->ptr >= ibqp->top) {
 8002f52:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 8002f56:	3340      	adds	r3, #64	; 0x40
    if (ibqp->ptr >= ibqp->top) {
 8002f58:	4293      	cmp	r3, r2
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 8002f5a:	f105 0540 	add.w	r5, r5, #64	; 0x40
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 8002f5e:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
      r         += (size_t)BUFFERS_CHUNKS_SIZE;
 8002f62:	f104 0440 	add.w	r4, r4, #64	; 0x40
    if (ibqp->ptr >= ibqp->top) {
 8002f66:	d234      	bcs.n	8002fd2 <ibqReadTimeout+0xe2>
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f383 8811 	msr	BASEPRI, r3
    if (r >= n) {
 8002f6e:	42bc      	cmp	r4, r7
 8002f70:	d21d      	bcs.n	8002fae <ibqReadTimeout+0xbe>
 8002f72:	2330      	movs	r3, #48	; 0x30
 8002f74:	f383 8811 	msr	BASEPRI, r3
}
 8002f78:	e7c6      	b.n	8002f08 <ibqReadTimeout+0x18>
  p->prev       = qp->prev;
 8002f7a:	f8d9 2004 	ldr.w	r2, [r9, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002f7e:	4631      	mov	r1, r6
 8002f80:	e9c3 9200 	strd	r9, r2, [r3]
 8002f84:	2004      	movs	r0, #4
  p->prev->next = p;
 8002f86:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 8002f88:	f8c9 3004 	str.w	r3, [r9, #4]
 8002f8c:	f7ff fea8 	bl	8002ce0 <chSchGoSleepTimeoutS>
    if (msg < MSG_OK) {
 8002f90:	2800      	cmp	r0, #0
 8002f92:	db09      	blt.n	8002fa8 <ibqReadTimeout+0xb8>
  while (ibqIsEmptyI(ibqp)) {
 8002f94:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8002f98:	bbd3      	cbnz	r3, 8003010 <ibqReadTimeout+0x120>
    if (ibqp->suspended) {
 8002f9a:	f899 3008 	ldrb.w	r3, [r9, #8]
 8002f9e:	b91b      	cbnz	r3, 8002fa8 <ibqReadTimeout+0xb8>
 8002fa0:	f8d8 300c 	ldr.w	r3, [r8, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 8002fa4:	2e00      	cmp	r6, #0
 8002fa6:	d1e8      	bne.n	8002f7a <ibqReadTimeout+0x8a>
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f383 8811 	msr	BASEPRI, r3
}
 8002fae:	4620      	mov	r0, r4
 8002fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      memcpy(bp, ibqp->ptr, size);
 8002fb4:	4628      	mov	r0, r5
 8002fb6:	4652      	mov	r2, sl
 8002fb8:	f7fd f98c 	bl	80002d4 <memcpy>
      ibqp->ptr += size;
 8002fbc:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
    if (ibqp->ptr >= ibqp->top) {
 8002fc0:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
      ibqp->ptr += size;
 8002fc4:	4453      	add	r3, sl
    if (ibqp->ptr >= ibqp->top) {
 8002fc6:	4293      	cmp	r3, r2
      bp        += size;
 8002fc8:	4455      	add	r5, sl
      ibqp->ptr += size;
 8002fca:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
      r         += size;
 8002fce:	4454      	add	r4, sl
    if (ibqp->ptr >= ibqp->top) {
 8002fd0:	d3ca      	bcc.n	8002f68 <ibqReadTimeout+0x78>
  if (ibqp->brdptr >= ibqp->btop) {
 8002fd2:	e9d9 2106 	ldrd	r2, r1, [r9, #24]
  ibqp->brdptr += ibqp->bsize;
 8002fd6:	f8d9 3014 	ldr.w	r3, [r9, #20]
  ibqp->bcounter--;
 8002fda:	f8d9 000c 	ldr.w	r0, [r9, #12]
  ibqp->brdptr += ibqp->bsize;
 8002fde:	440b      	add	r3, r1
  if (ibqp->brdptr >= ibqp->btop) {
 8002fe0:	4293      	cmp	r3, r2
  ibqp->ptr = NULL;
 8002fe2:	f04f 0200 	mov.w	r2, #0
  ibqp->brdptr += ibqp->bsize;
 8002fe6:	f8c9 3014 	str.w	r3, [r9, #20]
    ibqp->brdptr = ibqp->buffers;
 8002fea:	bf28      	it	cs
 8002fec:	f8d9 3024 	ldrcs.w	r3, [r9, #36]	; 0x24
  ibqp->bcounter--;
 8002ff0:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    ibqp->brdptr = ibqp->buffers;
 8002ff4:	bf28      	it	cs
 8002ff6:	f8c9 3014 	strcs.w	r3, [r9, #20]
  if (ibqp->notify != NULL) {
 8002ffa:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
  ibqp->bcounter--;
 8002ffe:	f8c9 000c 	str.w	r0, [r9, #12]
  ibqp->ptr = NULL;
 8003002:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
  if (ibqp->notify != NULL) {
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0ae      	beq.n	8002f68 <ibqReadTimeout+0x78>
    ibqp->notify(ibqp);
 800300a:	4648      	mov	r0, r9
 800300c:	4798      	blx	r3
 800300e:	e7ab      	b.n	8002f68 <ibqReadTimeout+0x78>
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8003010:	f8d9 1014 	ldr.w	r1, [r9, #20]
  ibqp->top = ibqp->ptr + *((size_t *)(void *)ibqp->brdptr);
 8003014:	680a      	ldr	r2, [r1, #0]
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8003016:	3104      	adds	r1, #4
  ibqp->top = ibqp->ptr + *((size_t *)(void *)ibqp->brdptr);
 8003018:	440a      	add	r2, r1
 800301a:	e9c9 120a 	strd	r1, r2, [r9, #40]	; 0x28
      if (msg != MSG_OK) {
 800301e:	e779      	b.n	8002f14 <ibqReadTimeout+0x24>
 8003020:	20001050 	.word	0x20001050
	...

08003030 <_read.lto_priv.0>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp,
 8003030:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003034:	300c      	adds	r0, #12
 8003036:	f7ff bf5b 	b.w	8002ef0 <ibqReadTimeout>
 800303a:	bf00      	nop
 800303c:	0000      	movs	r0, r0
	...

08003040 <_readt.lto_priv.0>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
 8003040:	300c      	adds	r0, #12
 8003042:	f7ff bf55 	b.w	8002ef0 <ibqReadTimeout>
 8003046:	bf00      	nop
	...

08003050 <obqWriteTimeout>:
                       size_t n, sysinterval_t timeout) {
 8003050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003054:	2530      	movs	r5, #48	; 0x30
 8003056:	4604      	mov	r4, r0
 8003058:	4689      	mov	r9, r1
 800305a:	4617      	mov	r7, r2
 800305c:	461e      	mov	r6, r3
 800305e:	f385 8811 	msr	BASEPRI, r5
  size_t w = 0;
 8003062:	2500      	movs	r5, #0
 8003064:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8003158 <obqWriteTimeout+0x108>
    if (obqp->ptr == NULL) {
 8003068:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800306a:	2800      	cmp	r0, #0
 800306c:	d03a      	beq.n	80030e4 <obqWriteTimeout+0x94>
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 800306e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    if (size > (n - w)) {
 8003070:	eba7 0a05 	sub.w	sl, r7, r5
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8003074:	1a12      	subs	r2, r2, r0
    if (size > (n - w)) {
 8003076:	4592      	cmp	sl, r2
 8003078:	bf28      	it	cs
 800307a:	4692      	movcs	sl, r2
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 800307c:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
      memcpy(obqp->ptr, bp, (size_t)BUFFERS_CHUNKS_SIZE);
 8003080:	4649      	mov	r1, r9
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 8003082:	d93e      	bls.n	8003102 <obqWriteTimeout+0xb2>
      memcpy(obqp->ptr, bp, (size_t)BUFFERS_CHUNKS_SIZE);
 8003084:	f109 0940 	add.w	r9, r9, #64	; 0x40
 8003088:	f8d1 e000 	ldr.w	lr, [r1]
 800308c:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8003090:	688a      	ldr	r2, [r1, #8]
 8003092:	68cb      	ldr	r3, [r1, #12]
 8003094:	3110      	adds	r1, #16
 8003096:	4549      	cmp	r1, r9
 8003098:	f8c0 e000 	str.w	lr, [r0]
 800309c:	f8c0 c004 	str.w	ip, [r0, #4]
 80030a0:	6082      	str	r2, [r0, #8]
 80030a2:	60c3      	str	r3, [r0, #12]
 80030a4:	f100 0010 	add.w	r0, r0, #16
 80030a8:	d1ee      	bne.n	8003088 <obqWriteTimeout+0x38>
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 80030aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (obqp->ptr >= obqp->top) {
 80030ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 80030ae:	3340      	adds	r3, #64	; 0x40
    if (obqp->ptr >= obqp->top) {
 80030b0:	4293      	cmp	r3, r2
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 80030b2:	4689      	mov	r9, r1
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 80030b4:	62a3      	str	r3, [r4, #40]	; 0x28
      w         += (size_t)BUFFERS_CHUNKS_SIZE;
 80030b6:	f105 0540 	add.w	r5, r5, #64	; 0x40
    if (obqp->ptr >= obqp->top) {
 80030ba:	d22d      	bcs.n	8003118 <obqWriteTimeout+0xc8>
 80030bc:	2300      	movs	r3, #0
 80030be:	f383 8811 	msr	BASEPRI, r3
    if (w >= n) {
 80030c2:	42bd      	cmp	r5, r7
 80030c4:	d21a      	bcs.n	80030fc <obqWriteTimeout+0xac>
 80030c6:	2330      	movs	r3, #48	; 0x30
 80030c8:	f383 8811 	msr	BASEPRI, r3
 80030cc:	e7cc      	b.n	8003068 <obqWriteTimeout+0x18>
  p->prev       = qp->prev;
 80030ce:	6862      	ldr	r2, [r4, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80030d0:	4631      	mov	r1, r6
 80030d2:	e9c3 4200 	strd	r4, r2, [r3]
 80030d6:	2004      	movs	r0, #4
  p->prev->next = p;
 80030d8:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 80030da:	6063      	str	r3, [r4, #4]
 80030dc:	f7ff fe00 	bl	8002ce0 <chSchGoSleepTimeoutS>
    if (msg < MSG_OK) {
 80030e0:	2800      	cmp	r0, #0
 80030e2:	db08      	blt.n	80030f6 <obqWriteTimeout+0xa6>
  while (obqIsFullI(obqp)) {
 80030e4:	68e3      	ldr	r3, [r4, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d12f      	bne.n	800314a <obqWriteTimeout+0xfa>
    if (obqp->suspended) {
 80030ea:	7a23      	ldrb	r3, [r4, #8]
 80030ec:	b91b      	cbnz	r3, 80030f6 <obqWriteTimeout+0xa6>
 80030ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 80030f2:	2e00      	cmp	r6, #0
 80030f4:	d1eb      	bne.n	80030ce <obqWriteTimeout+0x7e>
 80030f6:	2300      	movs	r3, #0
 80030f8:	f383 8811 	msr	BASEPRI, r3
}
 80030fc:	4628      	mov	r0, r5
 80030fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      memcpy(obqp->ptr, bp, size);
 8003102:	4652      	mov	r2, sl
 8003104:	f7fd f8e6 	bl	80002d4 <memcpy>
      obqp->ptr += size;
 8003108:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (obqp->ptr >= obqp->top) {
 800310a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      obqp->ptr += size;
 800310c:	4453      	add	r3, sl
    if (obqp->ptr >= obqp->top) {
 800310e:	4293      	cmp	r3, r2
      bp        += size;
 8003110:	44d1      	add	r9, sl
      obqp->ptr += size;
 8003112:	62a3      	str	r3, [r4, #40]	; 0x28
      w         += size;
 8003114:	4455      	add	r5, sl
    if (obqp->ptr >= obqp->top) {
 8003116:	d3d1      	bcc.n	80030bc <obqWriteTimeout+0x6c>
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8003118:	69e2      	ldr	r2, [r4, #28]
  *((size_t *)(void *)obqp->bwrptr) = size;
 800311a:	6923      	ldr	r3, [r4, #16]
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 800311c:	3a04      	subs	r2, #4
  *((size_t *)(void *)obqp->bwrptr) = size;
 800311e:	601a      	str	r2, [r3, #0]
  if (obqp->bwrptr >= obqp->btop) {
 8003120:	e9d4 2106 	ldrd	r2, r1, [r4, #24]
  obqp->bwrptr += obqp->bsize;
 8003124:	440b      	add	r3, r1
  if (obqp->bwrptr >= obqp->btop) {
 8003126:	4293      	cmp	r3, r2
  obqp->ptr = NULL;
 8003128:	f04f 0200 	mov.w	r2, #0
  obqp->bwrptr += obqp->bsize;
 800312c:	6123      	str	r3, [r4, #16]
    obqp->bwrptr = obqp->buffers;
 800312e:	bf28      	it	cs
 8003130:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
  obqp->bcounter--;
 8003132:	68e0      	ldr	r0, [r4, #12]
    obqp->bwrptr = obqp->buffers;
 8003134:	bf28      	it	cs
 8003136:	6123      	strcs	r3, [r4, #16]
  if (obqp->notify != NULL) {
 8003138:	6b23      	ldr	r3, [r4, #48]	; 0x30
  obqp->bcounter--;
 800313a:	3801      	subs	r0, #1
 800313c:	60e0      	str	r0, [r4, #12]
  obqp->ptr = NULL;
 800313e:	62a2      	str	r2, [r4, #40]	; 0x28
  if (obqp->notify != NULL) {
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0bb      	beq.n	80030bc <obqWriteTimeout+0x6c>
    obqp->notify(obqp);
 8003144:	4620      	mov	r0, r4
 8003146:	4798      	blx	r3
 8003148:	e7b8      	b.n	80030bc <obqWriteTimeout+0x6c>
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 800314a:	6920      	ldr	r0, [r4, #16]
  obqp->top = obqp->bwrptr + obqp->bsize;
 800314c:	69e2      	ldr	r2, [r4, #28]
 800314e:	4402      	add	r2, r0
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8003150:	3004      	adds	r0, #4
  obqp->top = obqp->bwrptr + obqp->bsize;
 8003152:	e9c4 020a 	strd	r0, r2, [r4, #40]	; 0x28
      if (msg != MSG_OK) {
 8003156:	e78b      	b.n	8003070 <obqWriteTimeout+0x20>
 8003158:	20001050 	.word	0x20001050
 800315c:	00000000 	.word	0x00000000

08003160 <_write.lto_priv.0>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp,
 8003160:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003164:	3044      	adds	r0, #68	; 0x44
 8003166:	f7ff bf73 	b.w	8003050 <obqWriteTimeout>
 800316a:	bf00      	nop
 800316c:	0000      	movs	r0, r0
	...

08003170 <_writet.lto_priv.0>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
 8003170:	3044      	adds	r0, #68	; 0x44
 8003172:	f7ff bf6d 	b.w	8003050 <obqWriteTimeout>
 8003176:	bf00      	nop
	...

08003180 <_sdc_wait_for_transfer_state>:
bool _sdc_wait_for_transfer_state(SDCDriver *sdcp) {
 8003180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003184:	f240 454d 	movw	r5, #1101	; 0x44d
 8003188:	2630      	movs	r6, #48	; 0x30
 800318a:	4607      	mov	r7, r0
        MMCSD_R1_ERROR(resp[0])) {
 800318c:	4c16      	ldr	r4, [pc, #88]	; (80031e8 <_sdc_wait_for_transfer_state+0x68>)
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEND_STATUS,
 800318e:	6bba      	ldr	r2, [r7, #56]	; 0x38
  sdcp->sdio->ARG = arg;
 8003190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003192:	609a      	str	r2, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003194:	60dd      	str	r5, [r3, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8003196:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003198:	f011 0245 	ands.w	r2, r1, #69	; 0x45
 800319c:	d0fb      	beq.n	8003196 <_sdc_wait_for_transfer_state+0x16>
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0U) {
 800319e:	f011 0f05 	tst.w	r1, #5
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 80031a2:	639a      	str	r2, [r3, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0U) {
 80031a4:	d119      	bne.n	80031da <_sdc_wait_for_transfer_state+0x5a>
  *resp = sdcp->sdio->RESP1;
 80031a6:	695b      	ldr	r3, [r3, #20]
                                   sdcp->rca, resp) ||
 80031a8:	ea13 0804 	ands.w	r8, r3, r4
 80031ac:	d112      	bne.n	80031d4 <_sdc_wait_for_transfer_state+0x54>
    switch (MMCSD_R1_STS(resp[0])) {
 80031ae:	f3c3 2343 	ubfx	r3, r3, #9, #4
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d00b      	beq.n	80031ce <_sdc_wait_for_transfer_state+0x4e>
 80031b6:	3b05      	subs	r3, #5
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d80b      	bhi.n	80031d4 <_sdc_wait_for_transfer_state+0x54>
 80031bc:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chThdSleepS(sysinterval_t ticks) {

  chDbgCheck(ticks != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80031c0:	2102      	movs	r1, #2
 80031c2:	2008      	movs	r0, #8
 80031c4:	f7ff fd8c 	bl	8002ce0 <chSchGoSleepTimeoutS>
 80031c8:	f388 8811 	msr	BASEPRI, r8
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEND_STATUS,
 80031cc:	e7df      	b.n	800318e <_sdc_wait_for_transfer_state+0xe>
      return HAL_SUCCESS;
 80031ce:	4640      	mov	r0, r8
}
 80031d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (MMCSD_R1_STS(resp[0])) {
 80031d4:	2001      	movs	r0, #1
}
 80031d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sdc_lld_collect_errors(sdcp, sta);
 80031da:	4638      	mov	r0, r7
 80031dc:	f7fd fce0 	bl	8000ba0 <sdc_lld_collect_errors>
      return HAL_FAILED;
 80031e0:	2001      	movs	r0, #1
}
 80031e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031e6:	bf00      	nop
 80031e8:	fdffe008 	.word	0xfdffe008
 80031ec:	00000000 	.word	0x00000000

080031f0 <sdcDisconnect>:
bool sdcDisconnect(SDCDriver *sdcp) {
 80031f0:	b538      	push	{r3, r4, r5, lr}
 80031f2:	2330      	movs	r3, #48	; 0x30
 80031f4:	f383 8811 	msr	BASEPRI, r3
  if (sdcp->state == BLK_ACTIVE) {
 80031f8:	7903      	ldrb	r3, [r0, #4]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d012      	beq.n	8003224 <sdcDisconnect+0x34>
  sdcp->state = BLK_DISCONNECTING;
 80031fe:	2304      	movs	r3, #4
 8003200:	4604      	mov	r4, r0
 8003202:	2500      	movs	r5, #0
 8003204:	7103      	strb	r3, [r0, #4]
 8003206:	f385 8811 	msr	BASEPRI, r5
  if (_sdc_wait_for_transfer_state(sdcp)) {
 800320a:	f7ff ffb9 	bl	8003180 <_sdc_wait_for_transfer_state>
    sdcp->state = BLK_ACTIVE;
 800320e:	2202      	movs	r2, #2
 8003210:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  if (_sdc_wait_for_transfer_state(sdcp)) {
 8003212:	b918      	cbnz	r0, 800321c <sdcDisconnect+0x2c>
  sdcp->sdio->CLKCR = 0U;
 8003214:	6058      	str	r0, [r3, #4]
  sdcp->sdio->POWER = 0U;
 8003216:	6018      	str	r0, [r3, #0]
  sdcp->state = BLK_ACTIVE;
 8003218:	7122      	strb	r2, [r4, #4]
}
 800321a:	bd38      	pop	{r3, r4, r5, pc}
  sdcp->sdio->CLKCR = 0U;
 800321c:	605d      	str	r5, [r3, #4]
  sdcp->sdio->POWER = 0U;
 800321e:	601d      	str	r5, [r3, #0]
    sdcp->state = BLK_ACTIVE;
 8003220:	7122      	strb	r2, [r4, #4]
}
 8003222:	bd38      	pop	{r3, r4, r5, pc}
 8003224:	2000      	movs	r0, #0
 8003226:	f380 8811 	msr	BASEPRI, r0
 800322a:	bd38      	pop	{r3, r4, r5, pc}
 800322c:	0000      	movs	r0, r0
	...

08003230 <sdc_lld_read_special>:
                          uint8_t cmd, uint32_t arg) {
 8003230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003232:	4617      	mov	r7, r2
  sdcp->sdio->DTIMER = sdc_lld_get_timeout(sdcp, STM32_SDC_READ_TIMEOUT_MS);
 8003234:	6c82      	ldr	r2, [r0, #72]	; 0x48
                          uint8_t cmd, uint32_t arg) {
 8003236:	4604      	mov	r4, r0
  clkcr = sdcp->sdio->CLKCR;
 8003238:	6850      	ldr	r0, [r2, #4]
                          uint8_t cmd, uint32_t arg) {
 800323a:	461d      	mov	r5, r3
  if ((clkcr & SDIO_CLKCR_BYPASS) != 0U) {
 800323c:	0543      	lsls	r3, r0, #21
                          uint8_t cmd, uint32_t arg) {
 800323e:	460e      	mov	r6, r1
 8003240:	b083      	sub	sp, #12
  if ((clkcr & SDIO_CLKCR_BYPASS) != 0U) {
 8003242:	d44f      	bmi.n	80032e4 <sdc_lld_read_special+0xb4>
  return (((48000000U / (div * 2U)) / 1000U) * ms);
 8003244:	f64b 3380 	movw	r3, #48000	; 0xbb80
    div = (clkcr & SDIO_CLKCR_CLKDIV_Msk) + 2U;
 8003248:	b2c0      	uxtb	r0, r0
 800324a:	3002      	adds	r0, #2
  return (((48000000U / (div * 2U)) / 1000U) * ms);
 800324c:	0040      	lsls	r0, r0, #1
 800324e:	fbb3 f0f0 	udiv	r0, r3, r0
 8003252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003256:	fb03 f000 	mul.w	r0, r3, r0
  sdcp->sdio->DTIMER = sdc_lld_get_timeout(sdcp, STM32_SDC_READ_TIMEOUT_MS);
 800325a:	6250      	str	r0, [r2, #36]	; 0x24
  if (_sdc_wait_for_transfer_state(sdcp))
 800325c:	4620      	mov	r0, r4
 800325e:	f7ff ff8f 	bl	8003180 <_sdc_wait_for_transfer_state>
  dmaStreamDisable(sdcp->dma);
 8003262:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
  if (_sdc_wait_for_transfer_state(sdcp))
 8003266:	2800      	cmp	r0, #0
 8003268:	d145      	bne.n	80032f6 <sdc_lld_read_special+0xc6>
  sdcp->sdio->DCTRL = SDIO_DCTRL_DTDIR |
 800326a:	210f      	movs	r1, #15
  sdcp->sdio->ICR   = SDIO_ICR_ALL_FLAGS;
 800326c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
  sdcp->sdio->MASK  = SDIO_MASK_DCRCFAILIE |
 8003270:	f240 302a 	movw	r0, #810	; 0x32a
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003274:	f445 6288 	orr.w	r2, r5, #1088	; 0x440
  dmaStreamSetMemory0(sdcp->dma, buf);
 8003278:	f8dc 5004 	ldr.w	r5, [ip, #4]
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_P2M);
 800327c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  dmaStreamSetMemory0(sdcp->dma, buf);
 800327e:	60ee      	str	r6, [r5, #12]
  dmaStreamSetTransactionSize(sdcp->dma, bytes / sizeof (uint32_t));
 8003280:	08be      	lsrs	r6, r7, #2
 8003282:	606e      	str	r6, [r5, #4]
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_P2M);
 8003284:	602b      	str	r3, [r5, #0]
  dmaStreamEnable(sdcp->dma);
 8003286:	682b      	ldr	r3, [r5, #0]
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	602b      	str	r3, [r5, #0]
  sdcp->sdio->ICR   = SDIO_ICR_ALL_FLAGS;
 800328e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003290:	f8c3 e038 	str.w	lr, [r3, #56]	; 0x38
  sdcp->sdio->MASK  = SDIO_MASK_DCRCFAILIE |
 8003294:	63d8      	str	r0, [r3, #60]	; 0x3c
  sdcp->sdio->DLEN  = bytes;
 8003296:	629f      	str	r7, [r3, #40]	; 0x28
  sdcp->sdio->DCTRL = SDIO_DCTRL_DTDIR |
 8003298:	62d9      	str	r1, [r3, #44]	; 0x2c
  sdcp->sdio->ARG = arg;
 800329a:	9908      	ldr	r1, [sp, #32]
 800329c:	6099      	str	r1, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 800329e:	60da      	str	r2, [r3, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 80032a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032a2:	f011 0245 	ands.w	r2, r1, #69	; 0x45
 80032a6:	d0fb      	beq.n	80032a0 <sdc_lld_read_special+0x70>
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0U) {
 80032a8:	f011 0f05 	tst.w	r1, #5
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 80032ac:	639a      	str	r2, [r3, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0U) {
 80032ae:	d130      	bne.n	8003312 <sdc_lld_read_special+0xe2>
  *resp = sdcp->sdio->RESP1;
 80032b0:	6959      	ldr	r1, [r3, #20]
                                 || MMCSD_R1_ERROR(resp[0]))
 80032b2:	4a1c      	ldr	r2, [pc, #112]	; (8003324 <sdc_lld_read_special+0xf4>)
  *resp = sdcp->sdio->RESP1;
 80032b4:	9101      	str	r1, [sp, #4]
                                 || MMCSD_R1_ERROR(resp[0]))
 80032b6:	400a      	ands	r2, r1
 80032b8:	b30a      	cbz	r2, 80032fe <sdc_lld_read_special+0xce>
  dmaStreamDisable(sdcp->dma);
 80032ba:	682a      	ldr	r2, [r5, #0]
  sdc_lld_collect_errors(sdcp, sta);
 80032bc:	4620      	mov	r0, r4
  dmaStreamDisable(sdcp->dma);
 80032be:	f022 020f 	bic.w	r2, r2, #15
 80032c2:	602a      	str	r2, [r5, #0]
 80032c4:	220e      	movs	r2, #14
  sdcp->sdio->DCTRL = 0U;
 80032c6:	2400      	movs	r4, #0
  dmaStreamDisable(sdcp->dma);
 80032c8:	f89c 500d 	ldrb.w	r5, [ip, #13]
 80032cc:	f8dc 1000 	ldr.w	r1, [ip]
 80032d0:	40aa      	lsls	r2, r5
 80032d2:	604a      	str	r2, [r1, #4]
  sta                = sdcp->sdio->STA;
 80032d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
  sdcp->sdio->ICR   = sta;
 80032d6:	6399      	str	r1, [r3, #56]	; 0x38
  sdcp->sdio->DCTRL = 0U;
 80032d8:	62dc      	str	r4, [r3, #44]	; 0x2c
  sdc_lld_collect_errors(sdcp, sta);
 80032da:	f7fd fc61 	bl	8000ba0 <sdc_lld_collect_errors>
  return HAL_FAILED;
 80032de:	2001      	movs	r0, #1
}
 80032e0:	b003      	add	sp, #12
 80032e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032e4:	4810      	ldr	r0, [pc, #64]	; (8003328 <sdc_lld_read_special+0xf8>)
  sdcp->sdio->DTIMER = sdc_lld_get_timeout(sdcp, STM32_SDC_READ_TIMEOUT_MS);
 80032e6:	6250      	str	r0, [r2, #36]	; 0x24
  if (_sdc_wait_for_transfer_state(sdcp))
 80032e8:	4620      	mov	r0, r4
 80032ea:	f7ff ff49 	bl	8003180 <_sdc_wait_for_transfer_state>
  dmaStreamDisable(sdcp->dma);
 80032ee:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
  if (_sdc_wait_for_transfer_state(sdcp))
 80032f2:	2800      	cmp	r0, #0
 80032f4:	d0b9      	beq.n	800326a <sdc_lld_read_special+0x3a>
  sta                = sdcp->sdio->STA;
 80032f6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  dmaStreamDisable(sdcp->dma);
 80032f8:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80032fc:	e7dd      	b.n	80032ba <sdc_lld_read_special+0x8a>
  if (sdc_lld_wait_transaction_end(sdcp, 1, resp))
 80032fe:	2101      	movs	r1, #1
 8003300:	4620      	mov	r0, r4
 8003302:	aa01      	add	r2, sp, #4
 8003304:	f7fe f8dc 	bl	80014c0 <sdc_lld_wait_transaction_end>
 8003308:	2800      	cmp	r0, #0
 800330a:	d0e9      	beq.n	80032e0 <sdc_lld_read_special+0xb0>
  dmaStreamDisable(sdcp->dma);
 800330c:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
 8003310:	e7f1      	b.n	80032f6 <sdc_lld_read_special+0xc6>
    sdc_lld_collect_errors(sdcp, sta);
 8003312:	4620      	mov	r0, r4
 8003314:	f7fd fc44 	bl	8000ba0 <sdc_lld_collect_errors>
  sta                = sdcp->sdio->STA;
 8003318:	e9d4 c311 	ldrd	ip, r3, [r4, #68]	; 0x44
  dmaStreamDisable(sdcp->dma);
 800331c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8003320:	e7cb      	b.n	80032ba <sdc_lld_read_special+0x8a>
 8003322:	bf00      	nop
 8003324:	fdffe008 	.word	0xfdffe008
 8003328:	016e3600 	.word	0x016e3600
 800332c:	00000000 	.word	0x00000000

08003330 <sdc_lld_read_aligned>:
                          uint8_t *buf, uint32_t blocks) {
 8003330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003332:	4617      	mov	r7, r2
  sdcp->sdio->DTIMER = sdc_lld_get_timeout(sdcp, STM32_SDC_READ_TIMEOUT_MS);
 8003334:	6c82      	ldr	r2, [r0, #72]	; 0x48
                          uint8_t *buf, uint32_t blocks) {
 8003336:	4604      	mov	r4, r0
  clkcr = sdcp->sdio->CLKCR;
 8003338:	6850      	ldr	r0, [r2, #4]
                          uint8_t *buf, uint32_t blocks) {
 800333a:	460e      	mov	r6, r1
  if ((clkcr & SDIO_CLKCR_BYPASS) != 0U) {
 800333c:	0541      	lsls	r1, r0, #21
                          uint8_t *buf, uint32_t blocks) {
 800333e:	461d      	mov	r5, r3
 8003340:	b083      	sub	sp, #12
  if ((clkcr & SDIO_CLKCR_BYPASS) != 0U) {
 8003342:	d411      	bmi.n	8003368 <sdc_lld_read_aligned+0x38>
  return (((48000000U / (div * 2U)) / 1000U) * ms);
 8003344:	f64b 3380 	movw	r3, #48000	; 0xbb80
    div = (clkcr & SDIO_CLKCR_CLKDIV_Msk) + 2U;
 8003348:	b2c0      	uxtb	r0, r0
 800334a:	3002      	adds	r0, #2
  return (((48000000U / (div * 2U)) / 1000U) * ms);
 800334c:	0040      	lsls	r0, r0, #1
 800334e:	fbb3 f0f0 	udiv	r0, r3, r0
 8003352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003356:	fb03 f000 	mul.w	r0, r3, r0
  sdcp->sdio->DTIMER = sdc_lld_get_timeout(sdcp, STM32_SDC_READ_TIMEOUT_MS);
 800335a:	6250      	str	r0, [r2, #36]	; 0x24
  if (_sdc_wait_for_transfer_state(sdcp))
 800335c:	4620      	mov	r0, r4
 800335e:	f7ff ff0f 	bl	8003180 <_sdc_wait_for_transfer_state>
 8003362:	b140      	cbz	r0, 8003376 <sdc_lld_read_aligned+0x46>
}
 8003364:	b003      	add	sp, #12
 8003366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003368:	482a      	ldr	r0, [pc, #168]	; (8003414 <sdc_lld_read_aligned+0xe4>)
  sdcp->sdio->DTIMER = sdc_lld_get_timeout(sdcp, STM32_SDC_READ_TIMEOUT_MS);
 800336a:	6250      	str	r0, [r2, #36]	; 0x24
  if (_sdc_wait_for_transfer_state(sdcp))
 800336c:	4620      	mov	r0, r4
 800336e:	f7ff ff07 	bl	8003180 <_sdc_wait_for_transfer_state>
 8003372:	2800      	cmp	r0, #0
 8003374:	d1f6      	bne.n	8003364 <sdc_lld_read_aligned+0x34>
  dmaStreamSetMemory0(sdcp->dma, buf);
 8003376:	6c63      	ldr	r3, [r4, #68]	; 0x44
  sdcp->sdio->ICR   = SDIO_ICR_ALL_FLAGS;
 8003378:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  dmaStreamSetMemory0(sdcp->dma, buf);
 800337c:	685b      	ldr	r3, [r3, #4]
  sdcp->sdio->DCTRL = SDIO_DCTRL_DTDIR |
 800337e:	209b      	movs	r0, #155	; 0x9b
  dmaStreamSetMemory0(sdcp->dma, buf);
 8003380:	60df      	str	r7, [r3, #12]
  sdcp->sdio->MASK  = SDIO_MASK_DCRCFAILIE |
 8003382:	f240 372a 	movw	r7, #810	; 0x32a
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_P2M);
 8003386:	6c22      	ldr	r2, [r4, #64]	; 0x40
  dmaStreamSetTransactionSize(sdcp->dma,
 8003388:	0269      	lsls	r1, r5, #9
 800338a:	ea4f 0e91 	mov.w	lr, r1, lsr #2
 800338e:	f8c3 e004 	str.w	lr, [r3, #4]
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_P2M);
 8003392:	601a      	str	r2, [r3, #0]
  dmaStreamEnable(sdcp->dma);
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	f042 0201 	orr.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]
  if (!(sdcp->cardmode & SDC_MODE_HIGH_CAPACITY))
 800339c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  sdcp->sdio->ICR   = SDIO_ICR_ALL_FLAGS;
 800339e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  if (!(sdcp->cardmode & SDC_MODE_HIGH_CAPACITY))
 80033a0:	06db      	lsls	r3, r3, #27
    startblk *= MMCSD_BLOCK_SIZE;
 80033a2:	bf58      	it	pl
 80033a4:	0276      	lslpl	r6, r6, #9
  if (n > 1U) {
 80033a6:	2d01      	cmp	r5, #1
  sdcp->sdio->ICR   = SDIO_ICR_ALL_FLAGS;
 80033a8:	f8c2 c038 	str.w	ip, [r2, #56]	; 0x38
  sdcp->sdio->MASK  = SDIO_MASK_DCRCFAILIE |
 80033ac:	63d7      	str	r7, [r2, #60]	; 0x3c
  sdcp->sdio->DLEN  = blocks * MMCSD_BLOCK_SIZE;
 80033ae:	6291      	str	r1, [r2, #40]	; 0x28
  sdcp->sdio->DCTRL = SDIO_DCTRL_DTDIR |
 80033b0:	62d0      	str	r0, [r2, #44]	; 0x2c
  if (n > 1U) {
 80033b2:	d920      	bls.n	80033f6 <sdc_lld_read_aligned+0xc6>
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 80033b4:	f240 4352 	movw	r3, #1106	; 0x452
  sdcp->sdio->ARG = arg;
 80033b8:	6096      	str	r6, [r2, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 80033ba:	60d3      	str	r3, [r2, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 80033bc:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80033be:	f011 0345 	ands.w	r3, r1, #69	; 0x45
 80033c2:	d0fb      	beq.n	80033bc <sdc_lld_read_aligned+0x8c>
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0U) {
 80033c4:	f011 0f05 	tst.w	r1, #5
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 80033c8:	6393      	str	r3, [r2, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0U) {
 80033ca:	d11d      	bne.n	8003408 <sdc_lld_read_aligned+0xd8>
  *resp = sdcp->sdio->RESP1;
 80033cc:	6952      	ldr	r2, [r2, #20]
                                   startblk, resp) || MMCSD_R1_ERROR(resp[0])) {
 80033ce:	4b12      	ldr	r3, [pc, #72]	; (8003418 <sdc_lld_read_aligned+0xe8>)
  *resp = sdcp->sdio->RESP1;
 80033d0:	9201      	str	r2, [sp, #4]
                                   startblk, resp) || MMCSD_R1_ERROR(resp[0])) {
 80033d2:	4013      	ands	r3, r2
 80033d4:	ae01      	add	r6, sp, #4
 80033d6:	b933      	cbnz	r3, 80033e6 <sdc_lld_read_aligned+0xb6>
  if (sdc_lld_wait_transaction_end(sdcp, blocks, resp) == true)
 80033d8:	4632      	mov	r2, r6
 80033da:	4629      	mov	r1, r5
 80033dc:	4620      	mov	r0, r4
 80033de:	f7fe f86f 	bl	80014c0 <sdc_lld_wait_transaction_end>
 80033e2:	2800      	cmp	r0, #0
 80033e4:	d0be      	beq.n	8003364 <sdc_lld_read_aligned+0x34>
  sdc_lld_error_cleanup(sdcp, blocks, resp);
 80033e6:	4620      	mov	r0, r4
 80033e8:	4632      	mov	r2, r6
 80033ea:	4629      	mov	r1, r5
 80033ec:	f7fd fbf8 	bl	8000be0 <sdc_lld_error_cleanup>
  return HAL_FAILED;
 80033f0:	2001      	movs	r0, #1
}
 80033f2:	b003      	add	sp, #12
 80033f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 80033f6:	f240 4351 	movw	r3, #1105	; 0x451
  sdcp->sdio->ARG = arg;
 80033fa:	6096      	str	r6, [r2, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 80033fc:	60d3      	str	r3, [r2, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 80033fe:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8003400:	f011 0345 	ands.w	r3, r1, #69	; 0x45
 8003404:	d0fb      	beq.n	80033fe <sdc_lld_read_aligned+0xce>
 8003406:	e7dd      	b.n	80033c4 <sdc_lld_read_aligned+0x94>
    sdc_lld_collect_errors(sdcp, sta);
 8003408:	4620      	mov	r0, r4
 800340a:	f7fd fbc9 	bl	8000ba0 <sdc_lld_collect_errors>
    return HAL_FAILED;
 800340e:	ae01      	add	r6, sp, #4
 8003410:	e7e9      	b.n	80033e6 <sdc_lld_read_aligned+0xb6>
 8003412:	bf00      	nop
 8003414:	016e3600 	.word	0x016e3600
 8003418:	fdffe008 	.word	0xfdffe008
 800341c:	00000000 	.word	0x00000000

08003420 <sdcRead>:
bool sdcRead(SDCDriver *sdcp, uint32_t startblk, uint8_t *buf, uint32_t n) {
 8003420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((startblk + n - 1U) > sdcp->capacity) {
 8003424:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 8003428:	6a87      	ldr	r7, [r0, #40]	; 0x28
 800342a:	448c      	add	ip, r1
 800342c:	45bc      	cmp	ip, r7
bool sdcRead(SDCDriver *sdcp, uint32_t startblk, uint8_t *buf, uint32_t n) {
 800342e:	4606      	mov	r6, r0
  if ((startblk + n - 1U) > sdcp->capacity) {
 8003430:	d906      	bls.n	8003440 <sdcRead+0x20>
    sdcp->errors |= SDC_OVERFLOW_ERROR;
 8003432:	6b43      	ldr	r3, [r0, #52]	; 0x34
    return HAL_FAILED;
 8003434:	2001      	movs	r0, #1
    sdcp->errors |= SDC_OVERFLOW_ERROR;
 8003436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800343a:	6373      	str	r3, [r6, #52]	; 0x34
}
 800343c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  sdcp->state = BLK_READING;
 8003440:	2706      	movs	r7, #6
  if (((unsigned)buf & 3U) != 0U) {
 8003442:	0794      	lsls	r4, r2, #30
 8003444:	4615      	mov	r5, r2
 8003446:	7107      	strb	r7, [r0, #4]
 8003448:	d021      	beq.n	800348e <sdcRead+0x6e>
    for (i = 0U; i < blocks; i++) {
 800344a:	4698      	mov	r8, r3
 800344c:	b1db      	cbz	r3, 8003486 <sdcRead+0x66>
 800344e:	460c      	mov	r4, r1
      if (sdc_lld_read_aligned(sdcp, startblk, sdcp->buf, 1)) {
 8003450:	f100 074c 	add.w	r7, r0, #76	; 0x4c
 8003454:	4488      	add	r8, r1
 8003456:	e009      	b.n	800346c <sdcRead+0x4c>
      memcpy(buf, sdcp->buf, MMCSD_BLOCK_SIZE);
 8003458:	4628      	mov	r0, r5
 800345a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800345e:	4639      	mov	r1, r7
 8003460:	f7fc ff38 	bl	80002d4 <memcpy>
    for (i = 0U; i < blocks; i++) {
 8003464:	4544      	cmp	r4, r8
      buf += MMCSD_BLOCK_SIZE;
 8003466:	f505 7500 	add.w	r5, r5, #512	; 0x200
    for (i = 0U; i < blocks; i++) {
 800346a:	d00c      	beq.n	8003486 <sdcRead+0x66>
      if (sdc_lld_read_aligned(sdcp, startblk, sdcp->buf, 1)) {
 800346c:	4621      	mov	r1, r4
 800346e:	2301      	movs	r3, #1
 8003470:	463a      	mov	r2, r7
 8003472:	4630      	mov	r0, r6
 8003474:	f7ff ff5c 	bl	8003330 <sdc_lld_read_aligned>
      startblk++;
 8003478:	3401      	adds	r4, #1
      if (sdc_lld_read_aligned(sdcp, startblk, sdcp->buf, 1)) {
 800347a:	2800      	cmp	r0, #0
 800347c:	d0ec      	beq.n	8003458 <sdcRead+0x38>
  sdcp->state = BLK_READY;
 800347e:	2305      	movs	r3, #5
 8003480:	7133      	strb	r3, [r6, #4]
}
 8003482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  sdcp->state = BLK_READY;
 8003486:	2305      	movs	r3, #5
    return HAL_SUCCESS;
 8003488:	2000      	movs	r0, #0
 800348a:	7133      	strb	r3, [r6, #4]
  return status;
 800348c:	e7f9      	b.n	8003482 <sdcRead+0x62>
  return sdc_lld_read_aligned(sdcp, startblk, buf, blocks);
 800348e:	f7ff ff4f 	bl	8003330 <sdc_lld_read_aligned>
  sdcp->state = BLK_READY;
 8003492:	2305      	movs	r3, #5
 8003494:	7133      	strb	r3, [r6, #4]
  return status;
 8003496:	e7f4      	b.n	8003482 <sdcRead+0x62>
	...

080034a0 <sdc_lld_write_aligned>:
                           const uint8_t *buf, uint32_t blocks) {
 80034a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034a2:	4614      	mov	r4, r2
  sdcp->sdio->DTIMER = sdc_lld_get_timeout(sdcp, STM32_SDC_WRITE_TIMEOUT_MS);
 80034a4:	6c82      	ldr	r2, [r0, #72]	; 0x48
                           const uint8_t *buf, uint32_t blocks) {
 80034a6:	4605      	mov	r5, r0
  clkcr = sdcp->sdio->CLKCR;
 80034a8:	6850      	ldr	r0, [r2, #4]
                           const uint8_t *buf, uint32_t blocks) {
 80034aa:	460f      	mov	r7, r1
  if ((clkcr & SDIO_CLKCR_BYPASS) != 0U) {
 80034ac:	0541      	lsls	r1, r0, #21
                           const uint8_t *buf, uint32_t blocks) {
 80034ae:	461e      	mov	r6, r3
 80034b0:	b083      	sub	sp, #12
  if ((clkcr & SDIO_CLKCR_BYPASS) != 0U) {
 80034b2:	d411      	bmi.n	80034d8 <sdc_lld_write_aligned+0x38>
  return (((48000000U / (div * 2U)) / 1000U) * ms);
 80034b4:	f64b 3380 	movw	r3, #48000	; 0xbb80
    div = (clkcr & SDIO_CLKCR_CLKDIV_Msk) + 2U;
 80034b8:	b2c0      	uxtb	r0, r0
 80034ba:	3002      	adds	r0, #2
  return (((48000000U / (div * 2U)) / 1000U) * ms);
 80034bc:	0040      	lsls	r0, r0, #1
 80034be:	fbb3 f0f0 	udiv	r0, r3, r0
 80034c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034c6:	fb03 f000 	mul.w	r0, r3, r0
  sdcp->sdio->DTIMER = sdc_lld_get_timeout(sdcp, STM32_SDC_WRITE_TIMEOUT_MS);
 80034ca:	6250      	str	r0, [r2, #36]	; 0x24
  if (_sdc_wait_for_transfer_state(sdcp))
 80034cc:	4628      	mov	r0, r5
 80034ce:	f7ff fe57 	bl	8003180 <_sdc_wait_for_transfer_state>
 80034d2:	b140      	cbz	r0, 80034e6 <sdc_lld_write_aligned+0x46>
}
 80034d4:	b003      	add	sp, #12
 80034d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034d8:	482e      	ldr	r0, [pc, #184]	; (8003594 <sdc_lld_write_aligned+0xf4>)
  sdcp->sdio->DTIMER = sdc_lld_get_timeout(sdcp, STM32_SDC_WRITE_TIMEOUT_MS);
 80034da:	6250      	str	r0, [r2, #36]	; 0x24
  if (_sdc_wait_for_transfer_state(sdcp))
 80034dc:	4628      	mov	r0, r5
 80034de:	f7ff fe4f 	bl	8003180 <_sdc_wait_for_transfer_state>
 80034e2:	2800      	cmp	r0, #0
 80034e4:	d1f6      	bne.n	80034d4 <sdc_lld_write_aligned+0x34>
  sdcp->sdio->ICR   = SDIO_ICR_ALL_FLAGS;
 80034e6:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  sdcp->sdio->MASK  = SDIO_MASK_DCRCFAILIE |
 80034ea:	f240 301a 	movw	r0, #794	; 0x31a
  dmaStreamSetMemory0(sdcp->dma, buf);
 80034ee:	6c6b      	ldr	r3, [r5, #68]	; 0x44
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_M2P);
 80034f0:	6c29      	ldr	r1, [r5, #64]	; 0x40
  dmaStreamSetMemory0(sdcp->dma, buf);
 80034f2:	685b      	ldr	r3, [r3, #4]
  dmaStreamSetTransactionSize(sdcp->dma,
 80034f4:	0272      	lsls	r2, r6, #9
  dmaStreamSetMemory0(sdcp->dma, buf);
 80034f6:	60dc      	str	r4, [r3, #12]
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_M2P);
 80034f8:	f041 0110 	orr.w	r1, r1, #16
  dmaStreamSetTransactionSize(sdcp->dma,
 80034fc:	0894      	lsrs	r4, r2, #2
 80034fe:	605c      	str	r4, [r3, #4]
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_M2P);
 8003500:	6019      	str	r1, [r3, #0]
  dmaStreamEnable(sdcp->dma);
 8003502:	6819      	ldr	r1, [r3, #0]
  sdcp->sdio->ICR   = SDIO_ICR_ALL_FLAGS;
 8003504:	6cac      	ldr	r4, [r5, #72]	; 0x48
  dmaStreamEnable(sdcp->dma);
 8003506:	f041 0101 	orr.w	r1, r1, #1
 800350a:	6019      	str	r1, [r3, #0]
  if (!(sdcp->cardmode & SDC_MODE_HIGH_CAPACITY))
 800350c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  sdcp->sdio->ICR   = SDIO_ICR_ALL_FLAGS;
 800350e:	f8c4 c038 	str.w	ip, [r4, #56]	; 0x38
  if (!(sdcp->cardmode & SDC_MODE_HIGH_CAPACITY))
 8003512:	06db      	lsls	r3, r3, #27
    startblk *= MMCSD_BLOCK_SIZE;
 8003514:	bf58      	it	pl
 8003516:	027f      	lslpl	r7, r7, #9
  if (n > 1U) {
 8003518:	2e01      	cmp	r6, #1
  sdcp->sdio->MASK  = SDIO_MASK_DCRCFAILIE |
 800351a:	63e0      	str	r0, [r4, #60]	; 0x3c
  sdcp->sdio->DLEN  = blocks * MMCSD_BLOCK_SIZE;
 800351c:	62a2      	str	r2, [r4, #40]	; 0x28
  if (n > 1U) {
 800351e:	d922      	bls.n	8003566 <sdc_lld_write_aligned+0xc6>
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003520:	f240 4359 	movw	r3, #1113	; 0x459
  sdcp->sdio->ARG = arg;
 8003524:	60a7      	str	r7, [r4, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003526:	60e3      	str	r3, [r4, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8003528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800352a:	f011 0345 	ands.w	r3, r1, #69	; 0x45
 800352e:	d0fb      	beq.n	8003528 <sdc_lld_write_aligned+0x88>
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0U) {
 8003530:	f011 0f05 	tst.w	r1, #5
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 8003534:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0U) {
 8003536:	d127      	bne.n	8003588 <sdc_lld_write_aligned+0xe8>
  *resp = sdcp->sdio->RESP1;
 8003538:	6962      	ldr	r2, [r4, #20]
                                   startblk, resp) || MMCSD_R1_ERROR(resp[0])) {
 800353a:	4b17      	ldr	r3, [pc, #92]	; (8003598 <sdc_lld_write_aligned+0xf8>)
  *resp = sdcp->sdio->RESP1;
 800353c:	9201      	str	r2, [sp, #4]
                                   startblk, resp) || MMCSD_R1_ERROR(resp[0])) {
 800353e:	4013      	ands	r3, r2
 8003540:	b9d3      	cbnz	r3, 8003578 <sdc_lld_write_aligned+0xd8>
  sdcp->sdio->DCTRL = SDIO_DCTRL_DBLOCKSIZE_3 |
 8003542:	2399      	movs	r3, #153	; 0x99
  if (sdc_lld_wait_transaction_end(sdcp, blocks, resp) == true)
 8003544:	af01      	add	r7, sp, #4
 8003546:	463a      	mov	r2, r7
 8003548:	4631      	mov	r1, r6
 800354a:	4628      	mov	r0, r5
  sdcp->sdio->DCTRL = SDIO_DCTRL_DBLOCKSIZE_3 |
 800354c:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (sdc_lld_wait_transaction_end(sdcp, blocks, resp) == true)
 800354e:	f7fd ffb7 	bl	80014c0 <sdc_lld_wait_transaction_end>
 8003552:	2800      	cmp	r0, #0
 8003554:	d0be      	beq.n	80034d4 <sdc_lld_write_aligned+0x34>
  sdc_lld_error_cleanup(sdcp, blocks, resp);
 8003556:	4628      	mov	r0, r5
 8003558:	463a      	mov	r2, r7
 800355a:	4631      	mov	r1, r6
 800355c:	f7fd fb40 	bl	8000be0 <sdc_lld_error_cleanup>
  return HAL_FAILED;
 8003560:	2001      	movs	r0, #1
}
 8003562:	b003      	add	sp, #12
 8003564:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003566:	f44f 638b 	mov.w	r3, #1112	; 0x458
  sdcp->sdio->ARG = arg;
 800356a:	60a7      	str	r7, [r4, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 800356c:	60e3      	str	r3, [r4, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 800356e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003570:	f011 0345 	ands.w	r3, r1, #69	; 0x45
 8003574:	d0fb      	beq.n	800356e <sdc_lld_write_aligned+0xce>
 8003576:	e7db      	b.n	8003530 <sdc_lld_write_aligned+0x90>
 8003578:	af01      	add	r7, sp, #4
  sdc_lld_error_cleanup(sdcp, blocks, resp);
 800357a:	4628      	mov	r0, r5
 800357c:	463a      	mov	r2, r7
 800357e:	4631      	mov	r1, r6
 8003580:	f7fd fb2e 	bl	8000be0 <sdc_lld_error_cleanup>
  return HAL_FAILED;
 8003584:	2001      	movs	r0, #1
 8003586:	e7ec      	b.n	8003562 <sdc_lld_write_aligned+0xc2>
    sdc_lld_collect_errors(sdcp, sta);
 8003588:	4628      	mov	r0, r5
 800358a:	f7fd fb09 	bl	8000ba0 <sdc_lld_collect_errors>
    return HAL_FAILED;
 800358e:	af01      	add	r7, sp, #4
 8003590:	e7e1      	b.n	8003556 <sdc_lld_write_aligned+0xb6>
 8003592:	bf00      	nop
 8003594:	016e3600 	.word	0x016e3600
 8003598:	fdffe008 	.word	0xfdffe008
 800359c:	00000000 	.word	0x00000000

080035a0 <sdcWrite>:
              const uint8_t *buf, uint32_t n) {
 80035a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((startblk + n - 1U) > sdcp->capacity) {
 80035a4:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 80035a8:	6a87      	ldr	r7, [r0, #40]	; 0x28
 80035aa:	448c      	add	ip, r1
 80035ac:	45bc      	cmp	ip, r7
              const uint8_t *buf, uint32_t n) {
 80035ae:	4606      	mov	r6, r0
  if ((startblk + n - 1U) > sdcp->capacity) {
 80035b0:	d906      	bls.n	80035c0 <sdcWrite+0x20>
    sdcp->errors |= SDC_OVERFLOW_ERROR;
 80035b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
    return HAL_FAILED;
 80035b4:	2001      	movs	r0, #1
    sdcp->errors |= SDC_OVERFLOW_ERROR;
 80035b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035ba:	6373      	str	r3, [r6, #52]	; 0x34
}
 80035bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  sdcp->state = BLK_WRITING;
 80035c0:	2707      	movs	r7, #7
  if (((unsigned)buf & 3U) != 0U) {
 80035c2:	0794      	lsls	r4, r2, #30
 80035c4:	4615      	mov	r5, r2
 80035c6:	7107      	strb	r7, [r0, #4]
 80035c8:	d021      	beq.n	800360e <sdcWrite+0x6e>
    for (i = 0U; i < blocks; i++) {
 80035ca:	4698      	mov	r8, r3
 80035cc:	b1db      	cbz	r3, 8003606 <sdcWrite+0x66>
 80035ce:	460c      	mov	r4, r1
      memcpy(sdcp->buf, buf, MMCSD_BLOCK_SIZE);
 80035d0:	f100 074c 	add.w	r7, r0, #76	; 0x4c
 80035d4:	4488      	add	r8, r1
 80035d6:	e001      	b.n	80035dc <sdcWrite+0x3c>
    for (i = 0U; i < blocks; i++) {
 80035d8:	4544      	cmp	r4, r8
 80035da:	d014      	beq.n	8003606 <sdcWrite+0x66>
      memcpy(sdcp->buf, buf, MMCSD_BLOCK_SIZE);
 80035dc:	4629      	mov	r1, r5
 80035de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035e2:	4638      	mov	r0, r7
 80035e4:	f7fc fe76 	bl	80002d4 <memcpy>
      if (sdc_lld_write_aligned(sdcp, startblk, sdcp->buf, 1))
 80035e8:	4621      	mov	r1, r4
 80035ea:	2301      	movs	r3, #1
 80035ec:	463a      	mov	r2, r7
 80035ee:	4630      	mov	r0, r6
 80035f0:	f7ff ff56 	bl	80034a0 <sdc_lld_write_aligned>
      startblk++;
 80035f4:	3401      	adds	r4, #1
      buf += MMCSD_BLOCK_SIZE;
 80035f6:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (sdc_lld_write_aligned(sdcp, startblk, sdcp->buf, 1))
 80035fa:	2800      	cmp	r0, #0
 80035fc:	d0ec      	beq.n	80035d8 <sdcWrite+0x38>
  sdcp->state = BLK_READY;
 80035fe:	2305      	movs	r3, #5
 8003600:	7133      	strb	r3, [r6, #4]
}
 8003602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  sdcp->state = BLK_READY;
 8003606:	2305      	movs	r3, #5
    return HAL_SUCCESS;
 8003608:	2000      	movs	r0, #0
 800360a:	7133      	strb	r3, [r6, #4]
  return status;
 800360c:	e7f9      	b.n	8003602 <sdcWrite+0x62>
  return sdc_lld_write_aligned(sdcp, startblk, buf, blocks);
 800360e:	f7ff ff47 	bl	80034a0 <sdc_lld_write_aligned>
  sdcp->state = BLK_READY;
 8003612:	2305      	movs	r3, #5
 8003614:	7133      	strb	r3, [r6, #4]
  return status;
 8003616:	e7f4      	b.n	8003602 <sdcWrite+0x62>
	...

08003620 <rt_test_004_001_execute>:
 */

static void rt_test_004_001_execute(void) {

  /* [4.1.1] Time stamps are generated and checked for monotonicity.*/
  test_set_step(1);
 8003620:	2101      	movs	r1, #1
static void rt_test_004_001_execute(void) {
 8003622:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 8003626:	f8df a094 	ldr.w	sl, [pc, #148]	; 80036bc <rt_test_004_001_execute+0x9c>
 800362a:	f04f 0930 	mov.w	r9, #48	; 0x30
 800362e:	f8ca 1000 	str.w	r1, [sl]
 8003632:	f389 8811 	msr	BASEPRI, r9
 8003636:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000

  /* Current system time.*/
  now = chVTGetSystemTimeX();

  /* Last time stamp generated.*/
  last = oip->vtlist.laststamp;
 800363a:	4e21      	ldr	r6, [pc, #132]	; (80036c0 <rt_test_004_001_execute+0xa0>)
 800363c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800363e:	e9d6 2308 	ldrd	r2, r3, [r6, #32]
 8003642:	1a80      	subs	r0, r0, r2

  /* Interval between the last time stamp and current time used for a new
     time stamp. Note that this fails if the interval is larger than a
     systime_t type.*/
  stamp = last + (systimestamp_t)chTimeDiffX((systime_t)last, now);
 8003644:	b280      	uxth	r0, r0
 8003646:	1884      	adds	r4, r0, r2
 8003648:	f143 0500 	adc.w	r5, r3, #0
 800364c:	f04f 0800 	mov.w	r8, #0

  chDbgAssert(oip->vtlist.laststamp <= stamp, "wrapped");

  /* Storing the new stamp.*/
  oip->vtlist.laststamp = stamp;
 8003650:	e9c6 4508 	strd	r4, r5, [r6, #32]
 8003654:	f388 8811 	msr	BASEPRI, r8
 8003658:	f389 8811 	msr	BASEPRI, r9
 800365c:	2008      	movs	r0, #8
 800365e:	f7ff fb3f 	bl	8002ce0 <chSchGoSleepTimeoutS>
 8003662:	f388 8811 	msr	BASEPRI, r8
 8003666:	f389 8811 	msr	BASEPRI, r9
 800366a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800366c:	b292      	uxth	r2, r2
 800366e:	f388 8811 	msr	BASEPRI, r8
  return systime + (systime_t)interval;
 8003672:	e005      	b.n	8003680 <rt_test_004_001_execute+0x60>
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8003676:	1a9b      	subs	r3, r3, r2
      test_assert(last <= now, "not monotonic");
      last = now;
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 8003678:	b29b      	uxth	r3, r3
 800367a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800367e:	d21a      	bcs.n	80036b6 <rt_test_004_001_execute+0x96>
 8003680:	f389 8811 	msr	BASEPRI, r9
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  last = oip->vtlist.laststamp;
 8003686:	e9d6 0108 	ldrd	r0, r1, [r6, #32]
  return (sysinterval_t)((systime_t)(end - start));
 800368a:	1a1b      	subs	r3, r3, r0
  stamp = last + (systimestamp_t)chTimeDiffX((systime_t)last, now);
 800368c:	b29b      	uxth	r3, r3
 800368e:	46a6      	mov	lr, r4
 8003690:	181c      	adds	r4, r3, r0
 8003692:	46ac      	mov	ip, r5
 8003694:	f141 0500 	adc.w	r5, r1, #0
  oip->vtlist.laststamp = stamp;
 8003698:	e9c6 4508 	strd	r4, r5, [r6, #32]
 800369c:	f388 8811 	msr	BASEPRI, r8
  if (!condition) {
 80036a0:	4574      	cmp	r4, lr
 80036a2:	eb75 030c 	sbcs.w	r3, r5, ip
 80036a6:	d2e5      	bcs.n	8003674 <rt_test_004_001_execute+0x54>
  chtest.global_fail     = true;
 80036a8:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 80036ac:	4a05      	ldr	r2, [pc, #20]	; (80036c4 <rt_test_004_001_execute+0xa4>)
  chtest.global_fail     = true;
 80036ae:	f8aa 3004 	strh.w	r3, [sl, #4]
  chtest.failure_message = msg;
 80036b2:	f8ca 2008 	str.w	r2, [sl, #8]
  }
  test_end_step(1);
}
 80036b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036ba:	bf00      	nop
 80036bc:	200010f4 	.word	0x200010f4
 80036c0:	20001050 	.word	0x20001050
 80036c4:	080101b0 	.word	0x080101b0
	...

080036d0 <rt_test_005_001_execute>:
  systime_t time;

  /* [5.1.1] The current system time is read then a sleep is performed
     for 100 system ticks and on exit the system time is verified
     again.*/
  test_set_step(1);
 80036d0:	2301      	movs	r3, #1
static void rt_test_005_001_execute(void) {
 80036d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036d6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  test_set_step(1);
 80036da:	4e37      	ldr	r6, [pc, #220]	; (80037b8 <rt_test_005_001_execute+0xe8>)
 80036dc:	2530      	movs	r5, #48	; 0x30
 80036de:	6033      	str	r3, [r6, #0]
 80036e0:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 80036e4:	f385 8811 	msr	BASEPRI, r5
 80036e8:	2164      	movs	r1, #100	; 0x64
 80036ea:	2008      	movs	r0, #8
 80036ec:	f7ff faf8 	bl	8002ce0 <chSchGoSleepTimeoutS>
 80036f0:	2700      	movs	r7, #0
 80036f2:	f387 8811 	msr	BASEPRI, r7
 80036f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 80036f8:	3b64      	subs	r3, #100	; 0x64
 80036fa:	eba3 0308 	sub.w	r3, r3, r8
  if (!condition) {
 80036fe:	b29b      	uxth	r3, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d852      	bhi.n	80037aa <rt_test_005_001_execute+0xda>
  test_end_step(1);

  /* [5.1.2] The current system time is read then a sleep is performed
     for 100000 microseconds and on exit the system time is verified
     again.*/
  test_set_step(2);
 8003704:	2302      	movs	r3, #2
 8003706:	6033      	str	r3, [r6, #0]
 8003708:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 800370c:	f385 8811 	msr	BASEPRI, r5
 8003710:	21c8      	movs	r1, #200	; 0xc8
 8003712:	2008      	movs	r0, #8
 8003714:	f7ff fae4 	bl	8002ce0 <chSchGoSleepTimeoutS>
 8003718:	f387 8811 	msr	BASEPRI, r7
 800371c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800371e:	3bc8      	subs	r3, #200	; 0xc8
 8003720:	eba3 0308 	sub.w	r3, r3, r8
 8003724:	b29b      	uxth	r3, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d83f      	bhi.n	80037aa <rt_test_005_001_execute+0xda>
  test_end_step(2);

  /* [5.1.3] The current system time is read then a sleep is performed
     for 100 milliseconds and on exit the system time is verified
     again.*/
  test_set_step(3);
 800372a:	2303      	movs	r3, #3
 800372c:	6033      	str	r3, [r6, #0]
 800372e:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 8003732:	f385 8811 	msr	BASEPRI, r5
 8003736:	21c8      	movs	r1, #200	; 0xc8
 8003738:	2008      	movs	r0, #8
 800373a:	f7ff fad1 	bl	8002ce0 <chSchGoSleepTimeoutS>
 800373e:	f387 8811 	msr	BASEPRI, r7
 8003742:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003744:	3bc8      	subs	r3, #200	; 0xc8
 8003746:	eba3 0308 	sub.w	r3, r3, r8
 800374a:	b29b      	uxth	r3, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d82c      	bhi.n	80037aa <rt_test_005_001_execute+0xda>
  }
  test_end_step(3);

  /* [5.1.4] The current system time is read then a sleep is performed
     for 1 second and on exit the system time is verified again.*/
  test_set_step(4);
 8003750:	2304      	movs	r3, #4
 8003752:	6033      	str	r3, [r6, #0]
 8003754:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 8003758:	f385 8811 	msr	BASEPRI, r5
 800375c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003760:	2008      	movs	r0, #8
 8003762:	f7ff fabd 	bl	8002ce0 <chSchGoSleepTimeoutS>
 8003766:	f387 8811 	msr	BASEPRI, r7
 800376a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800376c:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8003770:	eba3 0308 	sub.w	r3, r3, r8
 8003774:	b29b      	uxth	r3, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d817      	bhi.n	80037aa <rt_test_005_001_execute+0xda>
  }
  test_end_step(4);

  /* [5.1.5] Function chThdSleepUntil() is tested with a timeline of
     "now" + 100 ticks.*/
  test_set_step(5);
 800377a:	2305      	movs	r3, #5
 800377c:	6033      	str	r3, [r6, #0]
 800377e:	6a67      	ldr	r7, [r4, #36]	; 0x24
  return systime + (systime_t)interval;
 8003780:	3764      	adds	r7, #100	; 0x64
 8003782:	b2bf      	uxth	r7, r7
 8003784:	f385 8811 	msr	BASEPRI, r5
 8003788:	6a61      	ldr	r1, [r4, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 800378a:	1a79      	subs	r1, r7, r1
 800378c:	b289      	uxth	r1, r1
  if (likely(interval > (sysinterval_t)0)) {
 800378e:	b111      	cbz	r1, 8003796 <rt_test_005_001_execute+0xc6>
 8003790:	2008      	movs	r0, #8
 8003792:	f7ff faa5 	bl	8002ce0 <chSchGoSleepTimeoutS>
 8003796:	2300      	movs	r3, #0
 8003798:	f383 8811 	msr	BASEPRI, r3
 800379c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 80037a2:	1bdf      	subs	r7, r3, r7
 80037a4:	b2bf      	uxth	r7, r7
 80037a6:	2f02      	cmp	r7, #2
 80037a8:	d904      	bls.n	80037b4 <rt_test_005_001_execute+0xe4>
  chtest.global_fail     = true;
 80037aa:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 80037ae:	4a03      	ldr	r2, [pc, #12]	; (80037bc <rt_test_005_001_execute+0xec>)
  chtest.global_fail     = true;
 80037b0:	80b3      	strh	r3, [r6, #4]
  chtest.failure_message = msg;
 80037b2:	60b2      	str	r2, [r6, #8]
    test_assert_time_window(chTimeAddX(time, 100),
                            chTimeAddX(time, 100 + CH_CFG_ST_TIMEDELTA + 1),
                            "out of time window");
  }
  test_end_step(5);
}
 80037b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037b8:	200010f4 	.word	0x200010f4
 80037bc:	080101c0 	.word	0x080101c0

080037c0 <rt_test_010_006_execute>:
  test_set_step(1);
 80037c0:	2201      	movs	r2, #1
static void rt_test_010_006_execute(void) {
 80037c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 80037c4:	4c37      	ldr	r4, [pc, #220]	; (80038a4 <rt_test_010_006_execute+0xe4>)
  return __sch_get_currthread();
 80037c6:	4d38      	ldr	r5, [pc, #224]	; (80038a8 <rt_test_010_006_execute+0xe8>)
 80037c8:	2330      	movs	r3, #48	; 0x30
 80037ca:	68e9      	ldr	r1, [r5, #12]
 80037cc:	6022      	str	r2, [r4, #0]
 80037ce:	f383 8811 	msr	BASEPRI, r3
eventmask_t chEvtWaitOneTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *currtp = chThdGetSelfX();
  eventmask_t m;

  chSysLock();
  m = currtp->epending & events;
 80037d2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  if (m == (eventmask_t)0) {
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d136      	bne.n	8003846 <rt_test_010_006_execute+0x86>
 80037d8:	f383 8811 	msr	BASEPRI, r3
 80037dc:	2630      	movs	r6, #48	; 0x30
 80037de:	68ea      	ldr	r2, [r5, #12]
 80037e0:	f386 8811 	msr	BASEPRI, r6
  thread_t *currtp = chThdGetSelfX();
  eventmask_t m;

  chSysLock();
  m = currtp->epending & events;
  if (m == (eventmask_t)0) {
 80037e4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d13d      	bne.n	8003866 <rt_test_010_006_execute+0xa6>
 80037ea:	f383 8811 	msr	BASEPRI, r3
 80037ee:	68ea      	ldr	r2, [r5, #12]
 80037f0:	f386 8811 	msr	BASEPRI, r6
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *currtp = chThdGetSelfX();

  chSysLock();
  if ((currtp->epending & events) != events) {
 80037f4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80037f6:	3101      	adds	r1, #1
 80037f8:	d03f      	beq.n	800387a <rt_test_010_006_execute+0xba>
 80037fa:	f383 8811 	msr	BASEPRI, r3
  test_set_step(2);
 80037fe:	2302      	movs	r3, #2
    m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_MS2I(50));
 8003800:	2064      	movs	r0, #100	; 0x64
  test_set_step(2);
 8003802:	6023      	str	r3, [r4, #0]
    m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_MS2I(50));
 8003804:	f00b f80c 	bl	800e820 <chEvtWaitOneTimeout.constprop.0>
  if (!condition) {
 8003808:	bb38      	cbnz	r0, 800385a <rt_test_010_006_execute+0x9a>
 800380a:	68ef      	ldr	r7, [r5, #12]
 800380c:	f386 8811 	msr	BASEPRI, r6
  m = currtp->epending & events;
 8003810:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
  if (m == (eventmask_t)0) {
 8003812:	2e00      	cmp	r6, #0
 8003814:	d033      	beq.n	800387e <rt_test_010_006_execute+0xbe>
  currtp->epending &= ~m;
 8003816:	2300      	movs	r3, #0
 8003818:	63fb      	str	r3, [r7, #60]	; 0x3c
 800381a:	f383 8811 	msr	BASEPRI, r3
 800381e:	b9e6      	cbnz	r6, 800385a <rt_test_010_006_execute+0x9a>
 8003820:	2330      	movs	r3, #48	; 0x30
 8003822:	68ed      	ldr	r5, [r5, #12]
 8003824:	f383 8811 	msr	BASEPRI, r3
  if ((currtp->epending & events) != events) {
 8003828:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800382a:	3301      	adds	r3, #1
 800382c:	d008      	beq.n	8003840 <rt_test_010_006_execute+0x80>
    if (TIME_IMMEDIATE == timeout) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    currtp->u.ewmask = events;
 800382e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, timeout) < MSG_OK) {
 8003832:	2164      	movs	r1, #100	; 0x64
 8003834:	200b      	movs	r0, #11
    currtp->u.ewmask = events;
 8003836:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, timeout) < MSG_OK) {
 8003838:	f7ff fa52 	bl	8002ce0 <chSchGoSleepTimeoutS>
 800383c:	2800      	cmp	r0, #0
 800383e:	db2c      	blt.n	800389a <rt_test_010_006_execute+0xda>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  currtp->epending &= ~events;
 8003840:	2300      	movs	r3, #0
 8003842:	63eb      	str	r3, [r5, #60]	; 0x3c
 8003844:	e011      	b.n	800386a <rt_test_010_006_execute+0xaa>
  m ^= m & (m - (eventmask_t)1);
 8003846:	425a      	negs	r2, r3
  currtp->epending &= ~m;
 8003848:	ea23 0002 	bic.w	r0, r3, r2
 800384c:	63c8      	str	r0, [r1, #60]	; 0x3c
  m ^= m & (m - (eventmask_t)1);
 800384e:	4013      	ands	r3, r2
 8003850:	2100      	movs	r1, #0
 8003852:	f381 8811 	msr	BASEPRI, r1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0c0      	beq.n	80037dc <rt_test_010_006_execute+0x1c>
  chtest.global_fail     = true;
 800385a:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800385e:	4a13      	ldr	r2, [pc, #76]	; (80038ac <rt_test_010_006_execute+0xec>)
  chtest.global_fail     = true;
 8003860:	80a3      	strh	r3, [r4, #4]
  chtest.failure_message = msg;
 8003862:	60a2      	str	r2, [r4, #8]
}
 8003864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  currtp->epending &= ~m;
 8003866:	2300      	movs	r3, #0
 8003868:	63d3      	str	r3, [r2, #60]	; 0x3c
 800386a:	f383 8811 	msr	BASEPRI, r3
  chtest.global_fail     = true;
 800386e:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8003872:	4a0e      	ldr	r2, [pc, #56]	; (80038ac <rt_test_010_006_execute+0xec>)
  chtest.global_fail     = true;
 8003874:	80a3      	strh	r3, [r4, #4]
  chtest.failure_message = msg;
 8003876:	60a2      	str	r2, [r4, #8]
 8003878:	e7f4      	b.n	8003864 <rt_test_010_006_execute+0xa4>
  currtp->epending &= ~events;
 800387a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800387c:	e7f5      	b.n	800386a <rt_test_010_006_execute+0xaa>
    currtp->u.ewmask = events;
 800387e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 8003882:	2164      	movs	r1, #100	; 0x64
 8003884:	200a      	movs	r0, #10
    currtp->u.ewmask = events;
 8003886:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 8003888:	f7ff fa2a 	bl	8002ce0 <chSchGoSleepTimeoutS>
 800388c:	2800      	cmp	r0, #0
 800388e:	db01      	blt.n	8003894 <rt_test_010_006_execute+0xd4>
    m = currtp->epending & events;
 8003890:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 8003892:	e7c0      	b.n	8003816 <rt_test_010_006_execute+0x56>
 8003894:	f386 8811 	msr	BASEPRI, r6
  if (!condition) {
 8003898:	e7c2      	b.n	8003820 <rt_test_010_006_execute+0x60>
 800389a:	2300      	movs	r3, #0
 800389c:	f383 8811 	msr	BASEPRI, r3
 80038a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038a2:	bf00      	nop
 80038a4:	200010f4 	.word	0x200010f4
 80038a8:	20001050 	.word	0x20001050
 80038ac:	080101d4 	.word	0x080101d4

080038b0 <msg_loop_test>:
NOINLINE static unsigned int msg_loop_test(thread_t *tp) {
 80038b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038b4:	2730      	movs	r7, #48	; 0x30
 80038b6:	4605      	mov	r5, r0
 80038b8:	f387 8811 	msr	BASEPRI, r7
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80038bc:	2101      	movs	r1, #1
 80038be:	2008      	movs	r0, #8
 80038c0:	f7ff fa0e 	bl	8002ce0 <chSchGoSleepTimeoutS>
 80038c4:	f04f 0a00 	mov.w	sl, #0
 80038c8:	f38a 8811 	msr	BASEPRI, sl
 80038cc:	f387 8811 	msr	BASEPRI, r7
 80038d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80038d4:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 80038d6:	b2b6      	uxth	r6, r6
 80038d8:	f38a 8811 	msr	BASEPRI, sl
  currtp->u.sentmsg = msg;
 80038dc:	f04f 0b01 	mov.w	fp, #1
  tp->state = CH_STATE_READY;
 80038e0:	46d0      	mov	r8, sl
 80038e2:	4c20      	ldr	r4, [pc, #128]	; (8003964 <msg_loop_test+0xb4>)
  __ch_msg_insert(&tp->msgqueue, currtp);
 80038e4:	f105 0934 	add.w	r9, r5, #52	; 0x34
 80038e8:	e018      	b.n	800391c <msg_loop_test+0x6c>
  otp->state = newstate;
 80038ea:	230c      	movs	r3, #12
  thread_t *otp = __instance_get_currthread(oip);
 80038ec:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 80038ee:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 80038f0:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
  pqp->next       = p->next;
 80038f4:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 80038f6:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 80038f8:	f880 b028 	strb.w	fp, [r0, #40]	; 0x28
  pqp->next       = p->next;
 80038fc:	6023      	str	r3, [r4, #0]
  __instance_set_currthread(oip, ntp);
 80038fe:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8003900:	f7fc fc9e 	bl	8000240 <__port_switch>
 8003904:	f388 8811 	msr	BASEPRI, r8
 8003908:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    n++;
 800390e:	f10a 0a01 	add.w	sl, sl, #1
 8003912:	1b9b      	subs	r3, r3, r6
  } while (chVTIsSystemTimeWithinX(start, end));
 8003914:	b29b      	uxth	r3, r3
 8003916:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800391a:	d21b      	bcs.n	8003954 <msg_loop_test+0xa4>
  return __sch_get_currthread();
 800391c:	68e3      	ldr	r3, [r4, #12]
 800391e:	f387 8811 	msr	BASEPRI, r7
  p->prev       = qp->prev;
 8003922:	6baa      	ldr	r2, [r5, #56]	; 0x38
  currtp->u.sentmsg = msg;
 8003924:	f8c3 b02c 	str.w	fp, [r3, #44]	; 0x2c
 8003928:	e9c3 9200 	strd	r9, r2, [r3]
  p->prev->next = p;
 800392c:	6013      	str	r3, [r2, #0]
  if (tp->state == CH_STATE_WTMSG) {
 800392e:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
  qp->prev      = p;
 8003932:	63ab      	str	r3, [r5, #56]	; 0x38
 8003934:	2a0e      	cmp	r2, #14
 8003936:	d1d8      	bne.n	80038ea <msg_loop_test+0x3a>
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8003938:	69ab      	ldr	r3, [r5, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800393a:	68a9      	ldr	r1, [r5, #8]
  tp->state = CH_STATE_READY;
 800393c:	f885 8028 	strb.w	r8, [r5, #40]	; 0x28
    pqp = pqp->next;
 8003940:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	428a      	cmp	r2, r1
 8003946:	d2fb      	bcs.n	8003940 <msg_loop_test+0x90>
  p->prev       = pqp->prev;
 8003948:	685a      	ldr	r2, [r3, #4]
  p->next       = pqp;
 800394a:	602b      	str	r3, [r5, #0]
  p->prev       = pqp->prev;
 800394c:	606a      	str	r2, [r5, #4]
  p->prev->next = p;
 800394e:	6015      	str	r5, [r2, #0]
  pqp->prev     = p;
 8003950:	605d      	str	r5, [r3, #4]
  return __sch_ready_behind(tp);
 8003952:	e7ca      	b.n	80038ea <msg_loop_test+0x3a>
  (void)chMsgSend(tp, 0);
 8003954:	2100      	movs	r1, #0
 8003956:	4628      	mov	r0, r5
 8003958:	f7fd fe3a 	bl	80015d0 <chMsgSend>
}
 800395c:	4650      	mov	r0, sl
 800395e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003962:	bf00      	nop
 8003964:	20001050 	.word	0x20001050
	...

08003970 <sdcConnect>:
  sdcp->state = BLK_CONNECTING;
 8003970:	2203      	movs	r2, #3
  div = sdcp->config->slowdown + ((48000000U + f - 1U) / f);
 8003972:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
bool sdcConnect(SDCDriver *sdcp) {
 8003974:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sdcp->state = BLK_CONNECTING;
 8003978:	7102      	strb	r2, [r0, #4]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	6c83      	ldr	r3, [r0, #72]	; 0x48
  if (div == 1U) {
 800397e:	f112 0f77 	cmn.w	r2, #119	; 0x77
    return SDIO_CLKCR_BYPASS;
 8003982:	bf0c      	ite	eq
 8003984:	f44f 6280 	moveq.w	r2, #1024	; 0x400
  return  div - 2U;
 8003988:	3276      	addne	r2, #118	; 0x76
  sdcp->sdio->CLKCR  = sdc_lld_clkdiv(sdcp, 400000U);
 800398a:	605a      	str	r2, [r3, #4]
  sdcp->sdio->POWER |= SDIO_POWER_PWRCTRL_0 | SDIO_POWER_PWRCTRL_1;
 800398c:	681a      	ldr	r2, [r3, #0]
bool sdcConnect(SDCDriver *sdcp) {
 800398e:	b089      	sub	sp, #36	; 0x24
 8003990:	f042 0203 	orr.w	r2, r2, #3
 8003994:	601a      	str	r2, [r3, #0]
  sdcp->sdio->CLKCR |= SDIO_CLKCR_CLKEN;
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	4604      	mov	r4, r0
 800399a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800399e:	2130      	movs	r1, #48	; 0x30
 80039a0:	605a      	str	r2, [r3, #4]
 80039a2:	f381 8811 	msr	BASEPRI, r1
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80039a6:	2114      	movs	r1, #20
 80039a8:	2008      	movs	r0, #8
 80039aa:	f7ff f999 	bl	8002ce0 <chSchGoSleepTimeoutS>
 80039ae:	2200      	movs	r2, #0
 80039b0:	f382 8811 	msr	BASEPRI, r2
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_CPSMEN;
 80039b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80039b8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  sdcp->sdio->ARG = arg;
 80039ba:	609a      	str	r2, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_CPSMEN;
 80039bc:	60d9      	str	r1, [r3, #12]
  while ((sdcp->sdio->STA & SDIO_STA_CMDSENT) == 0U) {
 80039be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039c0:	0610      	lsls	r0, r2, #24
 80039c2:	d5fc      	bpl.n	80039be <sdcConnect+0x4e>
  sdcp->sdio->ICR = SDIO_ICR_CMDSENTC;
 80039c4:	2080      	movs	r0, #128	; 0x80
  sdcp->sdio->ARG = arg;
 80039c6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 80039ca:	f44f 6289 	mov.w	r2, #1096	; 0x448
  sdcp->sdio->ICR = SDIO_ICR_CMDSENTC;
 80039ce:	6398      	str	r0, [r3, #56]	; 0x38
  sdcp->sdio->ARG = arg;
 80039d0:	6099      	str	r1, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 80039d2:	60da      	str	r2, [r3, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 80039d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039d6:	f011 0245 	ands.w	r2, r1, #69	; 0x45
 80039da:	d0fb      	beq.n	80039d4 <sdcConnect+0x64>
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0U) {
 80039dc:	f011 0005 	ands.w	r0, r1, #5
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 80039e0:	639a      	str	r2, [r3, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0U) {
 80039e2:	d10f      	bne.n	8003a04 <sdcConnect+0x94>
    sdcp->cardmode = SDC_MODE_CARDTYPE_SDV20;
 80039e4:	2101      	movs	r1, #1
  *resp = sdcp->sdio->RESP1;
 80039e6:	695a      	ldr	r2, [r3, #20]
 80039e8:	6321      	str	r1, [r4, #48]	; 0x30
    if (((resp[0] >> 8U) & 0xFU) != 1U) {
 80039ea:	f3c2 2203 	ubfx	r2, r2, #8, #4
 80039ee:	428a      	cmp	r2, r1
 80039f0:	d042      	beq.n	8003a78 <sdcConnect+0x108>
  sdcp->sdio->CLKCR = 0U;
 80039f2:	2200      	movs	r2, #0
  sdcp->state = BLK_ACTIVE;
 80039f4:	2102      	movs	r1, #2
  return HAL_FAILED;
 80039f6:	2001      	movs	r0, #1
 80039f8:	605a      	str	r2, [r3, #4]
  sdcp->sdio->POWER = 0U;
 80039fa:	601a      	str	r2, [r3, #0]
  sdcp->state = BLK_ACTIVE;
 80039fc:	7121      	strb	r1, [r4, #4]
}
 80039fe:	b009      	add	sp, #36	; 0x24
 8003a00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    sdc_lld_collect_errors(sdcp, sta);
 8003a04:	4620      	mov	r0, r4
 8003a06:	f7fd f8cb 	bl	8000ba0 <sdc_lld_collect_errors>
  sdcp->sdio->ARG = arg;
 8003a0a:	2100      	movs	r1, #0
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003a0c:	f240 4277 	movw	r2, #1143	; 0x477
  sdcp->sdio->ARG = arg;
 8003a10:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003a12:	6099      	str	r1, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003a14:	60da      	str	r2, [r3, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8003a16:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a18:	f011 0245 	ands.w	r2, r1, #69	; 0x45
 8003a1c:	d0fb      	beq.n	8003a16 <sdcConnect+0xa6>
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0U) {
 8003a1e:	f011 0f05 	tst.w	r1, #5
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 8003a22:	639a      	str	r2, [r3, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0U) {
 8003a24:	f040 816a 	bne.w	8003cfc <sdcConnect+0x38c>
  *resp = sdcp->sdio->RESP1;
 8003a28:	6959      	ldr	r1, [r3, #20]
        MMCSD_R1_ERROR(resp[0])) {
 8003a2a:	4a4f      	ldr	r2, [pc, #316]	; (8003b68 <sdcConnect+0x1f8>)
 8003a2c:	400a      	ands	r2, r1
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 8003a2e:	2a00      	cmp	r2, #0
 8003a30:	f000 808c 	beq.w	8003b4c <sdcConnect+0x1dc>
      sdcp->cardmode = SDC_MODE_CARDTYPE_MMC;
 8003a34:	2202      	movs	r2, #2
 8003a36:	2564      	movs	r5, #100	; 0x64
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003a38:	f240 4641 	movw	r6, #1089	; 0x441
 8003a3c:	f04f 0830 	mov.w	r8, #48	; 0x30
  sdcp->sdio->ARG = arg;
 8003a40:	4f4a      	ldr	r7, [pc, #296]	; (8003b6c <sdcConnect+0x1fc>)
 8003a42:	6322      	str	r2, [r4, #48]	; 0x30
 8003a44:	609f      	str	r7, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003a46:	60de      	str	r6, [r3, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8003a48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a4a:	f011 0245 	ands.w	r2, r1, #69	; 0x45
 8003a4e:	d0fb      	beq.n	8003a48 <sdcConnect+0xd8>
  if ((sta & (SDIO_STA_CTIMEOUT)) != 0U) {
 8003a50:	f011 0904 	ands.w	r9, r1, #4
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8003a54:	639a      	str	r2, [r3, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT)) != 0U) {
 8003a56:	d11b      	bne.n	8003a90 <sdcConnect+0x120>
  *resp = sdcp->sdio->RESP1;
 8003a58:	695a      	ldr	r2, [r3, #20]
    if ((resp[0] & 0x80000000U) != 0U) {
 8003a5a:	2a00      	cmp	r2, #0
 8003a5c:	f2c0 8090 	blt.w	8003b80 <sdcConnect+0x210>
    if (++i >= (unsigned)SDC_INIT_RETRY) {
 8003a60:	3d01      	subs	r5, #1
 8003a62:	d0c6      	beq.n	80039f2 <sdcConnect+0x82>
 8003a64:	f388 8811 	msr	BASEPRI, r8
 8003a68:	2114      	movs	r1, #20
 8003a6a:	2008      	movs	r0, #8
 8003a6c:	f7ff f938 	bl	8002ce0 <chSchGoSleepTimeoutS>
 8003a70:	f389 8811 	msr	BASEPRI, r9
  sdcp->sdio->ARG = arg;
 8003a74:	6ca3      	ldr	r3, [r4, #72]	; 0x48
}
 8003a76:	e7e5      	b.n	8003a44 <sdcConnect+0xd4>
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003a78:	f240 4277 	movw	r2, #1143	; 0x477
  sdcp->sdio->ARG = arg;
 8003a7c:	6098      	str	r0, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003a7e:	60da      	str	r2, [r3, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8003a80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a82:	f011 0245 	ands.w	r2, r1, #69	; 0x45
 8003a86:	d0fb      	beq.n	8003a80 <sdcConnect+0x110>
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0U) {
 8003a88:	f011 0f05 	tst.w	r1, #5
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 8003a8c:	639a      	str	r2, [r3, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0U) {
 8003a8e:	d004      	beq.n	8003a9a <sdcConnect+0x12a>
    sdc_lld_collect_errors(sdcp, sta);
 8003a90:	4620      	mov	r0, r4
 8003a92:	f7fd f885 	bl	8000ba0 <sdc_lld_collect_errors>
    return HAL_FAILED;
 8003a96:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003a98:	e7ab      	b.n	80039f2 <sdcConnect+0x82>
  *resp = sdcp->sdio->RESP1;
 8003a9a:	6959      	ldr	r1, [r3, #20]
        MMCSD_R1_ERROR(resp[0])) {
 8003a9c:	4a32      	ldr	r2, [pc, #200]	; (8003b68 <sdcConnect+0x1f8>)
 8003a9e:	400a      	ands	r2, r1
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 8003aa0:	2a00      	cmp	r2, #0
 8003aa2:	d1a6      	bne.n	80039f2 <sdcConnect+0x82>
    ocr = SDC_INIT_OCR_V20;
 8003aa4:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8003b70 <sdcConnect+0x200>
 8003aa8:	2564      	movs	r5, #100	; 0x64
        MMCSD_R1_ERROR(resp[0])) {
 8003aaa:	4e2f      	ldr	r6, [pc, #188]	; (8003b68 <sdcConnect+0x1f8>)
  thread_t *tp = __instance_get_currthread(currcore);
 8003aac:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8003b74 <sdcConnect+0x204>
  vtp->func    = vtfunc;
 8003ab0:	4f31      	ldr	r7, [pc, #196]	; (8003b78 <sdcConnect+0x208>)
  sdcp->sdio->ARG = arg;
 8003ab2:	2100      	movs	r1, #0
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003ab4:	f240 4277 	movw	r2, #1143	; 0x477
  sdcp->sdio->ARG = arg;
 8003ab8:	6099      	str	r1, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003aba:	60da      	str	r2, [r3, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8003abc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003abe:	f011 0245 	ands.w	r2, r1, #69	; 0x45
 8003ac2:	d0fb      	beq.n	8003abc <sdcConnect+0x14c>
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0U) {
 8003ac4:	f011 0f05 	tst.w	r1, #5
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 8003ac8:	639a      	str	r2, [r3, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0U) {
 8003aca:	d1e1      	bne.n	8003a90 <sdcConnect+0x120>
  *resp = sdcp->sdio->RESP1;
 8003acc:	695a      	ldr	r2, [r3, #20]
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 8003ace:	4232      	tst	r2, r6
 8003ad0:	d18f      	bne.n	80039f2 <sdcConnect+0x82>
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003ad2:	f240 4269 	movw	r2, #1129	; 0x469
  sdcp->sdio->ARG = arg;
 8003ad6:	f8c3 8008 	str.w	r8, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003ada:	60da      	str	r2, [r3, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8003adc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ade:	f011 0245 	ands.w	r2, r1, #69	; 0x45
 8003ae2:	d0fb      	beq.n	8003adc <sdcConnect+0x16c>
  if ((sta & (SDIO_STA_CTIMEOUT)) != 0U) {
 8003ae4:	f011 0c04 	ands.w	ip, r1, #4
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8003ae8:	639a      	str	r2, [r3, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT)) != 0U) {
 8003aea:	d1d1      	bne.n	8003a90 <sdcConnect+0x120>
  *resp = sdcp->sdio->RESP1;
 8003aec:	695a      	ldr	r2, [r3, #20]
    if ((resp[0] & 0x80000000U) != 0U) {
 8003aee:	2a00      	cmp	r2, #0
 8003af0:	db46      	blt.n	8003b80 <sdcConnect+0x210>
    if (++i >= (unsigned)SDC_INIT_RETRY) {
 8003af2:	3d01      	subs	r5, #1
 8003af4:	f43f af7d 	beq.w	80039f2 <sdcConnect+0x82>
 8003af8:	2330      	movs	r3, #48	; 0x30
 8003afa:	f383 8811 	msr	BASEPRI, r3
  vtp->par     = par;
 8003afe:	f8d9 300c 	ldr.w	r3, [r9, #12]
  vt_enqueue(vtlp, vtp, delay);
 8003b02:	2114      	movs	r1, #20
 8003b04:	a802      	add	r0, sp, #8
  vtp->func    = vtfunc;
 8003b06:	e9cd 7305 	strd	r7, r3, [sp, #20]
  vtp->reload  = (sysinterval_t)0;
 8003b0a:	f8cd c01c 	str.w	ip, [sp, #28]
  vt_enqueue(vtlp, vtp, delay);
 8003b0e:	f00b f80f 	bl	800eb30 <vt_enqueue.constprop.0>
  otp->state = newstate;
 8003b12:	2308      	movs	r3, #8
  ntp->state = CH_STATE_CURRENT;
 8003b14:	2201      	movs	r2, #1
  thread_t *otp = __instance_get_currthread(oip);
 8003b16:	f8d9 100c 	ldr.w	r1, [r9, #12]
  ch_priority_queue_t *p = pqp->next;
 8003b1a:	f8d9 0000 	ldr.w	r0, [r9]
  otp->state = newstate;
 8003b1e:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
  pqp->next       = p->next;
 8003b22:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 8003b24:	f8c3 9004 	str.w	r9, [r3, #4]
  pqp->next       = p->next;
 8003b28:	f8c9 3000 	str.w	r3, [r9]
  ntp->state = CH_STATE_CURRENT;
 8003b2c:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  __instance_set_currthread(oip, ntp);
 8003b30:	f8c9 000c 	str.w	r0, [r9, #12]
  chSysSwitch(ntp, otp);
 8003b34:	f7fc fb84 	bl	8000240 <__port_switch>
    if (chVTIsArmedI(&vt)) {
 8003b38:	9b02      	ldr	r3, [sp, #8]
 8003b3a:	b113      	cbz	r3, 8003b42 <sdcConnect+0x1d2>
      chVTDoResetI(&vt);
 8003b3c:	a802      	add	r0, sp, #8
 8003b3e:	f7ff f877 	bl	8002c30 <chVTDoResetI>
 8003b42:	2300      	movs	r3, #0
 8003b44:	f383 8811 	msr	BASEPRI, r3
  sdcp->sdio->ARG = arg;
 8003b48:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003b4a:	e7b2      	b.n	8003ab2 <sdcConnect+0x142>
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_CPSMEN;
 8003b4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
      sdcp->cardmode = SDC_MODE_CARDTYPE_SDV11;
 8003b50:	6322      	str	r2, [r4, #48]	; 0x30
  sdcp->sdio->ARG = arg;
 8003b52:	609a      	str	r2, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_CPSMEN;
 8003b54:	60d9      	str	r1, [r3, #12]
  while ((sdcp->sdio->STA & SDIO_STA_CMDSENT) == 0U) {
 8003b56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b58:	0611      	lsls	r1, r2, #24
 8003b5a:	d5fc      	bpl.n	8003b56 <sdcConnect+0x1e6>
  sdcp->sdio->ICR = SDIO_ICR_CMDSENTC;
 8003b5c:	2280      	movs	r2, #128	; 0x80
    ocr = SDC_INIT_OCR;
 8003b5e:	f8df 801c 	ldr.w	r8, [pc, #28]	; 8003b7c <sdcConnect+0x20c>
 8003b62:	639a      	str	r2, [r3, #56]	; 0x38
 8003b64:	e7a0      	b.n	8003aa8 <sdcConnect+0x138>
 8003b66:	bf00      	nop
 8003b68:	fdffe008 	.word	0xfdffe008
 8003b6c:	c0ff8000 	.word	0xc0ff8000
 8003b70:	50ff8000 	.word	0x50ff8000
 8003b74:	20001050 	.word	0x20001050
 8003b78:	080013e1 	.word	0x080013e1
 8003b7c:	80100000 	.word	0x80100000
      if ((resp[0] & 0x40000000U) != 0U) {
 8003b80:	0052      	lsls	r2, r2, #1
 8003b82:	d503      	bpl.n	8003b8c <sdcConnect+0x21c>
        sdcp->cardmode |= SDC_MODE_HIGH_CAPACITY;
 8003b84:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003b86:	f042 0210 	orr.w	r2, r2, #16
 8003b8a:	6322      	str	r2, [r4, #48]	; 0x30
  sdcp->sdio->ARG = arg;
 8003b8c:	2100      	movs	r1, #0
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_WAITRESP_1 |
 8003b8e:	f240 42c2 	movw	r2, #1218	; 0x4c2
  sdcp->sdio->ARG = arg;
 8003b92:	6099      	str	r1, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_WAITRESP_1 |
 8003b94:	60da      	str	r2, [r3, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8003b96:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b98:	f011 0245 	ands.w	r2, r1, #69	; 0x45
 8003b9c:	d0fb      	beq.n	8003b96 <sdcConnect+0x226>
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8003b9e:	639a      	str	r2, [r3, #56]	; 0x38
  if ((sta & (SDIO_STA_ERROR_MASK)) != 0U) {
 8003ba0:	f011 023f 	ands.w	r2, r1, #63	; 0x3f
 8003ba4:	f47f af74 	bne.w	8003a90 <sdcConnect+0x120>
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003ba8:	f240 4143 	movw	r1, #1091	; 0x443
  *resp++ = sdcp->sdio->RESP4;
 8003bac:	6a18      	ldr	r0, [r3, #32]
 8003bae:	60a0      	str	r0, [r4, #8]
  *resp++ = sdcp->sdio->RESP3;
 8003bb0:	69d8      	ldr	r0, [r3, #28]
 8003bb2:	60e0      	str	r0, [r4, #12]
  *resp++ = sdcp->sdio->RESP2;
 8003bb4:	6998      	ldr	r0, [r3, #24]
 8003bb6:	6120      	str	r0, [r4, #16]
  *resp   = sdcp->sdio->RESP1;
 8003bb8:	6958      	ldr	r0, [r3, #20]
 8003bba:	6160      	str	r0, [r4, #20]
  sdcp->sdio->ARG = arg;
 8003bbc:	609a      	str	r2, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003bbe:	60d9      	str	r1, [r3, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8003bc0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003bc2:	f011 0245 	ands.w	r2, r1, #69	; 0x45
 8003bc6:	d0fb      	beq.n	8003bc0 <sdcConnect+0x250>
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0U) {
 8003bc8:	f011 0f05 	tst.w	r1, #5
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 8003bcc:	639a      	str	r2, [r3, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0U) {
 8003bce:	f47f af5f 	bne.w	8003a90 <sdcConnect+0x120>
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_WAITRESP_1 |
 8003bd2:	f240 42c9 	movw	r2, #1225	; 0x4c9
  *resp = sdcp->sdio->RESP1;
 8003bd6:	6958      	ldr	r0, [r3, #20]
 8003bd8:	63a0      	str	r0, [r4, #56]	; 0x38
  sdcp->sdio->ARG = arg;
 8003bda:	6098      	str	r0, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_WAITRESP_1 |
 8003bdc:	60da      	str	r2, [r3, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8003bde:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003be0:	f011 0245 	ands.w	r2, r1, #69	; 0x45
 8003be4:	d0fb      	beq.n	8003bde <sdcConnect+0x26e>
  if ((sta & (SDIO_STA_ERROR_MASK)) != 0U) {
 8003be6:	068f      	lsls	r7, r1, #26
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8003be8:	639a      	str	r2, [r3, #56]	; 0x38
  if ((sta & (SDIO_STA_ERROR_MASK)) != 0U) {
 8003bea:	f47f af51 	bne.w	8003a90 <sdcConnect+0x120>
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003bee:	f240 4247 	movw	r2, #1095	; 0x447
  *resp++ = sdcp->sdio->RESP4;
 8003bf2:	6a19      	ldr	r1, [r3, #32]
 8003bf4:	61a1      	str	r1, [r4, #24]
  *resp++ = sdcp->sdio->RESP3;
 8003bf6:	69d9      	ldr	r1, [r3, #28]
 8003bf8:	61e1      	str	r1, [r4, #28]
  *resp++ = sdcp->sdio->RESP2;
 8003bfa:	6999      	ldr	r1, [r3, #24]
 8003bfc:	6221      	str	r1, [r4, #32]
  *resp   = sdcp->sdio->RESP1;
 8003bfe:	6959      	ldr	r1, [r3, #20]
 8003c00:	6261      	str	r1, [r4, #36]	; 0x24
  sdcp->sdio->ARG = arg;
 8003c02:	6098      	str	r0, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003c04:	60da      	str	r2, [r3, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8003c06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c08:	f011 0245 	ands.w	r2, r1, #69	; 0x45
 8003c0c:	d0fb      	beq.n	8003c06 <sdcConnect+0x296>
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0U) {
 8003c0e:	f011 0005 	ands.w	r0, r1, #5
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 8003c12:	639a      	str	r2, [r3, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0U) {
 8003c14:	f47f af3c 	bne.w	8003a90 <sdcConnect+0x120>
  if (SDC_MODE_CARDTYPE_MMC == (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK)) {
 8003c18:	6b22      	ldr	r2, [r4, #48]	; 0x30
  *resp = sdcp->sdio->RESP1;
 8003c1a:	6959      	ldr	r1, [r3, #20]
 8003c1c:	f002 020f 	and.w	r2, r2, #15
 8003c20:	2a02      	cmp	r2, #2
 8003c22:	f000 80a7 	beq.w	8003d74 <sdcConnect+0x404>
  return (data[startidx] & endmask) >> startoff;        /* One piece case.  */
 8003c26:	6a61      	ldr	r1, [r4, #36]	; 0x24
  if (0U == _mmcsd_get_slice(sdcp->csd, MMCSD_CSD_10_CSD_STRUCTURE_SLICE)) {
 8003c28:	0f89      	lsrs	r1, r1, #30
 8003c2a:	d16c      	bne.n	8003d06 <sdcConnect+0x396>
  div = sdcp->config->slowdown + ((48000000U + f - 1U) / f);
 8003c2c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    sdcp->sdio->CLKCR = (sdcp->sdio->CLKCR & ~(SDIO_CLKCR_BYPASS_Msk |
 8003c2e:	6859      	ldr	r1, [r3, #4]
  div = sdcp->config->slowdown + ((48000000U + f - 1U) / f);
 8003c30:	6840      	ldr	r0, [r0, #4]
    sdcp->sdio->CLKCR = (sdcp->sdio->CLKCR & ~(SDIO_CLKCR_BYPASS_Msk |
 8003c32:	f421 61df 	bic.w	r1, r1, #1784	; 0x6f8
    return SDIO_CLKCR_BYPASS;
 8003c36:	1c45      	adds	r5, r0, #1
 8003c38:	bf08      	it	eq
 8003c3a:	f44f 6080 	moveq.w	r0, #1024	; 0x400
    sdcp->sdio->CLKCR = (sdcp->sdio->CLKCR & ~(SDIO_CLKCR_BYPASS_Msk |
 8003c3e:	f021 0107 	bic.w	r1, r1, #7
                                               SDIO_CLKCR_CLKDIV_Msk)) |
 8003c42:	4301      	orrs	r1, r0
  if (SDC_MODE_CARDTYPE_MMC == (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK)) {
 8003c44:	2a02      	cmp	r2, #2
    sdcp->sdio->CLKCR = (sdcp->sdio->CLKCR & ~(SDIO_CLKCR_BYPASS_Msk |
 8003c46:	6059      	str	r1, [r3, #4]
                                sdcp->rca, sdcp->csd)) {
 8003c48:	f104 0018 	add.w	r0, r4, #24
  if (SDC_MODE_CARDTYPE_MMC == (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK)) {
 8003c4c:	d06f      	beq.n	8003d2e <sdcConnect+0x3be>
    sdcp->capacity = _mmcsd_get_capacity(sdcp->csd);
 8003c4e:	f7fc fe4f 	bl	80008f0 <_mmcsd_get_capacity>
 8003c52:	62a0      	str	r0, [r4, #40]	; 0x28
  sdcp->sdio->ARG = arg;
 8003c54:	f44f 7100 	mov.w	r1, #512	; 0x200
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003c58:	f44f 628a 	mov.w	r2, #1104	; 0x450
  sdcp->sdio->ARG = arg;
 8003c5c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003c5e:	6099      	str	r1, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003c60:	60da      	str	r2, [r3, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8003c62:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c64:	f011 0245 	ands.w	r2, r1, #69	; 0x45
 8003c68:	d0fb      	beq.n	8003c62 <sdcConnect+0x2f2>
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0U) {
 8003c6a:	f011 0f05 	tst.w	r1, #5
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 8003c6e:	639a      	str	r2, [r3, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0U) {
 8003c70:	f47f af0e 	bne.w	8003a90 <sdcConnect+0x120>
  *resp = sdcp->sdio->RESP1;
 8003c74:	6959      	ldr	r1, [r3, #20]
      MMCSD_R1_ERROR(resp[0])) {
 8003c76:	4a71      	ldr	r2, [pc, #452]	; (8003e3c <sdcConnect+0x4cc>)
 8003c78:	400a      	ands	r2, r1
                                 MMCSD_BLOCK_SIZE, resp) ||
 8003c7a:	2a00      	cmp	r2, #0
 8003c7c:	f47f aeb9 	bne.w	80039f2 <sdcConnect+0x82>
  switch (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK) {
 8003c80:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003c82:	f012 0f0e 	tst.w	r2, #14
 8003c86:	f002 010f 	and.w	r1, r2, #15
 8003c8a:	f040 8091 	bne.w	8003db0 <sdcConnect+0x440>
  if (SDC_MODE_1BIT == sdcp->config->bus_width) {
 8003c8e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003c90:	7812      	ldrb	r2, [r2, #0]
 8003c92:	2a00      	cmp	r2, #0
 8003c94:	d02e      	beq.n	8003cf4 <sdcConnect+0x384>
  else if (SDC_MODE_4BIT == sdcp->config->bus_width) {
 8003c96:	2a01      	cmp	r2, #1
 8003c98:	f47f aeab 	bne.w	80039f2 <sdcConnect+0x82>
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003c9c:	f240 4177 	movw	r1, #1143	; 0x477
  uint32_t clk = sdcp->sdio->CLKCR & ~SDIO_CLKCR_WIDBUS;
 8003ca0:	685a      	ldr	r2, [r3, #4]
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, sdcp->rca, resp) ||
 8003ca2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003ca4:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
    sdcp->sdio->CLKCR = clk | SDIO_CLKCR_WIDBUS_0;
 8003ca8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cac:	605a      	str	r2, [r3, #4]
  sdcp->sdio->ARG = arg;
 8003cae:	6098      	str	r0, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003cb0:	60d9      	str	r1, [r3, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8003cb2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003cb4:	f011 0245 	ands.w	r2, r1, #69	; 0x45
 8003cb8:	d0fb      	beq.n	8003cb2 <sdcConnect+0x342>
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0U) {
 8003cba:	f011 0f05 	tst.w	r1, #5
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 8003cbe:	639a      	str	r2, [r3, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0U) {
 8003cc0:	f47f aee6 	bne.w	8003a90 <sdcConnect+0x120>
  *resp = sdcp->sdio->RESP1;
 8003cc4:	6959      	ldr	r1, [r3, #20]
        MMCSD_R1_ERROR(resp[0])) {
 8003cc6:	4a5d      	ldr	r2, [pc, #372]	; (8003e3c <sdcConnect+0x4cc>)
 8003cc8:	400a      	ands	r2, r1
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, sdcp->rca, resp) ||
 8003cca:	2a00      	cmp	r2, #0
 8003ccc:	f47f ae91 	bne.w	80039f2 <sdcConnect+0x82>
  sdcp->sdio->ARG = arg;
 8003cd0:	2102      	movs	r1, #2
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003cd2:	f240 4246 	movw	r2, #1094	; 0x446
  sdcp->sdio->ARG = arg;
 8003cd6:	6099      	str	r1, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003cd8:	60da      	str	r2, [r3, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8003cda:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003cdc:	f011 0245 	ands.w	r2, r1, #69	; 0x45
 8003ce0:	d0fb      	beq.n	8003cda <sdcConnect+0x36a>
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0U) {
 8003ce2:	f011 0f05 	tst.w	r1, #5
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 8003ce6:	639a      	str	r2, [r3, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0U) {
 8003ce8:	d13f      	bne.n	8003d6a <sdcConnect+0x3fa>
  *resp = sdcp->sdio->RESP1;
 8003cea:	695a      	ldr	r2, [r3, #20]
      MMCSD_R1_ERROR(resp[0])) {
 8003cec:	4b53      	ldr	r3, [pc, #332]	; (8003e3c <sdcConnect+0x4cc>)
 8003cee:	4013      	ands	r3, r2
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SWITCH, cmdarg, resp) ||
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d13d      	bne.n	8003d70 <sdcConnect+0x400>
  sdcp->state = BLK_READY;
 8003cf4:	2305      	movs	r3, #5
  return HAL_SUCCESS;
 8003cf6:	2000      	movs	r0, #0
  sdcp->state = BLK_READY;
 8003cf8:	7123      	strb	r3, [r4, #4]
  return HAL_SUCCESS;
 8003cfa:	e680      	b.n	80039fe <sdcConnect+0x8e>
    sdc_lld_collect_errors(sdcp, sta);
 8003cfc:	4620      	mov	r0, r4
 8003cfe:	f7fc ff4f 	bl	8000ba0 <sdc_lld_collect_errors>
  sdcp->sdio->ARG = arg;
 8003d02:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003d04:	e696      	b.n	8003a34 <sdcConnect+0xc4>
  uint8_t *tmp = sdcp->buf;
 8003d06:	f104 054c 	add.w	r5, r4, #76	; 0x4c
  if (sdc_lld_read_special(sdcp, tmp, N, MMCSD_CMD_SWITCH, 0)) {
 8003d0a:	9000      	str	r0, [sp, #0]
 8003d0c:	2306      	movs	r3, #6
 8003d0e:	2240      	movs	r2, #64	; 0x40
 8003d10:	4629      	mov	r1, r5
 8003d12:	4620      	mov	r0, r4
 8003d14:	f7ff fa8c 	bl	8003230 <sdc_lld_read_special>
 8003d18:	bb50      	cbnz	r0, 8003d70 <sdcConnect+0x400>
  if ((sdc_cmd6_extract_info(SD_SWITCH_FUNCTION_SPEED, tmp) & 2U) == 2U) {
 8003d1a:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
 8003d1e:	ba5b      	rev16	r3, r3
 8003d20:	079e      	lsls	r6, r3, #30
 8003d22:	d463      	bmi.n	8003dec <sdcConnect+0x47c>
  if (SDC_MODE_CARDTYPE_MMC == (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK)) {
 8003d24:	6b22      	ldr	r2, [r4, #48]	; 0x30
    sdcp->sdio->CLKCR = (sdcp->sdio->CLKCR & ~(SDIO_CLKCR_BYPASS_Msk |
 8003d26:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003d28:	f002 020f 	and.w	r2, r2, #15
 8003d2c:	e77e      	b.n	8003c2c <sdcConnect+0x2bc>
 8003d2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (_mmcsd_get_slice(sdcp->csd, MMCSD_CSD_MMC_CSD_STRUCTURE_SLICE) > 1U) {
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	da8c      	bge.n	8003c4e <sdcConnect+0x2de>
      if (sdc_lld_read_special(sdcp, ext_csd, 512, MMCSD_CMD_SEND_EXT_CSD, 0)) {
 8003d34:	2500      	movs	r5, #0
 8003d36:	2308      	movs	r3, #8
 8003d38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d3c:	4620      	mov	r0, r4
 8003d3e:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8003d42:	9500      	str	r5, [sp, #0]
 8003d44:	f7ff fa74 	bl	8003230 <sdc_lld_read_special>
 8003d48:	b990      	cbnz	r0, 8003d70 <sdcConnect+0x400>
uint32_t _mmcsd_get_capacity_ext(const uint8_t *ext_csd) {

  osalDbgCheck(NULL != ext_csd);

  return ((uint32_t)ext_csd[215] << 24U) +
         ((uint32_t)ext_csd[214] << 16U) +
 8003d4a:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
  return ((uint32_t)ext_csd[215] << 24U) +
 8003d4e:	f894 0123 	ldrb.w	r0, [r4, #291]	; 0x123
         ((uint32_t)ext_csd[213] << 8U)  +
         (uint32_t)ext_csd[212];
 8003d52:	f894 1120 	ldrb.w	r1, [r4, #288]	; 0x120
         ((uint32_t)ext_csd[214] << 16U) +
 8003d56:	041b      	lsls	r3, r3, #16
         ((uint32_t)ext_csd[213] << 8U)  +
 8003d58:	f894 2121 	ldrb.w	r2, [r4, #289]	; 0x121
  return ((uint32_t)ext_csd[215] << 24U) +
 8003d5c:	eb03 6300 	add.w	r3, r3, r0, lsl #24
         ((uint32_t)ext_csd[213] << 8U)  +
 8003d60:	440b      	add	r3, r1
 8003d62:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      sdcp->capacity = _mmcsd_get_capacity_ext(ext_csd);
 8003d66:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d68:	e774      	b.n	8003c54 <sdcConnect+0x2e4>
    sdc_lld_collect_errors(sdcp, sta);
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	f7fc ff18 	bl	8000ba0 <sdc_lld_collect_errors>
    return HAL_FAILED;
 8003d70:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003d72:	e63e      	b.n	80039f2 <sdcConnect+0x82>
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003d74:	f240 4146 	movw	r1, #1094	; 0x446
  sdcp->sdio->ARG = arg;
 8003d78:	4831      	ldr	r0, [pc, #196]	; (8003e40 <sdcConnect+0x4d0>)
 8003d7a:	6098      	str	r0, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003d7c:	60d9      	str	r1, [r3, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8003d7e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d80:	f011 0045 	ands.w	r0, r1, #69	; 0x45
 8003d84:	d0fb      	beq.n	8003d7e <sdcConnect+0x40e>
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0U) {
 8003d86:	f011 0f05 	tst.w	r1, #5
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 8003d8a:	6398      	str	r0, [r3, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0U) {
 8003d8c:	d126      	bne.n	8003ddc <sdcConnect+0x46c>
  *resp = sdcp->sdio->RESP1;
 8003d8e:	6958      	ldr	r0, [r3, #20]
                                   MMCSD_R1_ERROR(resp[0]))) {
 8003d90:	492a      	ldr	r1, [pc, #168]	; (8003e3c <sdcConnect+0x4cc>)
 8003d92:	4001      	ands	r1, r0
  if (!(sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SWITCH, cmdarg, resp) ||
 8003d94:	2900      	cmp	r1, #0
 8003d96:	f47f af49 	bne.w	8003c2c <sdcConnect+0x2bc>
  div = sdcp->config->slowdown + ((48000000U + f - 1U) / f);
 8003d9a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    sdcp->sdio->CLKCR = (sdcp->sdio->CLKCR & ~(SDIO_CLKCR_BYPASS_Msk |
 8003d9c:	6859      	ldr	r1, [r3, #4]
  div = sdcp->config->slowdown + ((48000000U + f - 1U) / f);
 8003d9e:	6840      	ldr	r0, [r0, #4]
    sdcp->sdio->CLKCR = (sdcp->sdio->CLKCR & ~(SDIO_CLKCR_BYPASS_Msk |
 8003da0:	f421 61df 	bic.w	r1, r1, #1784	; 0x6f8
 8003da4:	f021 0107 	bic.w	r1, r1, #7
  if (div == 1U) {
 8003da8:	2800      	cmp	r0, #0
 8003daa:	d034      	beq.n	8003e16 <sdcConnect+0x4a6>
  return  div - 2U;
 8003dac:	3801      	subs	r0, #1
 8003dae:	e748      	b.n	8003c42 <sdcConnect+0x2d2>
  switch (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK) {
 8003db0:	2902      	cmp	r1, #2
 8003db2:	f47f ae1e 	bne.w	80039f2 <sdcConnect+0x82>
  switch (sdcp->config->bus_width) {
 8003db6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003db8:	7812      	ldrb	r2, [r2, #0]
 8003dba:	2a01      	cmp	r2, #1
 8003dbc:	d036      	beq.n	8003e2c <sdcConnect+0x4bc>
 8003dbe:	2a02      	cmp	r2, #2
 8003dc0:	d02c      	beq.n	8003e1c <sdcConnect+0x4ac>
 8003dc2:	2a00      	cmp	r2, #0
 8003dc4:	d096      	beq.n	8003cf4 <sdcConnect+0x384>
  uint32_t clk = sdcp->sdio->CLKCR & ~SDIO_CLKCR_WIDBUS;
 8003dc6:	685a      	ldr	r2, [r3, #4]
  uint32_t cmdarg = mmc_cmd6_construct(MMC_SWITCH_WRITE_BYTE, 183, 0, 0);
 8003dc8:	491e      	ldr	r1, [pc, #120]	; (8003e44 <sdcConnect+0x4d4>)
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003dca:	f240 4246 	movw	r2, #1094	; 0x446
  sdcp->sdio->ARG = arg;
 8003dce:	6099      	str	r1, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8003dd0:	60da      	str	r2, [r3, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 8003dd2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003dd4:	f011 0245 	ands.w	r2, r1, #69	; 0x45
 8003dd8:	d0fb      	beq.n	8003dd2 <sdcConnect+0x462>
 8003dda:	e782      	b.n	8003ce2 <sdcConnect+0x372>
    sdc_lld_collect_errors(sdcp, sta);
 8003ddc:	4620      	mov	r0, r4
 8003dde:	f7fc fedf 	bl	8000ba0 <sdc_lld_collect_errors>
  if (SDC_MODE_CARDTYPE_MMC == (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK)) {
 8003de2:	6b22      	ldr	r2, [r4, #48]	; 0x30
    sdcp->sdio->CLKCR = (sdcp->sdio->CLKCR & ~(SDIO_CLKCR_BYPASS_Msk |
 8003de4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003de6:	f002 020f 	and.w	r2, r2, #15
 8003dea:	e71f      	b.n	8003c2c <sdcConnect+0x2bc>
    if (sdc_lld_read_special(sdcp, tmp, N, MMCSD_CMD_SWITCH, cmdarg)) {
 8003dec:	4816      	ldr	r0, [pc, #88]	; (8003e48 <sdcConnect+0x4d8>)
 8003dee:	2306      	movs	r3, #6
 8003df0:	9000      	str	r0, [sp, #0]
 8003df2:	2240      	movs	r2, #64	; 0x40
 8003df4:	4629      	mov	r1, r5
 8003df6:	4620      	mov	r0, r4
 8003df8:	f7ff fa1a 	bl	8003230 <sdc_lld_read_special>
 8003dfc:	2800      	cmp	r0, #0
 8003dfe:	d1b7      	bne.n	8003d70 <sdcConnect+0x400>
        (uint32_t)buf[16];
 8003e00:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
  if (SDC_MODE_CARDTYPE_MMC == (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK)) {
 8003e04:	6b22      	ldr	r2, [r4, #48]	; 0x30
  status = (tmp >> ((uint32_t)function * 4U)) & 0xFU;
 8003e06:	f003 030f 	and.w	r3, r3, #15
  if (0xFU != status) {
 8003e0a:	2b0f      	cmp	r3, #15
  if (SDC_MODE_CARDTYPE_MMC == (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK)) {
 8003e0c:	f002 020f 	and.w	r2, r2, #15
 8003e10:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  if (0xFU != status) {
 8003e12:	d1c2      	bne.n	8003d9a <sdcConnect+0x42a>
 8003e14:	e70a      	b.n	8003c2c <sdcConnect+0x2bc>
    return SDIO_CLKCR_BYPASS;
 8003e16:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003e1a:	e712      	b.n	8003c42 <sdcConnect+0x2d2>
  uint32_t clk = sdcp->sdio->CLKCR & ~SDIO_CLKCR_WIDBUS;
 8003e1c:	685a      	ldr	r2, [r3, #4]
    cmdarg = mmc_cmd6_construct(MMC_SWITCH_WRITE_BYTE, 183, 2, 0);
 8003e1e:	490b      	ldr	r1, [pc, #44]	; (8003e4c <sdcConnect+0x4dc>)
 8003e20:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
    sdcp->sdio->CLKCR = clk | SDIO_CLKCR_WIDBUS_1;
 8003e24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e28:	605a      	str	r2, [r3, #4]
    break;
 8003e2a:	e7ce      	b.n	8003dca <sdcConnect+0x45a>
  uint32_t clk = sdcp->sdio->CLKCR & ~SDIO_CLKCR_WIDBUS;
 8003e2c:	685a      	ldr	r2, [r3, #4]
    cmdarg = mmc_cmd6_construct(MMC_SWITCH_WRITE_BYTE, 183, 1, 0);
 8003e2e:	4908      	ldr	r1, [pc, #32]	; (8003e50 <sdcConnect+0x4e0>)
 8003e30:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
    sdcp->sdio->CLKCR = clk | SDIO_CLKCR_WIDBUS_0;
 8003e34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e38:	605a      	str	r2, [r3, #4]
    break;
 8003e3a:	e7c6      	b.n	8003dca <sdcConnect+0x45a>
 8003e3c:	fdffe008 	.word	0xfdffe008
 8003e40:	03b90100 	.word	0x03b90100
 8003e44:	03b70000 	.word	0x03b70000
 8003e48:	80fffff1 	.word	0x80fffff1
 8003e4c:	03b70200 	.word	0x03b70200
 8003e50:	03b70100 	.word	0x03b70100
	...

08003e60 <__sch_reschedule_ahead.lto_priv.0>:
static void __sch_reschedule_ahead(void) {
 8003e60:	b410      	push	{r4}
  ntp->state = CH_STATE_CURRENT;
 8003e62:	2401      	movs	r4, #1
  tp->state = CH_STATE_READY;
 8003e64:	f04f 0c00 	mov.w	ip, #0
  thread_t *otp = __instance_get_currthread(oip);
 8003e68:	4b0c      	ldr	r3, [pc, #48]	; (8003e9c <__sch_reschedule_ahead.lto_priv.0+0x3c>)
  ch_priority_queue_t *p = pqp->next;
 8003e6a:	6818      	ldr	r0, [r3, #0]
 8003e6c:	68d9      	ldr	r1, [r3, #12]
  pqp->next       = p->next;
 8003e6e:	6802      	ldr	r2, [r0, #0]
  pqp->next->prev = pqp;
 8003e70:	6053      	str	r3, [r2, #4]
  ntp->state = CH_STATE_CURRENT;
 8003e72:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
  pqp->next       = p->next;
 8003e76:	601a      	str	r2, [r3, #0]
  __instance_set_currthread(oip, ntp);
 8003e78:	60d8      	str	r0, [r3, #12]
  } while (unlikely(pqp->prio > p->prio));
 8003e7a:	688c      	ldr	r4, [r1, #8]
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
 8003e7c:	698b      	ldr	r3, [r1, #24]
  tp->state = CH_STATE_READY;
 8003e7e:	f881 c028 	strb.w	ip, [r1, #40]	; 0x28
    pqp = pqp->next;
 8003e82:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio > p->prio));
 8003e84:	689a      	ldr	r2, [r3, #8]
 8003e86:	42a2      	cmp	r2, r4
 8003e88:	d8fb      	bhi.n	8003e82 <__sch_reschedule_ahead.lto_priv.0+0x22>
  p->prev       = pqp->prev;
 8003e8a:	685a      	ldr	r2, [r3, #4]
}
 8003e8c:	bc10      	pop	{r4}
 8003e8e:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 8003e92:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 8003e94:	6059      	str	r1, [r3, #4]
  chSysSwitch(ntp, otp);
 8003e96:	f7fc b9d3 	b.w	8000240 <__port_switch>
 8003e9a:	bf00      	nop
 8003e9c:	20001050 	.word	0x20001050

08003ea0 <vtcb>:
static void vtcb(virtual_timer_t *vtp, void *p) {
 8003ea0:	b508      	push	{r3, lr}
 8003ea2:	2330      	movs	r3, #48	; 0x30
 8003ea4:	f383 8811 	msr	BASEPRI, r3
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f382 8811 	msr	BASEPRI, r2
 8003eae:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003eb2:	f3ef 8211 	mrs	r2, BASEPRI
 * @xclass
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
 8003eb6:	b95a      	cbnz	r2, 8003ed0 <vtcb+0x30>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003eb8:	f3ef 8205 	mrs	r2, IPSR
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003ebc:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ec0:	f3ef 8305 	mrs	r3, IPSR
  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 8003ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 8003ec8:	b133      	cbz	r3, 8003ed8 <vtcb+0x38>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003eca:	2300      	movs	r3, #0
 8003ecc:	f383 8811 	msr	BASEPRI, r3
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f383 8811 	msr	BASEPRI, r3
}
 8003ed6:	bd08      	pop	{r3, pc}
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8003ed8:	4b04      	ldr	r3, [pc, #16]	; (8003eec <vtcb+0x4c>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	6892      	ldr	r2, [r2, #8]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d9f1      	bls.n	8003eca <vtcb+0x2a>
    __sch_reschedule_ahead();
 8003ee6:	f7ff ffbb 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 8003eea:	e7ee      	b.n	8003eca <vtcb+0x2a>
 8003eec:	20001050 	.word	0x20001050

08003ef0 <rt_test_002_002_execute>:
  test_set_step(1);
 8003ef0:	2301      	movs	r3, #1
static void rt_test_002_002_execute(void) {
 8003ef2:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 8003ef4:	4c47      	ldr	r4, [pc, #284]	; (8004014 <rt_test_002_002_execute+0x124>)
static void rt_test_002_002_execute(void) {
 8003ef6:	b086      	sub	sp, #24
  test_set_step(1);
 8003ef8:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003efa:	f3ef 8311 	mrs	r3, BASEPRI
  if (port_irq_enabled(sts)) {
 8003efe:	b96b      	cbnz	r3, 8003f1c <rt_test_002_002_execute+0x2c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f00:	f3ef 8305 	mrs	r3, IPSR
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003f04:	2330      	movs	r3, #48	; 0x30
 8003f06:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f0a:	f3ef 8305 	mrs	r3, IPSR
 8003f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (port_is_isr_context()) {
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d073      	beq.n	8003ffe <rt_test_002_002_execute+0x10e>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003f16:	2300      	movs	r3, #0
 8003f18:	f383 8811 	msr	BASEPRI, r3
  test_set_step(2);
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	2330      	movs	r3, #48	; 0x30
 8003f20:	6022      	str	r2, [r4, #0]
 8003f22:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f26:	f3ef 8211 	mrs	r2, BASEPRI
  if (port_irq_enabled(sts)) {
 8003f2a:	b962      	cbnz	r2, 8003f46 <rt_test_002_002_execute+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f2c:	f3ef 8205 	mrs	r2, IPSR
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003f30:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f34:	f3ef 8305 	mrs	r3, IPSR
 8003f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (port_is_isr_context()) {
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d054      	beq.n	8003fea <rt_test_002_002_execute+0xfa>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003f40:	2300      	movs	r3, #0
 8003f42:	f383 8811 	msr	BASEPRI, r3
 8003f46:	2300      	movs	r3, #0
 8003f48:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f50:	f3ef 8311 	mrs	r3, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalLock(void) {

  if (port_irq_enabled(port_get_irq_status())) {
 8003f54:	b913      	cbnz	r3, 8003f5c <rt_test_002_002_execute+0x6c>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003f56:	2330      	movs	r3, #48	; 0x30
 8003f58:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f5c:	f3ef 8311 	mrs	r3, BASEPRI
 8003f60:	b913      	cbnz	r3, 8003f68 <rt_test_002_002_execute+0x78>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003f62:	2330      	movs	r3, #48	; 0x30
 8003f64:	f383 8811 	msr	BASEPRI, r3
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f383 8811 	msr	BASEPRI, r3
  test_set_step(4);
 8003f6e:	2104      	movs	r1, #4
 8003f70:	2230      	movs	r2, #48	; 0x30
 8003f72:	6021      	str	r1, [r4, #0]
 8003f74:	f382 8811 	msr	BASEPRI, r2
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f78:	f3ef 8211 	mrs	r2, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalUnlock(void) {

  if (!port_irq_enabled(port_get_irq_status())) {
 8003f7c:	b10a      	cbz	r2, 8003f82 <rt_test_002_002_execute+0x92>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003f7e:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f82:	f3ef 8311 	mrs	r3, BASEPRI
 8003f86:	b113      	cbz	r3, 8003f8e <rt_test_002_002_execute+0x9e>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f383 8811 	msr	BASEPRI, r3
  test_set_step(5);
 8003f8e:	2105      	movs	r1, #5
  vtp->dlist.next = NULL;
 8003f90:	2200      	movs	r2, #0
 8003f92:	2330      	movs	r3, #48	; 0x30
 8003f94:	6021      	str	r1, [r4, #0]
 8003f96:	9200      	str	r2, [sp, #0]
 8003f98:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8003f9c:	9b00      	ldr	r3, [sp, #0]
    chVTDoResetI(vtp);
 8003f9e:	466e      	mov	r6, sp
  if (chVTIsArmedI(vtp)) {
 8003fa0:	b113      	cbz	r3, 8003fa8 <rt_test_002_002_execute+0xb8>
    chVTDoResetI(vtp);
 8003fa2:	4630      	mov	r0, r6
 8003fa4:	f7fe fe44 	bl	8002c30 <chVTDoResetI>
  vtp->par     = par;
 8003fa8:	2500      	movs	r5, #0
  vtp->func    = vtfunc;
 8003faa:	4b1b      	ldr	r3, [pc, #108]	; (8004018 <rt_test_002_002_execute+0x128>)
  vt_enqueue(vtlp, vtp, delay);
 8003fac:	2101      	movs	r1, #1
 8003fae:	4630      	mov	r0, r6
  vtp->par     = par;
 8003fb0:	e9cd 3503 	strd	r3, r5, [sp, #12]
  vtp->reload  = (sysinterval_t)0;
 8003fb4:	9505      	str	r5, [sp, #20]
  vt_enqueue(vtlp, vtp, delay);
 8003fb6:	f00a fdbb 	bl	800eb30 <vt_enqueue.constprop.0>
 8003fba:	f385 8811 	msr	BASEPRI, r5
 8003fbe:	2630      	movs	r6, #48	; 0x30
 8003fc0:	f386 8811 	msr	BASEPRI, r6
 8003fc4:	210a      	movs	r1, #10
 8003fc6:	2008      	movs	r0, #8
 8003fc8:	f7fe fe8a 	bl	8002ce0 <chSchGoSleepTimeoutS>
 8003fcc:	f385 8811 	msr	BASEPRI, r5
 8003fd0:	f386 8811 	msr	BASEPRI, r6
  return (bool)(vtp->dlist.next != NULL);
 8003fd4:	9b00      	ldr	r3, [sp, #0]
 8003fd6:	f385 8811 	msr	BASEPRI, r5
 8003fda:	b123      	cbz	r3, 8003fe6 <rt_test_002_002_execute+0xf6>
  chtest.global_fail     = true;
 8003fdc:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8003fe0:	4a0e      	ldr	r2, [pc, #56]	; (800401c <rt_test_002_002_execute+0x12c>)
  chtest.global_fail     = true;
 8003fe2:	80a3      	strh	r3, [r4, #4]
  chtest.failure_message = msg;
 8003fe4:	60a2      	str	r2, [r4, #8]
}
 8003fe6:	b006      	add	sp, #24
 8003fe8:	bd70      	pop	{r4, r5, r6, pc}
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8003fea:	4b0d      	ldr	r3, [pc, #52]	; (8004020 <rt_test_002_002_execute+0x130>)
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	6892      	ldr	r2, [r2, #8]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d9a3      	bls.n	8003f40 <rt_test_002_002_execute+0x50>
    __sch_reschedule_ahead();
 8003ff8:	f7ff ff32 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 8003ffc:	e7a0      	b.n	8003f40 <rt_test_002_002_execute+0x50>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8003ffe:	4b08      	ldr	r3, [pc, #32]	; (8004020 <rt_test_002_002_execute+0x130>)
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	6892      	ldr	r2, [r2, #8]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	429a      	cmp	r2, r3
 800400a:	d984      	bls.n	8003f16 <rt_test_002_002_execute+0x26>
    __sch_reschedule_ahead();
 800400c:	f7ff ff28 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 8004010:	e781      	b.n	8003f16 <rt_test_002_002_execute+0x26>
 8004012:	bf00      	nop
 8004014:	200010f4 	.word	0x200010f4
 8004018:	08003ea1 	.word	0x08003ea1
 800401c:	080101e4 	.word	0x080101e4
 8004020:	20001050 	.word	0x20001050
	...

08004030 <rt_test_005_003_execute>:
static void rt_test_005_003_execute(void) {
  tprio_t prio, p1;

  /* [5.3.1] Thread priority is increased by one then a check is
     performed.*/
  test_set_step(1);
 8004030:	2101      	movs	r1, #1
static void rt_test_005_003_execute(void) {
 8004032:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return __sch_get_currthread();
 8004036:	4c29      	ldr	r4, [pc, #164]	; (80040dc <rt_test_005_003_execute+0xac>)
  test_set_step(1);
 8004038:	4e29      	ldr	r6, [pc, #164]	; (80040e0 <rt_test_005_003_execute+0xb0>)
 800403a:	68e3      	ldr	r3, [r4, #12]
 800403c:	2230      	movs	r2, #48	; 0x30
  return chThdGetSelfX()->hdr.pqueue.prio;
 800403e:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8004042:	6031      	str	r1, [r6, #0]
  {
    prio = chThdGetPriorityX();
    p1 = chThdSetPriority(prio + 1);
 8004044:	eb08 0501 	add.w	r5, r8, r1
 8004048:	f382 8811 	msr	BASEPRI, r2
  oldprio = currtp->realprio;
 800404c:	6c5f      	ldr	r7, [r3, #68]	; 0x44
  if ((currtp->hdr.pqueue.prio == currtp->realprio) ||
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	4297      	cmp	r7, r2
 8004052:	d038      	beq.n	80040c6 <rt_test_005_003_execute+0x96>
 8004054:	4295      	cmp	r5, r2
 8004056:	d836      	bhi.n	80040c6 <rt_test_005_003_execute+0x96>
  currtp->realprio = newprio;
 8004058:	645d      	str	r5, [r3, #68]	; 0x44
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	689a      	ldr	r2, [r3, #8]
 800405e:	68e3      	ldr	r3, [r4, #12]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	429a      	cmp	r2, r3
 8004064:	d901      	bls.n	800406a <rt_test_005_003_execute+0x3a>
    __sch_reschedule_ahead();
 8004066:	f7ff fefb 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 800406a:	2300      	movs	r3, #0
 800406c:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 8004070:	45b8      	cmp	r8, r7
 8004072:	d12a      	bne.n	80040ca <rt_test_005_003_execute+0x9a>
  return __sch_get_currthread();
 8004074:	68e3      	ldr	r3, [r4, #12]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	4295      	cmp	r5, r2
 800407a:	d11d      	bne.n	80040b8 <rt_test_005_003_execute+0x88>
  }
  test_end_step(1);

  /* [5.3.2] Thread priority is returned to the previous value then a
     check is performed.*/
  test_set_step(2);
 800407c:	2202      	movs	r2, #2
 800407e:	6032      	str	r2, [r6, #0]
 8004080:	2230      	movs	r2, #48	; 0x30
 8004082:	f382 8811 	msr	BASEPRI, r2
  oldprio = currtp->realprio;
 8004086:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
  if ((currtp->hdr.pqueue.prio == currtp->realprio) ||
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	4591      	cmp	r9, r2
 800408e:	d023      	beq.n	80040d8 <rt_test_005_003_execute+0xa8>
 8004090:	4590      	cmp	r8, r2
 8004092:	d821      	bhi.n	80040d8 <rt_test_005_003_execute+0xa8>
  currtp->realprio = newprio;
 8004094:	645f      	str	r7, [r3, #68]	; 0x44
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	689a      	ldr	r2, [r3, #8]
 800409a:	68e3      	ldr	r3, [r4, #12]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d901      	bls.n	80040a6 <rt_test_005_003_execute+0x76>
    __sch_reschedule_ahead();
 80040a2:	f7ff fedd 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 80040a6:	2300      	movs	r3, #0
 80040a8:	f383 8811 	msr	BASEPRI, r3
 80040ac:	454d      	cmp	r5, r9
 80040ae:	d10c      	bne.n	80040ca <rt_test_005_003_execute+0x9a>
  return chThdGetSelfX()->hdr.pqueue.prio;
 80040b0:	68e3      	ldr	r3, [r4, #12]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	4598      	cmp	r8, r3
 80040b6:	d004      	beq.n	80040c2 <rt_test_005_003_execute+0x92>
  chtest.global_fail     = true;
 80040b8:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 80040bc:	4a09      	ldr	r2, [pc, #36]	; (80040e4 <rt_test_005_003_execute+0xb4>)
  chtest.global_fail     = true;
 80040be:	80b3      	strh	r3, [r6, #4]
  chtest.failure_message = msg;
 80040c0:	60b2      	str	r2, [r6, #8]
    p1 = chThdSetPriority(p1);
    test_assert(p1 == prio + 1, "unexpected returned priority level");
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
  }
  test_end_step(2);
}
 80040c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    currtp->hdr.pqueue.prio = newprio;
 80040c6:	609d      	str	r5, [r3, #8]
 80040c8:	e7c6      	b.n	8004058 <rt_test_005_003_execute+0x28>
  chtest.global_fail     = true;
 80040ca:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 80040ce:	4a06      	ldr	r2, [pc, #24]	; (80040e8 <rt_test_005_003_execute+0xb8>)
  chtest.global_fail     = true;
 80040d0:	80b3      	strh	r3, [r6, #4]
  chtest.failure_message = msg;
 80040d2:	60b2      	str	r2, [r6, #8]
 80040d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040d8:	609f      	str	r7, [r3, #8]
 80040da:	e7db      	b.n	8004094 <rt_test_005_003_execute+0x64>
 80040dc:	20001050 	.word	0x20001050
 80040e0:	200010f4 	.word	0x200010f4
 80040e4:	0801021c 	.word	0x0801021c
 80040e8:	080101f8 	.word	0x080101f8
 80040ec:	00000000 	.word	0x00000000

080040f0 <rt_test_005_004_execute>:
  }
  test_end_step(1);

  /* [5.4.2] Raising thread priority above original priority but below
     the boosted level.*/
  test_set_step(2);
 80040f0:	2202      	movs	r2, #2
static void rt_test_005_004_execute(void) {
 80040f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return __sch_get_currthread();
 80040f6:	4d3a      	ldr	r5, [pc, #232]	; (80041e0 <rt_test_005_004_execute+0xf0>)
  test_set_step(2);
 80040f8:	4e3a      	ldr	r6, [pc, #232]	; (80041e4 <rt_test_005_004_execute+0xf4>)
 80040fa:	68eb      	ldr	r3, [r5, #12]
 80040fc:	6032      	str	r2, [r6, #0]
  return chThdGetSelfX()->hdr.pqueue.prio;
 80040fe:	689c      	ldr	r4, [r3, #8]
    chThdGetSelfX()->hdr.pqueue.prio += 2;
 8004100:	eb04 0902 	add.w	r9, r4, r2
  {
    p1 = chThdSetPriority(prio + 1);
 8004104:	f104 0801 	add.w	r8, r4, #1
 8004108:	2230      	movs	r2, #48	; 0x30
    chThdGetSelfX()->hdr.pqueue.prio += 2;
 800410a:	f8c3 9008 	str.w	r9, [r3, #8]
 800410e:	f382 8811 	msr	BASEPRI, r2
  oldprio = currtp->realprio;
 8004112:	6c5f      	ldr	r7, [r3, #68]	; 0x44
  if ((currtp->hdr.pqueue.prio == currtp->realprio) ||
 8004114:	689a      	ldr	r2, [r3, #8]
 8004116:	4297      	cmp	r7, r2
 8004118:	d044      	beq.n	80041a4 <rt_test_005_004_execute+0xb4>
 800411a:	4590      	cmp	r8, r2
 800411c:	d842      	bhi.n	80041a4 <rt_test_005_004_execute+0xb4>
  currtp->realprio = newprio;
 800411e:	f8c3 8044 	str.w	r8, [r3, #68]	; 0x44
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8004122:	682b      	ldr	r3, [r5, #0]
 8004124:	689a      	ldr	r2, [r3, #8]
 8004126:	68eb      	ldr	r3, [r5, #12]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	429a      	cmp	r2, r3
 800412c:	d901      	bls.n	8004132 <rt_test_005_004_execute+0x42>
    __sch_reschedule_ahead();
 800412e:	f7ff fe97 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 8004132:	2300      	movs	r3, #0
 8004134:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 8004138:	42bc      	cmp	r4, r7
 800413a:	d136      	bne.n	80041aa <rt_test_005_004_execute+0xba>
  return __sch_get_currthread();
 800413c:	68eb      	ldr	r3, [r5, #12]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	4591      	cmp	r9, r2
 8004142:	d139      	bne.n	80041b8 <rt_test_005_004_execute+0xc8>
 8004144:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004146:	4590      	cmp	r8, r2
 8004148:	d13c      	bne.n	80041c4 <rt_test_005_004_execute+0xd4>
    test_assert(chThdGetSelfX()->realprio == prio + 1, "unexpected returned real priority level");
  }
  test_end_step(2);

  /* [5.4.3] Raising thread priority above the boosted level.*/
  test_set_step(3);
 800414a:	2203      	movs	r2, #3
  {
    p1 = chThdSetPriority(prio + 3);
 800414c:	1ce7      	adds	r7, r4, #3
  test_set_step(3);
 800414e:	6032      	str	r2, [r6, #0]
 8004150:	2230      	movs	r2, #48	; 0x30
 8004152:	f382 8811 	msr	BASEPRI, r2
  oldprio = currtp->realprio;
 8004156:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
  if ((currtp->hdr.pqueue.prio == currtp->realprio) ||
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	4591      	cmp	r9, r2
 800415e:	d037      	beq.n	80041d0 <rt_test_005_004_execute+0xe0>
 8004160:	4297      	cmp	r7, r2
 8004162:	d835      	bhi.n	80041d0 <rt_test_005_004_execute+0xe0>
  currtp->realprio = newprio;
 8004164:	645f      	str	r7, [r3, #68]	; 0x44
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8004166:	682b      	ldr	r3, [r5, #0]
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	68eb      	ldr	r3, [r5, #12]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	429a      	cmp	r2, r3
 8004170:	d901      	bls.n	8004176 <rt_test_005_004_execute+0x86>
    __sch_reschedule_ahead();
 8004172:	f7ff fe75 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 8004176:	2300      	movs	r3, #0
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	45c8      	cmp	r8, r9
 800417e:	d114      	bne.n	80041aa <rt_test_005_004_execute+0xba>
 8004180:	68ea      	ldr	r2, [r5, #12]
 8004182:	6891      	ldr	r1, [r2, #8]
 8004184:	428f      	cmp	r7, r1
 8004186:	d117      	bne.n	80041b8 <rt_test_005_004_execute+0xc8>
 8004188:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800418a:	4297      	cmp	r7, r2
 800418c:	d122      	bne.n	80041d4 <rt_test_005_004_execute+0xe4>
    test_assert(chThdGetSelfX()->realprio == prio + 3, "unexpected real priority level");
  }
  test_end_step(3);

  /* [5.4.4] Restoring original conditions.*/
  test_set_step(4);
 800418e:	2104      	movs	r1, #4
 8004190:	2230      	movs	r2, #48	; 0x30
 8004192:	6031      	str	r1, [r6, #0]
 8004194:	f382 8811 	msr	BASEPRI, r2
 8004198:	68ea      	ldr	r2, [r5, #12]
  {
    chSysLock();
    chThdGetSelfX()->hdr.pqueue.prio = prio;
 800419a:	6094      	str	r4, [r2, #8]
    chThdGetSelfX()->realprio = prio;
 800419c:	6454      	str	r4, [r2, #68]	; 0x44
 800419e:	f383 8811 	msr	BASEPRI, r3
}
 80041a2:	e007      	b.n	80041b4 <rt_test_005_004_execute+0xc4>
    currtp->hdr.pqueue.prio = newprio;
 80041a4:	f8c3 8008 	str.w	r8, [r3, #8]
 80041a8:	e7b9      	b.n	800411e <rt_test_005_004_execute+0x2e>
  chtest.global_fail     = true;
 80041aa:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 80041ae:	4a0e      	ldr	r2, [pc, #56]	; (80041e8 <rt_test_005_004_execute+0xf8>)
  chtest.global_fail     = true;
 80041b0:	80b3      	strh	r3, [r6, #4]
  chtest.failure_message = msg;
 80041b2:	60b2      	str	r2, [r6, #8]
    chSysUnlock();
  }
  test_end_step(4);
}
 80041b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  chtest.global_fail     = true;
 80041b8:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 80041bc:	4a0b      	ldr	r2, [pc, #44]	; (80041ec <rt_test_005_004_execute+0xfc>)
  chtest.global_fail     = true;
 80041be:	80b3      	strh	r3, [r6, #4]
  chtest.failure_message = msg;
 80041c0:	60b2      	str	r2, [r6, #8]
 80041c2:	e7f7      	b.n	80041b4 <rt_test_005_004_execute+0xc4>
  chtest.global_fail     = true;
 80041c4:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 80041c8:	4a09      	ldr	r2, [pc, #36]	; (80041f0 <rt_test_005_004_execute+0x100>)
  chtest.global_fail     = true;
 80041ca:	80b3      	strh	r3, [r6, #4]
  chtest.failure_message = msg;
 80041cc:	60b2      	str	r2, [r6, #8]
 80041ce:	e7f1      	b.n	80041b4 <rt_test_005_004_execute+0xc4>
 80041d0:	609f      	str	r7, [r3, #8]
 80041d2:	e7c7      	b.n	8004164 <rt_test_005_004_execute+0x74>
  chtest.global_fail     = true;
 80041d4:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 80041d8:	4a06      	ldr	r2, [pc, #24]	; (80041f4 <rt_test_005_004_execute+0x104>)
  chtest.global_fail     = true;
 80041da:	80b3      	strh	r3, [r6, #4]
  chtest.failure_message = msg;
 80041dc:	60b2      	str	r2, [r6, #8]
 80041de:	e7e9      	b.n	80041b4 <rt_test_005_004_execute+0xc4>
 80041e0:	20001050 	.word	0x20001050
 80041e4:	200010f4 	.word	0x200010f4
 80041e8:	080101f8 	.word	0x080101f8
 80041ec:	0801021c 	.word	0x0801021c
 80041f0:	08010238 	.word	0x08010238
 80041f4:	08010260 	.word	0x08010260
	...

08004200 <thread1.lto_priv.0>:
static THD_FUNCTION(thread1, p) {
 8004200:	b538      	push	{r3, r4, r5, lr}
 8004202:	2330      	movs	r3, #48	; 0x30
 8004204:	4604      	mov	r4, r0
 8004206:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 800420a:	4915      	ldr	r1, [pc, #84]	; (8004260 <thread1.lto_priv.0+0x60>)
 800420c:	680b      	ldr	r3, [r1, #0]
 800420e:	b17b      	cbz	r3, 8004230 <thread1.lto_priv.0+0x30>
    *trp = NULL;
 8004210:	2000      	movs	r0, #0
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8004212:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8004214:	689d      	ldr	r5, [r3, #8]
 8004216:	6008      	str	r0, [r1, #0]
    tp->u.rdymsg = msg;
 8004218:	62d8      	str	r0, [r3, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 800421a:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    pqp = pqp->next;
 800421e:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8004220:	6891      	ldr	r1, [r2, #8]
 8004222:	42a9      	cmp	r1, r5
 8004224:	d2fb      	bcs.n	800421e <thread1.lto_priv.0+0x1e>
  p->prev       = pqp->prev;
 8004226:	6851      	ldr	r1, [r2, #4]
 8004228:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 800422c:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 800422e:	6053      	str	r3, [r2, #4]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8004230:	4b0c      	ldr	r3, [pc, #48]	; (8004264 <thread1.lto_priv.0+0x64>)
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	6892      	ldr	r2, [r2, #8]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	429a      	cmp	r2, r3
 800423c:	d901      	bls.n	8004242 <thread1.lto_priv.0+0x42>
    __sch_reschedule_ahead();
 800423e:	f7ff fe0f 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 8004242:	2300      	movs	r3, #0
 8004244:	f383 8811 	msr	BASEPRI, r3
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8004248:	4b07      	ldr	r3, [pc, #28]	; (8004268 <thread1.lto_priv.0+0x68>)
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	f103 0120 	add.w	r1, r3, #32
 8004250:	428a      	cmp	r2, r1
 8004252:	d203      	bcs.n	800425c <thread1.lto_priv.0+0x5c>
  test_emit_token(*(char *)p);
 8004254:	7821      	ldrb	r1, [r4, #0]
    *chtest.tokp++ = token;
 8004256:	1c50      	adds	r0, r2, #1
 8004258:	60d8      	str	r0, [r3, #12]
 800425a:	7011      	strb	r1, [r2, #0]
}
 800425c:	bd38      	pop	{r3, r4, r5, pc}
 800425e:	bf00      	nop
 8004260:	20001ac4 	.word	0x20001ac4
 8004264:	20001050 	.word	0x20001050
 8004268:	200010f4 	.word	0x200010f4
 800426c:	00000000 	.word	0x00000000

08004270 <thread2>:
static THD_FUNCTION(thread2, p) {
 8004270:	b510      	push	{r4, lr}
 8004272:	2430      	movs	r4, #48	; 0x30
 8004274:	f384 8811 	msr	BASEPRI, r4
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8004278:	2164      	movs	r1, #100	; 0x64
 800427a:	2008      	movs	r0, #8
 800427c:	f7fe fd30 	bl	8002ce0 <chSchGoSleepTimeoutS>
 8004280:	2100      	movs	r1, #0
 8004282:	f381 8811 	msr	BASEPRI, r1
 8004286:	f384 8811 	msr	BASEPRI, r4
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && ch_queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && ch_queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (++sp->cnt <= (cnt_t)0) {
 800428a:	4a13      	ldr	r2, [pc, #76]	; (80042d8 <thread2+0x68>)
 800428c:	6893      	ldr	r3, [r2, #8]
 800428e:	3301      	adds	r3, #1
 8004290:	428b      	cmp	r3, r1
 8004292:	6093      	str	r3, [r2, #8]
 8004294:	dd0c      	ble.n	80042b0 <thread2+0x40>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8004296:	4b11      	ldr	r3, [pc, #68]	; (80042dc <thread2+0x6c>)
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	6892      	ldr	r2, [r2, #8]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d901      	bls.n	80042a8 <thread2+0x38>
    __sch_reschedule_ahead();
 80042a4:	f7ff fddc 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 80042a8:	2300      	movs	r3, #0
 80042aa:	f383 8811 	msr	BASEPRI, r3
}
 80042ae:	bd10      	pop	{r4, pc}
  ch_queue_t *p = qp->next;
 80042b0:	6813      	ldr	r3, [r2, #0]
  qp->next       = p->next;
 80042b2:	681c      	ldr	r4, [r3, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80042b4:	6998      	ldr	r0, [r3, #24]
 80042b6:	6014      	str	r4, [r2, #0]
  qp->next->prev = qp;
 80042b8:	6062      	str	r2, [r4, #4]
  } while (unlikely(pqp->prio >= p->prio));
 80042ba:	689c      	ldr	r4, [r3, #8]
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = threadref(ch_queue_fifo_remove(&sp->queue));
    tp->u.rdymsg = MSG_OK;
 80042bc:	62d9      	str	r1, [r3, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 80042be:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    pqp = pqp->next;
 80042c2:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80042c4:	6882      	ldr	r2, [r0, #8]
 80042c6:	42a2      	cmp	r2, r4
 80042c8:	d2fb      	bcs.n	80042c2 <thread2+0x52>
  p->prev       = pqp->prev;
 80042ca:	6842      	ldr	r2, [r0, #4]
 80042cc:	e9c3 0200 	strd	r0, r2, [r3]
  p->prev->next = p;
 80042d0:	6013      	str	r3, [r2, #0]
  pqp->prev     = p;
 80042d2:	6043      	str	r3, [r0, #4]
  return __sch_ready_behind(tp);
 80042d4:	e7df      	b.n	8004296 <thread2+0x26>
 80042d6:	bf00      	nop
 80042d8:	20001224 	.word	0x20001224
 80042dc:	20001050 	.word	0x20001050

080042e0 <evt_thread3>:
static THD_FUNCTION(evt_thread3, p) {
 80042e0:	b538      	push	{r3, r4, r5, lr}
 80042e2:	2530      	movs	r5, #48	; 0x30
 80042e4:	4604      	mov	r4, r0
 80042e6:	f385 8811 	msr	BASEPRI, r5
 80042ea:	2164      	movs	r1, #100	; 0x64
 80042ec:	2008      	movs	r0, #8
 80042ee:	f7fe fcf7 	bl	8002ce0 <chSchGoSleepTimeoutS>
 80042f2:	2300      	movs	r3, #0
 80042f4:	f383 8811 	msr	BASEPRI, r3
 80042f8:	f385 8811 	msr	BASEPRI, r5
  tp->epending |= events;
 80042fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if (((tp->state == CH_STATE_WTOREVT) &&
 80042fe:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
  tp->epending |= events;
 8004302:	f043 0301 	orr.w	r3, r3, #1
  if (((tp->state == CH_STATE_WTOREVT) &&
 8004306:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 8004308:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (((tp->state == CH_STATE_WTOREVT) &&
 800430a:	d022      	beq.n	8004352 <evt_thread3+0x72>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800430c:	2a0b      	cmp	r2, #11
 800430e:	d00c      	beq.n	800432a <evt_thread3+0x4a>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8004310:	4b12      	ldr	r3, [pc, #72]	; (800435c <evt_thread3+0x7c>)
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	6892      	ldr	r2, [r2, #8]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	429a      	cmp	r2, r3
 800431c:	d901      	bls.n	8004322 <evt_thread3+0x42>
    __sch_reschedule_ahead();
 800431e:	f7ff fd9f 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 8004322:	2300      	movs	r3, #0
 8004324:	f383 8811 	msr	BASEPRI, r3
}
 8004328:	bd38      	pop	{r3, r4, r5, pc}
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 800432a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      ((tp->state == CH_STATE_WTANDEVT) &&
 800432c:	ea32 0303 	bics.w	r3, r2, r3
 8004330:	d1ee      	bne.n	8004310 <evt_thread3+0x30>
    tp->u.rdymsg = MSG_OK;
 8004332:	2200      	movs	r2, #0
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8004334:	69a3      	ldr	r3, [r4, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8004336:	68a1      	ldr	r1, [r4, #8]
 8004338:	62e2      	str	r2, [r4, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 800433a:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    pqp = pqp->next;
 800433e:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8004340:	689a      	ldr	r2, [r3, #8]
 8004342:	428a      	cmp	r2, r1
 8004344:	d2fb      	bcs.n	800433e <evt_thread3+0x5e>
  p->prev       = pqp->prev;
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	e9c4 3200 	strd	r3, r2, [r4]
  p->prev->next = p;
 800434c:	6014      	str	r4, [r2, #0]
  pqp->prev     = p;
 800434e:	605c      	str	r4, [r3, #4]
  return __sch_ready_behind(tp);
 8004350:	e7de      	b.n	8004310 <evt_thread3+0x30>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8004352:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if (((tp->state == CH_STATE_WTOREVT) &&
 8004354:	4213      	tst	r3, r2
 8004356:	d1ec      	bne.n	8004332 <evt_thread3+0x52>
 8004358:	e7da      	b.n	8004310 <evt_thread3+0x30>
 800435a:	bf00      	nop
 800435c:	20001050 	.word	0x20001050

08004360 <chSchWakeupS>:
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8004360:	b430      	push	{r4, r5}
  thread_t *otp = __instance_get_currthread(oip);
 8004362:	4d15      	ldr	r5, [pc, #84]	; (80043b8 <chSchWakeupS+0x58>)
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 8004364:	6882      	ldr	r2, [r0, #8]
  thread_t *otp = __instance_get_currthread(oip);
 8004366:	68eb      	ldr	r3, [r5, #12]
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 8004368:	689c      	ldr	r4, [r3, #8]
  ntp->u.rdymsg = msg;
 800436a:	62c1      	str	r1, [r0, #44]	; 0x2c
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 800436c:	42a2      	cmp	r2, r4
  tp->state = CH_STATE_READY;
 800436e:	f04f 0100 	mov.w	r1, #0
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 8004372:	d913      	bls.n	800439c <chSchWakeupS+0x3c>
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
 8004374:	699a      	ldr	r2, [r3, #24]
  tp->state = CH_STATE_READY;
 8004376:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    pqp = pqp->next;
 800437a:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio > p->prio));
 800437c:	6891      	ldr	r1, [r2, #8]
 800437e:	428c      	cmp	r4, r1
 8004380:	d3fb      	bcc.n	800437a <chSchWakeupS+0x1a>
    ntp->state = CH_STATE_CURRENT;
 8004382:	2401      	movs	r4, #1
  p->prev       = pqp->prev;
 8004384:	6851      	ldr	r1, [r2, #4]
 8004386:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 800438a:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 800438c:	6053      	str	r3, [r2, #4]
    chSysSwitch(ntp, otp);
 800438e:	4619      	mov	r1, r3
    __instance_set_currthread(oip, ntp);
 8004390:	60e8      	str	r0, [r5, #12]
    ntp->state = CH_STATE_CURRENT;
 8004392:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
}
 8004396:	bc30      	pop	{r4, r5}
    chSysSwitch(ntp, otp);
 8004398:	f7fb bf52 	b.w	8000240 <__port_switch>
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800439c:	6983      	ldr	r3, [r0, #24]
  tp->state = CH_STATE_READY;
 800439e:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    pqp = pqp->next;
 80043a2:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80043a4:	6899      	ldr	r1, [r3, #8]
 80043a6:	428a      	cmp	r2, r1
 80043a8:	d9fb      	bls.n	80043a2 <chSchWakeupS+0x42>
}
 80043aa:	bc30      	pop	{r4, r5}
  p->prev       = pqp->prev;
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 80043b2:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 80043b4:	6058      	str	r0, [r3, #4]
 80043b6:	4770      	bx	lr
 80043b8:	20001050 	.word	0x20001050
 80043bc:	00000000 	.word	0x00000000

080043c0 <rt_test_007_001_execute>:
  test_set_step(1);
 80043c0:	2201      	movs	r2, #1
static void rt_test_007_001_execute(void) {
 80043c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 80043c4:	4d3d      	ldr	r5, [pc, #244]	; (80044bc <rt_test_007_001_execute+0xfc>)
 80043c6:	2630      	movs	r6, #48	; 0x30
 80043c8:	602a      	str	r2, [r5, #0]
 80043ca:	f386 8811 	msr	BASEPRI, r6
  if (--sp->cnt < (cnt_t)0) {
 80043ce:	4c3c      	ldr	r4, [pc, #240]	; (80044c0 <rt_test_007_001_execute+0x100>)
 80043d0:	68a3      	ldr	r3, [r4, #8]
 80043d2:	3b01      	subs	r3, #1
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	60a3      	str	r3, [r4, #8]
 80043d8:	db44      	blt.n	8004464 <rt_test_007_001_execute+0xa4>
 80043da:	2300      	movs	r3, #0
 80043dc:	f383 8811 	msr	BASEPRI, r3
 80043e0:	f386 8811 	msr	BASEPRI, r6
  if (!condition) {
 80043e4:	68a3      	ldr	r3, [r4, #8]
 80043e6:	bb23      	cbnz	r3, 8004432 <rt_test_007_001_execute+0x72>
 80043e8:	f383 8811 	msr	BASEPRI, r3
  test_set_step(2);
 80043ec:	2202      	movs	r2, #2
 80043ee:	2330      	movs	r3, #48	; 0x30
 80043f0:	602a      	str	r2, [r5, #0]
 80043f2:	f383 8811 	msr	BASEPRI, r3
  if (++sp->cnt <= (cnt_t)0) {
 80043f6:	68a3      	ldr	r3, [r4, #8]
 80043f8:	3301      	adds	r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	60a3      	str	r3, [r4, #8]
 80043fe:	dd21      	ble.n	8004444 <rt_test_007_001_execute+0x84>
 8004400:	2600      	movs	r6, #0
 8004402:	f386 8811 	msr	BASEPRI, r6
 8004406:	2730      	movs	r7, #48	; 0x30
 8004408:	f387 8811 	msr	BASEPRI, r7
 800440c:	68a3      	ldr	r3, [r4, #8]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d120      	bne.n	8004454 <rt_test_007_001_execute+0x94>
 8004412:	f386 8811 	msr	BASEPRI, r6
  test_set_step(3);
 8004416:	2303      	movs	r3, #3
 8004418:	2102      	movs	r1, #2
 800441a:	4829      	ldr	r0, [pc, #164]	; (80044c0 <rt_test_007_001_execute+0x100>)
 800441c:	602b      	str	r3, [r5, #0]
 800441e:	f00a fa4f 	bl	800e8c0 <chSemResetWithMessage.constprop.0>
 8004422:	f387 8811 	msr	BASEPRI, r7
 8004426:	68a3      	ldr	r3, [r4, #8]
 8004428:	2b02      	cmp	r3, #2
 800442a:	d113      	bne.n	8004454 <rt_test_007_001_execute+0x94>
 800442c:	f386 8811 	msr	BASEPRI, r6
}
 8004430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 8004432:	f240 1201 	movw	r2, #257	; 0x101
  chtest.failure_message = msg;
 8004436:	4923      	ldr	r1, [pc, #140]	; (80044c4 <rt_test_007_001_execute+0x104>)
 8004438:	2300      	movs	r3, #0
 800443a:	60a9      	str	r1, [r5, #8]
  chtest.global_fail     = true;
 800443c:	80aa      	strh	r2, [r5, #4]
 800443e:	f383 8811 	msr	BASEPRI, r3
 8004442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ch_queue_t *p = qp->next;
 8004444:	6820      	ldr	r0, [r4, #0]
    chSchWakeupS(threadref(ch_queue_fifo_remove(&sp->queue)), MSG_OK);
 8004446:	2100      	movs	r1, #0
  qp->next       = p->next;
 8004448:	6803      	ldr	r3, [r0, #0]
  qp->next->prev = qp;
 800444a:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 800444c:	6023      	str	r3, [r4, #0]
 800444e:	f7ff ff87 	bl	8004360 <chSchWakeupS>
 8004452:	e7d5      	b.n	8004400 <rt_test_007_001_execute+0x40>
 8004454:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8004458:	4a1a      	ldr	r2, [pc, #104]	; (80044c4 <rt_test_007_001_execute+0x104>)
  chtest.global_fail     = true;
 800445a:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800445c:	60aa      	str	r2, [r5, #8]
 800445e:	f386 8811 	msr	BASEPRI, r6
 8004462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  otp->state = newstate;
 8004464:	2005      	movs	r0, #5
  return __sch_get_currthread();
 8004466:	4b18      	ldr	r3, [pc, #96]	; (80044c8 <rt_test_007_001_execute+0x108>)
  p->prev       = qp->prev;
 8004468:	6861      	ldr	r1, [r4, #4]
 800446a:	68df      	ldr	r7, [r3, #12]
  p->next       = qp;
 800446c:	603c      	str	r4, [r7, #0]
  p->prev       = qp->prev;
 800446e:	6079      	str	r1, [r7, #4]
    currtp->u.wtsemp = sp;
 8004470:	62fc      	str	r4, [r7, #44]	; 0x2c
  p->prev->next = p;
 8004472:	600f      	str	r7, [r1, #0]
 8004474:	f887 0028 	strb.w	r0, [r7, #40]	; 0x28
  ch_priority_queue_t *p = pqp->next;
 8004478:	6818      	ldr	r0, [r3, #0]
  qp->prev      = p;
 800447a:	6067      	str	r7, [r4, #4]
  pqp->next       = p->next;
 800447c:	f8d0 c000 	ldr.w	ip, [r0]
  chSysSwitch(ntp, otp);
 8004480:	4639      	mov	r1, r7
  pqp->next->prev = pqp;
 8004482:	f8cc 3004 	str.w	r3, [ip, #4]
  pqp->next       = p->next;
 8004486:	f8c3 c000 	str.w	ip, [r3]
  ntp->state = CH_STATE_CURRENT;
 800448a:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  __instance_set_currthread(oip, ntp);
 800448e:	60d8      	str	r0, [r3, #12]
  chSysSwitch(ntp, otp);
 8004490:	f7fb fed6 	bl	8000240 <__port_switch>
 8004494:	2300      	movs	r3, #0
    return currtp->u.rdymsg;
 8004496:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004498:	f383 8811 	msr	BASEPRI, r3
 800449c:	f386 8811 	msr	BASEPRI, r6
  if (!condition) {
 80044a0:	68a3      	ldr	r3, [r4, #8]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1c5      	bne.n	8004432 <rt_test_007_001_execute+0x72>
 80044a6:	f383 8811 	msr	BASEPRI, r3
 80044aa:	2a00      	cmp	r2, #0
 80044ac:	d09e      	beq.n	80043ec <rt_test_007_001_execute+0x2c>
  chtest.global_fail     = true;
 80044ae:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 80044b2:	4a06      	ldr	r2, [pc, #24]	; (80044cc <rt_test_007_001_execute+0x10c>)
  chtest.global_fail     = true;
 80044b4:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 80044b6:	60aa      	str	r2, [r5, #8]
 80044b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044ba:	bf00      	nop
 80044bc:	200010f4 	.word	0x200010f4
 80044c0:	20001224 	.word	0x20001224
 80044c4:	08010280 	.word	0x08010280
 80044c8:	20001050 	.word	0x20001050
 80044cc:	08010294 	.word	0x08010294

080044d0 <thread3>:
 80044d0:	2330      	movs	r3, #48	; 0x30
static THD_FUNCTION(thread3, p) {
 80044d2:	b510      	push	{r4, lr}
 80044d4:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 80044d8:	4c1a      	ldr	r4, [pc, #104]	; (8004544 <thread3+0x74>)
 80044da:	68a3      	ldr	r3, [r4, #8]
 80044dc:	3b01      	subs	r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	60a3      	str	r3, [r4, #8]
 80044e2:	db18      	blt.n	8004516 <thread3+0x46>
 80044e4:	2100      	movs	r1, #0
 80044e6:	f381 8811 	msr	BASEPRI, r1
 80044ea:	2330      	movs	r3, #48	; 0x30
 80044ec:	f383 8811 	msr	BASEPRI, r3
  if (++sp->cnt <= (cnt_t)0) {
 80044f0:	68a3      	ldr	r3, [r4, #8]
 80044f2:	3301      	adds	r3, #1
 80044f4:	428b      	cmp	r3, r1
 80044f6:	60a3      	str	r3, [r4, #8]
 80044f8:	dd03      	ble.n	8004502 <thread3+0x32>
 80044fa:	2300      	movs	r3, #0
 80044fc:	f383 8811 	msr	BASEPRI, r3
}
 8004500:	bd10      	pop	{r4, pc}
  ch_queue_t *p = qp->next;
 8004502:	6820      	ldr	r0, [r4, #0]
  qp->next       = p->next;
 8004504:	6803      	ldr	r3, [r0, #0]
  qp->next->prev = qp;
 8004506:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 8004508:	6023      	str	r3, [r4, #0]
    chSchWakeupS(threadref(ch_queue_fifo_remove(&sp->queue)), MSG_OK);
 800450a:	f7ff ff29 	bl	8004360 <chSchWakeupS>
 800450e:	2300      	movs	r3, #0
 8004510:	f383 8811 	msr	BASEPRI, r3
 8004514:	bd10      	pop	{r4, pc}
  otp->state = newstate;
 8004516:	2005      	movs	r0, #5
  ntp->state = CH_STATE_CURRENT;
 8004518:	f04f 0c01 	mov.w	ip, #1
 800451c:	4b0a      	ldr	r3, [pc, #40]	; (8004548 <thread3+0x78>)
  p->prev       = qp->prev;
 800451e:	6862      	ldr	r2, [r4, #4]
 8004520:	68d9      	ldr	r1, [r3, #12]
  p->next       = qp;
 8004522:	600c      	str	r4, [r1, #0]
  p->prev       = qp->prev;
 8004524:	604a      	str	r2, [r1, #4]
    currtp->u.wtsemp = sp;
 8004526:	62cc      	str	r4, [r1, #44]	; 0x2c
  p->prev->next = p;
 8004528:	6011      	str	r1, [r2, #0]
  otp->state = newstate;
 800452a:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
  ch_priority_queue_t *p = pqp->next;
 800452e:	6818      	ldr	r0, [r3, #0]
  qp->prev      = p;
 8004530:	6061      	str	r1, [r4, #4]
  pqp->next       = p->next;
 8004532:	6802      	ldr	r2, [r0, #0]
  pqp->next->prev = pqp;
 8004534:	6053      	str	r3, [r2, #4]
  pqp->next       = p->next;
 8004536:	601a      	str	r2, [r3, #0]
  ntp->state = CH_STATE_CURRENT;
 8004538:	f880 c028 	strb.w	ip, [r0, #40]	; 0x28
  __instance_set_currthread(oip, ntp);
 800453c:	60d8      	str	r0, [r3, #12]
  chSysSwitch(ntp, otp);
 800453e:	f7fb fe7f 	bl	8000240 <__port_switch>
    return currtp->u.rdymsg;
 8004542:	e7cf      	b.n	80044e4 <thread3+0x14>
 8004544:	20001224 	.word	0x20001224
 8004548:	20001050 	.word	0x20001050
 800454c:	00000000 	.word	0x00000000

08004550 <bmk_thread1>:
static THD_FUNCTION(bmk_thread1, p) {
 8004550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004554:	2630      	movs	r6, #48	; 0x30
  otp->state = newstate;
 8004556:	f04f 090e 	mov.w	r9, #14
  ntp->state = CH_STATE_CURRENT;
 800455a:	f04f 0801 	mov.w	r8, #1
 800455e:	4f16      	ldr	r7, [pc, #88]	; (80045b8 <bmk_thread1+0x68>)
 8004560:	e010      	b.n	8004584 <bmk_thread1+0x34>

  if (!chMsgIsPendingI(currtp)) {
    chSchGoSleepS(CH_STATE_WTMSG);
  }
  tp = threadref(ch_queue_fifo_remove(&currtp->msgqueue));
  tp->state = CH_STATE_SNDMSG;
 8004562:	220d      	movs	r2, #13
  qp->next       = p->next;
 8004564:	6803      	ldr	r3, [r0, #0]
 8004566:	636b      	str	r3, [r5, #52]	; 0x34
  qp->next->prev = qp;
 8004568:	605c      	str	r4, [r3, #4]
 800456a:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 800456e:	f38a 8811 	msr	BASEPRI, sl
 */
static inline msg_t chMsgGet(thread_t *tp) {

  chDbgAssert(tp->state == CH_STATE_SNDMSG, "invalid state");

  return tp->u.sentmsg;
 8004572:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004574:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8004578:	4621      	mov	r1, r4
 800457a:	f7ff fef1 	bl	8004360 <chSchWakeupS>
 800457e:	f38a 8811 	msr	BASEPRI, sl
  } while (msg);
 8004582:	b1bc      	cbz	r4, 80045b4 <bmk_thread1+0x64>
 8004584:	f386 8811 	msr	BASEPRI, r6
 8004588:	68fd      	ldr	r5, [r7, #12]
 800458a:	f04f 0a00 	mov.w	sl, #0
  return (bool)(tp->msgqueue.next != &tp->msgqueue);
 800458e:	462c      	mov	r4, r5
 8004590:	f854 0f34 	ldr.w	r0, [r4, #52]!
  if (!chMsgIsPendingI(currtp)) {
 8004594:	42a0      	cmp	r0, r4
 8004596:	d1e4      	bne.n	8004562 <bmk_thread1+0x12>
  ch_priority_queue_t *p = pqp->next;
 8004598:	6838      	ldr	r0, [r7, #0]
  otp->state = newstate;
 800459a:	f885 9028 	strb.w	r9, [r5, #40]	; 0x28
  pqp->next       = p->next;
 800459e:	6803      	ldr	r3, [r0, #0]
  chSysSwitch(ntp, otp);
 80045a0:	4629      	mov	r1, r5
  pqp->next->prev = pqp;
 80045a2:	605f      	str	r7, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 80045a4:	f880 8028 	strb.w	r8, [r0, #40]	; 0x28
  __instance_set_currthread(oip, ntp);
 80045a8:	60f8      	str	r0, [r7, #12]
  pqp->next       = p->next;
 80045aa:	603b      	str	r3, [r7, #0]
  chSysSwitch(ntp, otp);
 80045ac:	f7fb fe48 	bl	8000240 <__port_switch>
  ch_queue_t *p = qp->next;
 80045b0:	6b68      	ldr	r0, [r5, #52]	; 0x34
}
 80045b2:	e7d6      	b.n	8004562 <bmk_thread1+0x12>
}
 80045b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045b8:	20001050 	.word	0x20001050
 80045bc:	00000000 	.word	0x00000000

080045c0 <chThdCreateSuspendedI>:
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 80045c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  return __thd_object_init(currcore, tp, tdp->name, tdp->prio);
 80045c2:	e9d0 3402 	ldrd	r3, r4, [r0, #8]
  tp->flags             = CH_FLAG_MODE_STATIC;
 80045c6:	2100      	movs	r1, #0
  tp->state             = CH_STATE_WTSTART;
 80045c8:	f04f 0c02 	mov.w	ip, #2
  tp->refs              = (trefs_t)1;
 80045cc:	2601      	movs	r6, #1
  tp->wabase = tdp->wbase;
 80045ce:	f8d0 e004 	ldr.w	lr, [r0, #4]
  tp->owner             = oip;
 80045d2:	4a1c      	ldr	r2, [pc, #112]	; (8004644 <chThdCreateSuspendedI+0x84>)
  tp->waend  = tdp->wend;
 80045d4:	e943 e30c 	strd	lr, r3, [r3, #-48]	; 0x30
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80045d8:	f8d0 e010 	ldr.w	lr, [r0, #16]
  p->next       = qp;
 80045dc:	f102 0528 	add.w	r5, r2, #40	; 0x28
 80045e0:	f843 ec74 	str.w	lr, [r3, #-116]
 80045e4:	f8d0 e014 	ldr.w	lr, [r0, #20]
  return __thd_object_init(currcore, tp, tdp->name, tdp->prio);
 80045e8:	6800      	ldr	r0, [r0, #0]
  tp->refs              = (trefs_t)1;
 80045ea:	f803 6c26 	strb.w	r6, [r3, #-38]
  tp->flags             = CH_FLAG_MODE_STATIC;
 80045ee:	f803 1c27 	strb.w	r1, [r3, #-39]
  tp->state             = CH_STATE_WTSTART;
 80045f2:	f803 cc28 	strb.w	ip, [r3, #-40]
  tp->hdr.pqueue.prio   = prio;
 80045f6:	f843 4c48 	str.w	r4, [r3, #-72]
  tp->realprio          = prio;
 80045fa:	f843 4c0c 	str.w	r4, [r3, #-12]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80045fe:	4f12      	ldr	r7, [pc, #72]	; (8004648 <chThdCreateSuspendedI+0x88>)
  p->prev       = qp->prev;
 8004600:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
  tp->epending          = (eventmask_t)0;
 8004602:	e943 1105 	strd	r1, r1, [r3, #-20]
  tp->name              = name;
 8004606:	f843 0c34 	str.w	r0, [r3, #-52]
  p->next       = qp;
 800460a:	f843 5c40 	str.w	r5, [r3, #-64]
  REG_INSERT(oip, tp);
 800460e:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
  ch_queue_init(&tp->msgqueue);
 8004612:	f1a3 011c 	sub.w	r1, r3, #28
  ch_list_init(&tp->waiting);
 8004616:	f1a3 0520 	sub.w	r5, r3, #32
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800461a:	f1a3 0674 	sub.w	r6, r3, #116	; 0x74
 800461e:	f843 ec70 	str.w	lr, [r3, #-112]
 8004622:	f843 7c54 	str.w	r7, [r3, #-84]
  tp->owner             = oip;
 8004626:	f843 2c38 	str.w	r2, [r3, #-56]
  p->prev       = qp->prev;
 800462a:	f843 4c3c 	str.w	r4, [r3, #-60]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800462e:	f843 6c44 	str.w	r6, [r3, #-68]
  p->prev->next = p;
 8004632:	6020      	str	r0, [r4, #0]
  qp->prev      = p;
 8004634:	62d0      	str	r0, [r2, #44]	; 0x2c
  qp->next = qp;
 8004636:	e943 5108 	strd	r5, r1, [r3, #-32]
}
 800463a:	f1a3 0050 	sub.w	r0, r3, #80	; 0x50
  qp->prev = qp;
 800463e:	f843 1c18 	str.w	r1, [r3, #-24]
 8004642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004644:	20001050 	.word	0x20001050
 8004648:	08000251 	.word	0x08000251
 800464c:	00000000 	.word	0x00000000

08004650 <chThdCreateStatic>:
                            tprio_t prio, tfunc_t pf, void *arg) {
 8004650:	b538      	push	{r3, r4, r5, lr}
 8004652:	468c      	mov	ip, r1
 8004654:	2430      	movs	r4, #48	; 0x30
 8004656:	f384 8811 	msr	BASEPRI, r4
  tp->refs              = (trefs_t)1;
 800465a:	2101      	movs	r1, #1
  tp->state             = CH_STATE_WTSTART;
 800465c:	f04f 0e02 	mov.w	lr, #2
  tp->mtxlist           = NULL;
 8004660:	2500      	movs	r5, #0
  tp = threadref(((uint8_t *)wsp + size -
 8004662:	f1ac 0450 	sub.w	r4, ip, #80	; 0x50
 8004666:	4404      	add	r4, r0
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8004668:	f844 3c24 	str.w	r3, [r4, #-36]
 800466c:	9b04      	ldr	r3, [sp, #16]
  tp->refs              = (trefs_t)1;
 800466e:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8004672:	f844 3c20 	str.w	r3, [r4, #-32]
  tp->waend  = (stkalign_t *)wsp + (size / sizeof (stkalign_t));
 8004676:	eb00 030c 	add.w	r3, r0, ip
 800467a:	e9c4 0308 	strd	r0, r3, [r4, #32]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800467e:	f1a4 0324 	sub.w	r3, r4, #36	; 0x24
 8004682:	60e3      	str	r3, [r4, #12]
 8004684:	4b12      	ldr	r3, [pc, #72]	; (80046d0 <chThdCreateStatic+0x80>)
  tp->name              = name;
 8004686:	4913      	ldr	r1, [pc, #76]	; (80046d4 <chThdCreateStatic+0x84>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8004688:	f844 3c04 	str.w	r3, [r4, #-4]
  tp->owner             = oip;
 800468c:	4b12      	ldr	r3, [pc, #72]	; (80046d8 <chThdCreateStatic+0x88>)
  tp->hdr.pqueue.prio   = prio;
 800468e:	60a2      	str	r2, [r4, #8]
  tp->state             = CH_STATE_WTSTART;
 8004690:	f8a4 e028 	strh.w	lr, [r4, #40]	; 0x28
  tp->name              = name;
 8004694:	61e1      	str	r1, [r4, #28]
  p->prev       = qp->prev;
 8004696:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tp->realprio          = prio;
 8004698:	6462      	str	r2, [r4, #68]	; 0x44
  p->next       = qp;
 800469a:	f103 0028 	add.w	r0, r3, #40	; 0x28
  REG_INSERT(oip, tp);
 800469e:	f104 0210 	add.w	r2, r4, #16
  p->prev       = qp->prev;
 80046a2:	6161      	str	r1, [r4, #20]
  p->next       = qp;
 80046a4:	6120      	str	r0, [r4, #16]
  tp->owner             = oip;
 80046a6:	61a3      	str	r3, [r4, #24]
  tp->epending          = (eventmask_t)0;
 80046a8:	e9c4 550f 	strd	r5, r5, [r4, #60]	; 0x3c
  ch_list_init(&tp->waiting);
 80046ac:	f104 0030 	add.w	r0, r4, #48	; 0x30
  p->prev->next = p;
 80046b0:	600a      	str	r2, [r1, #0]
  ch_queue_init(&tp->msgqueue);
 80046b2:	f104 0134 	add.w	r1, r4, #52	; 0x34
  qp->next = qp;
 80046b6:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
  qp->prev = qp;
 80046ba:	63a1      	str	r1, [r4, #56]	; 0x38
  chSchWakeupS(tp, MSG_OK);
 80046bc:	4620      	mov	r0, r4
 80046be:	4629      	mov	r1, r5
  qp->prev      = p;
 80046c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80046c2:	f7ff fe4d 	bl	8004360 <chSchWakeupS>
 80046c6:	f385 8811 	msr	BASEPRI, r5
}
 80046ca:	4620      	mov	r0, r4
 80046cc:	bd38      	pop	{r3, r4, r5, pc}
 80046ce:	bf00      	nop
 80046d0:	08000251 	.word	0x08000251
 80046d4:	080102ac 	.word	0x080102ac
 80046d8:	20001050 	.word	0x20001050
 80046dc:	00000000 	.word	0x00000000

080046e0 <rt_test_007_005_execute>:

static void rt_test_007_005_teardown(void) {
  test_wait_threads();
}

static void rt_test_007_005_execute(void) {
 80046e0:	b570      	push	{r4, r5, r6, lr}

  /* [7.5.1] An higher priority thread is created that performs
     non-atomical wait and signal operations on a semaphore.*/
  test_set_step(1);
 80046e2:	2501      	movs	r5, #1
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 80046e4:	2600      	movs	r6, #0
 80046e6:	4b18      	ldr	r3, [pc, #96]	; (8004748 <rt_test_007_005_execute+0x68>)
static void rt_test_007_005_execute(void) {
 80046e8:	b082      	sub	sp, #8
  return chThdGetSelfX()->hdr.pqueue.prio;
 80046ea:	68db      	ldr	r3, [r3, #12]
  test_set_step(1);
 80046ec:	4c17      	ldr	r4, [pc, #92]	; (800474c <rt_test_007_005_execute+0x6c>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80046f4:	442a      	add	r2, r5
 80046f6:	4b16      	ldr	r3, [pc, #88]	; (8004750 <rt_test_007_005_execute+0x70>)
 80046f8:	4816      	ldr	r0, [pc, #88]	; (8004754 <rt_test_007_005_execute+0x74>)
 80046fa:	9600      	str	r6, [sp, #0]
  test_set_step(1);
 80046fc:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 80046fe:	f7ff ffa7 	bl	8004650 <chThdCreateStatic>
  test_end_step(1);

  /* [7.5.2] The function chSemSignalWait() is invoked by specifying
     the same semaphore for the wait and signal phases. The counter
     value must be one on exit.*/
  test_set_step(2);
 8004702:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8004704:	4a14      	ldr	r2, [pc, #80]	; (8004758 <rt_test_007_005_execute+0x78>)
  test_set_step(2);
 8004706:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8004708:	6010      	str	r0, [r2, #0]
  {
    chSemSignalWait(&sem1, &sem1);
 800470a:	f00b fb11 	bl	800fd30 <chSemSignalWait.constprop.0.isra.0>
  return (bool)(qp->next == qp);
 800470e:	4b13      	ldr	r3, [pc, #76]	; (800475c <rt_test_007_005_execute+0x7c>)
  if (!condition) {
 8004710:	681d      	ldr	r5, [r3, #0]
 8004712:	429d      	cmp	r5, r3
 8004714:	d111      	bne.n	800473a <rt_test_007_005_execute+0x5a>
 8004716:	68ab      	ldr	r3, [r5, #8]
 8004718:	b943      	cbnz	r3, 800472c <rt_test_007_005_execute+0x4c>
  test_end_step(2);

  /* [7.5.3] The function chSemSignalWait() is invoked again by
     specifying the same semaphore for the wait and signal phases. The
     counter value must be one on exit.*/
  test_set_step(3);
 800471a:	2303      	movs	r3, #3
 800471c:	6023      	str	r3, [r4, #0]
  {
    chSemSignalWait(&sem1, &sem1);
 800471e:	f00b fb07 	bl	800fd30 <chSemSignalWait.constprop.0.isra.0>
 8004722:	682b      	ldr	r3, [r5, #0]
 8004724:	42ab      	cmp	r3, r5
 8004726:	d108      	bne.n	800473a <rt_test_007_005_execute+0x5a>
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	b123      	cbz	r3, 8004736 <rt_test_007_005_execute+0x56>
  chtest.global_fail     = true;
 800472c:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8004730:	4a0b      	ldr	r2, [pc, #44]	; (8004760 <rt_test_007_005_execute+0x80>)
  chtest.global_fail     = true;
 8004732:	80a3      	strh	r3, [r4, #4]
  chtest.failure_message = msg;
 8004734:	60a2      	str	r2, [r4, #8]
    test_assert(ch_queue_isempty(&sem1.queue), "queue not empty");
    test_assert(sem1.cnt == 0, "counter not zero");
  }
  test_end_step(3);
}
 8004736:	b002      	add	sp, #8
 8004738:	bd70      	pop	{r4, r5, r6, pc}
  chtest.global_fail     = true;
 800473a:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800473e:	4a09      	ldr	r2, [pc, #36]	; (8004764 <rt_test_007_005_execute+0x84>)
  chtest.global_fail     = true;
 8004740:	80a3      	strh	r3, [r4, #4]
  chtest.failure_message = msg;
 8004742:	60a2      	str	r2, [r4, #8]
 8004744:	b002      	add	sp, #8
 8004746:	bd70      	pop	{r4, r5, r6, pc}
 8004748:	20001050 	.word	0x20001050
 800474c:	200010f4 	.word	0x200010f4
 8004750:	080044d1 	.word	0x080044d1
 8004754:	20001240 	.word	0x20001240
 8004758:	20001ab0 	.word	0x20001ab0
 800475c:	20001224 	.word	0x20001224
 8004760:	080102c4 	.word	0x080102c4
 8004764:	080102b4 	.word	0x080102b4
	...

08004770 <chThdExit>:
 8004770:	2330      	movs	r3, #48	; 0x30
void chThdExit(msg_t msg) {
 8004772:	b570      	push	{r4, r5, r6, lr}
 8004774:	f383 8811 	msr	BASEPRI, r3
  return __sch_get_currthread();
 8004778:	4b1e      	ldr	r3, [pc, #120]	; (80047f4 <chThdExit+0x84>)
 800477a:	68d9      	ldr	r1, [r3, #12]
  return (bool)(lp->next != lp);
 800477c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 800477e:	f101 0c30 	add.w	ip, r1, #48	; 0x30
 8004782:	4594      	cmp	ip, r2
  tp->state = CH_STATE_READY;
 8004784:	bf18      	it	ne
 8004786:	f04f 0e00 	movne.w	lr, #0
  currtp->u.exitcode = msg;
 800478a:	62c8      	str	r0, [r1, #44]	; 0x2c
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 800478c:	d113      	bne.n	80047b6 <chThdExit+0x46>
  if (unlikely(currtp->refs == (trefs_t)0)) {
 800478e:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
 8004792:	b32a      	cbz	r2, 80047e0 <chThdExit+0x70>
  otp->state = newstate;
 8004794:	220f      	movs	r2, #15
  ntp->state = CH_STATE_CURRENT;
 8004796:	f04f 0c01 	mov.w	ip, #1
  ch_priority_queue_t *p = pqp->next;
 800479a:	6818      	ldr	r0, [r3, #0]
  otp->state = newstate;
 800479c:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pqp->next       = p->next;
 80047a0:	6802      	ldr	r2, [r0, #0]
  pqp->next->prev = pqp;
 80047a2:	6053      	str	r3, [r2, #4]
  ntp->state = CH_STATE_CURRENT;
 80047a4:	f880 c028 	strb.w	ip, [r0, #40]	; 0x28
  pqp->next       = p->next;
 80047a8:	601a      	str	r2, [r3, #0]
}
 80047aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  __instance_set_currthread(oip, ntp);
 80047ae:	60d8      	str	r0, [r3, #12]
  chSysSwitch(ntp, otp);
 80047b0:	f7fb bd46 	b.w	8000240 <__port_switch>
 80047b4:	4622      	mov	r2, r4
  lp->next = p->next;
 80047b6:	6814      	ldr	r4, [r2, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80047b8:	6990      	ldr	r0, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 80047ba:	6896      	ldr	r6, [r2, #8]
  lp->next = p->next;
 80047bc:	630c      	str	r4, [r1, #48]	; 0x30
  tp->state = CH_STATE_READY;
 80047be:	f882 e028 	strb.w	lr, [r2, #40]	; 0x28
    pqp = pqp->next;
 80047c2:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80047c4:	6885      	ldr	r5, [r0, #8]
 80047c6:	42b5      	cmp	r5, r6
 80047c8:	d2fb      	bcs.n	80047c2 <chThdExit+0x52>
  p->prev       = pqp->prev;
 80047ca:	6845      	ldr	r5, [r0, #4]
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 80047cc:	4564      	cmp	r4, ip
  p->next       = pqp;
 80047ce:	6010      	str	r0, [r2, #0]
  p->prev       = pqp->prev;
 80047d0:	6055      	str	r5, [r2, #4]
  p->prev->next = p;
 80047d2:	602a      	str	r2, [r5, #0]
  pqp->prev     = p;
 80047d4:	6042      	str	r2, [r0, #4]
 80047d6:	d1ed      	bne.n	80047b4 <chThdExit+0x44>
  if (unlikely(currtp->refs == (trefs_t)0)) {
 80047d8:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
 80047dc:	2a00      	cmp	r2, #0
 80047de:	d1d9      	bne.n	8004794 <chThdExit+0x24>
    if (unlikely(((currtp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC))) {
 80047e0:	f891 2029 	ldrb.w	r2, [r1, #41]	; 0x29
 80047e4:	0792      	lsls	r2, r2, #30
 80047e6:	d1d5      	bne.n	8004794 <chThdExit+0x24>
  p->prev->next = p->next;
 80047e8:	e9d1 2004 	ldrd	r2, r0, [r1, #16]
 80047ec:	6002      	str	r2, [r0, #0]
  p->next->prev = p->prev;
 80047ee:	6050      	str	r0, [r2, #4]
  return p;
 80047f0:	e7d0      	b.n	8004794 <chThdExit+0x24>
 80047f2:	bf00      	nop
 80047f4:	20001050 	.word	0x20001050
	...

08004800 <chThdExitS>:
 8004800:	4b1e      	ldr	r3, [pc, #120]	; (800487c <chThdExitS+0x7c>)
void chThdExitS(msg_t msg) {
 8004802:	b570      	push	{r4, r5, r6, lr}
 8004804:	68d9      	ldr	r1, [r3, #12]
  return (bool)(lp->next != lp);
 8004806:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8004808:	f101 0c30 	add.w	ip, r1, #48	; 0x30
 800480c:	4562      	cmp	r2, ip
 800480e:	bf18      	it	ne
 8004810:	f04f 0e00 	movne.w	lr, #0
  currtp->u.exitcode = msg;
 8004814:	62c8      	str	r0, [r1, #44]	; 0x2c
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8004816:	d113      	bne.n	8004840 <chThdExitS+0x40>
  if (unlikely(currtp->refs == (trefs_t)0)) {
 8004818:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
 800481c:	b32a      	cbz	r2, 800486a <chThdExitS+0x6a>
  otp->state = newstate;
 800481e:	220f      	movs	r2, #15
  ntp->state = CH_STATE_CURRENT;
 8004820:	f04f 0c01 	mov.w	ip, #1
  ch_priority_queue_t *p = pqp->next;
 8004824:	6818      	ldr	r0, [r3, #0]
  otp->state = newstate;
 8004826:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pqp->next       = p->next;
 800482a:	6802      	ldr	r2, [r0, #0]
  pqp->next->prev = pqp;
 800482c:	6053      	str	r3, [r2, #4]
  ntp->state = CH_STATE_CURRENT;
 800482e:	f880 c028 	strb.w	ip, [r0, #40]	; 0x28
  pqp->next       = p->next;
 8004832:	601a      	str	r2, [r3, #0]
}
 8004834:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  __instance_set_currthread(oip, ntp);
 8004838:	60d8      	str	r0, [r3, #12]
  chSysSwitch(ntp, otp);
 800483a:	f7fb bd01 	b.w	8000240 <__port_switch>
 800483e:	4622      	mov	r2, r4
  lp->next = p->next;
 8004840:	6814      	ldr	r4, [r2, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8004842:	6990      	ldr	r0, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8004844:	6896      	ldr	r6, [r2, #8]
  lp->next = p->next;
 8004846:	630c      	str	r4, [r1, #48]	; 0x30
  tp->state = CH_STATE_READY;
 8004848:	f882 e028 	strb.w	lr, [r2, #40]	; 0x28
    pqp = pqp->next;
 800484c:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800484e:	6885      	ldr	r5, [r0, #8]
 8004850:	42b5      	cmp	r5, r6
 8004852:	d2fb      	bcs.n	800484c <chThdExitS+0x4c>
  p->prev       = pqp->prev;
 8004854:	6845      	ldr	r5, [r0, #4]
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8004856:	4564      	cmp	r4, ip
  p->next       = pqp;
 8004858:	6010      	str	r0, [r2, #0]
  p->prev       = pqp->prev;
 800485a:	6055      	str	r5, [r2, #4]
  p->prev->next = p;
 800485c:	602a      	str	r2, [r5, #0]
  pqp->prev     = p;
 800485e:	6042      	str	r2, [r0, #4]
 8004860:	d1ed      	bne.n	800483e <chThdExitS+0x3e>
  if (unlikely(currtp->refs == (trefs_t)0)) {
 8004862:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
 8004866:	2a00      	cmp	r2, #0
 8004868:	d1d9      	bne.n	800481e <chThdExitS+0x1e>
    if (unlikely(((currtp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC))) {
 800486a:	f891 2029 	ldrb.w	r2, [r1, #41]	; 0x29
 800486e:	0792      	lsls	r2, r2, #30
 8004870:	d1d5      	bne.n	800481e <chThdExitS+0x1e>
  p->prev->next = p->next;
 8004872:	e9d1 2004 	ldrd	r2, r0, [r1, #16]
 8004876:	6002      	str	r2, [r0, #0]
  p->next->prev = p->prev;
 8004878:	6050      	str	r0, [r2, #4]
  return p;
 800487a:	e7d0      	b.n	800481e <chThdExitS+0x1e>
 800487c:	20001050 	.word	0x20001050

08004880 <chTMStartMeasurementX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8004880:	4b01      	ldr	r3, [pc, #4]	; (8004888 <chTMStartMeasurementX+0x8>)
 8004882:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8004884:	6083      	str	r3, [r0, #8]
}
 8004886:	4770      	bx	lr
 8004888:	e0001000 	.word	0xe0001000
 800488c:	00000000 	.word	0x00000000

08004890 <chTMStopMeasurementX>:
 8004890:	4b0e      	ldr	r3, [pc, #56]	; (80048cc <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch_system.tmc.offset);
 8004892:	4a0f      	ldr	r2, [pc, #60]	; (80048d0 <chTMStopMeasurementX+0x40>)
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	6892      	ldr	r2, [r2, #8]
  tmp->last = (now - tmp->last) - offset;
 8004898:	6881      	ldr	r1, [r0, #8]
 800489a:	1a9b      	subs	r3, r3, r2
 800489c:	1a5b      	subs	r3, r3, r1
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 800489e:	b410      	push	{r4}
  tmp->n++;
 80048a0:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 80048a4:	18d2      	adds	r2, r2, r3
 80048a6:	6941      	ldr	r1, [r0, #20]
 80048a8:	6102      	str	r2, [r0, #16]
  if (tmp->last > tmp->worst) {
 80048aa:	6842      	ldr	r2, [r0, #4]
  tmp->cumulative += (rttime_t)tmp->last;
 80048ac:	f141 0100 	adc.w	r1, r1, #0
  if (tmp->last > tmp->worst) {
 80048b0:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 80048b2:	6802      	ldr	r2, [r0, #0]
  tmp->n++;
 80048b4:	f104 0401 	add.w	r4, r4, #1
    tmp->worst = tmp->last;
 80048b8:	bf88      	it	hi
 80048ba:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 80048bc:	4293      	cmp	r3, r2
  tmp->last = (now - tmp->last) - offset;
 80048be:	e9c0 3402 	strd	r3, r4, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 80048c2:	6141      	str	r1, [r0, #20]
}
 80048c4:	bc10      	pop	{r4}
    tmp->best = tmp->last;
 80048c6:	bf38      	it	cc
 80048c8:	6003      	strcc	r3, [r0, #0]
}
 80048ca:	4770      	bx	lr
 80048cc:	e0001000 	.word	0xe0001000
 80048d0:	200010e8 	.word	0x200010e8
	...

080048e0 <chSemSignalI>:
  if (++sp->cnt <= (cnt_t)0) {
 80048e0:	6883      	ldr	r3, [r0, #8]
 80048e2:	3301      	adds	r3, #1
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	6083      	str	r3, [r0, #8]
 80048e8:	dd00      	ble.n	80048ec <chSemSignalI+0xc>
 80048ea:	4770      	bx	lr
    tp->u.rdymsg = MSG_OK;
 80048ec:	2100      	movs	r1, #0
  ch_queue_t *p = qp->next;
 80048ee:	6803      	ldr	r3, [r0, #0]
void chSemSignalI(semaphore_t *sp) {
 80048f0:	b410      	push	{r4}
  qp->next       = p->next;
 80048f2:	681c      	ldr	r4, [r3, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80048f4:	699a      	ldr	r2, [r3, #24]
 80048f6:	6004      	str	r4, [r0, #0]
  qp->next->prev = qp;
 80048f8:	6060      	str	r0, [r4, #4]
  } while (unlikely(pqp->prio >= p->prio));
 80048fa:	6898      	ldr	r0, [r3, #8]
    tp->u.rdymsg = MSG_OK;
 80048fc:	62d9      	str	r1, [r3, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 80048fe:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    pqp = pqp->next;
 8004902:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8004904:	6891      	ldr	r1, [r2, #8]
 8004906:	4281      	cmp	r1, r0
 8004908:	d2fb      	bcs.n	8004902 <chSemSignalI+0x22>
  p->prev       = pqp->prev;
 800490a:	6851      	ldr	r1, [r2, #4]
    (void) chSchReadyI(tp);
  }
}
 800490c:	bc10      	pop	{r4}
 800490e:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 8004912:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 8004914:	6053      	str	r3, [r2, #4]
 8004916:	4770      	bx	lr
	...

08004920 <thread4>:
 8004920:	2230      	movs	r2, #48	; 0x30
static THD_FUNCTION(thread4, p) {
 8004922:	b508      	push	{r3, lr}
 8004924:	f382 8811 	msr	BASEPRI, r2
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->sem.cnt < (cnt_t)1) {
 8004928:	6883      	ldr	r3, [r0, #8]
 800492a:	2b00      	cmp	r3, #0
 800492c:	dd0c      	ble.n	8004948 <thread4+0x28>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800492e:	4b08      	ldr	r3, [pc, #32]	; (8004950 <thread4+0x30>)
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	6892      	ldr	r2, [r2, #8]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	429a      	cmp	r2, r3
 800493a:	d901      	bls.n	8004940 <thread4+0x20>
    __sch_reschedule_ahead();
 800493c:	f7ff fa90 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 8004940:	2300      	movs	r3, #0
 8004942:	f383 8811 	msr	BASEPRI, r3
}
 8004946:	bd08      	pop	{r3, pc}
    chSemSignalI(&bsp->sem);
 8004948:	f7ff ffca 	bl	80048e0 <chSemSignalI>
 800494c:	e7ef      	b.n	800492e <thread4+0xe>
 800494e:	bf00      	nop
 8004950:	20001050 	.word	0x20001050
	...

08004960 <rt_test_007_006_execute>:

static void rt_test_007_006_teardown(void) {
  test_wait_threads();
}

static void rt_test_007_006_execute(void) {
 8004960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  binary_semaphore_t bsem;
  msg_t msg;

  /* [7.6.1] Creating a binary semaphore in "taken" state, the state is
     checked.*/
  test_set_step(1);
 8004964:	f04f 0801 	mov.w	r8, #1
  sp->cnt = n;
 8004968:	2500      	movs	r5, #0
static void rt_test_007_006_execute(void) {
 800496a:	b086      	sub	sp, #24
  test_set_step(1);
 800496c:	4c77      	ldr	r4, [pc, #476]	; (8004b4c <rt_test_007_006_execute+0x1ec>)
  qp->next = qp;
 800496e:	ae03      	add	r6, sp, #12
 8004970:	2730      	movs	r7, #48	; 0x30
  qp->prev = qp;
 8004972:	e9cd 6603 	strd	r6, r6, [sp, #12]
 8004976:	f8c4 8000 	str.w	r8, [r4]
 800497a:	9505      	str	r5, [sp, #20]
 800497c:	f387 8811 	msr	BASEPRI, r7
  if (!condition) {
 8004980:	9b05      	ldr	r3, [sp, #20]
 8004982:	42ab      	cmp	r3, r5
 8004984:	dc7a      	bgt.n	8004a7c <rt_test_007_006_execute+0x11c>
 8004986:	f385 8811 	msr	BASEPRI, r5
  }
  test_end_step(1);

  /* [7.6.2] Resetting the binary semaphore in "taken" state, the state
     must not change.*/
  test_set_step(2);
 800498a:	2302      	movs	r3, #2
 800498c:	4629      	mov	r1, r5
 800498e:	4630      	mov	r0, r6
 8004990:	6023      	str	r3, [r4, #0]
 8004992:	f009 ff95 	bl	800e8c0 <chSemResetWithMessage.constprop.0>
 8004996:	f387 8811 	msr	BASEPRI, r7
 800499a:	9b05      	ldr	r3, [sp, #20]
 800499c:	42ab      	cmp	r3, r5
 800499e:	dc6d      	bgt.n	8004a7c <rt_test_007_006_execute+0x11c>
 80049a0:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
  }
  test_end_step(2);

  /* [7.6.3] Starting a signaler thread at a lower priority.*/
  test_set_step(3);
 80049a4:	2303      	movs	r3, #3
 80049a6:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8004b50 <rt_test_007_006_execute+0x1f0>
 80049aa:	6023      	str	r3, [r4, #0]
  return chThdGetSelfX()->hdr.pqueue.prio;
 80049ac:	f8d9 300c 	ldr.w	r3, [r9, #12]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 80049b0:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80049b4:	689a      	ldr	r2, [r3, #8]
 80049b6:	4867      	ldr	r0, [pc, #412]	; (8004b54 <rt_test_007_006_execute+0x1f4>)
 80049b8:	4b67      	ldr	r3, [pc, #412]	; (8004b58 <rt_test_007_006_execute+0x1f8>)
 80049ba:	9600      	str	r6, [sp, #0]
 80049bc:	3a01      	subs	r2, #1
 80049be:	f7ff fe47 	bl	8004650 <chThdCreateStatic>
  }
  test_end_step(3);

  /* [7.6.4] Waiting for the binary semaphore to be signaled, the
     semaphore is expected to be taken.*/
  test_set_step(4);
 80049c2:	2304      	movs	r3, #4
 80049c4:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 80049c6:	4b65      	ldr	r3, [pc, #404]	; (8004b5c <rt_test_007_006_execute+0x1fc>)
 80049c8:	6018      	str	r0, [r3, #0]
 80049ca:	f387 8811 	msr	BASEPRI, r7
  if (--sp->cnt < (cnt_t)0) {
 80049ce:	9b05      	ldr	r3, [sp, #20]
 80049d0:	3b01      	subs	r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	9305      	str	r3, [sp, #20]
 80049d6:	db6e      	blt.n	8004ab6 <rt_test_007_006_execute+0x156>
 80049d8:	f385 8811 	msr	BASEPRI, r5
 80049dc:	f387 8811 	msr	BASEPRI, r7
 80049e0:	9b05      	ldr	r3, [sp, #20]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	dc54      	bgt.n	8004a90 <rt_test_007_006_execute+0x130>
 80049e6:	f385 8811 	msr	BASEPRI, r5
  test_end_step(4);

  /* [7.6.5] Signaling the binary semaphore, checking the binary
     semaphore state to be "not taken" and the underlying counter
     semaphore counter to be one.*/
  test_set_step(5);
 80049ea:	2205      	movs	r2, #5
 80049ec:	2330      	movs	r3, #48	; 0x30
 80049ee:	6022      	str	r2, [r4, #0]
 80049f0:	f383 8811 	msr	BASEPRI, r3
  if (bsp->sem.cnt < (cnt_t)1) {
 80049f4:	9b05      	ldr	r3, [sp, #20]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f340 8097 	ble.w	8004b2a <rt_test_007_006_execute+0x1ca>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 80049fc:	f8d9 2000 	ldr.w	r2, [r9]
 8004a00:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8004a04:	6892      	ldr	r2, [r2, #8]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d901      	bls.n	8004a10 <rt_test_007_006_execute+0xb0>
    __sch_reschedule_ahead();
 8004a0c:	f7ff fa28 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 8004a10:	2300      	movs	r3, #0
 8004a12:	f383 8811 	msr	BASEPRI, r3
 8004a16:	2230      	movs	r2, #48	; 0x30
 8004a18:	f382 8811 	msr	BASEPRI, r2
 8004a1c:	9905      	ldr	r1, [sp, #20]
 8004a1e:	4299      	cmp	r1, r3
 8004a20:	dd41      	ble.n	8004aa6 <rt_test_007_006_execute+0x146>
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f382 8811 	msr	BASEPRI, r2
 8004a2a:	9905      	ldr	r1, [sp, #20]
 8004a2c:	2901      	cmp	r1, #1
 8004a2e:	d174      	bne.n	8004b1a <rt_test_007_006_execute+0x1ba>
 8004a30:	f383 8811 	msr	BASEPRI, r3
  }
  test_end_step(5);

  /* [7.6.6] Signaling the binary semaphore again, the internal state
     must not change from "not taken".*/
  test_set_step(6);
 8004a34:	2306      	movs	r3, #6
 8004a36:	6023      	str	r3, [r4, #0]
 8004a38:	f382 8811 	msr	BASEPRI, r2
 8004a3c:	9b05      	ldr	r3, [sp, #20]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	dd7f      	ble.n	8004b42 <rt_test_007_006_execute+0x1e2>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8004a42:	f8d9 2000 	ldr.w	r2, [r9]
 8004a46:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8004a4a:	6892      	ldr	r2, [r2, #8]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d901      	bls.n	8004a56 <rt_test_007_006_execute+0xf6>
    __sch_reschedule_ahead();
 8004a52:	f7ff fa05 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 8004a56:	2300      	movs	r3, #0
 8004a58:	f383 8811 	msr	BASEPRI, r3
 8004a5c:	2230      	movs	r2, #48	; 0x30
 8004a5e:	f382 8811 	msr	BASEPRI, r2
 8004a62:	9905      	ldr	r1, [sp, #20]
 8004a64:	4299      	cmp	r1, r3
 8004a66:	dd64      	ble.n	8004b32 <rt_test_007_006_execute+0x1d2>
 8004a68:	f383 8811 	msr	BASEPRI, r3
 8004a6c:	f382 8811 	msr	BASEPRI, r2
 8004a70:	9a05      	ldr	r2, [sp, #20]
 8004a72:	2a01      	cmp	r2, #1
 8004a74:	d151      	bne.n	8004b1a <rt_test_007_006_execute+0x1ba>
 8004a76:	f383 8811 	msr	BASEPRI, r3
  {
    chBSemSignal(&bsem);
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
  }
  test_end_step(6);
 8004a7a:	e006      	b.n	8004a8a <rt_test_007_006_execute+0x12a>
  chtest.global_fail     = true;
 8004a7c:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8004a80:	4a37      	ldr	r2, [pc, #220]	; (8004b60 <rt_test_007_006_execute+0x200>)
  chtest.global_fail     = true;
 8004a82:	80a3      	strh	r3, [r4, #4]
  chtest.failure_message = msg;
 8004a84:	60a2      	str	r2, [r4, #8]
 8004a86:	f385 8811 	msr	BASEPRI, r5
}
 8004a8a:	b006      	add	sp, #24
 8004a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  chtest.global_fail     = true;
 8004a90:	f240 1201 	movw	r2, #257	; 0x101
  chtest.failure_message = msg;
 8004a94:	4932      	ldr	r1, [pc, #200]	; (8004b60 <rt_test_007_006_execute+0x200>)
 8004a96:	2300      	movs	r3, #0
 8004a98:	60a1      	str	r1, [r4, #8]
  chtest.global_fail     = true;
 8004a9a:	80a2      	strh	r2, [r4, #4]
 8004a9c:	f383 8811 	msr	BASEPRI, r3
 8004aa0:	b006      	add	sp, #24
 8004aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aa6:	f240 1201 	movw	r2, #257	; 0x101
  chtest.failure_message = msg;
 8004aaa:	492e      	ldr	r1, [pc, #184]	; (8004b64 <rt_test_007_006_execute+0x204>)
  chtest.global_fail     = true;
 8004aac:	80a2      	strh	r2, [r4, #4]
  chtest.failure_message = msg;
 8004aae:	60a1      	str	r1, [r4, #8]
 8004ab0:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chBSemGetStateI(&bsem) ==false, "still taken");
 8004ab4:	e7e9      	b.n	8004a8a <rt_test_007_006_execute+0x12a>
  otp->state = newstate;
 8004ab6:	2205      	movs	r2, #5
  return __sch_get_currthread();
 8004ab8:	f8d9 a00c 	ldr.w	sl, [r9, #12]
  p->prev       = qp->prev;
 8004abc:	9b04      	ldr	r3, [sp, #16]
  ch_priority_queue_t *p = pqp->next;
 8004abe:	f8d9 0000 	ldr.w	r0, [r9]
  p->next       = qp;
 8004ac2:	f8ca 6000 	str.w	r6, [sl]
  p->prev       = qp->prev;
 8004ac6:	f8ca 3004 	str.w	r3, [sl, #4]
    currtp->u.wtsemp = sp;
 8004aca:	f8ca 602c 	str.w	r6, [sl, #44]	; 0x2c
  p->prev->next = p;
 8004ace:	f8c3 a000 	str.w	sl, [r3]
 8004ad2:	f88a 2028 	strb.w	r2, [sl, #40]	; 0x28
  pqp->next       = p->next;
 8004ad6:	6803      	ldr	r3, [r0, #0]
  qp->prev      = p;
 8004ad8:	f8cd a010 	str.w	sl, [sp, #16]
  chSysSwitch(ntp, otp);
 8004adc:	4651      	mov	r1, sl
  pqp->next->prev = pqp;
 8004ade:	f8c3 9004 	str.w	r9, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8004ae2:	f880 8028 	strb.w	r8, [r0, #40]	; 0x28
  pqp->next       = p->next;
 8004ae6:	f8c9 3000 	str.w	r3, [r9]
  __instance_set_currthread(oip, ntp);
 8004aea:	f8c9 000c 	str.w	r0, [r9, #12]
  chSysSwitch(ntp, otp);
 8004aee:	f7fb fba7 	bl	8000240 <__port_switch>
    return currtp->u.rdymsg;
 8004af2:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 8004af6:	f385 8811 	msr	BASEPRI, r5
 8004afa:	f387 8811 	msr	BASEPRI, r7
  if (!condition) {
 8004afe:	9b05      	ldr	r3, [sp, #20]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	dcc5      	bgt.n	8004a90 <rt_test_007_006_execute+0x130>
 8004b04:	f385 8811 	msr	BASEPRI, r5
 8004b08:	2a00      	cmp	r2, #0
 8004b0a:	f43f af6e 	beq.w	80049ea <rt_test_007_006_execute+0x8a>
  chtest.global_fail     = true;
 8004b0e:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8004b12:	4a15      	ldr	r2, [pc, #84]	; (8004b68 <rt_test_007_006_execute+0x208>)
  chtest.global_fail     = true;
 8004b14:	80a3      	strh	r3, [r4, #4]
  chtest.failure_message = msg;
 8004b16:	60a2      	str	r2, [r4, #8]
 8004b18:	e7b7      	b.n	8004a8a <rt_test_007_006_execute+0x12a>
  chtest.global_fail     = true;
 8004b1a:	f240 1201 	movw	r2, #257	; 0x101
  chtest.failure_message = msg;
 8004b1e:	4913      	ldr	r1, [pc, #76]	; (8004b6c <rt_test_007_006_execute+0x20c>)
  chtest.global_fail     = true;
 8004b20:	80a2      	strh	r2, [r4, #4]
  chtest.failure_message = msg;
 8004b22:	60a1      	str	r1, [r4, #8]
 8004b24:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 8004b28:	e7af      	b.n	8004a8a <rt_test_007_006_execute+0x12a>
    chSemSignalI(&bsp->sem);
 8004b2a:	4630      	mov	r0, r6
 8004b2c:	f7ff fed8 	bl	80048e0 <chSemSignalI>
 8004b30:	e764      	b.n	80049fc <rt_test_007_006_execute+0x9c>
  chtest.global_fail     = true;
 8004b32:	f240 1201 	movw	r2, #257	; 0x101
  chtest.failure_message = msg;
 8004b36:	490e      	ldr	r1, [pc, #56]	; (8004b70 <rt_test_007_006_execute+0x210>)
  chtest.global_fail     = true;
 8004b38:	80a2      	strh	r2, [r4, #4]
  chtest.failure_message = msg;
 8004b3a:	60a1      	str	r1, [r4, #8]
 8004b3c:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
 8004b40:	e7a3      	b.n	8004a8a <rt_test_007_006_execute+0x12a>
 8004b42:	4630      	mov	r0, r6
 8004b44:	f7ff fecc 	bl	80048e0 <chSemSignalI>
 8004b48:	e77b      	b.n	8004a42 <rt_test_007_006_execute+0xe2>
 8004b4a:	bf00      	nop
 8004b4c:	200010f4 	.word	0x200010f4
 8004b50:	20001050 	.word	0x20001050
 8004b54:	20001240 	.word	0x20001240
 8004b58:	08004921 	.word	0x08004921
 8004b5c:	20001ab0 	.word	0x20001ab0
 8004b60:	080102d8 	.word	0x080102d8
 8004b64:	080102f8 	.word	0x080102f8
 8004b68:	080102e4 	.word	0x080102e4
 8004b6c:	08010304 	.word	0x08010304
 8004b70:	080102dc 	.word	0x080102dc
	...

08004b80 <chMtxLockS>:
void chMtxLockS(mutex_t *mp) {
 8004b80:	b4f0      	push	{r4, r5, r6, r7}
  if (mp->owner != NULL) {
 8004b82:	6883      	ldr	r3, [r0, #8]
 8004b84:	4c35      	ldr	r4, [pc, #212]	; (8004c5c <chMtxLockS+0xdc>)
 8004b86:	68e1      	ldr	r1, [r4, #12]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d039      	beq.n	8004c00 <chMtxLockS+0x80>
      while (tp->hdr.pqueue.prio < currtp->hdr.pqueue.prio) {
 8004b8c:	688d      	ldr	r5, [r1, #8]
 8004b8e:	689a      	ldr	r2, [r3, #8]
 8004b90:	4295      	cmp	r5, r2
 8004b92:	d907      	bls.n	8004ba4 <chMtxLockS+0x24>
        switch (tp->state) {
 8004b94:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
        tp->hdr.pqueue.prio = currtp->hdr.pqueue.prio;
 8004b98:	609d      	str	r5, [r3, #8]
        switch (tp->state) {
 8004b9a:	2a06      	cmp	r2, #6
 8004b9c:	d045      	beq.n	8004c2a <chMtxLockS+0xaa>
 8004b9e:	2a07      	cmp	r2, #7
 8004ba0:	d034      	beq.n	8004c0c <chMtxLockS+0x8c>
 8004ba2:	b1e2      	cbz	r2, 8004bde <chMtxLockS+0x5e>
/* If the performance code path has been chosen then all the following
   functions are inlined into the various kernel modules.*/
#if CH_CFG_OPTIMIZE_SPEED == TRUE
static inline void ch_sch_prio_insert(ch_queue_t *qp, ch_queue_t *tp) {

  ch_queue_t *cp = qp;
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	e003      	b.n	8004bb0 <chMtxLockS+0x30>
  do {
    cp = cp->next;
  } while ((cp != qp) &&
 8004ba8:	688a      	ldr	r2, [r1, #8]
 8004baa:	689d      	ldr	r5, [r3, #8]
 8004bac:	4295      	cmp	r5, r2
 8004bae:	d302      	bcc.n	8004bb6 <chMtxLockS+0x36>
    cp = cp->next;
 8004bb0:	681b      	ldr	r3, [r3, #0]
           (threadref(cp)->hdr.pqueue.prio >= threadref(tp)->hdr.pqueue.prio));
 8004bb2:	4298      	cmp	r0, r3
 8004bb4:	d1f8      	bne.n	8004ba8 <chMtxLockS+0x28>
  otp->state = newstate;
 8004bb6:	2506      	movs	r5, #6
  tp->next       = cp;
  tp->prev       = cp->prev;
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	e9c1 3200 	strd	r3, r2, [r1]
  tp->prev->next = tp;
 8004bbe:	6011      	str	r1, [r2, #0]
  ntp->state = CH_STATE_CURRENT;
 8004bc0:	2201      	movs	r2, #1
  cp->prev       = tp;
 8004bc2:	6059      	str	r1, [r3, #4]
      currtp->u.wtmtxp = mp;
 8004bc4:	62c8      	str	r0, [r1, #44]	; 0x2c
  ch_priority_queue_t *p = pqp->next;
 8004bc6:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 8004bc8:	f881 5028 	strb.w	r5, [r1, #40]	; 0x28
  pqp->next       = p->next;
 8004bcc:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 8004bce:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8004bd0:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  pqp->next       = p->next;
 8004bd4:	6023      	str	r3, [r4, #0]
  __instance_set_currthread(oip, ntp);
 8004bd6:	60e0      	str	r0, [r4, #12]
}
 8004bd8:	bcf0      	pop	{r4, r5, r6, r7}
  chSysSwitch(ntp, otp);
 8004bda:	f7fb bb31 	b.w	8000240 <__port_switch>
  p->prev->next = p->next;
 8004bde:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004be2:	603e      	str	r6, [r7, #0]
  p->next->prev = p->prev;
 8004be4:	6077      	str	r7, [r6, #4]
  tp->state = CH_STATE_READY;
 8004be6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8004bea:	699a      	ldr	r2, [r3, #24]
    pqp = pqp->next;
 8004bec:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8004bee:	6896      	ldr	r6, [r2, #8]
 8004bf0:	42ae      	cmp	r6, r5
 8004bf2:	d2fb      	bcs.n	8004bec <chMtxLockS+0x6c>
  p->next       = pqp;
 8004bf4:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
 8004bf6:	6855      	ldr	r5, [r2, #4]
 8004bf8:	605d      	str	r5, [r3, #4]
  p->prev->next = p;
 8004bfa:	602b      	str	r3, [r5, #0]
  pqp->prev     = p;
 8004bfc:	6053      	str	r3, [r2, #4]
  return __sch_ready_behind(tp);
 8004bfe:	e7d1      	b.n	8004ba4 <chMtxLockS+0x24>
    mp->next = currtp->mtxlist;
 8004c00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
}
 8004c02:	bcf0      	pop	{r4, r5, r6, r7}
    mp->next = currtp->mtxlist;
 8004c04:	e9c0 1302 	strd	r1, r3, [r0, #8]
    currtp->mtxlist = mp;
 8004c08:	6408      	str	r0, [r1, #64]	; 0x40
}
 8004c0a:	4770      	bx	lr
          ch_sch_prio_insert(&tp->u.wtmtxp->queue,
 8004c0c:	6add      	ldr	r5, [r3, #44]	; 0x2c
  p->prev->next = p->next;
 8004c0e:	685f      	ldr	r7, [r3, #4]
 8004c10:	681e      	ldr	r6, [r3, #0]
  ch_queue_t *cp = qp;
 8004c12:	462a      	mov	r2, r5
 8004c14:	603e      	str	r6, [r7, #0]
  p->next->prev = p->prev;
 8004c16:	6077      	str	r7, [r6, #4]
 8004c18:	e003      	b.n	8004c22 <chMtxLockS+0xa2>
  } while ((cp != qp) &&
 8004c1a:	6896      	ldr	r6, [r2, #8]
 8004c1c:	689f      	ldr	r7, [r3, #8]
 8004c1e:	42be      	cmp	r6, r7
 8004c20:	d3e8      	bcc.n	8004bf4 <chMtxLockS+0x74>
    cp = cp->next;
 8004c22:	6812      	ldr	r2, [r2, #0]
           (threadref(cp)->hdr.pqueue.prio >= threadref(tp)->hdr.pqueue.prio));
 8004c24:	4295      	cmp	r5, r2
 8004c26:	d1f8      	bne.n	8004c1a <chMtxLockS+0x9a>
 8004c28:	e7e4      	b.n	8004bf4 <chMtxLockS+0x74>
          ch_sch_prio_insert(&tp->u.wtmtxp->queue,
 8004c2a:	6add      	ldr	r5, [r3, #44]	; 0x2c
  p->prev->next = p->next;
 8004c2c:	685f      	ldr	r7, [r3, #4]
 8004c2e:	681e      	ldr	r6, [r3, #0]
  ch_queue_t *cp = qp;
 8004c30:	462a      	mov	r2, r5
 8004c32:	603e      	str	r6, [r7, #0]
  p->next->prev = p->prev;
 8004c34:	6077      	str	r7, [r6, #4]
 8004c36:	e003      	b.n	8004c40 <chMtxLockS+0xc0>
  } while ((cp != qp) &&
 8004c38:	6896      	ldr	r6, [r2, #8]
 8004c3a:	689f      	ldr	r7, [r3, #8]
 8004c3c:	42be      	cmp	r6, r7
 8004c3e:	d302      	bcc.n	8004c46 <chMtxLockS+0xc6>
    cp = cp->next;
 8004c40:	6812      	ldr	r2, [r2, #0]
           (threadref(cp)->hdr.pqueue.prio >= threadref(tp)->hdr.pqueue.prio));
 8004c42:	4295      	cmp	r5, r2
 8004c44:	d1f8      	bne.n	8004c38 <chMtxLockS+0xb8>
  tp->prev       = cp->prev;
 8004c46:	6856      	ldr	r6, [r2, #4]
  tp->next       = cp;
 8004c48:	601a      	str	r2, [r3, #0]
  tp->prev       = cp->prev;
 8004c4a:	605e      	str	r6, [r3, #4]
  tp->prev->next = tp;
 8004c4c:	6033      	str	r3, [r6, #0]
  cp->prev       = tp;
 8004c4e:	6053      	str	r3, [r2, #4]
          tp = tp->u.wtmtxp->owner;
 8004c50:	68ab      	ldr	r3, [r5, #8]
      while (tp->hdr.pqueue.prio < currtp->hdr.pqueue.prio) {
 8004c52:	688d      	ldr	r5, [r1, #8]
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	42aa      	cmp	r2, r5
 8004c58:	d39c      	bcc.n	8004b94 <chMtxLockS+0x14>
 8004c5a:	e7a3      	b.n	8004ba4 <chMtxLockS+0x24>
 8004c5c:	20001050 	.word	0x20001050

08004c60 <thread4B>:
static THD_FUNCTION(thread4B, p) {
 8004c60:	b510      	push	{r4, lr}
 8004c62:	2430      	movs	r4, #48	; 0x30
 8004c64:	f384 8811 	msr	BASEPRI, r4
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8004c68:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004c6c:	2008      	movs	r0, #8
 8004c6e:	f7fe f837 	bl	8002ce0 <chSchGoSleepTimeoutS>
 8004c72:	2300      	movs	r3, #0
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f384 8811 	msr	BASEPRI, r4
  chMtxLockS(&m2);   /* For coverage of the chMtxLockS() function variant.*/
 8004c7c:	4809      	ldr	r0, [pc, #36]	; (8004ca4 <thread4B+0x44>)
 8004c7e:	f7ff ff7f 	bl	8004b80 <chMtxLockS>
  chMtxUnlockS(&m2); /* For coverage of the chMtxUnlockS() function variant.*/
 8004c82:	4808      	ldr	r0, [pc, #32]	; (8004ca4 <thread4B+0x44>)
 8004c84:	f7fc fbe4 	bl	8001450 <chMtxUnlockS>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8004c88:	4b07      	ldr	r3, [pc, #28]	; (8004ca8 <thread4B+0x48>)
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	6892      	ldr	r2, [r2, #8]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d901      	bls.n	8004c9a <thread4B+0x3a>
    __sch_reschedule_ahead();
 8004c96:	f7ff f8e3 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	f383 8811 	msr	BASEPRI, r3
}
 8004ca0:	bd10      	pop	{r4, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20000828 	.word	0x20000828
 8004ca8:	20001050 	.word	0x20001050
 8004cac:	00000000 	.word	0x00000000

08004cb0 <chMtxUnlock>:
void chMtxUnlock(mutex_t *mp) {
 8004cb0:	b538      	push	{r3, r4, r5, lr}
  return __sch_get_currthread();
 8004cb2:	4c1f      	ldr	r4, [pc, #124]	; (8004d30 <chMtxUnlock+0x80>)
 8004cb4:	2330      	movs	r3, #48	; 0x30
 8004cb6:	68e5      	ldr	r5, [r4, #12]
 8004cb8:	f383 8811 	msr	BASEPRI, r3
    if (chMtxQueueNotEmptyS(mp)) {
 8004cbc:	6802      	ldr	r2, [r0, #0]
    currtp->mtxlist = mp->next;
 8004cbe:	68c3      	ldr	r3, [r0, #12]
    if (chMtxQueueNotEmptyS(mp)) {
 8004cc0:	4282      	cmp	r2, r0
    currtp->mtxlist = mp->next;
 8004cc2:	642b      	str	r3, [r5, #64]	; 0x40
    if (chMtxQueueNotEmptyS(mp)) {
 8004cc4:	d02e      	beq.n	8004d24 <chMtxUnlock+0x74>
      tprio_t newprio = currtp->realprio;
 8004cc6:	6c69      	ldr	r1, [r5, #68]	; 0x44
      while (lmp != NULL) {
 8004cc8:	b14b      	cbz	r3, 8004cde <chMtxUnlock+0x2e>
  return (bool)(qp->next != qp);
 8004cca:	681a      	ldr	r2, [r3, #0]
        if (chMtxQueueNotEmptyS(lmp) &&
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d003      	beq.n	8004cd8 <chMtxUnlock+0x28>
 8004cd0:	6892      	ldr	r2, [r2, #8]
 8004cd2:	4291      	cmp	r1, r2
 8004cd4:	bf38      	it	cc
 8004cd6:	4611      	movcc	r1, r2
        lmp = lmp->next;
 8004cd8:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1f5      	bne.n	8004cca <chMtxUnlock+0x1a>
      currtp->hdr.pqueue.prio = newprio;
 8004cde:	60a9      	str	r1, [r5, #8]
  ch_queue_t *p = qp->next;
 8004ce0:	6803      	ldr	r3, [r0, #0]
      mp->next = tp->mtxlist;
 8004ce2:	6c19      	ldr	r1, [r3, #64]	; 0x40
  qp->next       = p->next;
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	6002      	str	r2, [r0, #0]
  qp->next->prev = qp;
 8004ce8:	6050      	str	r0, [r2, #4]
 8004cea:	e9c0 3102 	strd	r3, r1, [r0, #8]
  tp->state = CH_STATE_READY;
 8004cee:	2100      	movs	r1, #0
      tp->mtxlist = mp;
 8004cf0:	6418      	str	r0, [r3, #64]	; 0x40
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8004cf2:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8004cf4:	6898      	ldr	r0, [r3, #8]
  tp->state = CH_STATE_READY;
 8004cf6:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    pqp = pqp->next;
 8004cfa:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8004cfc:	6891      	ldr	r1, [r2, #8]
 8004cfe:	4281      	cmp	r1, r0
 8004d00:	d2fb      	bcs.n	8004cfa <chMtxUnlock+0x4a>
  p->prev       = pqp->prev;
 8004d02:	6851      	ldr	r1, [r2, #4]
 8004d04:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 8004d08:	600b      	str	r3, [r1, #0]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8004d0a:	6820      	ldr	r0, [r4, #0]
 8004d0c:	68e1      	ldr	r1, [r4, #12]
  pqp->prev     = p;
 8004d0e:	6053      	str	r3, [r2, #4]
 8004d10:	688b      	ldr	r3, [r1, #8]
 8004d12:	6882      	ldr	r2, [r0, #8]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d901      	bls.n	8004d1c <chMtxUnlock+0x6c>
    __sch_reschedule_ahead();
 8004d18:	f7ff f8a2 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	f383 8811 	msr	BASEPRI, r3
}
 8004d22:	bd38      	pop	{r3, r4, r5, pc}
      mp->owner = NULL;
 8004d24:	2300      	movs	r3, #0
 8004d26:	6093      	str	r3, [r2, #8]
 8004d28:	2300      	movs	r3, #0
 8004d2a:	f383 8811 	msr	BASEPRI, r3
}
 8004d2e:	bd38      	pop	{r3, r4, r5, pc}
 8004d30:	20001050 	.word	0x20001050
	...

08004d40 <thread1.lto_priv.2>:
static THD_FUNCTION(thread1, p) {
 8004d40:	b510      	push	{r4, lr}
 8004d42:	2330      	movs	r3, #48	; 0x30
 8004d44:	4604      	mov	r4, r0
 8004d46:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(mp);
 8004d4a:	480a      	ldr	r0, [pc, #40]	; (8004d74 <thread1.lto_priv.2+0x34>)
 8004d4c:	f7ff ff18 	bl	8004b80 <chMtxLockS>
 8004d50:	2300      	movs	r3, #0
 8004d52:	f383 8811 	msr	BASEPRI, r3
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8004d56:	4b08      	ldr	r3, [pc, #32]	; (8004d78 <thread1.lto_priv.2+0x38>)
 8004d58:	68da      	ldr	r2, [r3, #12]
 8004d5a:	f103 0120 	add.w	r1, r3, #32
 8004d5e:	428a      	cmp	r2, r1
 8004d60:	d203      	bcs.n	8004d6a <thread1.lto_priv.2+0x2a>
  test_emit_token(*(char *)p);
 8004d62:	7821      	ldrb	r1, [r4, #0]
    *chtest.tokp++ = token;
 8004d64:	1c50      	adds	r0, r2, #1
 8004d66:	60d8      	str	r0, [r3, #12]
 8004d68:	7011      	strb	r1, [r2, #0]
  chMtxUnlock(&m1);
 8004d6a:	4802      	ldr	r0, [pc, #8]	; (8004d74 <thread1.lto_priv.2+0x34>)
}
 8004d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMtxUnlock(&m1);
 8004d70:	f7ff bf9e 	b.w	8004cb0 <chMtxUnlock>
 8004d74:	20000818 	.word	0x20000818
 8004d78:	200010f4 	.word	0x200010f4
 8004d7c:	00000000 	.word	0x00000000

08004d80 <thread4A>:
static THD_FUNCTION(thread4A, p) {
 8004d80:	b510      	push	{r4, lr}
 8004d82:	2330      	movs	r3, #48	; 0x30
 8004d84:	b086      	sub	sp, #24
 8004d86:	f383 8811 	msr	BASEPRI, r3
  vtp->reload  = (sysinterval_t)0;
 8004d8a:	2300      	movs	r3, #0
  thread_t *tp = __instance_get_currthread(currcore);
 8004d8c:	4c16      	ldr	r4, [pc, #88]	; (8004de8 <thread4A+0x68>)
  vtp->func    = vtfunc;
 8004d8e:	4a17      	ldr	r2, [pc, #92]	; (8004dec <thread4A+0x6c>)
  vtp->par     = par;
 8004d90:	68e1      	ldr	r1, [r4, #12]
  vt_enqueue(vtlp, vtp, delay);
 8004d92:	4668      	mov	r0, sp
  vtp->func    = vtfunc;
 8004d94:	e9cd 2103 	strd	r2, r1, [sp, #12]
  vt_enqueue(vtlp, vtp, delay);
 8004d98:	2164      	movs	r1, #100	; 0x64
  vtp->reload  = (sysinterval_t)0;
 8004d9a:	9305      	str	r3, [sp, #20]
  vt_enqueue(vtlp, vtp, delay);
 8004d9c:	f009 fec8 	bl	800eb30 <vt_enqueue.constprop.0>
  otp->state = newstate;
 8004da0:	2308      	movs	r3, #8
  ntp->state = CH_STATE_CURRENT;
 8004da2:	2201      	movs	r2, #1
  thread_t *otp = __instance_get_currthread(oip);
 8004da4:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 8004da6:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 8004da8:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
  pqp->next       = p->next;
 8004dac:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 8004dae:	605c      	str	r4, [r3, #4]
  pqp->next       = p->next;
 8004db0:	6023      	str	r3, [r4, #0]
  ntp->state = CH_STATE_CURRENT;
 8004db2:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  __instance_set_currthread(oip, ntp);
 8004db6:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8004db8:	f7fb fa42 	bl	8000240 <__port_switch>
    if (chVTIsArmedI(&vt)) {
 8004dbc:	9b00      	ldr	r3, [sp, #0]
 8004dbe:	b113      	cbz	r3, 8004dc6 <thread4A+0x46>
      chVTDoResetI(&vt);
 8004dc0:	4668      	mov	r0, sp
 8004dc2:	f7fd ff35 	bl	8002c30 <chVTDoResetI>
 8004dc6:	2400      	movs	r4, #0
 8004dc8:	f384 8811 	msr	BASEPRI, r4
 8004dcc:	2330      	movs	r3, #48	; 0x30
 8004dce:	f383 8811 	msr	BASEPRI, r3
 8004dd2:	4807      	ldr	r0, [pc, #28]	; (8004df0 <thread4A+0x70>)
 8004dd4:	f7ff fed4 	bl	8004b80 <chMtxLockS>
 8004dd8:	f384 8811 	msr	BASEPRI, r4
  chMtxUnlock(&m1);
 8004ddc:	4804      	ldr	r0, [pc, #16]	; (8004df0 <thread4A+0x70>)
}
 8004dde:	b006      	add	sp, #24
 8004de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMtxUnlock(&m1);
 8004de4:	f7ff bf64 	b.w	8004cb0 <chMtxUnlock>
 8004de8:	20001050 	.word	0x20001050
 8004dec:	080013e1 	.word	0x080013e1
 8004df0:	20000818 	.word	0x20000818
	...

08004e00 <thread6>:
static THD_FUNCTION(thread6, p) {
 8004e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e04:	2430      	movs	r4, #48	; 0x30
 8004e06:	4607      	mov	r7, r0
 8004e08:	f384 8811 	msr	BASEPRI, r4
 8004e0c:	4820      	ldr	r0, [pc, #128]	; (8004e90 <thread6+0x90>)
 8004e0e:	f7ff feb7 	bl	8004b80 <chMtxLockS>
 8004e12:	2300      	movs	r3, #0
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f384 8811 	msr	BASEPRI, r4
 8004e1c:	4e1d      	ldr	r6, [pc, #116]	; (8004e94 <thread6+0x94>)
  /* Releasing "current" mutex.*/
  chMtxUnlockS(mp);

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currtp->u.wtobjp = cp;
 8004e1e:	4d1e      	ldr	r5, [pc, #120]	; (8004e98 <thread6+0x98>)
 8004e20:	68f4      	ldr	r4, [r6, #12]
 *
 * @xclass
 */
static inline mutex_t *chMtxGetNextMutexX(void) {

  return chThdGetSelfX()->mtxlist;
 8004e22:	f8d4 8040 	ldr.w	r8, [r4, #64]	; 0x40
  chMtxUnlockS(mp);
 8004e26:	4640      	mov	r0, r8
 8004e28:	f7fc fb12 	bl	8001450 <chMtxUnlockS>
  ch_queue_t *cp = qp;
 8004e2c:	462b      	mov	r3, r5
  currtp->u.wtobjp = cp;
 8004e2e:	62e5      	str	r5, [r4, #44]	; 0x2c
static inline void ch_sch_prio_insert(ch_queue_t *qp, ch_queue_t *tp) {
 8004e30:	e003      	b.n	8004e3a <thread6+0x3a>
  } while ((cp != qp) &&
 8004e32:	6899      	ldr	r1, [r3, #8]
 8004e34:	68a2      	ldr	r2, [r4, #8]
 8004e36:	4291      	cmp	r1, r2
 8004e38:	d302      	bcc.n	8004e40 <thread6+0x40>
    cp = cp->next;
 8004e3a:	681b      	ldr	r3, [r3, #0]
           (threadref(cp)->hdr.pqueue.prio >= threadref(tp)->hdr.pqueue.prio));
 8004e3c:	42ab      	cmp	r3, r5
 8004e3e:	d1f8      	bne.n	8004e32 <thread6+0x32>
  otp->state = newstate;
 8004e40:	2007      	movs	r0, #7
  ntp->state = CH_STATE_CURRENT;
 8004e42:	2501      	movs	r5, #1
  tp->prev       = cp->prev;
 8004e44:	685a      	ldr	r2, [r3, #4]
  thread_t *otp = __instance_get_currthread(oip);
 8004e46:	68f1      	ldr	r1, [r6, #12]
  tp->next       = cp;
 8004e48:	6023      	str	r3, [r4, #0]
  tp->prev       = cp->prev;
 8004e4a:	6062      	str	r2, [r4, #4]
  tp->prev->next = tp;
 8004e4c:	6014      	str	r4, [r2, #0]
  cp->prev       = tp;
 8004e4e:	605c      	str	r4, [r3, #4]
  otp->state = newstate;
 8004e50:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
  ch_priority_queue_t *p = pqp->next;
 8004e54:	6830      	ldr	r0, [r6, #0]
  pqp->next       = p->next;
 8004e56:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 8004e58:	605e      	str	r6, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8004e5a:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
  pqp->next       = p->next;
 8004e5e:	6033      	str	r3, [r6, #0]
  __instance_set_currthread(oip, ntp);
 8004e60:	60f0      	str	r0, [r6, #12]
  chSysSwitch(ntp, otp);
 8004e62:	f7fb f9ed 	bl	8000240 <__port_switch>
  ch_sch_prio_insert(&cp->queue, &currtp->hdr.queue);
  chSchGoSleepS(CH_STATE_WTCOND);
  msg = currtp->u.rdymsg;
  chMtxLockS(mp);
 8004e66:	4640      	mov	r0, r8
 8004e68:	f7ff fe8a 	bl	8004b80 <chMtxLockS>
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	f383 8811 	msr	BASEPRI, r3
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8004e72:	4b0a      	ldr	r3, [pc, #40]	; (8004e9c <thread6+0x9c>)
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	f103 0120 	add.w	r1, r3, #32
 8004e7a:	428a      	cmp	r2, r1
 8004e7c:	d203      	bcs.n	8004e86 <thread6+0x86>
  test_emit_token(*(char *)p);
 8004e7e:	7839      	ldrb	r1, [r7, #0]
    *chtest.tokp++ = token;
 8004e80:	1950      	adds	r0, r2, r5
 8004e82:	60d8      	str	r0, [r3, #12]
 8004e84:	7011      	strb	r1, [r2, #0]
  chMtxUnlock(&m1);
 8004e86:	4802      	ldr	r0, [pc, #8]	; (8004e90 <thread6+0x90>)
}
 8004e88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  chMtxUnlock(&m1);
 8004e8c:	f7ff bf10 	b.w	8004cb0 <chMtxUnlock>
 8004e90:	20000818 	.word	0x20000818
 8004e94:	20001050 	.word	0x20001050
 8004e98:	20000800 	.word	0x20000800
 8004e9c:	200010f4 	.word	0x200010f4

08004ea0 <thread8>:
static THD_FUNCTION(thread8, p) {
 8004ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ea4:	2430      	movs	r4, #48	; 0x30
 8004ea6:	4607      	mov	r7, r0
 8004ea8:	f384 8811 	msr	BASEPRI, r4
 8004eac:	4827      	ldr	r0, [pc, #156]	; (8004f4c <thread8+0xac>)
 8004eae:	f7ff fe67 	bl	8004b80 <chMtxLockS>
 8004eb2:	2500      	movs	r5, #0
 8004eb4:	f385 8811 	msr	BASEPRI, r5
 8004eb8:	f384 8811 	msr	BASEPRI, r4
 8004ebc:	4824      	ldr	r0, [pc, #144]	; (8004f50 <thread8+0xb0>)
 8004ebe:	f7ff fe5f 	bl	8004b80 <chMtxLockS>
 8004ec2:	f385 8811 	msr	BASEPRI, r5
 8004ec6:	f384 8811 	msr	BASEPRI, r4
 8004eca:	4e22      	ldr	r6, [pc, #136]	; (8004f54 <thread8+0xb4>)
  /* Releasing "current" mutex.*/
  chMtxUnlockS(mp);

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currtp->u.wtobjp = cp;
 8004ecc:	4d22      	ldr	r5, [pc, #136]	; (8004f58 <thread8+0xb8>)
 8004ece:	68f4      	ldr	r4, [r6, #12]
 8004ed0:	f8d4 8040 	ldr.w	r8, [r4, #64]	; 0x40
  chMtxUnlockS(mp);
 8004ed4:	4640      	mov	r0, r8
 8004ed6:	f7fc fabb 	bl	8001450 <chMtxUnlockS>
  ch_queue_t *cp = qp;
 8004eda:	462b      	mov	r3, r5
  currtp->u.wtobjp = cp;
 8004edc:	62e5      	str	r5, [r4, #44]	; 0x2c
static inline void ch_sch_prio_insert(ch_queue_t *qp, ch_queue_t *tp) {
 8004ede:	e003      	b.n	8004ee8 <thread8+0x48>
  } while ((cp != qp) &&
 8004ee0:	6899      	ldr	r1, [r3, #8]
 8004ee2:	68a2      	ldr	r2, [r4, #8]
 8004ee4:	4291      	cmp	r1, r2
 8004ee6:	d302      	bcc.n	8004eee <thread8+0x4e>
    cp = cp->next;
 8004ee8:	681b      	ldr	r3, [r3, #0]
           (threadref(cp)->hdr.pqueue.prio >= threadref(tp)->hdr.pqueue.prio));
 8004eea:	42ab      	cmp	r3, r5
 8004eec:	d1f8      	bne.n	8004ee0 <thread8+0x40>
  otp->state = newstate;
 8004eee:	2107      	movs	r1, #7
  ntp->state = CH_STATE_CURRENT;
 8004ef0:	2501      	movs	r5, #1
  tp->prev       = cp->prev;
 8004ef2:	685a      	ldr	r2, [r3, #4]
  tp->next       = cp;
 8004ef4:	6023      	str	r3, [r4, #0]
  tp->prev       = cp->prev;
 8004ef6:	6062      	str	r2, [r4, #4]
  tp->prev->next = tp;
 8004ef8:	6014      	str	r4, [r2, #0]
  cp->prev       = tp;
 8004efa:	605c      	str	r4, [r3, #4]
  thread_t *tp = __instance_get_currthread(currcore);
 8004efc:	68f4      	ldr	r4, [r6, #12]
  ch_priority_queue_t *p = pqp->next;
 8004efe:	6830      	ldr	r0, [r6, #0]
  otp->state = newstate;
 8004f00:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  pqp->next       = p->next;
 8004f04:	6803      	ldr	r3, [r0, #0]
  chSysSwitch(ntp, otp);
 8004f06:	4621      	mov	r1, r4
  pqp->next->prev = pqp;
 8004f08:	605e      	str	r6, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8004f0a:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
  pqp->next       = p->next;
 8004f0e:	6033      	str	r3, [r6, #0]
  __instance_set_currthread(oip, ntp);
 8004f10:	60f0      	str	r0, [r6, #12]
  chSysSwitch(ntp, otp);
 8004f12:	f7fb f995 	bl	8000240 <__port_switch>
  ch_sch_prio_insert(&cp->queue, &currtp->hdr.queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, timeout);
  if (msg != MSG_TIMEOUT) {
 8004f16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004f18:	3301      	adds	r3, #1
 8004f1a:	d002      	beq.n	8004f22 <thread8+0x82>
    chMtxLockS(mp);
 8004f1c:	4640      	mov	r0, r8
 8004f1e:	f7ff fe2f 	bl	8004b80 <chMtxLockS>
 8004f22:	2300      	movs	r3, #0
 8004f24:	f383 8811 	msr	BASEPRI, r3
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8004f28:	4b0c      	ldr	r3, [pc, #48]	; (8004f5c <thread8+0xbc>)
 8004f2a:	68da      	ldr	r2, [r3, #12]
 8004f2c:	f103 0120 	add.w	r1, r3, #32
 8004f30:	428a      	cmp	r2, r1
 8004f32:	d203      	bcs.n	8004f3c <thread8+0x9c>
  test_emit_token(*(char *)p);
 8004f34:	7839      	ldrb	r1, [r7, #0]
    *chtest.tokp++ = token;
 8004f36:	1c50      	adds	r0, r2, #1
 8004f38:	60d8      	str	r0, [r3, #12]
 8004f3a:	7011      	strb	r1, [r2, #0]
  chMtxUnlock(&m1);
 8004f3c:	4804      	ldr	r0, [pc, #16]	; (8004f50 <thread8+0xb0>)
 8004f3e:	f7ff feb7 	bl	8004cb0 <chMtxUnlock>
}
 8004f42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  chMtxUnlock(&m2);
 8004f46:	4801      	ldr	r0, [pc, #4]	; (8004f4c <thread8+0xac>)
 8004f48:	f7ff beb2 	b.w	8004cb0 <chMtxUnlock>
 8004f4c:	20000828 	.word	0x20000828
 8004f50:	20000818 	.word	0x20000818
 8004f54:	20001050 	.word	0x20001050
 8004f58:	20000800 	.word	0x20000800
 8004f5c:	200010f4 	.word	0x200010f4

08004f60 <thread9>:
static THD_FUNCTION(thread9, p) {
 8004f60:	b510      	push	{r4, lr}
 8004f62:	2330      	movs	r3, #48	; 0x30
 8004f64:	4604      	mov	r4, r0
 8004f66:	f383 8811 	msr	BASEPRI, r3
 8004f6a:	480a      	ldr	r0, [pc, #40]	; (8004f94 <thread9+0x34>)
 8004f6c:	f7ff fe08 	bl	8004b80 <chMtxLockS>
 8004f70:	2300      	movs	r3, #0
 8004f72:	f383 8811 	msr	BASEPRI, r3
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8004f76:	4b08      	ldr	r3, [pc, #32]	; (8004f98 <thread9+0x38>)
 8004f78:	68da      	ldr	r2, [r3, #12]
 8004f7a:	f103 0120 	add.w	r1, r3, #32
 8004f7e:	428a      	cmp	r2, r1
 8004f80:	d203      	bcs.n	8004f8a <thread9+0x2a>
  test_emit_token(*(char *)p);
 8004f82:	7821      	ldrb	r1, [r4, #0]
    *chtest.tokp++ = token;
 8004f84:	1c50      	adds	r0, r2, #1
 8004f86:	60d8      	str	r0, [r3, #12]
 8004f88:	7011      	strb	r1, [r2, #0]
  chMtxUnlock(&m2);
 8004f8a:	4802      	ldr	r0, [pc, #8]	; (8004f94 <thread9+0x34>)
}
 8004f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMtxUnlock(&m2);
 8004f90:	f7ff be8e 	b.w	8004cb0 <chMtxUnlock>
 8004f94:	20000828 	.word	0x20000828
 8004f98:	200010f4 	.word	0x200010f4
 8004f9c:	00000000 	.word	0x00000000

08004fa0 <rt_test_008_004_execute>:
  test_set_step(2);
 8004fa0:	2302      	movs	r3, #2
static void rt_test_008_004_execute(void) {
 8004fa2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fa6:	4d39      	ldr	r5, [pc, #228]	; (800508c <rt_test_008_004_execute+0xec>)
  test_set_step(2);
 8004fa8:	4c39      	ldr	r4, [pc, #228]	; (8005090 <rt_test_008_004_execute+0xf0>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 8004faa:	68ea      	ldr	r2, [r5, #12]
 8004fac:	6023      	str	r3, [r4, #0]
 8004fae:	6896      	ldr	r6, [r2, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8004fb0:	4b38      	ldr	r3, [pc, #224]	; (8005094 <rt_test_008_004_execute+0xf4>)
static void rt_test_008_004_execute(void) {
 8004fb2:	b082      	sub	sp, #8
    pa = p + 1;
 8004fb4:	f106 0901 	add.w	r9, r6, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8004fb8:	464a      	mov	r2, r9
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8004fc0:	4b35      	ldr	r3, [pc, #212]	; (8005098 <rt_test_008_004_execute+0xf8>)
 8004fc2:	4836      	ldr	r0, [pc, #216]	; (800509c <rt_test_008_004_execute+0xfc>)
 8004fc4:	f7ff fb44 	bl	8004650 <chThdCreateStatic>
 8004fc8:	4f35      	ldr	r7, [pc, #212]	; (80050a0 <rt_test_008_004_execute+0x100>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8004fca:	4b36      	ldr	r3, [pc, #216]	; (80050a4 <rt_test_008_004_execute+0x104>)
    pb = p + 2;
 8004fcc:	f106 0a02 	add.w	sl, r6, #2
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	4652      	mov	r2, sl
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8004fd4:	6038      	str	r0, [r7, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8004fd6:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8004fda:	4b33      	ldr	r3, [pc, #204]	; (80050a8 <rt_test_008_004_execute+0x108>)
 8004fdc:	4833      	ldr	r0, [pc, #204]	; (80050ac <rt_test_008_004_execute+0x10c>)
 8004fde:	f7ff fb37 	bl	8004650 <chThdCreateStatic>
  test_set_step(3);
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	f04f 0830 	mov.w	r8, #48	; 0x30
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8004fe8:	6078      	str	r0, [r7, #4]
  test_set_step(3);
 8004fea:	6023      	str	r3, [r4, #0]
 8004fec:	f388 8811 	msr	BASEPRI, r8
 8004ff0:	482f      	ldr	r0, [pc, #188]	; (80050b0 <rt_test_008_004_execute+0x110>)
 8004ff2:	f7ff fdc5 	bl	8004b80 <chMtxLockS>
 8004ff6:	2700      	movs	r7, #0
 8004ff8:	f387 8811 	msr	BASEPRI, r7
 8004ffc:	68eb      	ldr	r3, [r5, #12]
  if (!condition) {
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	429e      	cmp	r6, r3
 8005002:	d13a      	bne.n	800507a <rt_test_008_004_execute+0xda>
  test_set_step(4);
 8005004:	2304      	movs	r3, #4
 8005006:	6023      	str	r3, [r4, #0]
 8005008:	f388 8811 	msr	BASEPRI, r8
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800500c:	21c8      	movs	r1, #200	; 0xc8
 800500e:	2008      	movs	r0, #8
 8005010:	f7fd fe66 	bl	8002ce0 <chSchGoSleepTimeoutS>
 8005014:	f387 8811 	msr	BASEPRI, r7
  return chThdGetSelfX()->hdr.pqueue.prio;
 8005018:	68eb      	ldr	r3, [r5, #12]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	4599      	cmp	r9, r3
 800501e:	d12c      	bne.n	800507a <rt_test_008_004_execute+0xda>
  test_set_step(5);
 8005020:	2305      	movs	r3, #5
 8005022:	6023      	str	r3, [r4, #0]
 8005024:	f388 8811 	msr	BASEPRI, r8
 8005028:	4822      	ldr	r0, [pc, #136]	; (80050b4 <rt_test_008_004_execute+0x114>)
 800502a:	f7ff fda9 	bl	8004b80 <chMtxLockS>
 800502e:	f387 8811 	msr	BASEPRI, r7
 8005032:	68eb      	ldr	r3, [r5, #12]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	4599      	cmp	r9, r3
 8005038:	d11f      	bne.n	800507a <rt_test_008_004_execute+0xda>
  test_set_step(6);
 800503a:	2306      	movs	r3, #6
 800503c:	6023      	str	r3, [r4, #0]
 800503e:	f388 8811 	msr	BASEPRI, r8
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8005042:	21c8      	movs	r1, #200	; 0xc8
 8005044:	2008      	movs	r0, #8
 8005046:	f7fd fe4b 	bl	8002ce0 <chSchGoSleepTimeoutS>
 800504a:	f387 8811 	msr	BASEPRI, r7
  return chThdGetSelfX()->hdr.pqueue.prio;
 800504e:	68eb      	ldr	r3, [r5, #12]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	459a      	cmp	sl, r3
 8005054:	d111      	bne.n	800507a <rt_test_008_004_execute+0xda>
  test_set_step(7);
 8005056:	2307      	movs	r3, #7
    chMtxUnlock(&m2);
 8005058:	4816      	ldr	r0, [pc, #88]	; (80050b4 <rt_test_008_004_execute+0x114>)
  test_set_step(7);
 800505a:	6023      	str	r3, [r4, #0]
    chMtxUnlock(&m2);
 800505c:	f7ff fe28 	bl	8004cb0 <chMtxUnlock>
 8005060:	68eb      	ldr	r3, [r5, #12]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	4599      	cmp	r9, r3
 8005066:	d108      	bne.n	800507a <rt_test_008_004_execute+0xda>
  test_set_step(8);
 8005068:	2308      	movs	r3, #8
    chMtxUnlock(&m1);
 800506a:	4811      	ldr	r0, [pc, #68]	; (80050b0 <rt_test_008_004_execute+0x110>)
  test_set_step(8);
 800506c:	6023      	str	r3, [r4, #0]
    chMtxUnlock(&m1);
 800506e:	f7ff fe1f 	bl	8004cb0 <chMtxUnlock>
 8005072:	68eb      	ldr	r3, [r5, #12]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	429e      	cmp	r6, r3
 8005078:	d004      	beq.n	8005084 <rt_test_008_004_execute+0xe4>
  chtest.global_fail     = true;
 800507a:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800507e:	4a0e      	ldr	r2, [pc, #56]	; (80050b8 <rt_test_008_004_execute+0x118>)
  chtest.global_fail     = true;
 8005080:	80a3      	strh	r3, [r4, #4]
  chtest.failure_message = msg;
 8005082:	60a2      	str	r2, [r4, #8]
}
 8005084:	b002      	add	sp, #8
 8005086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800508a:	bf00      	nop
 800508c:	20001050 	.word	0x20001050
 8005090:	200010f4 	.word	0x200010f4
 8005094:	08010318 	.word	0x08010318
 8005098:	08004d81 	.word	0x08004d81
 800509c:	20001240 	.word	0x20001240
 80050a0:	20001ab0 	.word	0x20001ab0
 80050a4:	0801031c 	.word	0x0801031c
 80050a8:	08004c61 	.word	0x08004c61
 80050ac:	200013f0 	.word	0x200013f0
 80050b0:	20000818 	.word	0x20000818
 80050b4:	20000828 	.word	0x20000828
 80050b8:	08010320 	.word	0x08010320
 80050bc:	00000000 	.word	0x00000000

080050c0 <rt_test_008_005_execute>:
  test_set_step(2);
 80050c0:	2302      	movs	r3, #2
static void rt_test_008_005_execute(void) {
 80050c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return __sch_get_currthread();
 80050c6:	4e5a      	ldr	r6, [pc, #360]	; (8005230 <rt_test_008_005_execute+0x170>)
  test_set_step(2);
 80050c8:	4d5a      	ldr	r5, [pc, #360]	; (8005234 <rt_test_008_005_execute+0x174>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 80050ca:	68f2      	ldr	r2, [r6, #12]
 80050cc:	2730      	movs	r7, #48	; 0x30
 80050ce:	f8d2 8008 	ldr.w	r8, [r2, #8]
 80050d2:	602b      	str	r3, [r5, #0]
 80050d4:	f387 8811 	msr	BASEPRI, r7
  if (mp->owner != NULL) {
 80050d8:	4c57      	ldr	r4, [pc, #348]	; (8005238 <rt_test_008_005_execute+0x178>)
 80050da:	68a3      	ldr	r3, [r4, #8]
 80050dc:	b14b      	cbz	r3, 80050f2 <rt_test_008_005_execute+0x32>
 80050de:	2300      	movs	r3, #0
 80050e0:	f383 8811 	msr	BASEPRI, r3
  chtest.global_fail     = true;
 80050e4:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 80050e8:	4a54      	ldr	r2, [pc, #336]	; (800523c <rt_test_008_005_execute+0x17c>)
  chtest.global_fail     = true;
 80050ea:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 80050ec:	60aa      	str	r2, [r5, #8]
}
 80050ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return __sch_get_currthread();
 80050f2:	68f2      	ldr	r2, [r6, #12]
  mp->next = currtp->mtxlist;
 80050f4:	6c11      	ldr	r1, [r2, #64]	; 0x40
  mp->owner = currtp;
 80050f6:	60a2      	str	r2, [r4, #8]
  currtp->mtxlist = mp;
 80050f8:	6414      	str	r4, [r2, #64]	; 0x40
  mp->next = currtp->mtxlist;
 80050fa:	60e1      	str	r1, [r4, #12]
 80050fc:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 8005100:	2203      	movs	r2, #3
 8005102:	602a      	str	r2, [r5, #0]
 8005104:	f387 8811 	msr	BASEPRI, r7
  if (mp->owner != NULL) {
 8005108:	68a2      	ldr	r2, [r4, #8]
 800510a:	2a00      	cmp	r2, #0
 800510c:	d065      	beq.n	80051da <rt_test_008_005_execute+0x11a>
 800510e:	f383 8811 	msr	BASEPRI, r3
  test_set_step(4);
 8005112:	2304      	movs	r3, #4
    chMtxUnlock(&m1);
 8005114:	4620      	mov	r0, r4
  test_set_step(4);
 8005116:	602b      	str	r3, [r5, #0]
    chMtxUnlock(&m1);
 8005118:	f7ff fdca 	bl	8004cb0 <chMtxUnlock>
  if (!condition) {
 800511c:	68a3      	ldr	r3, [r4, #8]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d169      	bne.n	80051f6 <rt_test_008_005_execute+0x136>
 8005122:	6822      	ldr	r2, [r4, #0]
 8005124:	42a2      	cmp	r2, r4
 8005126:	d16c      	bne.n	8005202 <rt_test_008_005_execute+0x142>
  test_set_step(5);
 8005128:	2105      	movs	r1, #5
 800512a:	6029      	str	r1, [r5, #0]
  return chThdGetSelfX()->hdr.pqueue.prio;
 800512c:	68f1      	ldr	r1, [r6, #12]
 800512e:	6889      	ldr	r1, [r1, #8]
 8005130:	4588      	cmp	r8, r1
 8005132:	d14c      	bne.n	80051ce <rt_test_008_005_execute+0x10e>
  test_set_step(6);
 8005134:	2106      	movs	r1, #6
 8005136:	6029      	str	r1, [r5, #0]
 8005138:	f387 8811 	msr	BASEPRI, r7
 800513c:	6891      	ldr	r1, [r2, #8]
 800513e:	2900      	cmp	r1, #0
 8005140:	d1ce      	bne.n	80050e0 <rt_test_008_005_execute+0x20>
  return __sch_get_currthread();
 8005142:	68f3      	ldr	r3, [r6, #12]
  mp->next = currtp->mtxlist;
 8005144:	6c18      	ldr	r0, [r3, #64]	; 0x40
  mp->owner = currtp;
 8005146:	6093      	str	r3, [r2, #8]
  currtp->mtxlist = mp;
 8005148:	641a      	str	r2, [r3, #64]	; 0x40
  mp->next = currtp->mtxlist;
 800514a:	60d0      	str	r0, [r2, #12]
 800514c:	f381 8811 	msr	BASEPRI, r1
 8005150:	f387 8811 	msr	BASEPRI, r7
  if (mp->owner != NULL) {
 8005154:	6893      	ldr	r3, [r2, #8]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d05c      	beq.n	8005214 <rt_test_008_005_execute+0x154>
 800515a:	f381 8811 	msr	BASEPRI, r1
 800515e:	f387 8811 	msr	BASEPRI, r7
 8005162:	68f7      	ldr	r7, [r6, #12]
 * @sclass
 */
void chMtxUnlockAllS(void) {
  thread_t *currtp = chThdGetSelfX();

  if (currtp->mtxlist != NULL) {
 8005164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005166:	b323      	cbz	r3, 80051b2 <rt_test_008_005_execute+0xf2>
  return (bool)(qp->next != qp);
 8005168:	681a      	ldr	r2, [r3, #0]
    do {
      mutex_t *mp = currtp->mtxlist;
      currtp->mtxlist = mp->next;
 800516a:	68d8      	ldr	r0, [r3, #12]
      if (chMtxQueueNotEmptyS(mp)) {
 800516c:	4293      	cmp	r3, r2
      currtp->mtxlist = mp->next;
 800516e:	6438      	str	r0, [r7, #64]	; 0x40
      if (chMtxQueueNotEmptyS(mp)) {
 8005170:	d04d      	beq.n	800520e <rt_test_008_005_execute+0x14e>
  qp->next       = p->next;
 8005172:	6810      	ldr	r0, [r2, #0]
 8005174:	6018      	str	r0, [r3, #0]
  qp->next->prev = qp;
 8005176:	6043      	str	r3, [r0, #4]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)1;
#endif
        tp = threadref(ch_queue_fifo_remove(&mp->queue));
        mp->owner   = tp;
        mp->next    = tp->mtxlist;
 8005178:	6c10      	ldr	r0, [r2, #64]	; 0x40
        mp->owner   = tp;
 800517a:	609a      	str	r2, [r3, #8]
        mp->next    = tp->mtxlist;
 800517c:	60d8      	str	r0, [r3, #12]
        tp->mtxlist = mp;
 800517e:	6413      	str	r3, [r2, #64]	; 0x40
  } while (unlikely(pqp->prio >= p->prio));
 8005180:	6890      	ldr	r0, [r2, #8]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8005182:	6993      	ldr	r3, [r2, #24]
  tp->state = CH_STATE_READY;
 8005184:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    pqp = pqp->next;
 8005188:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800518a:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800518e:	4584      	cmp	ip, r0
 8005190:	d2fa      	bcs.n	8005188 <rt_test_008_005_execute+0xc8>
  p->prev       = pqp->prev;
 8005192:	6858      	ldr	r0, [r3, #4]
  p->next       = pqp;
 8005194:	6013      	str	r3, [r2, #0]
  p->prev       = pqp->prev;
 8005196:	6050      	str	r0, [r2, #4]
  p->prev->next = p;
 8005198:	6002      	str	r2, [r0, #0]
  pqp->prev     = p;
 800519a:	605a      	str	r2, [r3, #4]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)0;
#endif
        mp->owner = NULL;
      }
    } while (currtp->mtxlist != NULL);
 800519c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1e2      	bne.n	8005168 <rt_test_008_005_execute+0xa8>
    currtp->hdr.pqueue.prio = currtp->realprio;
 80051a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 80051a4:	6832      	ldr	r2, [r6, #0]
 80051a6:	60bb      	str	r3, [r7, #8]
 80051a8:	6892      	ldr	r2, [r2, #8]
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d201      	bcs.n	80051b2 <rt_test_008_005_execute+0xf2>
    __sch_reschedule_ahead();
 80051ae:	f7fe fe57 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 80051b2:	2300      	movs	r3, #0
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	68a3      	ldr	r3, [r4, #8]
 80051ba:	b9e3      	cbnz	r3, 80051f6 <rt_test_008_005_execute+0x136>
 80051bc:	6823      	ldr	r3, [r4, #0]
 80051be:	42a3      	cmp	r3, r4
 80051c0:	d11f      	bne.n	8005202 <rt_test_008_005_execute+0x142>
  test_set_step(7);
 80051c2:	2207      	movs	r2, #7
  return chThdGetSelfX()->hdr.pqueue.prio;
 80051c4:	68f3      	ldr	r3, [r6, #12]
 80051c6:	602a      	str	r2, [r5, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	4598      	cmp	r8, r3
 80051cc:	d08f      	beq.n	80050ee <rt_test_008_005_execute+0x2e>
  chtest.global_fail     = true;
 80051ce:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 80051d2:	4a1b      	ldr	r2, [pc, #108]	; (8005240 <rt_test_008_005_execute+0x180>)
  chtest.global_fail     = true;
 80051d4:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 80051d6:	60aa      	str	r2, [r5, #8]
 80051d8:	e789      	b.n	80050ee <rt_test_008_005_execute+0x2e>
  return __sch_get_currthread();
 80051da:	68f3      	ldr	r3, [r6, #12]
  mp->next = currtp->mtxlist;
 80051dc:	6c19      	ldr	r1, [r3, #64]	; 0x40
  currtp->mtxlist = mp;
 80051de:	641c      	str	r4, [r3, #64]	; 0x40
  mp->next = currtp->mtxlist;
 80051e0:	e9c4 3102 	strd	r3, r1, [r4, #8]
 80051e4:	f382 8811 	msr	BASEPRI, r2
  chtest.global_fail     = true;
 80051e8:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 80051ec:	4a15      	ldr	r2, [pc, #84]	; (8005244 <rt_test_008_005_execute+0x184>)
  chtest.global_fail     = true;
 80051ee:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 80051f0:	60aa      	str	r2, [r5, #8]
}
 80051f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  chtest.global_fail     = true;
 80051f6:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 80051fa:	4a13      	ldr	r2, [pc, #76]	; (8005248 <rt_test_008_005_execute+0x188>)
  chtest.global_fail     = true;
 80051fc:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 80051fe:	60aa      	str	r2, [r5, #8]
 8005200:	e775      	b.n	80050ee <rt_test_008_005_execute+0x2e>
  chtest.global_fail     = true;
 8005202:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8005206:	4a11      	ldr	r2, [pc, #68]	; (800524c <rt_test_008_005_execute+0x18c>)
  chtest.global_fail     = true;
 8005208:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800520a:	60aa      	str	r2, [r5, #8]
 800520c:	e76f      	b.n	80050ee <rt_test_008_005_execute+0x2e>
        mp->owner = NULL;
 800520e:	6099      	str	r1, [r3, #8]
 8005210:	4603      	mov	r3, r0
 8005212:	e7c4      	b.n	800519e <rt_test_008_005_execute+0xde>
 8005214:	68f1      	ldr	r1, [r6, #12]
  mp->next = currtp->mtxlist;
 8005216:	6c08      	ldr	r0, [r1, #64]	; 0x40
  currtp->mtxlist = mp;
 8005218:	640a      	str	r2, [r1, #64]	; 0x40
  mp->next = currtp->mtxlist;
 800521a:	e9c2 1002 	strd	r1, r0, [r2, #8]
 800521e:	f383 8811 	msr	BASEPRI, r3
  chtest.global_fail     = true;
 8005222:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8005226:	4a07      	ldr	r2, [pc, #28]	; (8005244 <rt_test_008_005_execute+0x184>)
  chtest.global_fail     = true;
 8005228:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800522a:	60aa      	str	r2, [r5, #8]
 800522c:	e75f      	b.n	80050ee <rt_test_008_005_execute+0x2e>
 800522e:	bf00      	nop
 8005230:	20001050 	.word	0x20001050
 8005234:	200010f4 	.word	0x200010f4
 8005238:	20000818 	.word	0x20000818
 800523c:	08010338 	.word	0x08010338
 8005240:	08010320 	.word	0x08010320
 8005244:	08010348 	.word	0x08010348
 8005248:	08010354 	.word	0x08010354
 800524c:	080102b4 	.word	0x080102b4

08005250 <chEvtBroadcastFlagsI>:
  elp = esp->next;
 8005250:	6803      	ldr	r3, [r0, #0]
  while (elp != (event_listener_t *)esp) {
 8005252:	4298      	cmp	r0, r3
 8005254:	d034      	beq.n	80052c0 <chEvtBroadcastFlagsI+0x70>
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8005256:	b4f0      	push	{r4, r5, r6, r7}
    tp->u.rdymsg = MSG_OK;
 8005258:	2600      	movs	r6, #0
 800525a:	e005      	b.n	8005268 <chEvtBroadcastFlagsI+0x18>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800525c:	f1bc 0f0b 	cmp.w	ip, #11
 8005260:	d029      	beq.n	80052b6 <chEvtBroadcastFlagsI+0x66>
    elp = elp->next;
 8005262:	681b      	ldr	r3, [r3, #0]
  while (elp != (event_listener_t *)esp) {
 8005264:	4298      	cmp	r0, r3
 8005266:	d024      	beq.n	80052b2 <chEvtBroadcastFlagsI+0x62>
    elp->flags |= flags;
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	430a      	orrs	r2, r1
 800526c:	60da      	str	r2, [r3, #12]
    if ((flags == (eventflags_t)0) ||
 800526e:	b111      	cbz	r1, 8005276 <chEvtBroadcastFlagsI+0x26>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8005270:	691a      	ldr	r2, [r3, #16]
    if ((flags == (eventflags_t)0) ||
 8005272:	4211      	tst	r1, r2
 8005274:	d0f5      	beq.n	8005262 <chEvtBroadcastFlagsI+0x12>
  tp->epending |= events;
 8005276:	e9d3 2401 	ldrd	r2, r4, [r3, #4]
 800527a:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
  if (((tp->state == CH_STATE_WTOREVT) &&
 800527c:	f892 c028 	ldrb.w	ip, [r2, #40]	; 0x28
  tp->epending |= events;
 8005280:	432c      	orrs	r4, r5
  if (((tp->state == CH_STATE_WTOREVT) &&
 8005282:	f1bc 0f0a 	cmp.w	ip, #10
  tp->epending |= events;
 8005286:	63d4      	str	r4, [r2, #60]	; 0x3c
  if (((tp->state == CH_STATE_WTOREVT) &&
 8005288:	d1e8      	bne.n	800525c <chEvtBroadcastFlagsI+0xc>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800528a:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  if (((tp->state == CH_STATE_WTOREVT) &&
 800528c:	422c      	tst	r4, r5
 800528e:	d0e8      	beq.n	8005262 <chEvtBroadcastFlagsI+0x12>
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8005290:	6994      	ldr	r4, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8005292:	6897      	ldr	r7, [r2, #8]
    tp->u.rdymsg = MSG_OK;
 8005294:	62d6      	str	r6, [r2, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 8005296:	f882 6028 	strb.w	r6, [r2, #40]	; 0x28
    pqp = pqp->next;
 800529a:	6824      	ldr	r4, [r4, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800529c:	68a5      	ldr	r5, [r4, #8]
 800529e:	42bd      	cmp	r5, r7
 80052a0:	d2fb      	bcs.n	800529a <chEvtBroadcastFlagsI+0x4a>
    elp = elp->next;
 80052a2:	681b      	ldr	r3, [r3, #0]
  p->prev       = pqp->prev;
 80052a4:	6865      	ldr	r5, [r4, #4]
  while (elp != (event_listener_t *)esp) {
 80052a6:	4298      	cmp	r0, r3
 80052a8:	e9c2 4500 	strd	r4, r5, [r2]
  p->prev->next = p;
 80052ac:	602a      	str	r2, [r5, #0]
  pqp->prev     = p;
 80052ae:	6062      	str	r2, [r4, #4]
 80052b0:	d1da      	bne.n	8005268 <chEvtBroadcastFlagsI+0x18>
}
 80052b2:	bcf0      	pop	{r4, r5, r6, r7}
 80052b4:	4770      	bx	lr
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 80052b6:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      ((tp->state == CH_STATE_WTANDEVT) &&
 80052b8:	ea35 0404 	bics.w	r4, r5, r4
 80052bc:	d1d1      	bne.n	8005262 <chEvtBroadcastFlagsI+0x12>
 80052be:	e7e7      	b.n	8005290 <chEvtBroadcastFlagsI+0x40>
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
	...

080052d0 <sduDataTransmitted>:
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 80052d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 80052d2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80052d6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
  if (sdup == NULL) {
 80052d8:	b1dc      	cbz	r4, 8005312 <sduDataTransmitted+0x42>
 80052da:	4605      	mov	r5, r0
 80052dc:	460e      	mov	r6, r1
 80052de:	2330      	movs	r3, #48	; 0x30
 80052e0:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 80052e4:	2108      	movs	r1, #8
 80052e6:	1d20      	adds	r0, r4, #4
 80052e8:	f7ff ffb2 	bl	8005250 <chEvtBroadcastFlagsI>
  if (usbp->epc[ep]->in_state->txsize > 0U) {
 80052ec:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 80052f0:	68d8      	ldr	r0, [r3, #12]
 80052f2:	6943      	ldr	r3, [r0, #20]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	b96b      	cbnz	r3, 8005314 <sduDataTransmitted+0x44>
  if (obqIsEmptyI(obqp)) {
 80052f8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80052fa:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80052fc:	4291      	cmp	r1, r2
 80052fe:	d03a      	beq.n	8005376 <sduDataTransmitted+0xa6>
    usbStartTransmitI(usbp, ep, buf, n);
 8005300:	4631      	mov	r1, r6
 8005302:	4628      	mov	r0, r5
 8005304:	f852 3b04 	ldr.w	r3, [r2], #4
 8005308:	f7fb fb82 	bl	8000a10 <usbStartTransmitI>
 800530c:	2300      	movs	r3, #0
 800530e:	f383 8811 	msr	BASEPRI, r3
}
 8005312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  obqp->bcounter++;
 8005314:	6d22      	ldr	r2, [r4, #80]	; 0x50
  obqp->brdptr += obqp->bsize;
 8005316:	6da1      	ldr	r1, [r4, #88]	; 0x58
  obqp->bcounter++;
 8005318:	3201      	adds	r2, #1
 800531a:	6522      	str	r2, [r4, #80]	; 0x50
  obqp->brdptr += obqp->bsize;
 800531c:	6e22      	ldr	r2, [r4, #96]	; 0x60
    obqReleaseEmptyBufferI(&sdup->obqueue);
 800531e:	f104 0744 	add.w	r7, r4, #68	; 0x44
 8005322:	440a      	add	r2, r1
  if (obqp->brdptr >= obqp->btop) {
 8005324:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  obqp->brdptr += obqp->bsize;
 8005326:	65a2      	str	r2, [r4, #88]	; 0x58
  if (obqp->brdptr >= obqp->btop) {
 8005328:	428a      	cmp	r2, r1
    obqp->brdptr = obqp->buffers;
 800532a:	bf28      	it	cs
 800532c:	6ea2      	ldrcs	r2, [r4, #104]	; 0x68
  return (bool)(qp->next != qp);
 800532e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005330:	bf28      	it	cs
 8005332:	65a2      	strcs	r2, [r4, #88]	; 0x58
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (ch_queue_notempty(&tqp->queue)) {
 8005334:	428f      	cmp	r7, r1
 8005336:	d0e0      	beq.n	80052fa <sduDataTransmitted+0x2a>

  tp = threadref(ch_queue_fifo_remove(&tqp->queue));

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8005338:	f04f 0c00 	mov.w	ip, #0
  qp->next       = p->next;
 800533c:	f8d1 e000 	ldr.w	lr, [r1]
 8005340:	f8c4 e044 	str.w	lr, [r4, #68]	; 0x44
  qp->next->prev = qp;
 8005344:	f8ce 7004 	str.w	r7, [lr, #4]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8005348:	698f      	ldr	r7, [r1, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800534a:	f8d1 e008 	ldr.w	lr, [r1, #8]
 800534e:	f8c1 c02c 	str.w	ip, [r1, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 8005352:	f881 c028 	strb.w	ip, [r1, #40]	; 0x28
    pqp = pqp->next;
 8005356:	683f      	ldr	r7, [r7, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8005358:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800535c:	45f4      	cmp	ip, lr
 800535e:	d2fa      	bcs.n	8005356 <sduDataTransmitted+0x86>
  p->prev       = pqp->prev;
 8005360:	f8d7 c004 	ldr.w	ip, [r7, #4]
  p->next       = pqp;
 8005364:	600f      	str	r7, [r1, #0]
  p->prev       = pqp->prev;
 8005366:	f8c1 c004 	str.w	ip, [r1, #4]
  p->prev->next = p;
 800536a:	f8cc 1000 	str.w	r1, [ip]
  pqp->prev     = p;
 800536e:	6079      	str	r1, [r7, #4]
  if (obqIsEmptyI(obqp)) {
 8005370:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005372:	4291      	cmp	r1, r2
 8005374:	d1c4      	bne.n	8005300 <sduDataTransmitted+0x30>
 8005376:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005378:	2900      	cmp	r1, #0
 800537a:	d0c1      	beq.n	8005300 <sduDataTransmitted+0x30>
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 800537c:	2b00      	cmp	r3, #0
 800537e:	d0c5      	beq.n	800530c <sduDataTransmitted+0x3c>
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
 8005380:	8a02      	ldrh	r2, [r0, #16]
 8005382:	3a01      	subs	r2, #1
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8005384:	4013      	ands	r3, r2
 8005386:	d1c1      	bne.n	800530c <sduDataTransmitted+0x3c>
    usbStartTransmitI(usbp, ep, usbp->setup, 0);
 8005388:	4631      	mov	r1, r6
 800538a:	4628      	mov	r0, r5
 800538c:	f105 0274 	add.w	r2, r5, #116	; 0x74
 8005390:	f7fb fb3e 	bl	8000a10 <usbStartTransmitI>
 8005394:	e7ba      	b.n	800530c <sduDataTransmitted+0x3c>
 8005396:	bf00      	nop
	...

080053a0 <sduDataReceived>:
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 80053a0:	3111      	adds	r1, #17
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 80053a2:	b538      	push	{r3, r4, r5, lr}
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 80053a4:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  if (sdup == NULL) {
 80053a8:	b194      	cbz	r4, 80053d0 <sduDataReceived+0x30>
 80053aa:	2330      	movs	r3, #48	; 0x30
 80053ac:	f383 8811 	msr	BASEPRI, r3
  size = usbGetReceiveTransactionSizeX(sdup->config->usbp,
 80053b0:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 80053b4:	6813      	ldr	r3, [r2, #0]
 80053b6:	7952      	ldrb	r2, [r2, #5]
 80053b8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	685d      	ldr	r5, [r3, #4]
  if (size > (size_t)0) {
 80053c2:	b935      	cbnz	r5, 80053d2 <sduDataReceived+0x32>
  (void) sdu_start_receive(sdup);
 80053c4:	4620      	mov	r0, r4
 80053c6:	f00a fe93 	bl	80100f0 <sdu_start_receive.isra.0>
 80053ca:	2300      	movs	r3, #0
 80053cc:	f383 8811 	msr	BASEPRI, r3
}
 80053d0:	bd38      	pop	{r3, r4, r5, pc}
 80053d2:	2104      	movs	r1, #4
 80053d4:	1860      	adds	r0, r4, r1
 80053d6:	f7ff ff3b 	bl	8005250 <chEvtBroadcastFlagsI>
  *((size_t *)(void *)ibqp->bwrptr) = size;
 80053da:	69e3      	ldr	r3, [r4, #28]
  if (ibqp->bwrptr >= ibqp->btop) {
 80053dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
  *((size_t *)(void *)ibqp->bwrptr) = size;
 80053de:	601d      	str	r5, [r3, #0]
  ibqp->bwrptr += ibqp->bsize;
 80053e0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  ibqp->bcounter++;
 80053e2:	69a2      	ldr	r2, [r4, #24]
  ibqp->bwrptr += ibqp->bsize;
 80053e4:	4403      	add	r3, r0
  if (ibqp->bwrptr >= ibqp->btop) {
 80053e6:	428b      	cmp	r3, r1
  ibqp->bwrptr += ibqp->bsize;
 80053e8:	61e3      	str	r3, [r4, #28]
    ibqp->bwrptr = ibqp->buffers;
 80053ea:	bf28      	it	cs
 80053ec:	6b23      	ldrcs	r3, [r4, #48]	; 0x30
  ibqp->bcounter++;
 80053ee:	f102 0201 	add.w	r2, r2, #1
    ibqp->bwrptr = ibqp->buffers;
 80053f2:	bf28      	it	cs
 80053f4:	61e3      	strcs	r3, [r4, #28]
  return (bool)(qp->next != qp);
 80053f6:	68e3      	ldr	r3, [r4, #12]
  ibqp->bcounter++;
 80053f8:	61a2      	str	r2, [r4, #24]
    ibqPostFullBufferI(&sdup->ibqueue, size);
 80053fa:	f104 020c 	add.w	r2, r4, #12
 80053fe:	429a      	cmp	r2, r3
 8005400:	d0e0      	beq.n	80053c4 <sduDataReceived+0x24>
 8005402:	2100      	movs	r1, #0
  qp->next       = p->next;
 8005404:	6818      	ldr	r0, [r3, #0]
 8005406:	60e0      	str	r0, [r4, #12]
  qp->next->prev = qp;
 8005408:	6042      	str	r2, [r0, #4]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800540a:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800540c:	6898      	ldr	r0, [r3, #8]
 800540e:	62d9      	str	r1, [r3, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 8005410:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    pqp = pqp->next;
 8005414:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8005416:	6891      	ldr	r1, [r2, #8]
 8005418:	4281      	cmp	r1, r0
 800541a:	d2fb      	bcs.n	8005414 <sduDataReceived+0x74>
  p->prev       = pqp->prev;
 800541c:	6851      	ldr	r1, [r2, #4]
 800541e:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 8005422:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 8005424:	6053      	str	r3, [r2, #4]
  return __sch_ready_behind(tp);
 8005426:	e7cd      	b.n	80053c4 <sduDataReceived+0x24>
	...

08005430 <usb_event.lto_priv.0>:
static void usb_event(USBDriver *usbp, usbevent_t event) {
 8005430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (event) {
 8005432:	2905      	cmp	r1, #5
 8005434:	d852      	bhi.n	80054dc <usb_event.lto_priv.0+0xac>
 8005436:	e8df f001 	tbb	[pc, r1]
 800543a:	5103      	.short	0x5103
 800543c:	52030361 	.word	0x52030361
 8005440:	2330      	movs	r3, #48	; 0x30
 8005442:	f383 8811 	msr	BASEPRI, r3
  if (bqIsSuspendedX(&sdup->ibqueue) && bqIsSuspendedX(&sdup->obqueue)) {
 8005446:	4c67      	ldr	r4, [pc, #412]	; (80055e4 <usb_event.lto_priv.0+0x1b4>)
 8005448:	7d23      	ldrb	r3, [r4, #20]
 800544a:	b11b      	cbz	r3, 8005454 <usb_event.lto_priv.0+0x24>
 800544c:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8005450:	2b00      	cmp	r3, #0
 8005452:	d140      	bne.n	80054d6 <usb_event.lto_priv.0+0xa6>
 8005454:	2102      	movs	r1, #2
 8005456:	4864      	ldr	r0, [pc, #400]	; (80055e8 <usb_event.lto_priv.0+0x1b8>)
 8005458:	f7ff fefa 	bl	8005250 <chEvtBroadcastFlagsI>
  bqSuspendI(&sdup->ibqueue);
 800545c:	2301      	movs	r3, #1
  return (bool)(qp->next != qp);
 800545e:	68e1      	ldr	r1, [r4, #12]
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  while (ch_queue_notempty(&tqp->queue)) {
 8005460:	3008      	adds	r0, #8
 8005462:	4281      	cmp	r1, r0
 8005464:	7523      	strb	r3, [r4, #20]
 8005466:	d017      	beq.n	8005498 <usb_event.lto_priv.0+0x68>
 8005468:	f06f 0c01 	mvn.w	ip, #1
  tp->state = CH_STATE_READY;
 800546c:	2700      	movs	r7, #0
 800546e:	460b      	mov	r3, r1
  qp->next       = p->next;
 8005470:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8005472:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8005474:	689e      	ldr	r6, [r3, #8]
  qp->next       = p->next;
 8005476:	60e1      	str	r1, [r4, #12]
  qp->next->prev = qp;
 8005478:	6048      	str	r0, [r1, #4]
 800547a:	f8c3 c02c 	str.w	ip, [r3, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 800547e:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
    pqp = pqp->next;
 8005482:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8005484:	6895      	ldr	r5, [r2, #8]
 8005486:	42b5      	cmp	r5, r6
 8005488:	d2fb      	bcs.n	8005482 <usb_event.lto_priv.0+0x52>
  p->prev       = pqp->prev;
 800548a:	6855      	ldr	r5, [r2, #4]
 800548c:	4281      	cmp	r1, r0
 800548e:	e9c3 2500 	strd	r2, r5, [r3]
  p->prev->next = p;
 8005492:	602b      	str	r3, [r5, #0]
  pqp->prev     = p;
 8005494:	6053      	str	r3, [r2, #4]
 8005496:	d1ea      	bne.n	800546e <usb_event.lto_priv.0+0x3e>
  bqSuspendI(&sdup->obqueue);
 8005498:	2301      	movs	r3, #1
  return (bool)(qp->next != qp);
 800549a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800549c:	4853      	ldr	r0, [pc, #332]	; (80055ec <usb_event.lto_priv.0+0x1bc>)
 800549e:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 80054a2:	4281      	cmp	r1, r0
 80054a4:	d017      	beq.n	80054d6 <usb_event.lto_priv.0+0xa6>
 80054a6:	f06f 0c01 	mvn.w	ip, #1
 80054aa:	2700      	movs	r7, #0
 80054ac:	460b      	mov	r3, r1
  qp->next       = p->next;
 80054ae:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80054b0:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 80054b2:	689e      	ldr	r6, [r3, #8]
  qp->next       = p->next;
 80054b4:	6461      	str	r1, [r4, #68]	; 0x44
  qp->next->prev = qp;
 80054b6:	6048      	str	r0, [r1, #4]
 80054b8:	f8c3 c02c 	str.w	ip, [r3, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 80054bc:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
    pqp = pqp->next;
 80054c0:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80054c2:	6895      	ldr	r5, [r2, #8]
 80054c4:	42b5      	cmp	r5, r6
 80054c6:	d2fb      	bcs.n	80054c0 <usb_event.lto_priv.0+0x90>
  p->prev       = pqp->prev;
 80054c8:	6855      	ldr	r5, [r2, #4]
 80054ca:	4281      	cmp	r1, r0
 80054cc:	e9c3 2500 	strd	r2, r5, [r3]
  p->prev->next = p;
 80054d0:	602b      	str	r3, [r5, #0]
  pqp->prev     = p;
 80054d2:	6053      	str	r3, [r2, #4]
 80054d4:	d1ea      	bne.n	80054ac <usb_event.lto_priv.0+0x7c>
 80054d6:	2300      	movs	r3, #0
 80054d8:	f383 8811 	msr	BASEPRI, r3
}
 80054dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054de:	2330      	movs	r3, #48	; 0x30
 80054e0:	f383 8811 	msr	BASEPRI, r3
 80054e4:	4c3f      	ldr	r4, [pc, #252]	; (80055e4 <usb_event.lto_priv.0+0x1b4>)
 80054e6:	2101      	movs	r1, #1
 80054e8:	1d20      	adds	r0, r4, #4
 80054ea:	f7ff feb1 	bl	8005250 <chEvtBroadcastFlagsI>
  bqResumeX(&sdup->ibqueue);
 80054ee:	2300      	movs	r3, #0
 80054f0:	7523      	strb	r3, [r4, #20]
  bqResumeX(&sdup->obqueue);
 80054f2:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 80054f6:	f383 8811 	msr	BASEPRI, r3
 80054fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054fc:	4605      	mov	r5, r0
 80054fe:	2330      	movs	r3, #48	; 0x30
 8005500:	f383 8811 	msr	BASEPRI, r3
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 8005504:	2600      	movs	r6, #0
 8005506:	4a3a      	ldr	r2, [pc, #232]	; (80055f0 <usb_event.lto_priv.0+0x1c0>)
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 8005508:	4b3a      	ldr	r3, [pc, #232]	; (80055f4 <usb_event.lto_priv.0+0x1c4>)
  usbp->epc[ep] = epcp;
 800550a:	493b      	ldr	r1, [pc, #236]	; (80055f8 <usb_event.lto_priv.0+0x1c8>)
  ibqp->bcounter  = 0;
 800550c:	4c35      	ldr	r4, [pc, #212]	; (80055e4 <usb_event.lto_priv.0+0x1b4>)
 800550e:	6101      	str	r1, [r0, #16]
  usb_lld_init_endpoint(usbp, ep);
 8005510:	2101      	movs	r1, #1
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 8005512:	e9c2 6600 	strd	r6, r6, [r2]
 8005516:	e9c2 6602 	strd	r6, r6, [r2, #8]
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 800551a:	e9c3 6600 	strd	r6, r6, [r3]
 800551e:	e9c3 6602 	strd	r6, r6, [r3, #8]
  usb_lld_init_endpoint(usbp, ep);
 8005522:	f7fd f92d 	bl	8002780 <usb_lld_init_endpoint>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 8005526:	4b35      	ldr	r3, [pc, #212]	; (80055fc <usb_event.lto_priv.0+0x1cc>)
  usbp->epc[ep] = epcp;
 8005528:	4a35      	ldr	r2, [pc, #212]	; (8005600 <usb_event.lto_priv.0+0x1d0>)
  usb_lld_init_endpoint(usbp, ep);
 800552a:	4628      	mov	r0, r5
 800552c:	2102      	movs	r1, #2
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 800552e:	e9c3 6600 	strd	r6, r6, [r3]
  usbp->epc[ep] = epcp;
 8005532:	616a      	str	r2, [r5, #20]
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 8005534:	e9c3 6602 	strd	r6, r6, [r3, #8]
  usb_lld_init_endpoint(usbp, ep);
 8005538:	f7fd f922 	bl	8002780 <usb_lld_init_endpoint>
  return (bool)(qp->next != qp);
 800553c:	4620      	mov	r0, r4
 800553e:	f850 1f0c 	ldr.w	r1, [r0, #12]!
  ibqp->brdptr    = ibqp->buffers;
 8005542:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005544:	4281      	cmp	r1, r0
  ibqp->bwrptr    = ibqp->buffers;
 8005546:	e9c4 3307 	strd	r3, r3, [r4, #28]
  ibqp->top       = NULL;
 800554a:	e9c4 660d 	strd	r6, r6, [r4, #52]	; 0x34
  ibqp->bcounter  = 0;
 800554e:	61a6      	str	r6, [r4, #24]
 8005550:	d016      	beq.n	8005580 <usb_event.lto_priv.0+0x150>
 8005552:	f06f 0c01 	mvn.w	ip, #1
 8005556:	460b      	mov	r3, r1
  qp->next       = p->next;
 8005558:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800555a:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800555c:	689f      	ldr	r7, [r3, #8]
  qp->next       = p->next;
 800555e:	60e1      	str	r1, [r4, #12]
  qp->next->prev = qp;
 8005560:	6048      	str	r0, [r1, #4]
 8005562:	f8c3 c02c 	str.w	ip, [r3, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 8005566:	f883 6028 	strb.w	r6, [r3, #40]	; 0x28
    pqp = pqp->next;
 800556a:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800556c:	6895      	ldr	r5, [r2, #8]
 800556e:	42bd      	cmp	r5, r7
 8005570:	d2fb      	bcs.n	800556a <usb_event.lto_priv.0+0x13a>
  p->prev       = pqp->prev;
 8005572:	6855      	ldr	r5, [r2, #4]
 8005574:	4281      	cmp	r1, r0
 8005576:	e9c3 2500 	strd	r2, r5, [r3]
  p->prev->next = p;
 800557a:	602b      	str	r3, [r5, #0]
  pqp->prev     = p;
 800557c:	6053      	str	r3, [r2, #4]
 800557e:	d1ea      	bne.n	8005556 <usb_event.lto_priv.0+0x126>
  obqp->bcounter  = bqSizeX(obqp);
 8005580:	e9d4 2319 	ldrd	r2, r3, [r4, #100]	; 0x64
  bqResumeX(&sdup->ibqueue);
 8005584:	2700      	movs	r7, #0
  return (bool)(qp->next != qp);
 8005586:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005588:	4818      	ldr	r0, [pc, #96]	; (80055ec <usb_event.lto_priv.0+0x1bc>)
  obqp->bwrptr    = obqp->buffers;
 800558a:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 800558e:	4281      	cmp	r1, r0
  obqp->top       = NULL;
 8005590:	e9c4 771b 	strd	r7, r7, [r4, #108]	; 0x6c
  obqp->bcounter  = bqSizeX(obqp);
 8005594:	6522      	str	r2, [r4, #80]	; 0x50
 8005596:	7527      	strb	r7, [r4, #20]
 8005598:	d016      	beq.n	80055c8 <usb_event.lto_priv.0+0x198>
 800559a:	f06f 0c01 	mvn.w	ip, #1
 800559e:	460b      	mov	r3, r1
  qp->next       = p->next;
 80055a0:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80055a2:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 80055a4:	689e      	ldr	r6, [r3, #8]
  qp->next       = p->next;
 80055a6:	6461      	str	r1, [r4, #68]	; 0x44
  qp->next->prev = qp;
 80055a8:	6048      	str	r0, [r1, #4]
 80055aa:	f8c3 c02c 	str.w	ip, [r3, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 80055ae:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
    pqp = pqp->next;
 80055b2:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80055b4:	6895      	ldr	r5, [r2, #8]
 80055b6:	42b5      	cmp	r5, r6
 80055b8:	d2fb      	bcs.n	80055b2 <usb_event.lto_priv.0+0x182>
  p->prev       = pqp->prev;
 80055ba:	6855      	ldr	r5, [r2, #4]
 80055bc:	4281      	cmp	r1, r0
 80055be:	e9c3 2500 	strd	r2, r5, [r3]
  p->prev->next = p;
 80055c2:	602b      	str	r3, [r5, #0]
  pqp->prev     = p;
 80055c4:	6053      	str	r3, [r2, #4]
 80055c6:	d1ea      	bne.n	800559e <usb_event.lto_priv.0+0x16e>
  bqResumeX(&sdup->obqueue);
 80055c8:	2500      	movs	r5, #0
 80055ca:	4807      	ldr	r0, [pc, #28]	; (80055e8 <usb_event.lto_priv.0+0x1b8>)
 80055cc:	2101      	movs	r1, #1
 80055ce:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 80055d2:	f7ff fe3d 	bl	8005250 <chEvtBroadcastFlagsI>
  (void) sdu_start_receive(sdup);
 80055d6:	3804      	subs	r0, #4
 80055d8:	f00a fd8a 	bl	80100f0 <sdu_start_receive.isra.0>
 80055dc:	f385 8811 	msr	BASEPRI, r5
 80055e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055e2:	bf00      	nop
 80055e4:	20000b34 	.word	0x20000b34
 80055e8:	20000b38 	.word	0x20000b38
 80055ec:	20000b78 	.word	0x20000b78
 80055f0:	200011c0 	.word	0x200011c0
 80055f4:	200011d0 	.word	0x200011d0
 80055f8:	08011e30 	.word	0x08011e30
 80055fc:	200011e0 	.word	0x200011e0
 8005600:	08011e54 	.word	0x08011e54
	...

08005610 <evt_thread7>:
 8005610:	2330      	movs	r3, #48	; 0x30
static THD_FUNCTION(evt_thread7, p) {
 8005612:	b570      	push	{r4, r5, r6, lr}
 8005614:	f383 8811 	msr	BASEPRI, r3
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8005618:	4c15      	ldr	r4, [pc, #84]	; (8005670 <evt_thread7+0x60>)
  chEvtBroadcastFlagsI(esp, flags);
 800561a:	2100      	movs	r1, #0
 800561c:	4815      	ldr	r0, [pc, #84]	; (8005674 <evt_thread7+0x64>)
 800561e:	f7ff fe17 	bl	8005250 <chEvtBroadcastFlagsI>
 8005622:	6822      	ldr	r2, [r4, #0]
 8005624:	68e3      	ldr	r3, [r4, #12]
 8005626:	6892      	ldr	r2, [r2, #8]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	429a      	cmp	r2, r3
 800562c:	d901      	bls.n	8005632 <evt_thread7+0x22>
    __sch_reschedule_ahead();
 800562e:	f7fe fc17 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 8005632:	2500      	movs	r5, #0
 8005634:	f385 8811 	msr	BASEPRI, r5
 8005638:	2630      	movs	r6, #48	; 0x30
 800563a:	f386 8811 	msr	BASEPRI, r6
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800563e:	2164      	movs	r1, #100	; 0x64
 8005640:	2008      	movs	r0, #8
 8005642:	f7fd fb4d 	bl	8002ce0 <chSchGoSleepTimeoutS>
 8005646:	f385 8811 	msr	BASEPRI, r5
 800564a:	f386 8811 	msr	BASEPRI, r6
 800564e:	480a      	ldr	r0, [pc, #40]	; (8005678 <evt_thread7+0x68>)
 8005650:	4629      	mov	r1, r5
 8005652:	f7ff fdfd 	bl	8005250 <chEvtBroadcastFlagsI>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8005656:	6822      	ldr	r2, [r4, #0]
 8005658:	68e3      	ldr	r3, [r4, #12]
 800565a:	6892      	ldr	r2, [r2, #8]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	429a      	cmp	r2, r3
 8005660:	d901      	bls.n	8005666 <evt_thread7+0x56>
    __sch_reschedule_ahead();
 8005662:	f7fe fbfd 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 8005666:	2300      	movs	r3, #0
 8005668:	f383 8811 	msr	BASEPRI, r3
}
 800566c:	bd70      	pop	{r4, r5, r6, pc}
 800566e:	bf00      	nop
 8005670:	20001050 	.word	0x20001050
 8005674:	20000808 	.word	0x20000808
 8005678:	2000080c 	.word	0x2000080c
 800567c:	00000000 	.word	0x00000000

08005680 <chMBPostTimeout>:
 * @retval MSG_RESET    if the mailbox has been reset.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPostTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 8005680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005684:	2330      	movs	r3, #48	; 0x30
 8005686:	4604      	mov	r4, r0
 8005688:	4688      	mov	r8, r1
 800568a:	4617      	mov	r7, r2
 800568c:	f383 8811 	msr	BASEPRI, r3
  return __sch_get_currthread();
 8005690:	4d2c      	ldr	r5, [pc, #176]	; (8005744 <chMBPostTimeout+0xc4>)

      return MSG_OK;
    }

    /* No space in the queue, waiting for a slot to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8005692:	f100 0618 	add.w	r6, r0, #24
 8005696:	e009      	b.n	80056ac <chMBPostTimeout+0x2c>
  p->prev       = qp->prev;
 8005698:	69e0      	ldr	r0, [r4, #28]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800569a:	4639      	mov	r1, r7
 800569c:	e9c3 6000 	strd	r6, r0, [r3]
  p->prev->next = p;
 80056a0:	6003      	str	r3, [r0, #0]
 80056a2:	2004      	movs	r0, #4
  qp->prev      = p;
 80056a4:	61e3      	str	r3, [r4, #28]
 80056a6:	f7fd fb1b 	bl	8002ce0 <chSchGoSleepTimeoutS>
  } while (rdymsg == MSG_OK);
 80056aa:	b968      	cbnz	r0, 80056c8 <chMBPostTimeout+0x48>
    if (mbp->reset) {
 80056ac:	7d23      	ldrb	r3, [r4, #20]
 80056ae:	b983      	cbnz	r3, 80056d2 <chMBPostTimeout+0x52>
 */
static inline size_t chMBGetSizeI(const mailbox_t *mbp) {

  /*lint -save -e9033 [10.8] Perfectly safe pointers
    arithmetic.*/
  return (size_t)(mbp->top - mbp->buffer);
 80056b0:	e9d4 1200 	ldrd	r1, r2, [r4]
 */
static inline size_t chMBGetUsedCountI(const mailbox_t *mbp) {

  chDbgCheckClassI();

  return mbp->cnt;
 80056b4:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 80056b6:	1a50      	subs	r0, r2, r1
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 80056b8:	ebb3 0fa0 	cmp.w	r3, r0, asr #2
 80056bc:	d110      	bne.n	80056e0 <chMBPostTimeout+0x60>
 80056be:	68eb      	ldr	r3, [r5, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 80056c0:	2f00      	cmp	r7, #0
 80056c2:	d1e9      	bne.n	8005698 <chMBPostTimeout+0x18>
    return MSG_TIMEOUT;
 80056c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056c8:	2300      	movs	r3, #0
 80056ca:	f383 8811 	msr	BASEPRI, r3
}
 80056ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return MSG_RESET;
 80056d2:	f06f 0001 	mvn.w	r0, #1
 80056d6:	2300      	movs	r3, #0
 80056d8:	f383 8811 	msr	BASEPRI, r3
}
 80056dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *mbp->wrptr++ = msg;
 80056e0:	68a5      	ldr	r5, [r4, #8]
      mbp->cnt++;
 80056e2:	3301      	adds	r3, #1
      *mbp->wrptr++ = msg;
 80056e4:	1d28      	adds	r0, r5, #4
      if (mbp->wrptr >= mbp->top) {
 80056e6:	4282      	cmp	r2, r0
  return (bool)(qp->next != qp);
 80056e8:	6a22      	ldr	r2, [r4, #32]
      *mbp->wrptr++ = msg;
 80056ea:	60a0      	str	r0, [r4, #8]
 80056ec:	f8c5 8000 	str.w	r8, [r5]
        mbp->wrptr = mbp->buffer;
 80056f0:	bf98      	it	ls
 80056f2:	60a1      	strls	r1, [r4, #8]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 80056f4:	f104 0120 	add.w	r1, r4, #32
  if (ch_queue_notempty(&tqp->queue)) {
 80056f8:	4291      	cmp	r1, r2
      mbp->cnt++;
 80056fa:	6123      	str	r3, [r4, #16]
 80056fc:	d011      	beq.n	8005722 <chMBPostTimeout+0xa2>
  tp->u.rdymsg = msg;
 80056fe:	2000      	movs	r0, #0
  qp->next       = p->next;
 8005700:	6815      	ldr	r5, [r2, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8005702:	6993      	ldr	r3, [r2, #24]
 8005704:	6225      	str	r5, [r4, #32]
  } while (unlikely(pqp->prio >= p->prio));
 8005706:	6894      	ldr	r4, [r2, #8]
  qp->next->prev = qp;
 8005708:	6069      	str	r1, [r5, #4]
 800570a:	62d0      	str	r0, [r2, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 800570c:	f882 0028 	strb.w	r0, [r2, #40]	; 0x28
    pqp = pqp->next;
 8005710:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8005712:	6899      	ldr	r1, [r3, #8]
 8005714:	42a1      	cmp	r1, r4
 8005716:	d2fb      	bcs.n	8005710 <chMBPostTimeout+0x90>
  p->prev       = pqp->prev;
 8005718:	6859      	ldr	r1, [r3, #4]
 800571a:	e9c2 3100 	strd	r3, r1, [r2]
  p->prev->next = p;
 800571e:	600a      	str	r2, [r1, #0]
  pqp->prev     = p;
 8005720:	605a      	str	r2, [r3, #4]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8005722:	4b08      	ldr	r3, [pc, #32]	; (8005744 <chMBPostTimeout+0xc4>)
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	6892      	ldr	r2, [r2, #8]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	429a      	cmp	r2, r3
 800572e:	d907      	bls.n	8005740 <chMBPostTimeout+0xc0>
    __sch_reschedule_ahead();
 8005730:	f7fe fb96 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
      return MSG_OK;
 8005734:	2000      	movs	r0, #0
 8005736:	2300      	movs	r3, #0
 8005738:	f383 8811 	msr	BASEPRI, r3
}
 800573c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return MSG_OK;
 8005740:	2000      	movs	r0, #0
 8005742:	e7c1      	b.n	80056c8 <chMBPostTimeout+0x48>
 8005744:	20001050 	.word	0x20001050
	...

08005750 <chMBFetchTimeoutS>:
 * @retval MSG_RESET    if the mailbox has been reset.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @sclass
 */
msg_t chMBFetchTimeoutS(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 8005750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005754:	4604      	mov	r4, r0
 8005756:	460f      	mov	r7, r1
 8005758:	4690      	mov	r8, r2
  return __sch_get_currthread();
 800575a:	4e25      	ldr	r6, [pc, #148]	; (80057f0 <chMBFetchTimeoutS+0xa0>)

      return MSG_OK;
    }

    /* No message in the queue, waiting for a message to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 800575c:	f100 0520 	add.w	r5, r0, #32
 8005760:	e00c      	b.n	800577c <chMBFetchTimeoutS+0x2c>
  return mbp->cnt;
 8005762:	6923      	ldr	r3, [r4, #16]
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
 8005764:	b98b      	cbnz	r3, 800578a <chMBFetchTimeoutS+0x3a>
  p->prev       = qp->prev;
 8005766:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005768:	68f3      	ldr	r3, [r6, #12]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800576a:	4641      	mov	r1, r8
 800576c:	e9c3 5000 	strd	r5, r0, [r3]
  p->prev->next = p;
 8005770:	6003      	str	r3, [r0, #0]
 8005772:	2004      	movs	r0, #4
  qp->prev      = p;
 8005774:	6263      	str	r3, [r4, #36]	; 0x24
 8005776:	f7fd fab3 	bl	8002ce0 <chSchGoSleepTimeoutS>
  } while (rdymsg == MSG_OK);
 800577a:	b920      	cbnz	r0, 8005786 <chMBFetchTimeoutS+0x36>
    if (mbp->reset) {
 800577c:	7d23      	ldrb	r3, [r4, #20]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d0ef      	beq.n	8005762 <chMBFetchTimeoutS+0x12>
      return MSG_RESET;
 8005782:	f06f 0001 	mvn.w	r0, #1

  return rdymsg;
}
 8005786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *msgp = *mbp->rdptr++;
 800578a:	68e1      	ldr	r1, [r4, #12]
      mbp->cnt--;
 800578c:	3b01      	subs	r3, #1
      *msgp = *mbp->rdptr++;
 800578e:	1d0a      	adds	r2, r1, #4
 8005790:	6809      	ldr	r1, [r1, #0]
 8005792:	60e2      	str	r2, [r4, #12]
 8005794:	6039      	str	r1, [r7, #0]
      if (mbp->rdptr >= mbp->top) {
 8005796:	6861      	ldr	r1, [r4, #4]
      mbp->cnt--;
 8005798:	6123      	str	r3, [r4, #16]
      if (mbp->rdptr >= mbp->top) {
 800579a:	428a      	cmp	r2, r1
        mbp->rdptr = mbp->buffer;
 800579c:	bf28      	it	cs
 800579e:	6822      	ldrcs	r2, [r4, #0]
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 80057a0:	f104 0118 	add.w	r1, r4, #24
        mbp->rdptr = mbp->buffer;
 80057a4:	bf28      	it	cs
 80057a6:	60e2      	strcs	r2, [r4, #12]
  return (bool)(qp->next != qp);
 80057a8:	69a2      	ldr	r2, [r4, #24]
  if (ch_queue_notempty(&tqp->queue)) {
 80057aa:	4291      	cmp	r1, r2
 80057ac:	d011      	beq.n	80057d2 <chMBFetchTimeoutS+0x82>
  tp->u.rdymsg = msg;
 80057ae:	2000      	movs	r0, #0
  qp->next       = p->next;
 80057b0:	6815      	ldr	r5, [r2, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80057b2:	6993      	ldr	r3, [r2, #24]
 80057b4:	61a5      	str	r5, [r4, #24]
  } while (unlikely(pqp->prio >= p->prio));
 80057b6:	6894      	ldr	r4, [r2, #8]
  qp->next->prev = qp;
 80057b8:	6069      	str	r1, [r5, #4]
 80057ba:	62d0      	str	r0, [r2, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 80057bc:	f882 0028 	strb.w	r0, [r2, #40]	; 0x28
    pqp = pqp->next;
 80057c0:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80057c2:	6899      	ldr	r1, [r3, #8]
 80057c4:	42a1      	cmp	r1, r4
 80057c6:	d2fb      	bcs.n	80057c0 <chMBFetchTimeoutS+0x70>
  p->prev       = pqp->prev;
 80057c8:	6859      	ldr	r1, [r3, #4]
 80057ca:	e9c2 3100 	strd	r3, r1, [r2]
  p->prev->next = p;
 80057ce:	600a      	str	r2, [r1, #0]
  pqp->prev     = p;
 80057d0:	605a      	str	r2, [r3, #4]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 80057d2:	4b07      	ldr	r3, [pc, #28]	; (80057f0 <chMBFetchTimeoutS+0xa0>)
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	6892      	ldr	r2, [r2, #8]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d904      	bls.n	80057ea <chMBFetchTimeoutS+0x9a>
    __sch_reschedule_ahead();
 80057e0:	f7fe fb3e 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
      return MSG_OK;
 80057e4:	2000      	movs	r0, #0
}
 80057e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return MSG_OK;
 80057ea:	2000      	movs	r0, #0
 80057ec:	e7cb      	b.n	8005786 <chMBFetchTimeoutS+0x36>
 80057ee:	bf00      	nop
 80057f0:	20001050 	.word	0x20001050
	...

08005800 <chHeapAllocAligned>:
 * @return              A pointer to the aligned allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 8005800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  chDbgCheck((size > 0U) && MEM_IS_VALID_ALIGNMENT(align));

  /* If an heap is not specified then the default system header is used.*/
  if (heapp == NULL) {
    heapp = &default_heap;
 8005804:	4e39      	ldr	r6, [pc, #228]	; (80058ec <chHeapAllocAligned+0xec>)
  if (align < CH_HEAP_ALIGNMENT) {
    align = CH_HEAP_ALIGNMENT;
  }

  /* Size is converted in number of elementary allocation units.*/
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8005806:	1dcf      	adds	r7, r1, #7
    heapp = &default_heap;
 8005808:	2800      	cmp	r0, #0
 800580a:	bf18      	it	ne
 800580c:	4606      	movne	r6, r0
 800580e:	2330      	movs	r3, #48	; 0x30
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 8005810:	460d      	mov	r5, r1
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8005812:	08ff      	lsrs	r7, r7, #3

  /* Taking heap mutex.*/
  H_LOCK(heapp);
 8005814:	f106 0814 	add.w	r8, r6, #20
 8005818:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(mp);
 800581c:	4640      	mov	r0, r8
 800581e:	f7ff f9af 	bl	8004b80 <chMtxLockS>
 8005822:	2300      	movs	r3, #0
 8005824:	f383 8811 	msr	BASEPRI, r3

  /* Start of the free blocks list.*/
  qp = &heapp->header;
  while (H_FREE_NEXT(qp) != NULL) {
 8005828:	68f3      	ldr	r3, [r6, #12]
 800582a:	f106 010c 	add.w	r1, r6, #12
 800582e:	b90b      	cbnz	r3, 8005834 <chHeapAllocAligned+0x34>
 8005830:	e018      	b.n	8005864 <chHeapAllocAligned+0x64>
 8005832:	4613      	mov	r3, r2
    hp = H_FREE_NEXT(qp);

    /* Pointer aligned to the requested alignment.*/
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;

    if ((ahp < H_FREE_LIMIT(hp)) && (pages <= NPAGES(H_FREE_LIMIT(hp), ahp + 1U))) {
 8005834:	6858      	ldr	r0, [r3, #4]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8005836:	f103 0c0f 	add.w	ip, r3, #15
 800583a:	f02c 0c07 	bic.w	ip, ip, #7
    if ((ahp < H_FREE_LIMIT(hp)) && (pages <= NPAGES(H_FREE_LIMIT(hp), ahp + 1U))) {
 800583e:	1c42      	adds	r2, r0, #1
 8005840:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8005844:	f1ac 0e08 	sub.w	lr, ip, #8
    if ((ahp < H_FREE_LIMIT(hp)) && (pages <= NPAGES(H_FREE_LIMIT(hp), ahp + 1U))) {
 8005848:	4572      	cmp	r2, lr
 800584a:	d907      	bls.n	800585c <chHeapAllocAligned+0x5c>
 800584c:	4664      	mov	r4, ip
 800584e:	eba2 0c0c 	sub.w	ip, r2, ip
 8005852:	ebb7 0fec 	cmp.w	r7, ip, asr #3
 8005856:	ea4f 09ec 	mov.w	r9, ip, asr #3
 800585a:	d913      	bls.n	8005884 <chHeapAllocAligned+0x84>
  while (H_FREE_NEXT(qp) != NULL) {
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	4619      	mov	r1, r3
 8005860:	2a00      	cmp	r2, #0
 8005862:	d1e6      	bne.n	8005832 <chHeapAllocAligned+0x32>
    /* Next in the free blocks list.*/
    qp = hp;
  }

  /* Releasing heap mutex.*/
  H_UNLOCK(heapp);
 8005864:	4640      	mov	r0, r8
 8005866:	f7ff fa23 	bl	8004cb0 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->provider != NULL) {
 800586a:	6834      	ldr	r4, [r6, #0]
 800586c:	b13c      	cbz	r4, 800587e <chHeapAllocAligned+0x7e>
    ahp = heapp->provider(pages * CH_HEAP_ALIGNMENT,
 800586e:	2208      	movs	r2, #8
 8005870:	00f8      	lsls	r0, r7, #3
 8005872:	4611      	mov	r1, r2
 8005874:	47a0      	blx	r4
                          align,
                          sizeof (heap_header_t));
    if (ahp != NULL) {
 8005876:	4604      	mov	r4, r0
 8005878:	b108      	cbz	r0, 800587e <chHeapAllocAligned+0x7e>
      hp = ahp - 1U;
      H_USED_HEAP(hp) = heapp;
      H_USED_SIZE(hp) = size;
 800587a:	e940 6502 	strd	r6, r5, [r0, #-8]
      /*lint -restore*/
    }
  }

  return NULL;
}
 800587e:	4620      	mov	r0, r4
 8005880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (ahp > hp) {
 8005884:	4573      	cmp	r3, lr
 8005886:	d318      	bcc.n	80058ba <chHeapAllocAligned+0xba>
        if (H_FREE_PAGES(hp) == pages) {
 8005888:	42b8      	cmp	r0, r7
 800588a:	d029      	beq.n	80058e0 <chHeapAllocAligned+0xe0>
      return (void *)H_BLOCK(hp);
 800588c:	469e      	mov	lr, r3
          fp = H_BLOCK(hp) + pages;
 800588e:	3701      	adds	r7, #1
 8005890:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
          H_FREE_PAGES(fp) = NPAGES(H_FREE_LIMIT(hp), H_BLOCK(fp));
 8005894:	f104 0008 	add.w	r0, r4, #8
 8005898:	1a12      	subs	r2, r2, r0
          H_FREE_NEXT(fp) = H_FREE_NEXT(hp);
 800589a:	6818      	ldr	r0, [r3, #0]
          H_FREE_PAGES(fp) = NPAGES(H_FREE_LIMIT(hp), H_BLOCK(fp));
 800589c:	10d2      	asrs	r2, r2, #3
          H_FREE_NEXT(fp) = H_FREE_NEXT(hp);
 800589e:	f843 0037 	str.w	r0, [r3, r7, lsl #3]
          H_FREE_PAGES(fp) = NPAGES(H_FREE_LIMIT(hp), H_BLOCK(fp));
 80058a2:	6062      	str	r2, [r4, #4]
          H_FREE_NEXT(qp) = fp;
 80058a4:	600c      	str	r4, [r1, #0]
      return (void *)H_BLOCK(hp);
 80058a6:	f103 0408 	add.w	r4, r3, #8
      H_UNLOCK(heapp);
 80058aa:	4640      	mov	r0, r8
      H_USED_HEAP(hp) = heapp;
 80058ac:	e9ce 6500 	strd	r6, r5, [lr]
      H_UNLOCK(heapp);
 80058b0:	f7ff f9fe 	bl	8004cb0 <chMtxUnlock>
}
 80058b4:	4620      	mov	r0, r4
 80058b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        H_FREE_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 80058ba:	f103 0208 	add.w	r2, r3, #8
 80058be:	ebae 0202 	sub.w	r2, lr, r2
 80058c2:	10d2      	asrs	r2, r2, #3
        if (bpages > pages) {
 80058c4:	45b9      	cmp	r9, r7
        H_FREE_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 80058c6:	605a      	str	r2, [r3, #4]
        if (bpages > pages) {
 80058c8:	d9ef      	bls.n	80058aa <chHeapAllocAligned+0xaa>
          H_FREE_PAGES(fp) = (bpages - pages) - 1U;
 80058ca:	43fa      	mvns	r2, r7
          H_FREE_NEXT(fp) = H_FREE_NEXT(hp);
 80058cc:	6818      	ldr	r0, [r3, #0]
          fp = H_BLOCK(ahp) + pages;
 80058ce:	3701      	adds	r7, #1
 80058d0:	eb0e 01c7 	add.w	r1, lr, r7, lsl #3
          H_FREE_PAGES(fp) = (bpages - pages) - 1U;
 80058d4:	444a      	add	r2, r9
 80058d6:	604a      	str	r2, [r1, #4]
          H_FREE_NEXT(fp) = H_FREE_NEXT(hp);
 80058d8:	f84e 0037 	str.w	r0, [lr, r7, lsl #3]
          H_FREE_NEXT(hp) = fp;
 80058dc:	6019      	str	r1, [r3, #0]
 80058de:	e7e4      	b.n	80058aa <chHeapAllocAligned+0xaa>
          H_FREE_NEXT(qp) = H_FREE_NEXT(hp);
 80058e0:	461c      	mov	r4, r3
 80058e2:	469e      	mov	lr, r3
 80058e4:	f854 3b08 	ldr.w	r3, [r4], #8
 80058e8:	600b      	str	r3, [r1, #0]
 80058ea:	e7de      	b.n	80058aa <chHeapAllocAligned+0xaa>
 80058ec:	2000111c 	.word	0x2000111c

080058f0 <chThdCreateFromHeap>:
 *
 * @api
 */
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
                              const char *name, tprio_t prio,
                              tfunc_t pf, void *arg) {
 80058f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058f2:	4617      	mov	r7, r2
 80058f4:	b087      	sub	sp, #28
  thread_t *tp;
  void *wbase, *wend;

  wbase = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 80058f6:	2208      	movs	r2, #8
                              tfunc_t pf, void *arg) {
 80058f8:	460d      	mov	r5, r1
 80058fa:	461e      	mov	r6, r3
  wbase = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 80058fc:	f7ff ff80 	bl	8005800 <chHeapAllocAligned>
  if (wbase == NULL) {
 8005900:	4604      	mov	r4, r0
 8005902:	b1c0      	cbz	r0, 8005936 <chThdCreateFromHeap+0x46>
    return NULL;
  }
  wend = (void *)((uint8_t *)wbase + size);

  thread_descriptor_t td = THD_DESCRIPTOR(name, wbase, wend, prio, pf, arg);
 8005904:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  wend = (void *)((uint8_t *)wbase + size);
 8005906:	4405      	add	r5, r0
  thread_descriptor_t td = THD_DESCRIPTOR(name, wbase, wend, prio, pf, arg);
 8005908:	9304      	str	r3, [sp, #16]
 800590a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800590c:	9502      	str	r5, [sp, #8]
 800590e:	9305      	str	r3, [sp, #20]
 8005910:	e9cd 7000 	strd	r7, r0, [sp]
 8005914:	9603      	str	r6, [sp, #12]
 8005916:	2330      	movs	r3, #48	; 0x30
 8005918:	f383 8811 	msr	BASEPRI, r3
#if CH_DBG_FILL_THREADS == TRUE
  __thd_stackfill((uint8_t *)wbase, (uint8_t *)wend);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 800591c:	4668      	mov	r0, sp
 800591e:	f7fe fe4f 	bl	80045c0 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_HEAP;
 8005922:	2301      	movs	r3, #1
  chSchWakeupS(tp, MSG_OK);
 8005924:	2100      	movs	r1, #0
  tp->flags = CH_FLAG_MODE_HEAP;
 8005926:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
  tp = chThdCreateSuspendedI(&td);
 800592a:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 800592c:	f7fe fd18 	bl	8004360 <chSchWakeupS>
 8005930:	2300      	movs	r3, #0
 8005932:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 8005936:	4620      	mov	r0, r4
 8005938:	b007      	add	sp, #28
 800593a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800593c:	0000      	movs	r0, r0
	...

08005940 <chHeapFree>:
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 8005940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
  /*lint -restore*/
  heapp = H_USED_HEAP(hp);
 8005942:	e950 7302 	ldrd	r7, r3, [r0, #-8]
#if CH_CFG_HARDENING_LEVEL > 0
  memset((void *)p, 0, MEM_ALIGN_NEXT(H_USED_SIZE(hp), CH_HEAP_ALIGNMENT));
#endif

  /* Size is converted in number of elementary allocation units.*/
  H_FREE_PAGES(hp) = MEM_ALIGN_NEXT(H_USED_SIZE(hp),
 8005946:	3307      	adds	r3, #7
                                    CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8005948:	08db      	lsrs	r3, r3, #3
  qp = &heapp->header;
 800594a:	f107 050c 	add.w	r5, r7, #12
 800594e:	2230      	movs	r2, #48	; 0x30
void chHeapFree(void *p) {
 8005950:	4606      	mov	r6, r0
  H_FREE_PAGES(hp) = MEM_ALIGN_NEXT(H_USED_SIZE(hp),
 8005952:	f840 3c04 	str.w	r3, [r0, #-4]

  /* Taking heap mutex.*/
  H_LOCK(heapp);
 8005956:	3714      	adds	r7, #20
  hp = (heap_header_t *)p - 1U;
 8005958:	f1a0 0408 	sub.w	r4, r0, #8
 800595c:	f382 8811 	msr	BASEPRI, r2
 8005960:	4638      	mov	r0, r7
 8005962:	f7ff f90d 	bl	8004b80 <chMtxLockS>
 8005966:	2300      	movs	r3, #0
 8005968:	f383 8811 	msr	BASEPRI, r3
  qp = &heapp->header;
 800596c:	462b      	mov	r3, r5

  while (true) {
    chDbgAssert((hp < qp) || (hp >= H_FREE_LIMIT(qp)), "within free block");

    if (((qp == &heapp->header) || (hp > qp)) &&
 800596e:	429d      	cmp	r5, r3
        ((H_FREE_NEXT(qp) == NULL) || (hp < H_FREE_NEXT(qp)))) {
 8005970:	681a      	ldr	r2, [r3, #0]
    if (((qp == &heapp->header) || (hp > qp)) &&
 8005972:	d001      	beq.n	8005978 <chHeapFree+0x38>
 8005974:	42a3      	cmp	r3, r4
 8005976:	d202      	bcs.n	800597e <chHeapFree+0x3e>
 8005978:	b11a      	cbz	r2, 8005982 <chHeapFree+0x42>
        ((H_FREE_NEXT(qp) == NULL) || (hp < H_FREE_NEXT(qp)))) {
 800597a:	4294      	cmp	r4, r2
 800597c:	d301      	bcc.n	8005982 <chHeapFree+0x42>
        H_FREE_PAGES(qp) += H_FREE_PAGES(hp) + 1U;
        H_FREE_NEXT(qp) = H_FREE_NEXT(hp);
      }
      break;
    }
    qp = H_FREE_NEXT(qp);
 800597e:	4613      	mov	r3, r2
    chDbgAssert((hp < qp) || (hp >= H_FREE_LIMIT(qp)), "within free block");
 8005980:	e7f5      	b.n	800596e <chHeapFree+0x2e>
      H_FREE_NEXT(hp) = H_FREE_NEXT(qp);
 8005982:	f846 2c08 	str.w	r2, [r6, #-8]
      if (H_FREE_LIMIT(hp) == H_FREE_NEXT(hp)) {
 8005986:	f856 2c04 	ldr.w	r2, [r6, #-4]
      H_FREE_NEXT(qp) = hp;
 800598a:	601c      	str	r4, [r3, #0]
      if (H_FREE_LIMIT(hp) == H_FREE_NEXT(hp)) {
 800598c:	f856 1c08 	ldr.w	r1, [r6, #-8]
 8005990:	3201      	adds	r2, #1
 8005992:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 8005996:	4281      	cmp	r1, r0
 8005998:	d00a      	beq.n	80059b0 <chHeapFree+0x70>
      if ((H_FREE_LIMIT(qp) == hp)) {
 800599a:	6859      	ldr	r1, [r3, #4]
 800599c:	1c4a      	adds	r2, r1, #1
 800599e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80059a2:	4294      	cmp	r4, r2
 80059a4:	d011      	beq.n	80059ca <chHeapFree+0x8a>
  }

  /* Releasing heap mutex.*/
  H_UNLOCK(heapp);
 80059a6:	4638      	mov	r0, r7

  return;
}
 80059a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  H_UNLOCK(heapp);
 80059ac:	f7ff b980 	b.w	8004cb0 <chMtxUnlock>
        H_FREE_PAGES(hp) += H_FREE_PAGES(H_FREE_NEXT(hp)) + 1U;
 80059b0:	6848      	ldr	r0, [r1, #4]
 80059b2:	4402      	add	r2, r0
 80059b4:	f846 2c04 	str.w	r2, [r6, #-4]
        H_FREE_NEXT(hp) = H_FREE_NEXT(H_FREE_NEXT(hp));
 80059b8:	680a      	ldr	r2, [r1, #0]
      if ((H_FREE_LIMIT(qp) == hp)) {
 80059ba:	6859      	ldr	r1, [r3, #4]
        H_FREE_NEXT(hp) = H_FREE_NEXT(H_FREE_NEXT(hp));
 80059bc:	f846 2c08 	str.w	r2, [r6, #-8]
      if ((H_FREE_LIMIT(qp) == hp)) {
 80059c0:	1c4a      	adds	r2, r1, #1
 80059c2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80059c6:	4294      	cmp	r4, r2
 80059c8:	d1ed      	bne.n	80059a6 <chHeapFree+0x66>
        H_FREE_NEXT(qp) = H_FREE_NEXT(hp);
 80059ca:	e956 0202 	ldrd	r0, r2, [r6, #-8]
        H_FREE_PAGES(qp) += H_FREE_PAGES(hp) + 1U;
 80059ce:	3201      	adds	r2, #1
 80059d0:	4411      	add	r1, r2
        H_FREE_NEXT(qp) = H_FREE_NEXT(hp);
 80059d2:	e9c3 0100 	strd	r0, r1, [r3]
  H_UNLOCK(heapp);
 80059d6:	4638      	mov	r0, r7
}
 80059d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  H_UNLOCK(heapp);
 80059dc:	f7ff b968 	b.w	8004cb0 <chMtxUnlock>

080059e0 <chThdRelease.part.0>:
  p->prev->next = p->next;
 80059e0:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
 80059e4:	2100      	movs	r1, #0
 80059e6:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 80059e8:	605a      	str	r2, [r3, #4]
 80059ea:	f381 8811 	msr	BASEPRI, r1
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 80059ee:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80059f2:	f003 0303 	and.w	r3, r3, #3
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d00d      	beq.n	8005a16 <chThdRelease.part.0+0x36>
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d10a      	bne.n	8005a14 <chThdRelease.part.0+0x34>
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 80059fe:	6c83      	ldr	r3, [r0, #72]	; 0x48
  return tp->wabase;
 8005a00:	6a02      	ldr	r2, [r0, #32]
 8005a02:	2030      	movs	r0, #48	; 0x30
 8005a04:	f380 8811 	msr	BASEPRI, r0
  chDbgCheckClassI();
  chDbgCheck((mp != NULL) &&
             (objp != NULL) &&
             MEM_IS_ALIGNED(objp, mp->align));

  php->next = mp->next;
 8005a08:	6818      	ldr	r0, [r3, #0]
 8005a0a:	6010      	str	r0, [r2, #0]
  mp->next = php;
 8005a0c:	601a      	str	r2, [r3, #0]
 8005a0e:	f381 8811 	msr	BASEPRI, r1
}
 8005a12:	4770      	bx	lr
 8005a14:	4770      	bx	lr
      chHeapFree(chThdGetWorkingAreaX(tp));
 8005a16:	6a00      	ldr	r0, [r0, #32]
 8005a18:	f7ff bf92 	b.w	8005940 <chHeapFree>
 8005a1c:	0000      	movs	r0, r0
	...

08005a20 <chThdWait>:
msg_t chThdWait(thread_t *tp) {
 8005a20:	b538      	push	{r3, r4, r5, lr}
  return __sch_get_currthread();
 8005a22:	4b1b      	ldr	r3, [pc, #108]	; (8005a90 <chThdWait+0x70>)
 8005a24:	2130      	movs	r1, #48	; 0x30
 8005a26:	4604      	mov	r4, r0
 8005a28:	68da      	ldr	r2, [r3, #12]
 8005a2a:	f381 8811 	msr	BASEPRI, r1
  if (likely(tp->state != CH_STATE_FINAL)) {
 8005a2e:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
 8005a32:	290f      	cmp	r1, #15
 8005a34:	d011      	beq.n	8005a5a <chThdWait+0x3a>
  otp->state = newstate;
 8005a36:	f04f 0c09 	mov.w	ip, #9
  ntp->state = CH_STATE_CURRENT;
 8005a3a:	2501      	movs	r5, #1
  p->next = lp->next;
 8005a3c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8005a3e:	6011      	str	r1, [r2, #0]
  thread_t *otp = __instance_get_currthread(oip);
 8005a40:	68d9      	ldr	r1, [r3, #12]
  lp->next = p;
 8005a42:	6302      	str	r2, [r0, #48]	; 0x30
  ch_priority_queue_t *p = pqp->next;
 8005a44:	6818      	ldr	r0, [r3, #0]
  otp->state = newstate;
 8005a46:	f881 c028 	strb.w	ip, [r1, #40]	; 0x28
  pqp->next       = p->next;
 8005a4a:	6802      	ldr	r2, [r0, #0]
  pqp->next->prev = pqp;
 8005a4c:	6053      	str	r3, [r2, #4]
  pqp->next       = p->next;
 8005a4e:	601a      	str	r2, [r3, #0]
  ntp->state = CH_STATE_CURRENT;
 8005a50:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
  __instance_set_currthread(oip, ntp);
 8005a54:	60d8      	str	r0, [r3, #12]
  chSysSwitch(ntp, otp);
 8005a56:	f7fa fbf3 	bl	8000240 <__port_switch>
 8005a5a:	2200      	movs	r2, #0
  msg = tp->u.exitcode;
 8005a5c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8005a5e:	f382 8811 	msr	BASEPRI, r2
 8005a62:	2330      	movs	r3, #48	; 0x30
 8005a64:	f383 8811 	msr	BASEPRI, r3
  tp->refs--;
 8005a68:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 8005a72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005a74:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8005a78:	2b0f      	cmp	r3, #15
 8005a7a:	d003      	beq.n	8005a84 <chThdWait+0x64>
 8005a7c:	f382 8811 	msr	BASEPRI, r2
}
 8005a80:	4628      	mov	r0, r5
 8005a82:	bd38      	pop	{r3, r4, r5, pc}
 8005a84:	4620      	mov	r0, r4
 8005a86:	f7ff ffab 	bl	80059e0 <chThdRelease.part.0>
 8005a8a:	4628      	mov	r0, r5
 8005a8c:	bd38      	pop	{r3, r4, r5, pc}
 8005a8e:	bf00      	nop
 8005a90:	20001050 	.word	0x20001050
	...

08005aa0 <rt_test_006_001_execute>:

static void rt_test_006_001_execute(void) {
 8005aa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  msg_t msg;

  /* [6.1.1] The function chThdSuspendTimeoutS() is invoked, the thread
     is remotely resumed with message @p MSG_OK. On return the message
     and the state of the reference are tested.*/
  test_set_step(1);
 8005aa4:	f04f 0901 	mov.w	r9, #1
 8005aa8:	4d38      	ldr	r5, [pc, #224]	; (8005b8c <rt_test_006_001_execute+0xec>)
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 8005aaa:	4b39      	ldr	r3, [pc, #228]	; (8005b90 <rt_test_006_001_execute+0xf0>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 8005aac:	68ea      	ldr	r2, [r5, #12]
static void rt_test_006_001_execute(void) {
 8005aae:	b083      	sub	sp, #12
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 8005ab0:	6892      	ldr	r2, [r2, #8]
  test_set_step(1);
 8005ab2:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8005b94 <rt_test_006_001_execute+0xf4>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 8005ab6:	9300      	str	r3, [sp, #0]
 8005ab8:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8005abc:	4b36      	ldr	r3, [pc, #216]	; (8005b98 <rt_test_006_001_execute+0xf8>)
 8005abe:	3a01      	subs	r2, #1
 8005ac0:	4836      	ldr	r0, [pc, #216]	; (8005b9c <rt_test_006_001_execute+0xfc>)
  test_set_step(1);
 8005ac2:	f8c8 9000 	str.w	r9, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 8005ac6:	f7fe fdc3 	bl	8004650 <chThdCreateStatic>
 8005aca:	4c35      	ldr	r4, [pc, #212]	; (8005ba0 <rt_test_006_001_execute+0x100>)
 8005acc:	2330      	movs	r3, #48	; 0x30
 8005ace:	6020      	str	r0, [r4, #0]
 8005ad0:	f383 8811 	msr	BASEPRI, r3
  otp->state = newstate;
 8005ad4:	2303      	movs	r3, #3
  return __sch_get_currthread();
 8005ad6:	68ee      	ldr	r6, [r5, #12]
  ch_priority_queue_t *p = pqp->next;
 8005ad8:	6828      	ldr	r0, [r5, #0]
 8005ada:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
  pqp->next       = p->next;
 8005ade:	6803      	ldr	r3, [r0, #0]
  *trp = tp;
 8005ae0:	4f30      	ldr	r7, [pc, #192]	; (8005ba4 <rt_test_006_001_execute+0x104>)
  chSysSwitch(ntp, otp);
 8005ae2:	4631      	mov	r1, r6
  tp->u.wttrp = trp;
 8005ae4:	62f7      	str	r7, [r6, #44]	; 0x2c
 8005ae6:	602b      	str	r3, [r5, #0]
  pqp->next->prev = pqp;
 8005ae8:	605d      	str	r5, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8005aea:	f880 9028 	strb.w	r9, [r0, #40]	; 0x28
  *trp = tp;
 8005aee:	603e      	str	r6, [r7, #0]
  __instance_set_currthread(oip, ntp);
 8005af0:	60e8      	str	r0, [r5, #12]
  chSysSwitch(ntp, otp);
 8005af2:	f7fa fba5 	bl	8000240 <__port_switch>
 8005af6:	2300      	movs	r3, #0
  return tp->u.rdymsg;
 8005af8:	6af6      	ldr	r6, [r6, #44]	; 0x2c
 8005afa:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	bb93      	cbnz	r3, 8005b68 <rt_test_006_001_execute+0xc8>
 8005b02:	bb3e      	cbnz	r6, 8005b54 <rt_test_006_001_execute+0xb4>
 8005b04:	f104 0914 	add.w	r9, r4, #20
 */
void test_wait_threads(void) {
  unsigned i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 8005b08:	f854 0b04 	ldr.w	r0, [r4], #4
 8005b0c:	b118      	cbz	r0, 8005b16 <rt_test_006_001_execute+0x76>
      chThdWait(threads[i]);
 8005b0e:	f7ff ff87 	bl	8005a20 <chThdWait>
      threads[i] = NULL;
 8005b12:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8005b16:	45a1      	cmp	r9, r4
 8005b18:	d1f6      	bne.n	8005b08 <rt_test_006_001_execute+0x68>
  test_end_step(1);

  /* [6.1.2] The function chThdSuspendTimeoutS() is invoked, the thread
     is not resumed so a timeout must occur. On return the message and
     the state of the reference are tested.*/
  test_set_step(2);
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	2330      	movs	r3, #48	; 0x30
 8005b1e:	f8c8 2000 	str.w	r2, [r8]
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8005b2a:	68ea      	ldr	r2, [r5, #12]
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8005b2c:	2114      	movs	r1, #20
 8005b2e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005b30:	2003      	movs	r0, #3
  tp->u.wttrp = trp;
 8005b32:	62d7      	str	r7, [r2, #44]	; 0x2c
  *trp = tp;
 8005b34:	603a      	str	r2, [r7, #0]
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8005b36:	f7fd f8d3 	bl	8002ce0 <chSchGoSleepTimeoutS>
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	f383 8811 	msr	BASEPRI, r3
 8005b40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b42:	3b14      	subs	r3, #20
 8005b44:	1b5b      	subs	r3, r3, r5
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d817      	bhi.n	8005b7c <rt_test_006_001_execute+0xdc>
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	b95b      	cbnz	r3, 8005b68 <rt_test_006_001_execute+0xc8>
 8005b50:	3001      	adds	r0, #1
 8005b52:	d010      	beq.n	8005b76 <rt_test_006_001_execute+0xd6>
  chtest.global_fail     = true;
 8005b54:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8005b58:	4a13      	ldr	r2, [pc, #76]	; (8005ba8 <rt_test_006_001_execute+0x108>)
  chtest.global_fail     = true;
 8005b5a:	f8a8 3004 	strh.w	r3, [r8, #4]
  chtest.failure_message = msg;
 8005b5e:	f8c8 2008 	str.w	r2, [r8, #8]
                            "out of time window");
    test_assert(NULL == tr1, "not NULL");
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
  }
  test_end_step(2);
}
 8005b62:	b003      	add	sp, #12
 8005b64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  chtest.global_fail     = true;
 8005b68:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8005b6c:	4a0f      	ldr	r2, [pc, #60]	; (8005bac <rt_test_006_001_execute+0x10c>)
  chtest.global_fail     = true;
 8005b6e:	f8a8 3004 	strh.w	r3, [r8, #4]
  chtest.failure_message = msg;
 8005b72:	f8c8 2008 	str.w	r2, [r8, #8]
 8005b76:	b003      	add	sp, #12
 8005b78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  chtest.global_fail     = true;
 8005b7c:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8005b80:	4a0b      	ldr	r2, [pc, #44]	; (8005bb0 <rt_test_006_001_execute+0x110>)
  chtest.global_fail     = true;
 8005b82:	f8a8 3004 	strh.w	r3, [r8, #4]
  chtest.failure_message = msg;
 8005b86:	f8c8 2008 	str.w	r2, [r8, #8]
 8005b8a:	e7f4      	b.n	8005b76 <rt_test_006_001_execute+0xd6>
 8005b8c:	20001050 	.word	0x20001050
 8005b90:	08010318 	.word	0x08010318
 8005b94:	200010f4 	.word	0x200010f4
 8005b98:	08004201 	.word	0x08004201
 8005b9c:	20001240 	.word	0x20001240
 8005ba0:	20001ab0 	.word	0x20001ab0
 8005ba4:	20001ac4 	.word	0x20001ac4
 8005ba8:	08010294 	.word	0x08010294
 8005bac:	08010360 	.word	0x08010360
 8005bb0:	080101c0 	.word	0x080101c0
	...

08005bc0 <rt_test_007_005_teardown>:
 8005bc0:	b570      	push	{r4, r5, r6, lr}
 8005bc2:	2600      	movs	r6, #0
 8005bc4:	4c06      	ldr	r4, [pc, #24]	; (8005be0 <rt_test_007_005_teardown+0x20>)
 8005bc6:	f104 0514 	add.w	r5, r4, #20
 8005bca:	f854 0b04 	ldr.w	r0, [r4], #4
 8005bce:	b118      	cbz	r0, 8005bd8 <rt_test_007_005_teardown+0x18>
 8005bd0:	f7ff ff26 	bl	8005a20 <chThdWait>
 8005bd4:	f844 6c04 	str.w	r6, [r4, #-4]
 8005bd8:	42ac      	cmp	r4, r5
 8005bda:	d1f6      	bne.n	8005bca <rt_test_007_005_teardown+0xa>
 8005bdc:	bd70      	pop	{r4, r5, r6, pc}
 8005bde:	bf00      	nop
 8005be0:	20001ab0 	.word	0x20001ab0
	...

08005bf0 <rt_test_007_006_teardown>:
static void rt_test_007_006_teardown(void) {
 8005bf0:	b570      	push	{r4, r5, r6, lr}
      threads[i] = NULL;
 8005bf2:	2600      	movs	r6, #0
 8005bf4:	4c06      	ldr	r4, [pc, #24]	; (8005c10 <rt_test_007_006_teardown+0x20>)
 8005bf6:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 8005bfa:	f854 0b04 	ldr.w	r0, [r4], #4
 8005bfe:	b118      	cbz	r0, 8005c08 <rt_test_007_006_teardown+0x18>
      chThdWait(threads[i]);
 8005c00:	f7ff ff0e 	bl	8005a20 <chThdWait>
      threads[i] = NULL;
 8005c04:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8005c08:	42ac      	cmp	r4, r5
 8005c0a:	d1f6      	bne.n	8005bfa <rt_test_007_006_teardown+0xa>
}
 8005c0c:	bd70      	pop	{r4, r5, r6, pc}
 8005c0e:	bf00      	nop
 8005c10:	20001ab0 	.word	0x20001ab0
	...

08005c20 <rt_test_008_004_teardown>:
 8005c20:	b570      	push	{r4, r5, r6, lr}
 8005c22:	2600      	movs	r6, #0
 8005c24:	4c06      	ldr	r4, [pc, #24]	; (8005c40 <rt_test_008_004_teardown+0x20>)
 8005c26:	f104 0514 	add.w	r5, r4, #20
 8005c2a:	f854 0b04 	ldr.w	r0, [r4], #4
 8005c2e:	b118      	cbz	r0, 8005c38 <rt_test_008_004_teardown+0x18>
 8005c30:	f7ff fef6 	bl	8005a20 <chThdWait>
 8005c34:	f844 6c04 	str.w	r6, [r4, #-4]
 8005c38:	42ac      	cmp	r4, r5
 8005c3a:	d1f6      	bne.n	8005c2a <rt_test_008_004_teardown+0xa>
 8005c3c:	bd70      	pop	{r4, r5, r6, pc}
 8005c3e:	bf00      	nop
 8005c40:	20001ab0 	.word	0x20001ab0
	...

08005c50 <rt_test_010_007_execute>:

static void rt_test_010_007_execute(void) {
 8005c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  event_listener_t el1, el2;
  systime_t target_time;

  /* [10.7.1] Registering on two event sources associating them with
     flags 1 and 4.*/
  test_set_step(1);
 8005c54:	f04f 0901 	mov.w	r9, #1
 8005c58:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005e18 <rt_test_010_007_execute+0x1c8>
 8005c5c:	2530      	movs	r5, #48	; 0x30
static void rt_test_010_007_execute(void) {
 8005c5e:	b08f      	sub	sp, #60	; 0x3c
  test_set_step(1);
 8005c60:	f8c8 9000 	str.w	r9, [r8]
 8005c64:	f385 8811 	msr	BASEPRI, r5
 8005c68:	4c6c      	ldr	r4, [pc, #432]	; (8005e1c <rt_test_010_007_execute+0x1cc>)
  elp->wflags   = wflags;
 8005c6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c6e:	68e3      	ldr	r3, [r4, #12]
  elp->next     = esp->next;
 8005c70:	4e6b      	ldr	r6, [pc, #428]	; (8005e20 <rt_test_010_007_execute+0x1d0>)
  elp->listener = currtp;
 8005c72:	930a      	str	r3, [sp, #40]	; 0x28
  elp->flags    = (eventflags_t)0;
 8005c74:	2300      	movs	r3, #0
  elp->next     = esp->next;
 8005c76:	6831      	ldr	r1, [r6, #0]
  esp->next     = elp;
 8005c78:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
  elp->wflags   = wflags;
 8005c7c:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
  elp->events   = events;
 8005c80:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  elp->next     = esp->next;
 8005c84:	9109      	str	r1, [sp, #36]	; 0x24
  esp->next     = elp;
 8005c86:	f8c6 b000 	str.w	fp, [r6]
 8005c8a:	f383 8811 	msr	BASEPRI, r3
 8005c8e:	f385 8811 	msr	BASEPRI, r5
  elp->flags    = (eventflags_t)0;
 8005c92:	e9cd 3207 	strd	r3, r2, [sp, #28]
  elp->events   = events;
 8005c96:	2204      	movs	r2, #4
  elp->next     = esp->next;
 8005c98:	4f62      	ldr	r7, [pc, #392]	; (8005e24 <rt_test_010_007_execute+0x1d4>)
  elp->events   = events;
 8005c9a:	9206      	str	r2, [sp, #24]
 8005c9c:	68e2      	ldr	r2, [r4, #12]
  esp->next     = elp;
 8005c9e:	f10d 0a10 	add.w	sl, sp, #16
  elp->listener = currtp;
 8005ca2:	9205      	str	r2, [sp, #20]
  elp->next     = esp->next;
 8005ca4:	683a      	ldr	r2, [r7, #0]
  esp->next     = elp;
 8005ca6:	f8c7 a000 	str.w	sl, [r7]
  elp->next     = esp->next;
 8005caa:	9204      	str	r2, [sp, #16]
 8005cac:	f383 8811 	msr	BASEPRI, r3
  test_end_step(1);

  /* [10.7.2] Getting current time and starting a broadcaster thread,
     the thread broadcast the first Event Source immediately and the
     other after 50mS.*/
  test_set_step(2);
 8005cb0:	2202      	movs	r2, #2
 8005cb2:	f8c8 2000 	str.w	r2, [r8]
 8005cb6:	f385 8811 	msr	BASEPRI, r5
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8005cba:	2008      	movs	r0, #8
 8005cbc:	4649      	mov	r1, r9
 8005cbe:	f7fd f80f 	bl	8002ce0 <chSchGoSleepTimeoutS>
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	f383 8811 	msr	BASEPRI, r3
 8005cc8:	f385 8811 	msr	BASEPRI, r5
 8005ccc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005cd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005cd2:	b292      	uxth	r2, r2
 8005cd4:	9202      	str	r2, [sp, #8]
 8005cd6:	f383 8811 	msr	BASEPRI, r3
  return chThdGetSelfX()->hdr.pqueue.prio;
 8005cda:	68e3      	ldr	r3, [r4, #12]
  {
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005cdc:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8005ce0:	689a      	ldr	r2, [r3, #8]
 8005ce2:	4b51      	ldr	r3, [pc, #324]	; (8005e28 <rt_test_010_007_execute+0x1d8>)
 8005ce4:	3a01      	subs	r2, #1
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	4850      	ldr	r0, [pc, #320]	; (8005e2c <rt_test_010_007_execute+0x1dc>)
 8005cea:	4b51      	ldr	r3, [pc, #324]	; (8005e30 <rt_test_010_007_execute+0x1e0>)
 8005cec:	f7fe fcb0 	bl	8004650 <chThdCreateStatic>
  test_end_step(2);

  /* [10.7.3] Calling chEvtWaitAll() then verifying that both event
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(3);
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	f8c8 3000 	str.w	r3, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005cf6:	4b4f      	ldr	r3, [pc, #316]	; (8005e34 <rt_test_010_007_execute+0x1e4>)
  return __sch_get_currthread();
 8005cf8:	68e2      	ldr	r2, [r4, #12]
 8005cfa:	6018      	str	r0, [r3, #0]
 8005cfc:	f385 8811 	msr	BASEPRI, r5
  if ((currtp->epending & events) != events) {
 8005d00:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8005d02:	f003 0105 	and.w	r1, r3, #5
 8005d06:	2905      	cmp	r1, #5
 8005d08:	d011      	beq.n	8005d2e <rt_test_010_007_execute+0xde>
    currtp->u.ewmask = events;
 8005d0a:	2305      	movs	r3, #5
 8005d0c:	62d3      	str	r3, [r2, #44]	; 0x2c
  otp->state = newstate;
 8005d0e:	230b      	movs	r3, #11
  thread_t *otp = __instance_get_currthread(oip);
 8005d10:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 8005d12:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 8005d14:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
  pqp->next       = p->next;
 8005d18:	6803      	ldr	r3, [r0, #0]
 8005d1a:	9203      	str	r2, [sp, #12]
  pqp->next->prev = pqp;
 8005d1c:	605c      	str	r4, [r3, #4]
  pqp->next       = p->next;
 8005d1e:	6023      	str	r3, [r4, #0]
  ntp->state = CH_STATE_CURRENT;
 8005d20:	f880 9028 	strb.w	r9, [r0, #40]	; 0x28
  __instance_set_currthread(oip, ntp);
 8005d24:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8005d26:	f7fa fa8b 	bl	8000240 <__port_switch>
  currtp->epending &= ~events;
 8005d2a:	9a03      	ldr	r2, [sp, #12]
 8005d2c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8005d2e:	f023 0305 	bic.w	r3, r3, #5
 8005d32:	63d3      	str	r3, [r2, #60]	; 0x3c
 8005d34:	2200      	movs	r2, #0
 8005d36:	f382 8811 	msr	BASEPRI, r2
 8005d3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	9902      	ldr	r1, [sp, #8]
 8005d42:	3b64      	subs	r3, #100	; 0x64
 8005d44:	1a5b      	subs	r3, r3, r1
  if (!condition) {
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	2b03      	cmp	r3, #3
 8005d4a:	d844      	bhi.n	8005dd6 <rt_test_010_007_execute+0x186>
 8005d4c:	2330      	movs	r3, #48	; 0x30
 8005d4e:	f383 8811 	msr	BASEPRI, r3
 8005d52:	68e3      	ldr	r3, [r4, #12]
  m = currtp->epending & events;
 8005d54:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
  currtp->epending &= ~events;
 8005d56:	63da      	str	r2, [r3, #60]	; 0x3c
 8005d58:	f382 8811 	msr	BASEPRI, r2
 8005d5c:	2d00      	cmp	r5, #0
 8005d5e:	d144      	bne.n	8005dea <rt_test_010_007_execute+0x19a>
 8005d60:	4c34      	ldr	r4, [pc, #208]	; (8005e34 <rt_test_010_007_execute+0x1e4>)
 8005d62:	f104 0914 	add.w	r9, r4, #20
    if (threads[i] != NULL) {
 8005d66:	f854 0b04 	ldr.w	r0, [r4], #4
 8005d6a:	b118      	cbz	r0, 8005d74 <rt_test_010_007_execute+0x124>
      chThdWait(threads[i]);
 8005d6c:	f7ff fe58 	bl	8005a20 <chThdWait>
      threads[i] = NULL;
 8005d70:	f844 5c04 	str.w	r5, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8005d74:	454c      	cmp	r4, r9
 8005d76:	d1f6      	bne.n	8005d66 <rt_test_010_007_execute+0x116>
    test_wait_threads();
  }
  test_end_step(3);

  /* [10.7.4] Unregistering from the Event Sources.*/
  test_set_step(4);
 8005d78:	2304      	movs	r3, #4
 8005d7a:	f8c8 3000 	str.w	r3, [r8]
 8005d7e:	2330      	movs	r3, #48	; 0x30
 8005d80:	f383 8811 	msr	BASEPRI, r3
  p = (event_listener_t *)esp;
 8005d84:	4b26      	ldr	r3, [pc, #152]	; (8005e20 <rt_test_010_007_execute+0x1d0>)
}
 8005d86:	e001      	b.n	8005d8c <rt_test_010_007_execute+0x13c>
    if (p->next == elp) {
 8005d88:	455b      	cmp	r3, fp
 8005d8a:	d038      	beq.n	8005dfe <rt_test_010_007_execute+0x1ae>
  while (p->next != (event_listener_t *)esp) {
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	42b3      	cmp	r3, r6
 8005d92:	d1f9      	bne.n	8005d88 <rt_test_010_007_execute+0x138>
 8005d94:	2300      	movs	r3, #0
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	2330      	movs	r3, #48	; 0x30
 8005d9c:	f383 8811 	msr	BASEPRI, r3
  p = (event_listener_t *)esp;
 8005da0:	4b20      	ldr	r3, [pc, #128]	; (8005e24 <rt_test_010_007_execute+0x1d4>)
 8005da2:	e001      	b.n	8005da8 <rt_test_010_007_execute+0x158>
    if (p->next == elp) {
 8005da4:	4553      	cmp	r3, sl
 8005da6:	d02d      	beq.n	8005e04 <rt_test_010_007_execute+0x1b4>
  while (p->next != (event_listener_t *)esp) {
 8005da8:	461a      	mov	r2, r3
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	42bb      	cmp	r3, r7
 8005dae:	d1f9      	bne.n	8005da4 <rt_test_010_007_execute+0x154>
 8005db0:	2300      	movs	r3, #0
 8005db2:	f383 8811 	msr	BASEPRI, r3
 8005db6:	6833      	ldr	r3, [r6, #0]
 8005db8:	42b3      	cmp	r3, r6
 8005dba:	d102      	bne.n	8005dc2 <rt_test_010_007_execute+0x172>
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	42bb      	cmp	r3, r7
 8005dc0:	d010      	beq.n	8005de4 <rt_test_010_007_execute+0x194>
  chtest.global_fail     = true;
 8005dc2:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8005dc6:	4a1c      	ldr	r2, [pc, #112]	; (8005e38 <rt_test_010_007_execute+0x1e8>)
  chtest.global_fail     = true;
 8005dc8:	f8a8 3004 	strh.w	r3, [r8, #4]
  chtest.failure_message = msg;
 8005dcc:	f8c8 2008 	str.w	r2, [r8, #8]
    chEvtUnregister(&es2, &el2);
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
  }
  test_end_step(4);
}
 8005dd0:	b00f      	add	sp, #60	; 0x3c
 8005dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  chtest.global_fail     = true;
 8005dd6:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8005dda:	4a18      	ldr	r2, [pc, #96]	; (8005e3c <rt_test_010_007_execute+0x1ec>)
  chtest.global_fail     = true;
 8005ddc:	f8a8 3004 	strh.w	r3, [r8, #4]
  chtest.failure_message = msg;
 8005de0:	f8c8 2008 	str.w	r2, [r8, #8]
 8005de4:	b00f      	add	sp, #60	; 0x3c
 8005de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  chtest.global_fail     = true;
 8005dea:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8005dee:	4a14      	ldr	r2, [pc, #80]	; (8005e40 <rt_test_010_007_execute+0x1f0>)
  chtest.global_fail     = true;
 8005df0:	f8a8 3004 	strh.w	r3, [r8, #4]
  chtest.failure_message = msg;
 8005df4:	f8c8 2008 	str.w	r2, [r8, #8]
 8005df8:	b00f      	add	sp, #60	; 0x3c
 8005dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p->next = elp->next;
 8005dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e00:	6013      	str	r3, [r2, #0]
      break;
 8005e02:	e7c7      	b.n	8005d94 <rt_test_010_007_execute+0x144>
      p->next = elp->next;
 8005e04:	9b04      	ldr	r3, [sp, #16]
 8005e06:	6013      	str	r3, [r2, #0]
 8005e08:	2300      	movs	r3, #0
 8005e0a:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 8005e0e:	6833      	ldr	r3, [r6, #0]
 8005e10:	42b3      	cmp	r3, r6
 8005e12:	d0d3      	beq.n	8005dbc <rt_test_010_007_execute+0x16c>
 8005e14:	e7d5      	b.n	8005dc2 <rt_test_010_007_execute+0x172>
 8005e16:	bf00      	nop
 8005e18:	200010f4 	.word	0x200010f4
 8005e1c:	20001050 	.word	0x20001050
 8005e20:	20000808 	.word	0x20000808
 8005e24:	2000080c 	.word	0x2000080c
 8005e28:	08010318 	.word	0x08010318
 8005e2c:	20001240 	.word	0x20001240
 8005e30:	08005611 	.word	0x08005611
 8005e34:	20001ab0 	.word	0x20001ab0
 8005e38:	0801019c 	.word	0x0801019c
 8005e3c:	080101c0 	.word	0x080101c0
 8005e40:	0801036c 	.word	0x0801036c
	...

08005e50 <chHeapStatus>:
 *                      free free block found space or @p NULL
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 8005e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  heap_header_t *qp;
  size_t n, tpages, lpages;

  if (heapp == NULL) {
    heapp = &default_heap;
 8005e54:	4c17      	ldr	r4, [pc, #92]	; (8005eb4 <chHeapStatus+0x64>)
 8005e56:	2330      	movs	r3, #48	; 0x30
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	bf18      	it	ne
 8005e5c:	4604      	movne	r4, r0
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 8005e5e:	460f      	mov	r7, r1
 8005e60:	4616      	mov	r6, r2
  }

  H_LOCK(heapp);
 8005e62:	f104 0814 	add.w	r8, r4, #20
 8005e66:	f383 8811 	msr	BASEPRI, r3
 8005e6a:	4640      	mov	r0, r8
 8005e6c:	f7fe fe88 	bl	8004b80 <chMtxLockS>
 8005e70:	f04f 0c00 	mov.w	ip, #0
 8005e74:	f38c 8811 	msr	BASEPRI, ip
  tpages = 0U;
  lpages = 0U;
  n = 0U;
  qp = &heapp->header;
  while (H_FREE_NEXT(qp) != NULL) {
 8005e78:	68e3      	ldr	r3, [r4, #12]
 8005e7a:	b1bb      	cbz	r3, 8005eac <chHeapStatus+0x5c>
  tpages = 0U;
 8005e7c:	46e6      	mov	lr, ip
  n = 0U;
 8005e7e:	4665      	mov	r5, ip
  while (H_FREE_NEXT(qp) != NULL) {
 8005e80:	cb18      	ldmia	r3, {r3, r4}
 8005e82:	45a4      	cmp	ip, r4
 8005e84:	bf38      	it	cc
 8005e86:	46a4      	movcc	ip, r4
    size_t pages = H_FREE_PAGES(H_FREE_NEXT(qp));

    /* Updating counters.*/
    n++;
 8005e88:	3501      	adds	r5, #1
    tpages += pages;
 8005e8a:	44a6      	add	lr, r4
  while (H_FREE_NEXT(qp) != NULL) {
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1f7      	bne.n	8005e80 <chHeapStatus+0x30>

    qp = H_FREE_NEXT(qp);
  }

  /* Writing out fragmented free memory.*/
  if (totalp != NULL) {
 8005e90:	b117      	cbz	r7, 8005e98 <chHeapStatus+0x48>
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 8005e92:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8005e96:	603b      	str	r3, [r7, #0]
  }

  /* Writing out unfragmented free memory.*/
  if (largestp != NULL) {
 8005e98:	b116      	cbz	r6, 8005ea0 <chHeapStatus+0x50>
    *largestp = lpages * CH_HEAP_ALIGNMENT;
 8005e9a:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8005e9e:	6033      	str	r3, [r6, #0]
  }
  H_UNLOCK(heapp);
 8005ea0:	4640      	mov	r0, r8
 8005ea2:	f7fe ff05 	bl	8004cb0 <chMtxUnlock>

  return n;
}
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  lpages = 0U;
 8005eac:	469c      	mov	ip, r3
  tpages = 0U;
 8005eae:	469e      	mov	lr, r3
  n = 0U;
 8005eb0:	461d      	mov	r5, r3
 8005eb2:	e7ed      	b.n	8005e90 <chHeapStatus+0x40>
 8005eb4:	2000111c 	.word	0x2000111c
	...

08005ec0 <chGuardedPoolAllocTimeout>:
 * @retval NULL         if the operation timed out.
 *
 * @api
 */
void *chGuardedPoolAllocTimeout(guarded_memory_pool_t *gmp,
                                sysinterval_t timeout) {
 8005ec0:	b510      	push	{r4, lr}
 8005ec2:	2330      	movs	r3, #48	; 0x30
 8005ec4:	4604      	mov	r4, r0
 8005ec6:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8005eca:	6882      	ldr	r2, [r0, #8]
 8005ecc:	1e53      	subs	r3, r2, #1
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	6083      	str	r3, [r0, #8]
 8005ed2:	db07      	blt.n	8005ee4 <chGuardedPoolAllocTimeout+0x24>
  objp = mp->next;
 8005ed4:	68e0      	ldr	r0, [r4, #12]
  if (objp != NULL) {
 8005ed6:	b1c8      	cbz	r0, 8005f0c <chGuardedPoolAllocTimeout+0x4c>
    mp->next = mp->next->next;
 8005ed8:	6803      	ldr	r3, [r0, #0]
 8005eda:	60e3      	str	r3, [r4, #12]
 8005edc:	2300      	movs	r3, #0
 8005ede:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chGuardedPoolAllocTimeoutS(gmp, timeout);
  chSysUnlock();

  return p;
}
 8005ee2:	bd10      	pop	{r4, pc}
    if (unlikely(TIME_IMMEDIATE == timeout)) {
 8005ee4:	4608      	mov	r0, r1
 8005ee6:	b1d9      	cbz	r1, 8005f20 <chGuardedPoolAllocTimeout+0x60>
 8005ee8:	4b0e      	ldr	r3, [pc, #56]	; (8005f24 <chGuardedPoolAllocTimeout+0x64>)
  p->prev       = qp->prev;
 8005eea:	6862      	ldr	r2, [r4, #4]
 8005eec:	68db      	ldr	r3, [r3, #12]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 8005eee:	2005      	movs	r0, #5
 8005ef0:	e9c3 4200 	strd	r4, r2, [r3]
    currtp->u.wtsemp = sp;
 8005ef4:	62dc      	str	r4, [r3, #44]	; 0x2c
  p->prev->next = p;
 8005ef6:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 8005ef8:	6063      	str	r3, [r4, #4]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 8005efa:	f7fc fef1 	bl	8002ce0 <chSchGoSleepTimeoutS>
  if (msg != MSG_OK) {
 8005efe:	2800      	cmp	r0, #0
 8005f00:	d0e8      	beq.n	8005ed4 <chGuardedPoolAllocTimeout+0x14>
    return NULL;
 8005f02:	2000      	movs	r0, #0
 8005f04:	2300      	movs	r3, #0
 8005f06:	f383 8811 	msr	BASEPRI, r3
}
 8005f0a:	bd10      	pop	{r4, pc}
  else if (mp->provider != NULL) {
 8005f0c:	69a3      	ldr	r3, [r4, #24]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d0f7      	beq.n	8005f02 <chGuardedPoolAllocTimeout+0x42>
    objp = mp->provider(mp->object_size, mp->align);
 8005f12:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8005f16:	4798      	blx	r3
 8005f18:	2300      	movs	r3, #0
 8005f1a:	f383 8811 	msr	BASEPRI, r3
}
 8005f1e:	bd10      	pop	{r4, pc}
      sp->cnt++;
 8005f20:	60a2      	str	r2, [r4, #8]
  if (msg != MSG_OK) {
 8005f22:	e7db      	b.n	8005edc <chGuardedPoolAllocTimeout+0x1c>
 8005f24:	20001050 	.word	0x20001050
	...

08005f30 <chDelegateCallVeneer>:
 * @param[in] veneer    pointer to the veneer function to be called
 * @param[in] ...       variable number of parameters
 * @return              The function return value casted to msg_t. It is
 *                      garbage for functions returning @p void.
 */
msg_t chDelegateCallVeneer(thread_t *tp, delegate_veneer_t veneer, ...) {
 8005f30:	b40e      	push	{r1, r2, r3}
 8005f32:	b500      	push	{lr}
 8005f34:	b084      	sub	sp, #16
 8005f36:	ab05      	add	r3, sp, #20

  va_start(args, veneer);

  /* Preparing the call message.*/
  cm.veneer = veneer;
  cm.argsp  = &args;
 8005f38:	aa01      	add	r2, sp, #4
 8005f3a:	9203      	str	r2, [sp, #12]
msg_t chDelegateCallVeneer(thread_t *tp, delegate_veneer_t veneer, ...) {
 8005f3c:	f853 2b04 	ldr.w	r2, [r3], #4
  (void)cm; /* Suppresses a lint warning.*/

  /* Sending the message to the dispatcher thread, the return value is
     contained in the returned message.*/
  msg = chMsgSend(tp, (msg_t)&cm);
 8005f40:	a902      	add	r1, sp, #8
  cm.veneer = veneer;
 8005f42:	e9cd 3201 	strd	r3, r2, [sp, #4]
  msg = chMsgSend(tp, (msg_t)&cm);
 8005f46:	f7fb fb43 	bl	80015d0 <chMsgSend>

  va_end(args);

  return msg;
}
 8005f4a:	b004      	add	sp, #16
 8005f4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f50:	b003      	add	sp, #12
 8005f52:	4770      	bx	lr
	...

08005f60 <dyn_create_object_heap.lto_priv.0>:

#if CH_FACTORY_REQUIRES_HEAP || defined(__DOXYGEN__)
static dyn_element_t *dyn_create_object_heap(const char *name,
                                             dyn_list_t *dlp,
                                             size_t size,
                                             unsigned align) {
 8005f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  dyn_element_t *p = dlp->next;
 8005f64:	680c      	ldr	r4, [r1, #0]
                                             unsigned align) {
 8005f66:	460e      	mov	r6, r1
  while (p != (dyn_element_t *)dlp) {
 8005f68:	42a1      	cmp	r1, r4
                                             unsigned align) {
 8005f6a:	4605      	mov	r5, r0
 8005f6c:	4617      	mov	r7, r2
 8005f6e:	4698      	mov	r8, r3
  while (p != (dyn_element_t *)dlp) {
 8005f70:	d103      	bne.n	8005f7a <dyn_create_object_heap.lto_priv.0+0x1a>
 8005f72:	e00e      	b.n	8005f92 <dyn_create_object_heap.lto_priv.0+0x32>
    p = p->next;
 8005f74:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8005f76:	42a6      	cmp	r6, r4
 8005f78:	d00b      	beq.n	8005f92 <dyn_create_object_heap.lto_priv.0+0x32>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8005f7a:	2208      	movs	r2, #8
 8005f7c:	4629      	mov	r1, r5
 8005f7e:	f104 0008 	add.w	r0, r4, #8
 8005f82:	f7fa fc3f 	bl	8000804 <strncmp>
 8005f86:	2800      	cmp	r0, #0
 8005f88:	d1f4      	bne.n	8005f74 <dyn_create_object_heap.lto_priv.0+0x14>

  chDbgCheck(name != NULL);

  /* Checking if an object with this name has already been created.*/
  dep = dyn_list_find(name, dlp);
  if (dep != NULL) {
 8005f8a:	b114      	cbz	r4, 8005f92 <dyn_create_object_heap.lto_priv.0+0x32>
    return NULL;
 8005f8c:	2000      	movs	r0, #0

  /* Updating factory list.*/
  dlp->next = dep;

  return dep;
}
 8005f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  dep = (dyn_element_t *)chHeapAllocAligned(NULL, size, align);
 8005f92:	4642      	mov	r2, r8
 8005f94:	4639      	mov	r1, r7
 8005f96:	2000      	movs	r0, #0
 8005f98:	f7ff fc32 	bl	8005800 <chHeapAllocAligned>
  if (dep == NULL) {
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	d0f5      	beq.n	8005f8c <dyn_create_object_heap.lto_priv.0+0x2c>
  copy_name(name, dep->name);
 8005fa0:	f100 0208 	add.w	r2, r0, #8
  i = CH_CFG_FACTORY_MAX_NAMES_LENGTH;
 8005fa4:	f105 0108 	add.w	r1, r5, #8
    c = *sp++;
 8005fa8:	f815 3b01 	ldrb.w	r3, [r5], #1
    *dp++ = c;
 8005fac:	f802 3b01 	strb.w	r3, [r2], #1
  } while ((c != (char)0) && (i > 0U));
 8005fb0:	b10b      	cbz	r3, 8005fb6 <dyn_create_object_heap.lto_priv.0+0x56>
 8005fb2:	42a9      	cmp	r1, r5
 8005fb4:	d1f8      	bne.n	8005fa8 <dyn_create_object_heap.lto_priv.0+0x48>
  dep->refs = (ucnt_t)1;
 8005fb6:	2301      	movs	r3, #1
  dep->next = dlp->next;
 8005fb8:	6832      	ldr	r2, [r6, #0]
  dep->refs = (ucnt_t)1;
 8005fba:	e9c0 2300 	strd	r2, r3, [r0]
  dlp->next = dep;
 8005fbe:	6030      	str	r0, [r6, #0]
}
 8005fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005fd0 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8005fd0:	f3ef 8309 	mrs	r3, PSP
  psp += sizeof (struct port_extctx);
 8005fd4:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8005fd6:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005fda:	2300      	movs	r3, #0
 8005fdc:	f383 8811 	msr	BASEPRI, r3
}
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
	...

08005ff0 <chprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8005ff0:	b40e      	push	{r1, r2, r3}
 8005ff2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	ab0f      	add	r3, sp, #60	; 0x3c
 8005ffa:	f853 6b04 	ldr.w	r6, [r3], #4
    c = *fmt++;
 8005ffe:	4635      	mov	r5, r6
 8006000:	f815 1b01 	ldrb.w	r1, [r5], #1
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8006004:	e9cd 3301 	strd	r3, r3, [sp, #4]
    if (c == 0) {
 8006008:	2900      	cmp	r1, #0
 800600a:	f000 8206 	beq.w	800641a <chprintf+0x42a>
 800600e:	4604      	mov	r4, r0
  int n = 0;
 8006010:	f04f 0900 	mov.w	r9, #0
 8006014:	e00c      	b.n	8006030 <chprintf+0x40>
      streamPut(chp, (uint8_t)c);
 8006016:	6823      	ldr	r3, [r4, #0]
 8006018:	4620      	mov	r0, r4
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	4798      	blx	r3
      continue;
 800601e:	462e      	mov	r6, r5
      n++;
 8006020:	f109 0901 	add.w	r9, r9, #1
    c = *fmt++;
 8006024:	4635      	mov	r5, r6
 8006026:	f815 1b01 	ldrb.w	r1, [r5], #1
    if (c == 0) {
 800602a:	2900      	cmp	r1, #0
 800602c:	f000 80d9 	beq.w	80061e2 <chprintf+0x1f2>
    if (c != '%') {
 8006030:	2925      	cmp	r1, #37	; 0x25
 8006032:	d1f0      	bne.n	8006016 <chprintf+0x26>
    if (*fmt == '-') {
 8006034:	7873      	ldrb	r3, [r6, #1]
 8006036:	2b2d      	cmp	r3, #45	; 0x2d
      fmt++;
 8006038:	bf08      	it	eq
 800603a:	1cb5      	addeq	r5, r6, #2
    if (*fmt == '+') {
 800603c:	782b      	ldrb	r3, [r5, #0]
      left_align = true;
 800603e:	bf0c      	ite	eq
 8006040:	f04f 0e01 	moveq.w	lr, #1
    left_align = false;
 8006044:	f04f 0e00 	movne.w	lr, #0
    if (*fmt == '+') {
 8006048:	2b2b      	cmp	r3, #43	; 0x2b
    if (*fmt == '0') {
 800604a:	bf03      	ittte	eq
 800604c:	786b      	ldrbeq	r3, [r5, #1]
      do_sign = true;
 800604e:	f04f 0c01 	moveq.w	ip, #1
      fmt++;
 8006052:	3501      	addeq	r5, #1
    do_sign = false;
 8006054:	f04f 0c00 	movne.w	ip, #0
    if (*fmt == '0') {
 8006058:	2b30      	cmp	r3, #48	; 0x30
      fmt++;
 800605a:	bf03      	ittte	eq
 800605c:	3501      	addeq	r5, #1
      filler = '0';
 800605e:	461f      	moveq	r7, r3
    if ( *fmt == '*') {
 8006060:	782b      	ldrbeq	r3, [r5, #0]
    filler = ' ';
 8006062:	2720      	movne	r7, #32
    if ( *fmt == '*') {
 8006064:	2b2a      	cmp	r3, #42	; 0x2a
 8006066:	d149      	bne.n	80060fc <chprintf+0x10c>
      c = *fmt++;
 8006068:	786b      	ldrb	r3, [r5, #1]
      width = va_arg(ap, int);
 800606a:	f8dd b004 	ldr.w	fp, [sp, #4]
    if (c == '.') {
 800606e:	2b2e      	cmp	r3, #46	; 0x2e
      width = va_arg(ap, int);
 8006070:	f85b 2b04 	ldr.w	r2, [fp], #4
      c = *fmt++;
 8006074:	f105 0602 	add.w	r6, r5, #2
    if (c == '.') {
 8006078:	d056      	beq.n	8006128 <chprintf+0x138>
    precision = 0;
 800607a:	2000      	movs	r0, #0
    if (c == 'l' || c == 'L') {
 800607c:	f003 01df 	and.w	r1, r3, #223	; 0xdf
 8006080:	294c      	cmp	r1, #76	; 0x4c
 8006082:	d05f      	beq.n	8006144 <chprintf+0x154>
    switch (c) {
 8006084:	f1a3 0544 	sub.w	r5, r3, #68	; 0x44
 8006088:	2d34      	cmp	r5, #52	; 0x34
 800608a:	f200 80b0 	bhi.w	80061ee <chprintf+0x1fe>
 800608e:	e8df f015 	tbh	[pc, r5, lsl #1]
 8006092:	00dc      	.short	0x00dc
 8006094:	00ae00ae 	.word	0x00ae00ae
 8006098:	00ae00ae 	.word	0x00ae00ae
 800609c:	00ae00dc 	.word	0x00ae00dc
 80060a0:	00ae00ae 	.word	0x00ae00ae
 80060a4:	00ae00ae 	.word	0x00ae00ae
 80060a8:	0112014d 	.word	0x0112014d
 80060ac:	00ae00ae 	.word	0x00ae00ae
 80060b0:	00ae00ae 	.word	0x00ae00ae
 80060b4:	00ae01b5 	.word	0x00ae01b5
 80060b8:	011200ae 	.word	0x011200ae
 80060bc:	00ae00ae 	.word	0x00ae00ae
 80060c0:	00ae00ae 	.word	0x00ae00ae
 80060c4:	00ae00ae 	.word	0x00ae00ae
 80060c8:	00ae00ae 	.word	0x00ae00ae
 80060cc:	00ae00ae 	.word	0x00ae00ae
 80060d0:	00dc016f 	.word	0x00dc016f
 80060d4:	00ae00ae 	.word	0x00ae00ae
 80060d8:	00ae00ae 	.word	0x00ae00ae
 80060dc:	00ae00dc 	.word	0x00ae00dc
 80060e0:	00ae00ae 	.word	0x00ae00ae
 80060e4:	00ae00ae 	.word	0x00ae00ae
 80060e8:	0112014d 	.word	0x0112014d
 80060ec:	00ae00ae 	.word	0x00ae00ae
 80060f0:	00ae0150 	.word	0x00ae0150
 80060f4:	00ae01b5 	.word	0x00ae01b5
 80060f8:	011200ae 	.word	0x011200ae
        c = *fmt++;
 80060fc:	1c6e      	adds	r6, r5, #1
        if (c == 0) {
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d06f      	beq.n	80061e2 <chprintf+0x1f2>
      width = 0;
 8006102:	2200      	movs	r2, #0
 8006104:	e005      	b.n	8006112 <chprintf+0x122>
        c = *fmt++;
 8006106:	f816 3b01 	ldrb.w	r3, [r6], #1
          width = width * 10 + c;
 800610a:	eb01 0240 	add.w	r2, r1, r0, lsl #1
        if (c == 0) {
 800610e:	2b00      	cmp	r3, #0
 8006110:	d067      	beq.n	80061e2 <chprintf+0x1f2>
        if (c >= '0' && c <= '9') {
 8006112:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006116:	b2c9      	uxtb	r1, r1
 8006118:	2909      	cmp	r1, #9
          width = width * 10 + c;
 800611a:	eb02 0082 	add.w	r0, r2, r2, lsl #2
        if (c >= '0' && c <= '9') {
 800611e:	d9f2      	bls.n	8006106 <chprintf+0x116>
    if (c == '.') {
 8006120:	2b2e      	cmp	r3, #46	; 0x2e
 8006122:	f8dd b004 	ldr.w	fp, [sp, #4]
 8006126:	d1a8      	bne.n	800607a <chprintf+0x8a>
      c = *fmt++;
 8006128:	7833      	ldrb	r3, [r6, #0]
      if (c == 0) {
 800612a:	2b00      	cmp	r3, #0
 800612c:	d059      	beq.n	80061e2 <chprintf+0x1f2>
      if (c == '*') {
 800612e:	2b2a      	cmp	r3, #42	; 0x2a
 8006130:	d147      	bne.n	80061c2 <chprintf+0x1d2>
        c = *fmt++;
 8006132:	7873      	ldrb	r3, [r6, #1]
        precision = va_arg(ap, int);
 8006134:	f85b 0b04 	ldr.w	r0, [fp], #4
    if (c == 'l' || c == 'L') {
 8006138:	f003 01df 	and.w	r1, r3, #223	; 0xdf
 800613c:	294c      	cmp	r1, #76	; 0x4c
        c = *fmt++;
 800613e:	f106 0602 	add.w	r6, r6, #2
    if (c == 'l' || c == 'L') {
 8006142:	d19f      	bne.n	8006084 <chprintf+0x94>
      c = *fmt++;
 8006144:	f816 3b01 	ldrb.w	r3, [r6], #1
      if (c == 0) {
 8006148:	2b00      	cmp	r3, #0
 800614a:	d04a      	beq.n	80061e2 <chprintf+0x1f2>
    switch (c) {
 800614c:	f1a3 0144 	sub.w	r1, r3, #68	; 0x44
 8006150:	2934      	cmp	r1, #52	; 0x34
 8006152:	d84c      	bhi.n	80061ee <chprintf+0x1fe>
 8006154:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006158:	004b0079 	.word	0x004b0079
 800615c:	004b004b 	.word	0x004b004b
 8006160:	0079004b 	.word	0x0079004b
 8006164:	004b004b 	.word	0x004b004b
 8006168:	004b004b 	.word	0x004b004b
 800616c:	00ea004b 	.word	0x00ea004b
 8006170:	004b00af 	.word	0x004b00af
 8006174:	004b004b 	.word	0x004b004b
 8006178:	0152004b 	.word	0x0152004b
 800617c:	004b004b 	.word	0x004b004b
 8006180:	004b00af 	.word	0x004b00af
 8006184:	004b004b 	.word	0x004b004b
 8006188:	004b004b 	.word	0x004b004b
 800618c:	004b004b 	.word	0x004b004b
 8006190:	004b004b 	.word	0x004b004b
 8006194:	010c004b 	.word	0x010c004b
 8006198:	004b0079 	.word	0x004b0079
 800619c:	004b004b 	.word	0x004b004b
 80061a0:	0079004b 	.word	0x0079004b
 80061a4:	004b004b 	.word	0x004b004b
 80061a8:	004b004b 	.word	0x004b004b
 80061ac:	00ea004b 	.word	0x00ea004b
 80061b0:	004b00af 	.word	0x004b00af
 80061b4:	00ed004b 	.word	0x00ed004b
 80061b8:	0152004b 	.word	0x0152004b
 80061bc:	004b004b 	.word	0x004b004b
 80061c0:	00af      	.short	0x00af
    precision = 0;
 80061c2:	2000      	movs	r0, #0
      c = *fmt++;
 80061c4:	3601      	adds	r6, #1
        while (c >= '0' && c <= '9') {
 80061c6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80061ca:	b2c9      	uxtb	r1, r1
 80061cc:	2909      	cmp	r1, #9
          precision = precision * 10 + c;
 80061ce:	eb00 0580 	add.w	r5, r0, r0, lsl #2
        while (c >= '0' && c <= '9') {
 80061d2:	f63f af53 	bhi.w	800607c <chprintf+0x8c>
          c = *fmt++;
 80061d6:	f816 3b01 	ldrb.w	r3, [r6], #1
          precision = precision * 10 + c;
 80061da:	eb01 0045 	add.w	r0, r1, r5, lsl #1
          if (c == 0) {
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1f1      	bne.n	80061c6 <chprintf+0x1d6>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 80061e2:	4648      	mov	r0, r9
 80061e4:	b006      	add	sp, #24
 80061e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ea:	b003      	add	sp, #12
 80061ec:	4770      	bx	lr
      *p++ = c;
 80061ee:	f88d 300c 	strb.w	r3, [sp, #12]
      break;
 80061f2:	f8cd b004 	str.w	fp, [sp, #4]
 80061f6:	3a01      	subs	r2, #1
    if ((width -= i) < 0) {
 80061f8:	ea22 7ae2 	bic.w	sl, r2, r2, asr #31
    if (left_align == false) {
 80061fc:	f1be 0f00 	cmp.w	lr, #0
 8006200:	d104      	bne.n	800620c <chprintf+0x21c>
    if (width < 0) {
 8006202:	2a00      	cmp	r2, #0
      width = -width;
 8006204:	f1ca 0a00 	rsb	sl, sl, #0
    if (width < 0) {
 8006208:	f300 80e4 	bgt.w	80063d4 <chprintf+0x3e4>
    if (left_align == false) {
 800620c:	2500      	movs	r5, #0
 800620e:	f10d 0b0c 	add.w	fp, sp, #12
 8006212:	f105 0801 	add.w	r8, r5, #1
 8006216:	44d8      	add	r8, fp
      streamPut(chp, (uint8_t)*s++);
 8006218:	6823      	ldr	r3, [r4, #0]
 800621a:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800621e:	4620      	mov	r0, r4
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	4798      	blx	r3
    while (--i >= 0) {
 8006224:	45c3      	cmp	fp, r8
 8006226:	d1f7      	bne.n	8006218 <chprintf+0x228>
 8006228:	f109 0901 	add.w	r9, r9, #1
      n++;
 800622c:	44a9      	add	r9, r5
    while (width) {
 800622e:	f1ba 0f00 	cmp.w	sl, #0
 8006232:	f43f aef7 	beq.w	8006024 <chprintf+0x34>
 8006236:	4655      	mov	r5, sl
      streamPut(chp, (uint8_t)filler);
 8006238:	6823      	ldr	r3, [r4, #0]
 800623a:	4639      	mov	r1, r7
 800623c:	4620      	mov	r0, r4
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	4798      	blx	r3
    while (width) {
 8006242:	3d01      	subs	r5, #1
 8006244:	d1f8      	bne.n	8006238 <chprintf+0x248>
      n++;
 8006246:	44d1      	add	r9, sl
 8006248:	e6ec      	b.n	8006024 <chprintf+0x34>
        l = va_arg(ap, int);
 800624a:	465b      	mov	r3, fp
 800624c:	f853 0b04 	ldr.w	r0, [r3], #4
      if (l < 0) {
 8006250:	2800      	cmp	r0, #0
        l = va_arg(ap, int);
 8006252:	9301      	str	r3, [sp, #4]
      if (l < 0) {
 8006254:	f2c0 80b6 	blt.w	80063c4 <chprintf+0x3d4>
        if (do_sign) {
 8006258:	f1bc 0f00 	cmp.w	ip, #0
 800625c:	f000 80d7 	beq.w	800640e <chprintf+0x41e>
          *p++ = '+';
 8006260:	232b      	movs	r3, #43	; 0x2b
 8006262:	f10d 080d 	add.w	r8, sp, #13
 8006266:	f88d 300c 	strb.w	r3, [sp, #12]
 800626a:	ab03      	add	r3, sp, #12
  q = p + MAX_FILLER;
 800626c:	f108 0b0b 	add.w	fp, r8, #11
 8006270:	465d      	mov	r5, fp
    i = (int)(l % radix);
 8006272:	496d      	ldr	r1, [pc, #436]	; (8006428 <chprintf+0x438>)
 8006274:	4682      	mov	sl, r0
 8006276:	fba1 c100 	umull	ip, r1, r1, r0
 800627a:	08c9      	lsrs	r1, r1, #3
 800627c:	468c      	mov	ip, r1
 800627e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006282:	eba0 0141 	sub.w	r1, r0, r1, lsl #1
    i += '0';
 8006286:	3130      	adds	r1, #48	; 0x30
    *--q = i;
 8006288:	b2c9      	uxtb	r1, r1
  } while ((ll /= radix) != 0);
 800628a:	f1ba 0f09 	cmp.w	sl, #9
    l /= radix;
 800628e:	4660      	mov	r0, ip
    *--q = i;
 8006290:	f805 1d01 	strb.w	r1, [r5, #-1]!
  } while ((ll /= radix) != 0);
 8006294:	dced      	bgt.n	8006272 <chprintf+0x282>
  i = (int)(p + MAX_FILLER - q);
 8006296:	ebab 0005 	sub.w	r0, fp, r5
 800629a:	4440      	add	r0, r8
 800629c:	e001      	b.n	80062a2 <chprintf+0x2b2>
    *p++ = *q++;
 800629e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80062a2:	f808 1b01 	strb.w	r1, [r8], #1
  while (--i);
 80062a6:	4580      	cmp	r8, r0
 80062a8:	d1f9      	bne.n	800629e <chprintf+0x2ae>
    i = (int)(p - s);
 80062aa:	eba8 0503 	sub.w	r5, r8, r3
    if ((width -= i) < 0) {
 80062ae:	1b52      	subs	r2, r2, r5
    s = tmpbuf;
 80062b0:	469b      	mov	fp, r3
        i--;
 80062b2:	3d01      	subs	r5, #1
 80062b4:	e02d      	b.n	8006312 <chprintf+0x322>
    switch (c) {
 80062b6:	f04f 0810 	mov.w	r8, #16
        l = va_arg(ap, unsigned int);
 80062ba:	465b      	mov	r3, fp
 80062bc:	f853 0b04 	ldr.w	r0, [r3], #4
 80062c0:	9301      	str	r3, [sp, #4]
  q = p + MAX_FILLER;
 80062c2:	f10d 0317 	add.w	r3, sp, #23
 80062c6:	e000      	b.n	80062ca <chprintf+0x2da>
 80062c8:	462b      	mov	r3, r5
    i = (int)(l % radix);
 80062ca:	4684      	mov	ip, r0
 80062cc:	fbb0 f0f8 	udiv	r0, r0, r8
 80062d0:	fb08 ca10 	mls	sl, r8, r0, ip
    i += '0';
 80062d4:	f10a 0130 	add.w	r1, sl, #48	; 0x30
    if (i > '9') {
 80062d8:	2939      	cmp	r1, #57	; 0x39
      i += 'A' - '0' - 10;
 80062da:	bfc8      	it	gt
 80062dc:	f10a 0137 	addgt.w	r1, sl, #55	; 0x37
    *--q = i;
 80062e0:	b2c9      	uxtb	r1, r1
  } while ((ll /= radix) != 0);
 80062e2:	45c4      	cmp	ip, r8
    *--q = i;
 80062e4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80062e8:	f803 1c01 	strb.w	r1, [r3, #-1]
  } while ((ll /= radix) != 0);
 80062ec:	d2ec      	bcs.n	80062c8 <chprintf+0x2d8>
 80062ee:	4618      	mov	r0, r3
  i = (int)(p + MAX_FILLER - q);
 80062f0:	f10d 0317 	add.w	r3, sp, #23
 80062f4:	1b5d      	subs	r5, r3, r5
 80062f6:	ab03      	add	r3, sp, #12
 80062f8:	469c      	mov	ip, r3
 80062fa:	f10d 0817 	add.w	r8, sp, #23
 80062fe:	e001      	b.n	8006304 <chprintf+0x314>
    *p++ = *q++;
 8006300:	f810 1b01 	ldrb.w	r1, [r0], #1
  while (--i);
 8006304:	4540      	cmp	r0, r8
    *p++ = *q++;
 8006306:	f80c 1b01 	strb.w	r1, [ip], #1
  while (--i);
 800630a:	d1f9      	bne.n	8006300 <chprintf+0x310>
    s = tmpbuf;
 800630c:	469b      	mov	fp, r3
    if ((width -= i) < 0) {
 800630e:	1b52      	subs	r2, r2, r5
        i--;
 8006310:	3d01      	subs	r5, #1
    if ((width -= i) < 0) {
 8006312:	ea22 7ae2 	bic.w	sl, r2, r2, asr #31
    if (left_align == false) {
 8006316:	f1be 0f00 	cmp.w	lr, #0
 800631a:	d103      	bne.n	8006324 <chprintf+0x334>
    if (width < 0) {
 800631c:	2a00      	cmp	r2, #0
      width = -width;
 800631e:	f1ca 0a00 	rsb	sl, sl, #0
    if (width < 0) {
 8006322:	dc2e      	bgt.n	8006382 <chprintf+0x392>
    while (--i >= 0) {
 8006324:	2d00      	cmp	r5, #0
 8006326:	f6bf af74 	bge.w	8006212 <chprintf+0x222>
 800632a:	e780      	b.n	800622e <chprintf+0x23e>
    switch (c) {
 800632c:	f04f 0808 	mov.w	r8, #8
 8006330:	e7c3      	b.n	80062ba <chprintf+0x2ca>
      if ((s = va_arg(ap, char *)) == 0) {
 8006332:	465b      	mov	r3, fp
 8006334:	f853 bb04 	ldr.w	fp, [r3], #4
 8006338:	9301      	str	r3, [sp, #4]
 800633a:	f1bb 0f00 	cmp.w	fp, #0
 800633e:	d060      	beq.n	8006402 <chprintf+0x412>
      for (p = s; *p && (--precision >= 0); p++)
 8006340:	f89b 1000 	ldrb.w	r1, [fp]
      if (precision == 0) {
 8006344:	2800      	cmp	r0, #0
 8006346:	d04a      	beq.n	80063de <chprintf+0x3ee>
      for (p = s; *p && (--precision >= 0); p++)
 8006348:	2900      	cmp	r1, #0
 800634a:	d04c      	beq.n	80063e6 <chprintf+0x3f6>
 800634c:	3801      	subs	r0, #1
 800634e:	d44a      	bmi.n	80063e6 <chprintf+0x3f6>
 8006350:	4659      	mov	r1, fp
 8006352:	e001      	b.n	8006358 <chprintf+0x368>
 8006354:	42c5      	cmn	r5, r0
 8006356:	d405      	bmi.n	8006364 <chprintf+0x374>
 8006358:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800635c:	ebab 0501 	sub.w	r5, fp, r1
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1f7      	bne.n	8006354 <chprintf+0x364>
    i = (int)(p - s);
 8006364:	eba1 010b 	sub.w	r1, r1, fp
      filler = ' ';
 8006368:	2720      	movs	r7, #32
    if ((width -= i) < 0) {
 800636a:	1a52      	subs	r2, r2, r1
        i--;
 800636c:	1e4d      	subs	r5, r1, #1
 800636e:	e7d0      	b.n	8006312 <chprintf+0x322>
      *p++ = va_arg(ap, int);
 8006370:	f85b 3b04 	ldr.w	r3, [fp], #4
      filler = ' ';
 8006374:	2720      	movs	r7, #32
 8006376:	3a01      	subs	r2, #1
      *p++ = va_arg(ap, int);
 8006378:	f8cd b004 	str.w	fp, [sp, #4]
 800637c:	f88d 300c 	strb.w	r3, [sp, #12]
      break;
 8006380:	e73a      	b.n	80061f8 <chprintf+0x208>
      width = -width;
 8006382:	46d0      	mov	r8, sl
      if ((*s == '-' || *s == '+') && filler == '0') {
 8006384:	f89b 1000 	ldrb.w	r1, [fp]
 8006388:	292d      	cmp	r1, #45	; 0x2d
 800638a:	d00f      	beq.n	80063ac <chprintf+0x3bc>
 800638c:	292b      	cmp	r1, #43	; 0x2b
 800638e:	d00d      	beq.n	80063ac <chprintf+0x3bc>
        streamPut(chp, (uint8_t)filler);
 8006390:	6823      	ldr	r3, [r4, #0]
 8006392:	4639      	mov	r1, r7
 8006394:	4620      	mov	r0, r4
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	4798      	blx	r3
      } while (++width != 0);
 800639a:	f11a 0a01 	adds.w	sl, sl, #1
 800639e:	d1f7      	bne.n	8006390 <chprintf+0x3a0>
    while (--i >= 0) {
 80063a0:	2d00      	cmp	r5, #0
 80063a2:	eba9 0908 	sub.w	r9, r9, r8
 80063a6:	f6bf af34 	bge.w	8006212 <chprintf+0x222>
 80063aa:	e63b      	b.n	8006024 <chprintf+0x34>
      if ((*s == '-' || *s == '+') && filler == '0') {
 80063ac:	2f30      	cmp	r7, #48	; 0x30
 80063ae:	d1ef      	bne.n	8006390 <chprintf+0x3a0>
        streamPut(chp, (uint8_t)*s++);
 80063b0:	6822      	ldr	r2, [r4, #0]
 80063b2:	4620      	mov	r0, r4
 80063b4:	68d2      	ldr	r2, [r2, #12]
 80063b6:	f10b 0b01 	add.w	fp, fp, #1
        n++;
 80063ba:	f109 0901 	add.w	r9, r9, #1
    while (--i >= 0) {
 80063be:	3d01      	subs	r5, #1
        streamPut(chp, (uint8_t)*s++);
 80063c0:	4790      	blx	r2
        i--;
 80063c2:	e7e5      	b.n	8006390 <chprintf+0x3a0>
        *p++ = '-';
 80063c4:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 80063c6:	4240      	negs	r0, r0
        *p++ = '-';
 80063c8:	f88d 300c 	strb.w	r3, [sp, #12]
 80063cc:	f10d 080d 	add.w	r8, sp, #13
 80063d0:	ab03      	add	r3, sp, #12
 80063d2:	e74b      	b.n	800626c <chprintf+0x27c>
    if (width < 0) {
 80063d4:	4675      	mov	r5, lr
      width = -width;
 80063d6:	46d0      	mov	r8, sl
    if (width < 0) {
 80063d8:	f10d 0b0c 	add.w	fp, sp, #12
 80063dc:	e7d2      	b.n	8006384 <chprintf+0x394>
      for (p = s; *p && (--precision >= 0); p++)
 80063de:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 80063e2:	2900      	cmp	r1, #0
 80063e4:	d1b4      	bne.n	8006350 <chprintf+0x360>
    if ((width -= i) < 0) {
 80063e6:	ea22 7ae2 	bic.w	sl, r2, r2, asr #31
    if (left_align == false) {
 80063ea:	f1be 0f00 	cmp.w	lr, #0
 80063ee:	d103      	bne.n	80063f8 <chprintf+0x408>
    if (width < 0) {
 80063f0:	2a00      	cmp	r2, #0
      width = -width;
 80063f2:	f1ca 0a00 	rsb	sl, sl, #0
    if (width < 0) {
 80063f6:	dc12      	bgt.n	800641e <chprintf+0x42e>
    if (left_align == false) {
 80063f8:	2720      	movs	r7, #32
 80063fa:	e718      	b.n	800622e <chprintf+0x23e>
    switch (c) {
 80063fc:	f04f 080a 	mov.w	r8, #10
 8006400:	e75b      	b.n	80062ba <chprintf+0x2ca>
      if (precision == 0) {
 8006402:	b938      	cbnz	r0, 8006414 <chprintf+0x424>
      for (p = s; *p && (--precision >= 0); p++)
 8006404:	f647 70fe 	movw	r0, #32766	; 0x7ffe
        s = "(null)";
 8006408:	f8df b020 	ldr.w	fp, [pc, #32]	; 800642c <chprintf+0x43c>
 800640c:	e7a0      	b.n	8006350 <chprintf+0x360>
    p = tmpbuf;
 800640e:	ab03      	add	r3, sp, #12
 8006410:	4698      	mov	r8, r3
 8006412:	e72b      	b.n	800626c <chprintf+0x27c>
        s = "(null)";
 8006414:	f8df b014 	ldr.w	fp, [pc, #20]	; 800642c <chprintf+0x43c>
 8006418:	e798      	b.n	800634c <chprintf+0x35c>
  int n = 0;
 800641a:	4689      	mov	r9, r1
  return formatted_bytes;
 800641c:	e6e1      	b.n	80061e2 <chprintf+0x1f2>
      width = -width;
 800641e:	46d0      	mov	r8, sl
    if (width < 0) {
 8006420:	2720      	movs	r7, #32
 8006422:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006426:	e7ad      	b.n	8006384 <chprintf+0x394>
 8006428:	cccccccd 	.word	0xcccccccd
 800642c:	08010378 	.word	0x08010378

08006430 <shellThread>:
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
THD_FUNCTION(shellThread, p) {
 8006430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  __sch_get_currthread()->name = name;
 8006434:	f8df 8208 	ldr.w	r8, [pc, #520]	; 8006640 <shellThread+0x210>
 8006438:	4a82      	ldr	r2, [pc, #520]	; (8006644 <shellThread+0x214>)
 800643a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800643e:	b09b      	sub	sp, #108	; 0x6c
  ShellHistory *shp = &hist;
#else
  ShellHistory *shp = NULL;
#endif

  chprintf(chp, SHELL_NEWLINE_STR);
 8006440:	4981      	ldr	r1, [pc, #516]	; (8006648 <shellThread+0x218>)
THD_FUNCTION(shellThread, p) {
 8006442:	9000      	str	r0, [sp, #0]
  const ShellCommand *scp = scfg->sc_commands;
 8006444:	e9d0 7000 	ldrd	r7, r0, [r0]
 8006448:	61da      	str	r2, [r3, #28]
 800644a:	9001      	str	r0, [sp, #4]
  chprintf(chp, SHELL_NEWLINE_STR);
 800644c:	4638      	mov	r0, r7
 800644e:	f7ff fdcf 	bl	8005ff0 <chprintf>
  chprintf(chp, "ChibiOS/RT Shell" SHELL_NEWLINE_STR);
 8006452:	4638      	mov	r0, r7
 8006454:	497d      	ldr	r1, [pc, #500]	; (800664c <shellThread+0x21c>)
 8006456:	f7ff fdcb 	bl	8005ff0 <chprintf>
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 800645a:	f8d8 300c 	ldr.w	r3, [r8, #12]
#if !defined(__CHIBIOS_NIL__)
  while (!chThdShouldTerminateX()) {
 800645e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006462:	075a      	lsls	r2, r3, #29
 8006464:	f100 809a 	bmi.w	800659c <shellThread+0x16c>
#else
  while (true) {
#endif
    chprintf(chp, SHELL_PROMPT_STR);
 8006468:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 8006650 <shellThread+0x220>
        p--;
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, SHELL_NEWLINE_STR);
 800646c:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 8006648 <shellThread+0x218>
 8006470:	ae0a      	add	r6, sp, #40	; 0x28
  char *p = line;
 8006472:	4635      	mov	r5, r6
    chprintf(chp, SHELL_PROMPT_STR);
 8006474:	4651      	mov	r1, sl
 8006476:	4638      	mov	r0, r7
 8006478:	f7ff fdba 	bl	8005ff0 <chprintf>
    if (shellGetLine(scfg, line, sizeof(line), shp)) {
 800647c:	9b00      	ldr	r3, [sp, #0]
 800647e:	681c      	ldr	r4, [r3, #0]
    if (streamRead(chp, (uint8_t *)&c, 1) == 0)
 8006480:	6823      	ldr	r3, [r4, #0]
 8006482:	2201      	movs	r2, #1
 8006484:	4620      	mov	r0, r4
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	f10d 010f 	add.w	r1, sp, #15
 800648c:	4798      	blx	r3
 800648e:	2800      	cmp	r0, #0
 8006490:	f000 809c 	beq.w	80065cc <shellThread+0x19c>
    if (c == 4) {
 8006494:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8006498:	2904      	cmp	r1, #4
 800649a:	f000 8093 	beq.w	80065c4 <shellThread+0x194>
    if ((c == 8) || (c == 127)) {
 800649e:	2908      	cmp	r1, #8
      continue;
    }
#endif
    if (c < 0x20)
      continue;
    if (p < line + size - 1) {
 80064a0:	f10d 0367 	add.w	r3, sp, #103	; 0x67
    if ((c == 8) || (c == 127)) {
 80064a4:	d010      	beq.n	80064c8 <shellThread+0x98>
 80064a6:	297f      	cmp	r1, #127	; 0x7f
 80064a8:	d00e      	beq.n	80064c8 <shellThread+0x98>
    if (c == '\r') {
 80064aa:	290d      	cmp	r1, #13
 80064ac:	d01f      	beq.n	80064ee <shellThread+0xbe>
    if (c < 0x20)
 80064ae:	291f      	cmp	r1, #31
 80064b0:	d9e6      	bls.n	8006480 <shellThread+0x50>
    if (p < line + size - 1) {
 80064b2:	429d      	cmp	r5, r3
 80064b4:	d2e4      	bcs.n	8006480 <shellThread+0x50>
      streamPut(chp, c);
 80064b6:	6823      	ldr	r3, [r4, #0]
 80064b8:	4620      	mov	r0, r4
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	4798      	blx	r3
      *p++ = (char)c;
 80064be:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80064c2:	f805 3b01 	strb.w	r3, [r5], #1
 80064c6:	e7db      	b.n	8006480 <shellThread+0x50>
      if (p != line) {
 80064c8:	42b5      	cmp	r5, r6
 80064ca:	d0d9      	beq.n	8006480 <shellThread+0x50>
        streamPut(chp, 0x08);
 80064cc:	6823      	ldr	r3, [r4, #0]
 80064ce:	2108      	movs	r1, #8
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	4620      	mov	r0, r4
 80064d4:	4798      	blx	r3
        streamPut(chp, 0x20);
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	2120      	movs	r1, #32
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	4620      	mov	r0, r4
 80064de:	4798      	blx	r3
        streamPut(chp, 0x08);
 80064e0:	6823      	ldr	r3, [r4, #0]
 80064e2:	2108      	movs	r1, #8
 80064e4:	4620      	mov	r0, r4
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	4798      	blx	r3
        p--;
 80064ea:	3d01      	subs	r5, #1
 80064ec:	e7c8      	b.n	8006480 <shellThread+0x50>
      *p = 0;
 80064ee:	f04f 0b00 	mov.w	fp, #0
      chprintf(chp, SHELL_NEWLINE_STR);
 80064f2:	4649      	mov	r1, r9
 80064f4:	4620      	mov	r0, r4
 80064f6:	f7ff fd7b 	bl	8005ff0 <chprintf>
    lp = parse_arguments(line, &tokp);
 80064fa:	a904      	add	r1, sp, #16
      *p = 0;
 80064fc:	f885 b000 	strb.w	fp, [r5]
    lp = parse_arguments(line, &tokp);
 8006500:	4630      	mov	r0, r6
 8006502:	f7fb f9cd 	bl	80018a0 <parse_arguments>
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8006506:	a904      	add	r1, sp, #16
    lp = parse_arguments(line, &tokp);
 8006508:	4605      	mov	r5, r0
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 800650a:	2000      	movs	r0, #0
 800650c:	ac05      	add	r4, sp, #20
 800650e:	f7fb f9c7 	bl	80018a0 <parse_arguments>
 8006512:	b160      	cbz	r0, 800652e <shellThread+0xfe>
      if (n >= SHELL_MAX_ARGUMENTS) {
 8006514:	f1bb 0f04 	cmp.w	fp, #4
 8006518:	d04d      	beq.n	80065b6 <shellThread+0x186>
      args[n++] = lp;
 800651a:	f844 0b04 	str.w	r0, [r4], #4
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 800651e:	a904      	add	r1, sp, #16
 8006520:	2000      	movs	r0, #0
      args[n++] = lp;
 8006522:	f10b 0b01 	add.w	fp, fp, #1
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8006526:	f7fb f9bb 	bl	80018a0 <parse_arguments>
 800652a:	2800      	cmp	r0, #0
 800652c:	d1f2      	bne.n	8006514 <shellThread+0xe4>
    args[n] = NULL;
 800652e:	ab1a      	add	r3, sp, #104	; 0x68
 8006530:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 8006534:	f843 0c54 	str.w	r0, [r3, #-84]
    if (cmd != NULL) {
 8006538:	b34d      	cbz	r5, 800658e <shellThread+0x15e>
      if (strcmp(cmd, "help") == 0) {
 800653a:	4628      	mov	r0, r5
 800653c:	4945      	ldr	r1, [pc, #276]	; (8006654 <shellThread+0x224>)
 800653e:	f7f9 fff7 	bl	8000530 <strcmp>
 8006542:	2800      	cmp	r0, #0
 8006544:	d14b      	bne.n	80065de <shellThread+0x1ae>
        if (n > 0) {
 8006546:	f1bb 0f00 	cmp.w	fp, #0
 800654a:	d159      	bne.n	8006600 <shellThread+0x1d0>
        chprintf(chp, "Commands: help ");
 800654c:	4638      	mov	r0, r7
 800654e:	4942      	ldr	r1, [pc, #264]	; (8006658 <shellThread+0x228>)
 8006550:	f7ff fd4e 	bl	8005ff0 <chprintf>
  while (scp->sc_name != NULL) {
 8006554:	4c41      	ldr	r4, [pc, #260]	; (800665c <shellThread+0x22c>)
 8006556:	4a42      	ldr	r2, [pc, #264]	; (8006660 <shellThread+0x230>)
    chprintf(chp, "%s ", scp->sc_name);
 8006558:	4d42      	ldr	r5, [pc, #264]	; (8006664 <shellThread+0x234>)
 800655a:	4629      	mov	r1, r5
 800655c:	4638      	mov	r0, r7
 800655e:	f7ff fd47 	bl	8005ff0 <chprintf>
  while (scp->sc_name != NULL) {
 8006562:	f854 2f08 	ldr.w	r2, [r4, #8]!
 8006566:	2a00      	cmp	r2, #0
 8006568:	d1f7      	bne.n	800655a <shellThread+0x12a>
        if (scp != NULL)
 800656a:	9b01      	ldr	r3, [sp, #4]
 800656c:	b15b      	cbz	r3, 8006586 <shellThread+0x156>
  while (scp->sc_name != NULL) {
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	b14a      	cbz	r2, 8006586 <shellThread+0x156>
 8006572:	461c      	mov	r4, r3
    chprintf(chp, "%s ", scp->sc_name);
 8006574:	4d3b      	ldr	r5, [pc, #236]	; (8006664 <shellThread+0x234>)
 8006576:	4629      	mov	r1, r5
 8006578:	4638      	mov	r0, r7
 800657a:	f7ff fd39 	bl	8005ff0 <chprintf>
  while (scp->sc_name != NULL) {
 800657e:	f854 2f08 	ldr.w	r2, [r4, #8]!
 8006582:	2a00      	cmp	r2, #0
 8006584:	d1f7      	bne.n	8006576 <shellThread+0x146>
        chprintf(chp, SHELL_NEWLINE_STR);
 8006586:	4649      	mov	r1, r9
 8006588:	4638      	mov	r0, r7
 800658a:	f7ff fd31 	bl	8005ff0 <chprintf>
 800658e:	f8d8 300c 	ldr.w	r3, [r8, #12]
  while (!chThdShouldTerminateX()) {
 8006592:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006596:	075b      	lsls	r3, r3, #29
 8006598:	f57f af6b 	bpl.w	8006472 <shellThread+0x42>
 800659c:	2330      	movs	r3, #48	; 0x30
 800659e:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chEvtBroadcastI(event_source_t *esp) {

  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 80065a2:	2100      	movs	r1, #0
 80065a4:	4830      	ldr	r0, [pc, #192]	; (8006668 <shellThread+0x238>)
 80065a6:	f7fe fe53 	bl	8005250 <chEvtBroadcastFlagsI>
  chThdExitS(msg);
 80065aa:	4608      	mov	r0, r1
 80065ac:	f7fe f928 	bl	8004800 <chThdExitS>
}
 80065b0:	b01b      	add	sp, #108	; 0x6c
 80065b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        chprintf(chp, "too many arguments" SHELL_NEWLINE_STR);
 80065b6:	4638      	mov	r0, r7
 80065b8:	492c      	ldr	r1, [pc, #176]	; (800666c <shellThread+0x23c>)
 80065ba:	f7ff fd19 	bl	8005ff0 <chprintf>
    args[n] = NULL;
 80065be:	2300      	movs	r3, #0
 80065c0:	9309      	str	r3, [sp, #36]	; 0x24
    if (cmd != NULL) {
 80065c2:	e7e4      	b.n	800658e <shellThread+0x15e>
      chprintf(chp, "^D");
 80065c4:	4620      	mov	r0, r4
 80065c6:	492a      	ldr	r1, [pc, #168]	; (8006670 <shellThread+0x240>)
 80065c8:	f7ff fd12 	bl	8005ff0 <chprintf>
      chprintf(chp, SHELL_NEWLINE_STR);
 80065cc:	4638      	mov	r0, r7
 80065ce:	491e      	ldr	r1, [pc, #120]	; (8006648 <shellThread+0x218>)
 80065d0:	f7ff fd0e 	bl	8005ff0 <chprintf>
      chprintf(chp, "logout");
 80065d4:	4638      	mov	r0, r7
 80065d6:	4927      	ldr	r1, [pc, #156]	; (8006674 <shellThread+0x244>)
 80065d8:	f7ff fd0a 	bl	8005ff0 <chprintf>
      break;
 80065dc:	e7de      	b.n	800659c <shellThread+0x16c>
 80065de:	4c1f      	ldr	r4, [pc, #124]	; (800665c <shellThread+0x22c>)
  while (scp->sc_name != NULL) {
 80065e0:	481f      	ldr	r0, [pc, #124]	; (8006660 <shellThread+0x230>)
 80065e2:	e002      	b.n	80065ea <shellThread+0x1ba>
 80065e4:	f854 0f08 	ldr.w	r0, [r4, #8]!
 80065e8:	b180      	cbz	r0, 800660c <shellThread+0x1dc>
    if (strcmp(scp->sc_name, name) == 0) {
 80065ea:	4629      	mov	r1, r5
 80065ec:	f7f9 ffa0 	bl	8000530 <strcmp>
 80065f0:	2800      	cmp	r0, #0
 80065f2:	d1f7      	bne.n	80065e4 <shellThread+0x1b4>
      scp->sc_function(chp, argc, argv);
 80065f4:	4659      	mov	r1, fp
 80065f6:	4638      	mov	r0, r7
 80065f8:	6863      	ldr	r3, [r4, #4]
 80065fa:	aa05      	add	r2, sp, #20
 80065fc:	4798      	blx	r3
      return false;
 80065fe:	e7c6      	b.n	800658e <shellThread+0x15e>
          shellUsage(chp, "help");
 8006600:	4638      	mov	r0, r7
 8006602:	4a14      	ldr	r2, [pc, #80]	; (8006654 <shellThread+0x224>)
 8006604:	491c      	ldr	r1, [pc, #112]	; (8006678 <shellThread+0x248>)
 8006606:	f7ff fcf3 	bl	8005ff0 <chprintf>
          continue;
 800660a:	e7c0      	b.n	800658e <shellThread+0x15e>
      else if (cmdexec(shell_local_commands, chp, cmd, n, args) &&
 800660c:	9b01      	ldr	r3, [sp, #4]
 800660e:	b163      	cbz	r3, 800662a <shellThread+0x1fa>
  while (scp->sc_name != NULL) {
 8006610:	6818      	ldr	r0, [r3, #0]
 8006612:	b150      	cbz	r0, 800662a <shellThread+0x1fa>
 8006614:	461c      	mov	r4, r3
 8006616:	e002      	b.n	800661e <shellThread+0x1ee>
 8006618:	f854 0f08 	ldr.w	r0, [r4, #8]!
 800661c:	b128      	cbz	r0, 800662a <shellThread+0x1fa>
    if (strcmp(scp->sc_name, name) == 0) {
 800661e:	4629      	mov	r1, r5
 8006620:	f7f9 ff86 	bl	8000530 <strcmp>
 8006624:	2800      	cmp	r0, #0
 8006626:	d1f7      	bne.n	8006618 <shellThread+0x1e8>
 8006628:	e7e4      	b.n	80065f4 <shellThread+0x1c4>
        chprintf(chp, "%s", cmd);
 800662a:	462a      	mov	r2, r5
 800662c:	4638      	mov	r0, r7
 800662e:	4913      	ldr	r1, [pc, #76]	; (800667c <shellThread+0x24c>)
 8006630:	f7ff fcde 	bl	8005ff0 <chprintf>
        chprintf(chp, " ?" SHELL_NEWLINE_STR);
 8006634:	4638      	mov	r0, r7
 8006636:	4912      	ldr	r1, [pc, #72]	; (8006680 <shellThread+0x250>)
 8006638:	f7ff fcda 	bl	8005ff0 <chprintf>
 800663c:	e7a7      	b.n	800658e <shellThread+0x15e>
 800663e:	bf00      	nop
 8006640:	20001050 	.word	0x20001050
 8006644:	08010388 	.word	0x08010388
 8006648:	080131b8 	.word	0x080131b8
 800664c:	08010390 	.word	0x08010390
 8006650:	080103a4 	.word	0x080103a4
 8006654:	080103d0 	.word	0x080103d0
 8006658:	080103e4 	.word	0x080103e4
 800665c:	080125e8 	.word	0x080125e8
 8006660:	08010380 	.word	0x08010380
 8006664:	080103f4 	.word	0x080103f4
 8006668:	2000123c 	.word	0x2000123c
 800666c:	080103b8 	.word	0x080103b8
 8006670:	080103ac 	.word	0x080103ac
 8006674:	080103b0 	.word	0x080103b0
 8006678:	080103d8 	.word	0x080103d8
 800667c:	080103f8 	.word	0x080103f8
 8006680:	080103fc 	.word	0x080103fc
	...

08006690 <cmd_exit>:
  if (argc > 0) {
 8006690:	2900      	cmp	r1, #0
 8006692:	dc0c      	bgt.n	80066ae <cmd_exit+0x1e>
static void cmd_exit(BaseSequentialStream *chp, int argc, char *argv[]) {
 8006694:	b508      	push	{r3, lr}
 8006696:	2330      	movs	r3, #48	; 0x30
 8006698:	f383 8811 	msr	BASEPRI, r3
 800669c:	2100      	movs	r1, #0
 800669e:	4806      	ldr	r0, [pc, #24]	; (80066b8 <cmd_exit+0x28>)
 80066a0:	f7fe fdd6 	bl	8005250 <chEvtBroadcastFlagsI>
}
 80066a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  chThdExitS(msg);
 80066a8:	4608      	mov	r0, r1
 80066aa:	f7fe b8a9 	b.w	8004800 <chThdExitS>
    shellUsage(chp, "exit");
 80066ae:	4a03      	ldr	r2, [pc, #12]	; (80066bc <cmd_exit+0x2c>)
 80066b0:	4903      	ldr	r1, [pc, #12]	; (80066c0 <cmd_exit+0x30>)
 80066b2:	f7ff bc9d 	b.w	8005ff0 <chprintf>
 80066b6:	bf00      	nop
 80066b8:	2000123c 	.word	0x2000123c
 80066bc:	08010380 	.word	0x08010380
 80066c0:	080103d8 	.word	0x080103d8
	...

080066d0 <cmd_info>:
  if (argc > 0) {
 80066d0:	2900      	cmp	r1, #0
 80066d2:	dc2e      	bgt.n	8006732 <cmd_info+0x62>
static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 80066d4:	b530      	push	{r4, r5, lr}
 80066d6:	4604      	mov	r4, r0
 80066d8:	b083      	sub	sp, #12
  chprintf(chp, "Kernel:       %s" SHELL_NEWLINE_STR, CH_KERNEL_VERSION);
 80066da:	4a18      	ldr	r2, [pc, #96]	; (800673c <cmd_info+0x6c>)
 80066dc:	4918      	ldr	r1, [pc, #96]	; (8006740 <cmd_info+0x70>)
 80066de:	f7ff fc87 	bl	8005ff0 <chprintf>
  chprintf(chp, "Compiler:     %s" SHELL_NEWLINE_STR, PORT_COMPILER_NAME);
 80066e2:	4620      	mov	r0, r4
 80066e4:	4a17      	ldr	r2, [pc, #92]	; (8006744 <cmd_info+0x74>)
 80066e6:	4918      	ldr	r1, [pc, #96]	; (8006748 <cmd_info+0x78>)
 80066e8:	f7ff fc82 	bl	8005ff0 <chprintf>
  chprintf(chp, "Architecture: %s" SHELL_NEWLINE_STR, PORT_ARCHITECTURE_NAME);
 80066ec:	4620      	mov	r0, r4
 80066ee:	4a17      	ldr	r2, [pc, #92]	; (800674c <cmd_info+0x7c>)
 80066f0:	4917      	ldr	r1, [pc, #92]	; (8006750 <cmd_info+0x80>)
 80066f2:	f7ff fc7d 	bl	8005ff0 <chprintf>
  chprintf(chp, "Core Variant: %s" SHELL_NEWLINE_STR, PORT_CORE_VARIANT_NAME);
 80066f6:	4620      	mov	r0, r4
 80066f8:	4a16      	ldr	r2, [pc, #88]	; (8006754 <cmd_info+0x84>)
 80066fa:	4917      	ldr	r1, [pc, #92]	; (8006758 <cmd_info+0x88>)
 80066fc:	f7ff fc78 	bl	8005ff0 <chprintf>
  chprintf(chp, "Port Info:    %s" SHELL_NEWLINE_STR, PORT_INFO);
 8006700:	4620      	mov	r0, r4
 8006702:	4a16      	ldr	r2, [pc, #88]	; (800675c <cmd_info+0x8c>)
 8006704:	4916      	ldr	r1, [pc, #88]	; (8006760 <cmd_info+0x90>)
 8006706:	f7ff fc73 	bl	8005ff0 <chprintf>
  chprintf(chp, "Build time:   %s%s%s" SHELL_NEWLINE_STR, __DATE__, " - ", __TIME__);
 800670a:	4d16      	ldr	r5, [pc, #88]	; (8006764 <cmd_info+0x94>)
  chprintf(chp, "Platform:     %s" SHELL_NEWLINE_STR, PLATFORM_NAME);
 800670c:	4620      	mov	r0, r4
 800670e:	4a16      	ldr	r2, [pc, #88]	; (8006768 <cmd_info+0x98>)
 8006710:	4916      	ldr	r1, [pc, #88]	; (800676c <cmd_info+0x9c>)
 8006712:	f7ff fc6d 	bl	8005ff0 <chprintf>
  chprintf(chp, "Board:        %s" SHELL_NEWLINE_STR, BOARD_NAME);
 8006716:	4620      	mov	r0, r4
 8006718:	4a15      	ldr	r2, [pc, #84]	; (8006770 <cmd_info+0xa0>)
 800671a:	4916      	ldr	r1, [pc, #88]	; (8006774 <cmd_info+0xa4>)
 800671c:	f7ff fc68 	bl	8005ff0 <chprintf>
  chprintf(chp, "Build time:   %s%s%s" SHELL_NEWLINE_STR, __DATE__, " - ", __TIME__);
 8006720:	4620      	mov	r0, r4
 8006722:	4b15      	ldr	r3, [pc, #84]	; (8006778 <cmd_info+0xa8>)
 8006724:	4a15      	ldr	r2, [pc, #84]	; (800677c <cmd_info+0xac>)
 8006726:	4916      	ldr	r1, [pc, #88]	; (8006780 <cmd_info+0xb0>)
 8006728:	9500      	str	r5, [sp, #0]
 800672a:	f7ff fc61 	bl	8005ff0 <chprintf>
}
 800672e:	b003      	add	sp, #12
 8006730:	bd30      	pop	{r4, r5, pc}
    shellUsage(chp, "info");
 8006732:	4a14      	ldr	r2, [pc, #80]	; (8006784 <cmd_info+0xb4>)
 8006734:	4914      	ldr	r1, [pc, #80]	; (8006788 <cmd_info+0xb8>)
 8006736:	f7ff bc5b 	b.w	8005ff0 <chprintf>
 800673a:	bf00      	nop
 800673c:	0801040c 	.word	0x0801040c
 8006740:	08010414 	.word	0x08010414
 8006744:	08010428 	.word	0x08010428
 8006748:	08010448 	.word	0x08010448
 800674c:	0801045c 	.word	0x0801045c
 8006750:	08010464 	.word	0x08010464
 8006754:	08010478 	.word	0x08010478
 8006758:	08010484 	.word	0x08010484
 800675c:	08010498 	.word	0x08010498
 8006760:	080104b0 	.word	0x080104b0
 8006764:	08010540 	.word	0x08010540
 8006768:	080104c4 	.word	0x080104c4
 800676c:	080130d8 	.word	0x080130d8
 8006770:	080104f0 	.word	0x080104f0
 8006774:	08010504 	.word	0x08010504
 8006778:	08010518 	.word	0x08010518
 800677c:	0801051c 	.word	0x0801051c
 8006780:	08010528 	.word	0x08010528
 8006784:	08010404 	.word	0x08010404
 8006788:	080103d8 	.word	0x080103d8
 800678c:	00000000 	.word	0x00000000

08006790 <cmd_echo>:
  if (argc != 1) {
 8006790:	2901      	cmp	r1, #1
 8006792:	d003      	beq.n	800679c <cmd_echo+0xc>
    shellUsage(chp, "echo \"message\"");
 8006794:	4a03      	ldr	r2, [pc, #12]	; (80067a4 <cmd_echo+0x14>)
 8006796:	4904      	ldr	r1, [pc, #16]	; (80067a8 <cmd_echo+0x18>)
 8006798:	f7ff bc2a 	b.w	8005ff0 <chprintf>
  chprintf(chp, "%s" SHELL_NEWLINE_STR, argv[0]);
 800679c:	6812      	ldr	r2, [r2, #0]
 800679e:	4903      	ldr	r1, [pc, #12]	; (80067ac <cmd_echo+0x1c>)
 80067a0:	f7ff bc26 	b.w	8005ff0 <chprintf>
 80067a4:	0801054c 	.word	0x0801054c
 80067a8:	080103d8 	.word	0x080103d8
 80067ac:	08013080 	.word	0x08013080

080067b0 <cmd_systime>:
  if (argc > 0) {
 80067b0:	2900      	cmp	r1, #0
 80067b2:	dc06      	bgt.n	80067c2 <cmd_systime+0x12>
 80067b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80067b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  chprintf(chp, "%lu" SHELL_NEWLINE_STR, (unsigned long)chVTGetSystemTimeX());
 80067ba:	4904      	ldr	r1, [pc, #16]	; (80067cc <cmd_systime+0x1c>)
 80067bc:	b292      	uxth	r2, r2
 80067be:	f7ff bc17 	b.w	8005ff0 <chprintf>
    shellUsage(chp, "systime");
 80067c2:	4a03      	ldr	r2, [pc, #12]	; (80067d0 <cmd_systime+0x20>)
 80067c4:	4903      	ldr	r1, [pc, #12]	; (80067d4 <cmd_systime+0x24>)
 80067c6:	f7ff bc13 	b.w	8005ff0 <chprintf>
 80067ca:	bf00      	nop
 80067cc:	08010564 	.word	0x08010564
 80067d0:	0801055c 	.word	0x0801055c
 80067d4:	080103d8 	.word	0x080103d8
	...

080067e0 <cmd_mem>:
  if (argc > 0) {
 80067e0:	2900      	cmp	r1, #0
 80067e2:	dc37      	bgt.n	8006854 <cmd_mem+0x74>
static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 80067e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e6:	4606      	mov	r6, r0
 80067e8:	2330      	movs	r3, #48	; 0x30
 80067ea:	f383 8811 	msr	BASEPRI, r3
 80067ee:	4d1d      	ldr	r5, [pc, #116]	; (8006864 <cmd_mem+0x84>)
 80067f0:	2400      	movs	r4, #0
 80067f2:	f105 0014 	add.w	r0, r5, #20
 80067f6:	f7fe f9c3 	bl	8004b80 <chMtxLockS>
 80067fa:	f384 8811 	msr	BASEPRI, r4
  while (H_FREE_NEXT(qp) != NULL) {
 80067fe:	68eb      	ldr	r3, [r5, #12]
 8006800:	b363      	cbz	r3, 800685c <cmd_mem+0x7c>
  tpages = 0U;
 8006802:	4622      	mov	r2, r4
  n = 0U;
 8006804:	4627      	mov	r7, r4
    size_t pages = H_FREE_PAGES(H_FREE_NEXT(qp));
 8006806:	6859      	ldr	r1, [r3, #4]
  while (H_FREE_NEXT(qp) != NULL) {
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	428c      	cmp	r4, r1
 800680c:	bf38      	it	cc
 800680e:	460c      	movcc	r4, r1
    n++;
 8006810:	3701      	adds	r7, #1
    tpages += pages;
 8006812:	440a      	add	r2, r1
  while (H_FREE_NEXT(qp) != NULL) {
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1f6      	bne.n	8006806 <cmd_mem+0x26>
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 8006818:	00d5      	lsls	r5, r2, #3
    *largestp = lpages * CH_HEAP_ALIGNMENT;
 800681a:	00e4      	lsls	r4, r4, #3
  H_UNLOCK(heapp);
 800681c:	4812      	ldr	r0, [pc, #72]	; (8006868 <cmd_mem+0x88>)
 800681e:	f7fe fa47 	bl	8004cb0 <chMtxUnlock>
 */
void chCoreGetStatusX(memory_area_t *map) {

  map->base = ch_memcore.basemem;
  /*lint -save -e9033 [10.8] The cast is safe.*/
  map->size = (size_t)(ch_memcore.topmem - ch_memcore.basemem);
 8006822:	4b12      	ldr	r3, [pc, #72]	; (800686c <cmd_mem+0x8c>)
  chprintf(chp, "core free memory : %u bytes" SHELL_NEWLINE_STR, area.size);
 8006824:	4630      	mov	r0, r6
 8006826:	685a      	ldr	r2, [r3, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4911      	ldr	r1, [pc, #68]	; (8006870 <cmd_mem+0x90>)
 800682c:	1ad2      	subs	r2, r2, r3
 800682e:	f7ff fbdf 	bl	8005ff0 <chprintf>
  chprintf(chp, "heap fragments   : %u" SHELL_NEWLINE_STR, n);
 8006832:	463a      	mov	r2, r7
 8006834:	4630      	mov	r0, r6
 8006836:	490f      	ldr	r1, [pc, #60]	; (8006874 <cmd_mem+0x94>)
 8006838:	f7ff fbda 	bl	8005ff0 <chprintf>
  chprintf(chp, "heap free total  : %u bytes" SHELL_NEWLINE_STR, total);
 800683c:	462a      	mov	r2, r5
 800683e:	4630      	mov	r0, r6
 8006840:	490d      	ldr	r1, [pc, #52]	; (8006878 <cmd_mem+0x98>)
 8006842:	f7ff fbd5 	bl	8005ff0 <chprintf>
  chprintf(chp, "heap free largest: %u bytes" SHELL_NEWLINE_STR, largest);
 8006846:	4622      	mov	r2, r4
 8006848:	4630      	mov	r0, r6
}
 800684a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  chprintf(chp, "heap free largest: %u bytes" SHELL_NEWLINE_STR, largest);
 800684e:	490b      	ldr	r1, [pc, #44]	; (800687c <cmd_mem+0x9c>)
 8006850:	f7ff bbce 	b.w	8005ff0 <chprintf>
    shellUsage(chp, "mem");
 8006854:	4a0a      	ldr	r2, [pc, #40]	; (8006880 <cmd_mem+0xa0>)
 8006856:	490b      	ldr	r1, [pc, #44]	; (8006884 <cmd_mem+0xa4>)
 8006858:	f7ff bbca 	b.w	8005ff0 <chprintf>
  while (H_FREE_NEXT(qp) != NULL) {
 800685c:	461c      	mov	r4, r3
 800685e:	461d      	mov	r5, r3
  n = 0U;
 8006860:	461f      	mov	r7, r3
 8006862:	e7db      	b.n	800681c <cmd_mem+0x3c>
 8006864:	2000111c 	.word	0x2000111c
 8006868:	20001130 	.word	0x20001130
 800686c:	200010e0 	.word	0x200010e0
 8006870:	08010570 	.word	0x08010570
 8006874:	08010590 	.word	0x08010590
 8006878:	080105a8 	.word	0x080105a8
 800687c:	080105c8 	.word	0x080105c8
 8006880:	0801056c 	.word	0x0801056c
 8006884:	080103d8 	.word	0x080103d8
	...

08006890 <cmd_threads>:
  if (argc > 0) {
 8006890:	2900      	cmp	r1, #0
 8006892:	dc5f      	bgt.n	8006954 <cmd_threads+0xc4>
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 8006894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  chprintf(chp, "core stklimit    stack     addr refs prio     state         name" SHELL_NEWLINE_STR);
 8006898:	4930      	ldr	r1, [pc, #192]	; (800695c <cmd_threads+0xcc>)
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 800689a:	b087      	sub	sp, #28
 800689c:	4607      	mov	r7, r0
 800689e:	2630      	movs	r6, #48	; 0x30
  chprintf(chp, "core stklimit    stack     addr refs prio     state         name" SHELL_NEWLINE_STR);
 80068a0:	f7ff fba6 	bl	8005ff0 <chprintf>
 80068a4:	f386 8811 	msr	BASEPRI, r6
thread_t *chRegFirstThread(void) {
  thread_t *tp;
  uint8_t *p;

  chSysLock();
  p = (uint8_t *)REG_HEADER(currcore)->next;
 80068a8:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8006960 <cmd_threads+0xd0>
 80068ac:	f858 3f28 	ldr.w	r3, [r8, #40]!
  /*lint -save -e413 [1.3] Safe to subtract a calculated offset.*/
  tp = threadref((p - __CH_OFFSETOF(thread_t, rqueue)));
  /*lint -restore*/
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->refs++;
 80068b0:	7e9a      	ldrb	r2, [r3, #26]
  tp = threadref((p - __CH_OFFSETOF(thread_t, rqueue)));
 80068b2:	f1a3 0410 	sub.w	r4, r3, #16
  tp->refs++;
 80068b6:	3201      	adds	r2, #1
 80068b8:	769a      	strb	r2, [r3, #26]
 80068ba:	2300      	movs	r3, #0
 80068bc:	f383 8811 	msr	BASEPRI, r3
#endif
  chSysUnlock();

  return tp;
 80068c0:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 8006964 <cmd_threads+0xd4>
    chprintf(chp, "%4lu %08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 80068c4:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8006968 <cmd_threads+0xd8>
 80068c8:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 800696c <cmd_threads+0xdc>
             tp->name == NULL ? "" : tp->name);
 80068cc:	69e5      	ldr	r5, [r4, #28]
             states[tp->state],
 80068ce:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    chprintf(chp, "%4lu %08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 80068d2:	2d00      	cmp	r5, #0
 80068d4:	bf08      	it	eq
 80068d6:	4655      	moveq	r5, sl
             (uint32_t)tp->refs - 1,
 80068d8:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    core_id = tp->owner->core_id;
 80068dc:	69a3      	ldr	r3, [r4, #24]
    chprintf(chp, "%4lu %08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 80068de:	f8d4 c00c 	ldr.w	ip, [r4, #12]
             (uint32_t)tp->hdr.pqueue.prio,
 80068e2:	f8d4 e008 	ldr.w	lr, [r4, #8]
    chprintf(chp, "%4lu %08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 80068e6:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
 80068ea:	3801      	subs	r0, #1
    core_id = tp->owner->core_id;
 80068ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    uint32_t stklimit = (uint32_t)tp->wabase;
 80068ee:	6a23      	ldr	r3, [r4, #32]
    chprintf(chp, "%4lu %08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 80068f0:	e9cd e103 	strd	lr, r1, [sp, #12]
 80068f4:	9002      	str	r0, [sp, #8]
 80068f6:	4649      	mov	r1, r9
 80068f8:	4638      	mov	r0, r7
 80068fa:	e9cd c400 	strd	ip, r4, [sp]
 80068fe:	9505      	str	r5, [sp, #20]
 8006900:	f7ff fb76 	bl	8005ff0 <chprintf>
 8006904:	f386 8811 	msr	BASEPRI, r6
  ch_queue_t *nqp;

  chSysLock();

  /* Next element in the registry queue.*/
  nqp = tp->rqueue.next;
 8006908:	6923      	ldr	r3, [r4, #16]
  if (nqp == REG_HEADER(currcore)) {
 800690a:	4543      	cmp	r3, r8
 800690c:	d020      	beq.n	8006950 <cmd_threads+0xc0>
    /*lint -restore*/

#if CH_CFG_USE_DYNAMIC == TRUE
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");

    ntp->refs++;
 800690e:	7e9a      	ldrb	r2, [r3, #26]
    ntp = threadref((p - __CH_OFFSETOF(thread_t, rqueue)));
 8006910:	f1a3 0510 	sub.w	r5, r3, #16
    ntp->refs++;
 8006914:	3201      	adds	r2, #1
 8006916:	769a      	strb	r2, [r3, #26]
 8006918:	2200      	movs	r2, #0
 800691a:	f382 8811 	msr	BASEPRI, r2
 800691e:	f386 8811 	msr	BASEPRI, r6
  tp->refs--;
 8006922:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8006926:	3b01      	subs	r3, #1
 8006928:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 800692c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800692e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8006932:	2b0f      	cmp	r3, #15
 8006934:	d004      	beq.n	8006940 <cmd_threads+0xb0>
 8006936:	f382 8811 	msr	BASEPRI, r2
  } while (tp != NULL);
 800693a:	b135      	cbz	r5, 800694a <cmd_threads+0xba>
 800693c:	462c      	mov	r4, r5
 800693e:	e7c5      	b.n	80068cc <cmd_threads+0x3c>
 8006940:	4620      	mov	r0, r4
 8006942:	f7ff f84d 	bl	80059e0 <chThdRelease.part.0>
 8006946:	2d00      	cmp	r5, #0
 8006948:	d1f8      	bne.n	800693c <cmd_threads+0xac>
}
 800694a:	b007      	add	sp, #28
 800694c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ntp = NULL;
 8006950:	2500      	movs	r5, #0
 8006952:	e7e1      	b.n	8006918 <cmd_threads+0x88>
    shellUsage(chp, "threads");
 8006954:	4a06      	ldr	r2, [pc, #24]	; (8006970 <cmd_threads+0xe0>)
 8006956:	4907      	ldr	r1, [pc, #28]	; (8006974 <cmd_threads+0xe4>)
 8006958:	f7ff bb4a 	b.w	8005ff0 <chprintf>
 800695c:	080105e8 	.word	0x080105e8
 8006960:	20001050 	.word	0x20001050
 8006964:	08012628 	.word	0x08012628
 8006968:	08010400 	.word	0x08010400
 800696c:	0801062c 	.word	0x0801062c
 8006970:	080118b8 	.word	0x080118b8
 8006974:	080103d8 	.word	0x080103d8
	...

08006980 <cmd_test>:
  BaseSequentialStream *chp = (BaseSequentialStream *)arg;
  test_execute(chp, &oslib_test_suite);
}

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 8006980:	b530      	push	{r4, r5, lr}
  thread_t *tp;
  tfunc_t tfp;

  (void)argv;
  if (argc != 1) {
 8006982:	2901      	cmp	r1, #1
static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 8006984:	4604      	mov	r4, r0
 8006986:	b083      	sub	sp, #12
  if (argc != 1) {
 8006988:	d121      	bne.n	80069ce <cmd_test+0x4e>
 800698a:	6810      	ldr	r0, [r2, #0]
    shellUsage(chp, "test rt|oslib");
    return;
  }
  if (!strcmp(argv[0], "rt")) {
 800698c:	7803      	ldrb	r3, [r0, #0]
 800698e:	2b72      	cmp	r3, #114	; 0x72
 8006990:	d015      	beq.n	80069be <cmd_test+0x3e>
    tfp = test_rt;
  }
  else if (!strcmp(argv[0], "oslib")) {
 8006992:	4916      	ldr	r1, [pc, #88]	; (80069ec <cmd_test+0x6c>)
 8006994:	f7f9 fdcc 	bl	8000530 <strcmp>
 8006998:	b9c8      	cbnz	r0, 80069ce <cmd_test+0x4e>
    tfp = test_oslib;
 800699a:	4d15      	ldr	r5, [pc, #84]	; (80069f0 <cmd_test+0x70>)
  return __sch_get_currthread();
 800699c:	4b15      	ldr	r3, [pc, #84]	; (80069f4 <cmd_test+0x74>)
  }
  else {
    shellUsage(chp, "test rt|oslib");
    return;
  }
  tp = chThdCreateFromHeap(NULL, SHELL_CMD_TEST_WA_SIZE,
 800699e:	f44f 713c 	mov.w	r1, #752	; 0x2f0
  return chThdGetSelfX()->hdr.pqueue.prio;
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	2000      	movs	r0, #0
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	4a13      	ldr	r2, [pc, #76]	; (80069f8 <cmd_test+0x78>)
 80069aa:	e9cd 5400 	strd	r5, r4, [sp]
 80069ae:	f7fe ff9f 	bl	80058f0 <chThdCreateFromHeap>
                           "test", chThdGetPriorityX(),
                           tfp, chp);
  if (tp == NULL) {
 80069b2:	b1a0      	cbz	r0, 80069de <cmd_test+0x5e>
    chprintf(chp, "out of memory" SHELL_NEWLINE_STR);
    return;
  }
  chThdWait(tp);
}
 80069b4:	b003      	add	sp, #12
 80069b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  chThdWait(tp);
 80069ba:	f7ff b831 	b.w	8005a20 <chThdWait>
  if (!strcmp(argv[0], "rt")) {
 80069be:	7843      	ldrb	r3, [r0, #1]
 80069c0:	2b74      	cmp	r3, #116	; 0x74
 80069c2:	d1e6      	bne.n	8006992 <cmd_test+0x12>
 80069c4:	7883      	ldrb	r3, [r0, #2]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1e3      	bne.n	8006992 <cmd_test+0x12>
    tfp = test_rt;
 80069ca:	4d0c      	ldr	r5, [pc, #48]	; (80069fc <cmd_test+0x7c>)
 80069cc:	e7e6      	b.n	800699c <cmd_test+0x1c>
    shellUsage(chp, "test rt|oslib");
 80069ce:	4620      	mov	r0, r4
 80069d0:	4a0b      	ldr	r2, [pc, #44]	; (8006a00 <cmd_test+0x80>)
 80069d2:	490c      	ldr	r1, [pc, #48]	; (8006a04 <cmd_test+0x84>)
}
 80069d4:	b003      	add	sp, #12
 80069d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    shellUsage(chp, "test rt|oslib");
 80069da:	f7ff bb09 	b.w	8005ff0 <chprintf>
    chprintf(chp, "out of memory" SHELL_NEWLINE_STR);
 80069de:	4620      	mov	r0, r4
 80069e0:	4909      	ldr	r1, [pc, #36]	; (8006a08 <cmd_test+0x88>)
}
 80069e2:	b003      	add	sp, #12
 80069e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    chprintf(chp, "out of memory" SHELL_NEWLINE_STR);
 80069e8:	f7ff bb02 	b.w	8005ff0 <chprintf>
 80069ec:	08010660 	.word	0x08010660
 80069f0:	08001921 	.word	0x08001921
 80069f4:	20001050 	.word	0x20001050
 80069f8:	08011770 	.word	0x08011770
 80069fc:	08001901 	.word	0x08001901
 8006a00:	08010658 	.word	0x08010658
 8006a04:	080103d8 	.word	0x080103d8
 8006a08:	08010668 	.word	0x08010668
 8006a0c:	00000000 	.word	0x00000000

08006a10 <put_utf.lto_priv.0>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
 8006a10:	287f      	cmp	r0, #127	; 0x7f
 8006a12:	d805      	bhi.n	8006a20 <put_utf.lto_priv.0+0x10>
		c = (WCHAR)uni;
 8006a14:	b283      	uxth	r3, r0
		if (szb < 2) return 0;
		*buf++ = (char)(wc >> 8);	/* Store DBC 1st byte */
		*buf++ = (TCHAR)wc;			/* Store DBC 2nd byte */
		return 2;
	}
	if (wc == 0 || szb < 1) return 0;	/* Invalid char or buffer overflow? */
 8006a16:	b1eb      	cbz	r3, 8006a54 <put_utf.lto_priv.0+0x44>
 8006a18:	b1e2      	cbz	r2, 8006a54 <put_utf.lto_priv.0+0x44>
	*buf++ = (TCHAR)wc;					/* Store the character */
	return 1;
 8006a1a:	2001      	movs	r0, #1
	*buf++ = (TCHAR)wc;					/* Store the character */
 8006a1c:	700b      	strb	r3, [r1, #0]
	return 1;
 8006a1e:	4770      	bx	lr

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
 8006a20:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8006a24:	d216      	bcs.n	8006a54 <put_utf.lto_priv.0+0x44>
{
 8006a26:	b510      	push	{r4, lr}
 8006a28:	2300      	movs	r3, #0
 8006a2a:	f04f 0cc7 	mov.w	ip, #199	; 0xc7
 8006a2e:	4c0c      	ldr	r4, [pc, #48]	; (8006a60 <put_utf.lto_priv.0+0x50>)
 8006a30:	e003      	b.n	8006a3a <put_utf.lto_priv.0+0x2a>
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
 8006a32:	2b80      	cmp	r3, #128	; 0x80
 8006a34:	d012      	beq.n	8006a5c <put_utf.lto_priv.0+0x4c>
 8006a36:	f834 cf02 	ldrh.w	ip, [r4, #2]!
 8006a3a:	4560      	cmp	r0, ip
 8006a3c:	fa1f fe83 	uxth.w	lr, r3
 8006a40:	f103 0301 	add.w	r3, r3, #1
 8006a44:	d1f5      	bne.n	8006a32 <put_utf.lto_priv.0+0x22>
			c = (c + 0x80) & 0xFF;
 8006a46:	f10e 0380 	add.w	r3, lr, #128	; 0x80
 8006a4a:	b29b      	uxth	r3, r3
	if (wc == 0 || szb < 1) return 0;	/* Invalid char or buffer overflow? */
 8006a4c:	b122      	cbz	r2, 8006a58 <put_utf.lto_priv.0+0x48>
	return 1;
 8006a4e:	2001      	movs	r0, #1
	*buf++ = (TCHAR)wc;					/* Store the character */
 8006a50:	700b      	strb	r3, [r1, #0]
#endif
}
 8006a52:	bd10      	pop	{r4, pc}
	if (wc == 0 || szb < 1) return 0;	/* Invalid char or buffer overflow? */
 8006a54:	2000      	movs	r0, #0
 8006a56:	4770      	bx	lr
 8006a58:	4610      	mov	r0, r2
}
 8006a5a:	bd10      	pop	{r4, pc}
	if (wc == 0 || szb < 1) return 0;	/* Invalid char or buffer overflow? */
 8006a5c:	2000      	movs	r0, #0
}
 8006a5e:	bd10      	pop	{r4, pc}
 8006a60:	08012668 	.word	0x08012668
	...

08006a70 <get_ldnumber.lto_priv.0>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8006a70:	4601      	mov	r1, r0
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8006a72:	6800      	ldr	r0, [r0, #0]
	if (!tp) return vol;	/* Invalid path name? */
 8006a74:	b160      	cbz	r0, 8006a90 <get_ldnumber.lto_priv.0+0x20>
 8006a76:	4602      	mov	r2, r0
 8006a78:	e001      	b.n	8006a7e <get_ldnumber.lto_priv.0+0xe>
	do tc = *tt++; while (!IsTerminator(tc) && tc != ':');	/* Find a colon in the path */
 8006a7a:	2b3a      	cmp	r3, #58	; 0x3a
 8006a7c:	d005      	beq.n	8006a8a <get_ldnumber.lto_priv.0+0x1a>
 8006a7e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006a82:	2b1f      	cmp	r3, #31
 8006a84:	d8f9      	bhi.n	8006a7a <get_ldnumber.lto_priv.0+0xa>
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
 8006a86:	2000      	movs	r0, #0
 8006a88:	4770      	bx	lr
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8006a8a:	1c83      	adds	r3, r0, #2
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d002      	beq.n	8006a96 <get_ldnumber.lto_priv.0+0x26>
	if (!tp) return vol;	/* Invalid path name? */
 8006a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8006a94:	4770      	bx	lr
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8006a96:	7803      	ldrb	r3, [r0, #0]
 8006a98:	2b30      	cmp	r3, #48	; 0x30
 8006a9a:	d1f9      	bne.n	8006a90 <get_ldnumber.lto_priv.0+0x20>
			i = (int)*tp - '0';	/* Get the LD number */
 8006a9c:	2000      	movs	r0, #0
			*path = tt;		/* Snip the drive prefix off */
 8006a9e:	600a      	str	r2, [r1, #0]
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
	...

08006ab0 <move_window.part.0.lto_priv.0>:
static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
 8006ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (fs->wflag) {	/* Is the disk access window dirty? */
 8006ab4:	78c3      	ldrb	r3, [r0, #3]
static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
 8006ab6:	4604      	mov	r4, r0
 8006ab8:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Is the disk access window dirty? */
 8006aba:	b9ab      	cbnz	r3, 8006ae8 <move_window.part.0.lto_priv.0+0x38>
 8006abc:	f100 073c 	add.w	r7, r0, #60	; 0x3c
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 8006ac0:	7866      	ldrb	r6, [r4, #1]
    BYTE *buff,       /* Data buffer to store read data */
    DWORD sector,     /* Sector address (LBA) */
    UINT count        /* Number of sectors to read (1..255) */
)
{
  switch (pdrv) {
 8006ac2:	b956      	cbnz	r6, 8006ada <move_window.part.0.lto_priv.0+0x2a>
  case 0:
    if (blkGetDriverState(&FATFS_HAL_DEVICE) != BLK_READY)
 8006ac4:	481f      	ldr	r0, [pc, #124]	; (8006b44 <move_window.part.0.lto_priv.0+0x94>)
 8006ac6:	7903      	ldrb	r3, [r0, #4]
 8006ac8:	2b05      	cmp	r3, #5
 8006aca:	d106      	bne.n	8006ada <move_window.part.0.lto_priv.0+0x2a>
      return RES_NOTRDY;
    if (blkRead(&FATFS_HAL_DEVICE, sector, buff, count))
 8006acc:	6803      	ldr	r3, [r0, #0]
 8006ace:	463a      	mov	r2, r7
 8006ad0:	4629      	mov	r1, r5
 8006ad2:	695f      	ldr	r7, [r3, #20]
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	47b8      	blx	r7
 8006ad8:	b110      	cbz	r0, 8006ae0 <move_window.part.0.lto_priv.0+0x30>
				res = FR_DISK_ERR;
 8006ada:	2601      	movs	r6, #1
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 8006adc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
}
 8006ae0:	4630      	mov	r0, r6
			fs->winsect = sect;
 8006ae2:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8006ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const BYTE *buff, /* Data to be written */
    DWORD sector,     /* Sector address (LBA) */
    UINT count        /* Number of sectors to write (1..255) */
)
{
  switch (pdrv) {
 8006ae8:	7843      	ldrb	r3, [r0, #1]
 8006aea:	bb33      	cbnz	r3, 8006b3a <move_window.part.0.lto_priv.0+0x8a>
  case 0:
    if (blkGetDriverState(&FATFS_HAL_DEVICE) != BLK_READY)
 8006aec:	4e15      	ldr	r6, [pc, #84]	; (8006b44 <move_window.part.0.lto_priv.0+0x94>)
 8006aee:	7933      	ldrb	r3, [r6, #4]
 8006af0:	2b05      	cmp	r3, #5
 8006af2:	d122      	bne.n	8006b3a <move_window.part.0.lto_priv.0+0x8a>
      return RES_NOTRDY;
    if (blkWrite(&FATFS_HAL_DEVICE, sector, buff, count))
 8006af4:	6833      	ldr	r3, [r6, #0]
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 8006af6:	f100 073c 	add.w	r7, r0, #60	; 0x3c
 8006afa:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8006afe:	463a      	mov	r2, r7
 8006b00:	2301      	movs	r3, #1
 8006b02:	4630      	mov	r0, r6
 8006b04:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006b06:	47c0      	blx	r8
 8006b08:	b9b8      	cbnz	r0, 8006b3a <move_window.part.0.lto_priv.0+0x8a>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8006b0a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006b0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006b0e:	6a22      	ldr	r2, [r4, #32]
 8006b10:	1acb      	subs	r3, r1, r3
 8006b12:	4293      	cmp	r3, r2
			fs->wflag = 0;	/* Clear window dirty flag */
 8006b14:	70e0      	strb	r0, [r4, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8006b16:	d2d3      	bcs.n	8006ac0 <move_window.part.0.lto_priv.0+0x10>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8006b18:	78a3      	ldrb	r3, [r4, #2]
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d1d0      	bne.n	8006ac0 <move_window.part.0.lto_priv.0+0x10>
  switch (pdrv) {
 8006b1e:	7863      	ldrb	r3, [r4, #1]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1da      	bne.n	8006ada <move_window.part.0.lto_priv.0+0x2a>
    if (blkGetDriverState(&FATFS_HAL_DEVICE) != BLK_READY)
 8006b24:	7933      	ldrb	r3, [r6, #4]
 8006b26:	2b05      	cmp	r3, #5
 8006b28:	d1d7      	bne.n	8006ada <move_window.part.0.lto_priv.0+0x2a>
    if (blkWrite(&FATFS_HAL_DEVICE, sector, buff, count))
 8006b2a:	6833      	ldr	r3, [r6, #0]
 8006b2c:	4411      	add	r1, r2
 8006b2e:	4630      	mov	r0, r6
 8006b30:	463a      	mov	r2, r7
 8006b32:	699e      	ldr	r6, [r3, #24]
 8006b34:	2301      	movs	r3, #1
 8006b36:	47b0      	blx	r6
 8006b38:	e7c2      	b.n	8006ac0 <move_window.part.0.lto_priv.0+0x10>
			res = FR_DISK_ERR;
 8006b3a:	2601      	movs	r6, #1
}
 8006b3c:	4630      	mov	r0, r6
 8006b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b42:	bf00      	nop
 8006b44:	200008e8 	.word	0x200008e8
	...

08006b50 <get_fat.lto_priv.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006b50:	2901      	cmp	r1, #1
 8006b52:	d90f      	bls.n	8006b74 <get_fat.lto_priv.0+0x24>
{
 8006b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 8006b56:	6805      	ldr	r5, [r0, #0]
 8006b58:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006b5a:	69eb      	ldr	r3, [r5, #28]
 8006b5c:	428b      	cmp	r3, r1
 8006b5e:	d801      	bhi.n	8006b64 <get_fat.lto_priv.0+0x14>
		val = 1;	/* Internal error */
 8006b60:	2001      	movs	r0, #1
}
 8006b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
 8006b64:	782b      	ldrb	r3, [r5, #0]
 8006b66:	3b01      	subs	r3, #1
 8006b68:	2b03      	cmp	r3, #3
 8006b6a:	d8f9      	bhi.n	8006b60 <get_fat.lto_priv.0+0x10>
 8006b6c:	e8df f003 	tbb	[pc, r3]
 8006b70:	04172a3b 	.word	0x04172a3b
		val = 1;	/* Internal error */
 8006b74:	2001      	movs	r0, #1
}
 8006b76:	4770      	bx	lr
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 8006b78:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
 8006b7c:	ea53 0102 	orrs.w	r1, r3, r2
 8006b80:	d058      	beq.n	8006c34 <get_fat.lto_priv.0+0xe4>
 8006b82:	6881      	ldr	r1, [r0, #8]
 8006b84:	2900      	cmp	r1, #0
 8006b86:	d055      	beq.n	8006c34 <get_fat.lto_priv.0+0xe4>
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 8006b88:	79c6      	ldrb	r6, [r0, #7]
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8006b8a:	1a61      	subs	r1, r4, r1
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 8006b8c:	2e02      	cmp	r6, #2
 8006b8e:	d06e      	beq.n	8006c6e <get_fat.lto_priv.0+0x11e>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8006b90:	2e03      	cmp	r6, #3
 8006b92:	d152      	bne.n	8006c3a <get_fat.lto_priv.0+0xea>
 8006b94:	6983      	ldr	r3, [r0, #24]
 8006b96:	428b      	cmp	r3, r1
 8006b98:	d94f      	bls.n	8006c3a <get_fat.lto_priv.0+0xea>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 8006b9a:	1c60      	adds	r0, r4, #1
}
 8006b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006b9e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
	if (sect != fs->winsect) {	/* Window offset changed? */
 8006ba0:	6bab      	ldr	r3, [r5, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006ba2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sect != fs->winsect) {	/* Window offset changed? */
 8006ba6:	4299      	cmp	r1, r3
 8006ba8:	d004      	beq.n	8006bb4 <get_fat.lto_priv.0+0x64>
 8006baa:	4628      	mov	r0, r5
 8006bac:	f7ff ff80 	bl	8006ab0 <move_window.part.0.lto_priv.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006bb0:	2800      	cmp	r0, #0
 8006bb2:	d156      	bne.n	8006c62 <get_fat.lto_priv.0+0x112>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8006bb4:	00a4      	lsls	r4, r4, #2
 8006bb6:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 8006bba:	4425      	add	r5, r4
 8006bbc:	6be8      	ldr	r0, [r5, #60]	; 0x3c
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8006bbe:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 8006bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006bc4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
	if (sect != fs->winsect) {	/* Window offset changed? */
 8006bc6:	6bab      	ldr	r3, [r5, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006bc8:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sect != fs->winsect) {	/* Window offset changed? */
 8006bcc:	4299      	cmp	r1, r3
 8006bce:	d004      	beq.n	8006bda <get_fat.lto_priv.0+0x8a>
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	f7ff ff6d 	bl	8006ab0 <move_window.part.0.lto_priv.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	d143      	bne.n	8006c62 <get_fat.lto_priv.0+0x112>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8006bda:	0064      	lsls	r4, r4, #1
 8006bdc:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8006be0:	4425      	add	r5, r4
 8006be2:	8fa8      	ldrh	r0, [r5, #60]	; 0x3c
}
 8006be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006be6:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if (sect != fs->winsect) {	/* Window offset changed? */
 8006be8:	6baa      	ldr	r2, [r5, #56]	; 0x38
			bc = (UINT)clst; bc += bc / 2;
 8006bea:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006bee:	eb03 2156 	add.w	r1, r3, r6, lsr #9
	if (sect != fs->winsect) {	/* Window offset changed? */
 8006bf2:	4291      	cmp	r1, r2
 8006bf4:	d005      	beq.n	8006c02 <get_fat.lto_priv.0+0xb2>
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	f7ff ff5a 	bl	8006ab0 <move_window.part.0.lto_priv.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006bfc:	bb88      	cbnz	r0, 8006c62 <get_fat.lto_priv.0+0x112>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006bfe:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if (sect != fs->winsect) {	/* Window offset changed? */
 8006c00:	6baa      	ldr	r2, [r5, #56]	; 0x38
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8006c02:	1c77      	adds	r7, r6, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c04:	eb03 2157 	add.w	r1, r3, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8006c08:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8006c0c:	442e      	add	r6, r5
	if (sect != fs->winsect) {	/* Window offset changed? */
 8006c0e:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8006c10:	f896 603c 	ldrb.w	r6, [r6, #60]	; 0x3c
	if (sect != fs->winsect) {	/* Window offset changed? */
 8006c14:	d003      	beq.n	8006c1e <get_fat.lto_priv.0+0xce>
 8006c16:	4628      	mov	r0, r5
 8006c18:	f7ff ff4a 	bl	8006ab0 <move_window.part.0.lto_priv.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c1c:	bb08      	cbnz	r0, 8006c62 <get_fat.lto_priv.0+0x112>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8006c1e:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8006c22:	443d      	add	r5, r7
 8006c24:	f895 003c 	ldrb.w	r0, [r5, #60]	; 0x3c
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8006c28:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8006c2a:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8006c2e:	d51b      	bpl.n	8006c68 <get_fat.lto_priv.0+0x118>
 8006c30:	0900      	lsrs	r0, r0, #4
}
 8006c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 8006c34:	79c3      	ldrb	r3, [r0, #7]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d192      	bne.n	8006b60 <get_fat.lto_priv.0+0x10>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8006c3a:	69c3      	ldr	r3, [r0, #28]
 8006c3c:	bb23      	cbnz	r3, 8006c88 <get_fat.lto_priv.0+0x138>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006c3e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
	if (sect != fs->winsect) {	/* Window offset changed? */
 8006c40:	6bab      	ldr	r3, [r5, #56]	; 0x38
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006c42:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sect != fs->winsect) {	/* Window offset changed? */
 8006c46:	4299      	cmp	r1, r3
 8006c48:	d003      	beq.n	8006c52 <get_fat.lto_priv.0+0x102>
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	f7ff ff30 	bl	8006ab0 <move_window.part.0.lto_priv.0>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006c50:	b938      	cbnz	r0, 8006c62 <get_fat.lto_priv.0+0x112>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8006c52:	00a3      	lsls	r3, r4, #2
 8006c54:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 8006c58:	441d      	add	r5, r3
 8006c5a:	6be8      	ldr	r0, [r5, #60]	; 0x3c
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8006c5c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
}
 8006c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006c62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8006c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8006c68:	f3c0 000b 	ubfx	r0, r0, #0, #12
}
 8006c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
 8006c74:	8968      	ldrh	r0, [r5, #10]
 8006c76:	0a5b      	lsrs	r3, r3, #9
 8006c78:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8006c7c:	fbb3 f3f0 	udiv	r3, r3, r0
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 8006c80:	4299      	cmp	r1, r3
 8006c82:	f63f af6d 	bhi.w	8006b60 <get_fat.lto_priv.0+0x10>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 8006c86:	d188      	bne.n	8006b9a <get_fat.lto_priv.0+0x4a>
 8006c88:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
 8006c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c8e:	bf00      	nop

08006c90 <check_fs.lto_priv.0>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 8006c90:	b538      	push	{r3, r4, r5, lr}
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 8006c92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c96:	2200      	movs	r2, #0
	if (sect != fs->winsect) {	/* Window offset changed? */
 8006c98:	4299      	cmp	r1, r3
{
 8006c9a:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 8006c9c:	70c2      	strb	r2, [r0, #3]
 8006c9e:	6383      	str	r3, [r0, #56]	; 0x38
	if (sect != fs->winsect) {	/* Window offset changed? */
 8006ca0:	d003      	beq.n	8006caa <check_fs.lto_priv.0+0x1a>
 8006ca2:	f7ff ff05 	bl	8006ab0 <move_window.part.0.lto_priv.0>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 8006ca6:	2800      	cmp	r0, #0
 8006ca8:	d165      	bne.n	8006d76 <check_fs.lto_priv.0+0xe6>
	sign = ld_word(fs->win + BS_55AA);
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
 8006caa:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006cae:	f8b4 523a 	ldrh.w	r5, [r4, #570]	; 0x23a
 8006cb2:	429d      	cmp	r5, r3
 8006cb4:	d01a      	beq.n	8006cec <check_fs.lto_priv.0+0x5c>
#endif
	b = fs->win[BS_JmpBoot];
 8006cb6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 8006cba:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8006cbe:	2ae9      	cmp	r2, #233	; 0xe9
 8006cc0:	d003      	beq.n	8006cca <check_fs.lto_priv.0+0x3a>
 8006cc2:	2be8      	cmp	r3, #232	; 0xe8
 8006cc4:	d001      	beq.n	8006cca <check_fs.lto_priv.0+0x3a>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
				return 0;	/* It can be presumed an FAT VBR */
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 8006cc6:	2003      	movs	r0, #3
}
 8006cc8:	bd38      	pop	{r3, r4, r5, pc}
	rv = ptr[1];
 8006cca:	f8b4 3047 	ldrh.w	r3, [r4, #71]	; 0x47
		b = fs->win[BPB_SecPerClus];
 8006cce:	f894 1049 	ldrb.w	r1, [r4, #73]	; 0x49
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 8006cd2:	1e5a      	subs	r2, r3, #1
 8006cd4:	421a      	tst	r2, r3
 8006cd6:	d1f6      	bne.n	8006cc6 <check_fs.lto_priv.0+0x36>
 8006cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cdc:	d02b      	beq.n	8006d36 <check_fs.lto_priv.0+0xa6>
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 8006cde:	f64a 2055 	movw	r0, #43605	; 0xaa55
 8006ce2:	4285      	cmp	r5, r0
 8006ce4:	bf14      	ite	ne
 8006ce6:	2003      	movne	r0, #3
 8006ce8:	2002      	moveq	r0, #2
}
 8006cea:	bd38      	pop	{r3, r4, r5, pc}
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
 8006cec:	220b      	movs	r2, #11
 8006cee:	4923      	ldr	r1, [pc, #140]	; (8006d7c <check_fs.lto_priv.0+0xec>)
 8006cf0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8006cf4:	f7f9 faba 	bl	800026c <memcmp>
 8006cf8:	b148      	cbz	r0, 8006d0e <check_fs.lto_priv.0+0x7e>
	b = fs->win[BS_JmpBoot];
 8006cfa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 8006cfe:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8006d02:	2ae9      	cmp	r2, #233	; 0xe9
 8006d04:	d005      	beq.n	8006d12 <check_fs.lto_priv.0+0x82>
 8006d06:	2be8      	cmp	r3, #232	; 0xe8
 8006d08:	d003      	beq.n	8006d12 <check_fs.lto_priv.0+0x82>
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 8006d0a:	2002      	movs	r0, #2
}
 8006d0c:	bd38      	pop	{r3, r4, r5, pc}
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
 8006d0e:	2001      	movs	r0, #1
}
 8006d10:	bd38      	pop	{r3, r4, r5, pc}
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 8006d12:	2208      	movs	r2, #8
 8006d14:	491a      	ldr	r1, [pc, #104]	; (8006d80 <check_fs.lto_priv.0+0xf0>)
 8006d16:	f104 008e 	add.w	r0, r4, #142	; 0x8e
 8006d1a:	f7f9 faa7 	bl	800026c <memcmp>
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	d0d2      	beq.n	8006cc8 <check_fs.lto_priv.0+0x38>
	rv = ptr[1];
 8006d22:	f8b4 3047 	ldrh.w	r3, [r4, #71]	; 0x47
		b = fs->win[BPB_SecPerClus];
 8006d26:	f894 1049 	ldrb.w	r1, [r4, #73]	; 0x49
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 8006d2a:	1e5a      	subs	r2, r3, #1
 8006d2c:	421a      	tst	r2, r3
 8006d2e:	d1ec      	bne.n	8006d0a <check_fs.lto_priv.0+0x7a>
 8006d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d34:	d1e9      	bne.n	8006d0a <check_fs.lto_priv.0+0x7a>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 8006d36:	2900      	cmp	r1, #0
 8006d38:	d0d1      	beq.n	8006cde <check_fs.lto_priv.0+0x4e>
 8006d3a:	1e4b      	subs	r3, r1, #1
 8006d3c:	420b      	tst	r3, r1
 8006d3e:	d1ce      	bne.n	8006cde <check_fs.lto_priv.0+0x4e>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 8006d40:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d0ca      	beq.n	8006cde <check_fs.lto_priv.0+0x4e>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 8006d48:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d8c5      	bhi.n	8006cde <check_fs.lto_priv.0+0x4e>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 8006d52:	f8b4 304d 	ldrh.w	r3, [r4, #77]	; 0x4d
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d0c1      	beq.n	8006cde <check_fs.lto_priv.0+0x4e>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 8006d5a:	f8b4 304f 	ldrh.w	r3, [r4, #79]	; 0x4f
 8006d5e:	2b7f      	cmp	r3, #127	; 0x7f
 8006d60:	d803      	bhi.n	8006d6a <check_fs.lto_priv.0+0xda>
	rv = rv << 8 | ptr[0];
 8006d62:	6de3      	ldr	r3, [r4, #92]	; 0x5c
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 8006d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d68:	d3b9      	bcc.n	8006cde <check_fs.lto_priv.0+0x4e>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 8006d6a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d0b5      	beq.n	8006cde <check_fs.lto_priv.0+0x4e>
			return 0;	/* It is an FAT32 VBR */
 8006d72:	2000      	movs	r0, #0
}
 8006d74:	bd38      	pop	{r3, r4, r5, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 8006d76:	2004      	movs	r0, #4
}
 8006d78:	bd38      	pop	{r3, r4, r5, pc}
 8006d7a:	bf00      	nop
 8006d7c:	08010678 	.word	0x08010678
 8006d80:	08010684 	.word	0x08010684
	...

08006d90 <ff_wtoupper.part.0>:
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
 8006d90:	4a2a      	ldr	r2, [pc, #168]	; (8006e3c <ff_wtoupper.part.0+0xac>)
 8006d92:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8006d96:	f641 517d 	movw	r1, #7549	; 0x1d7d
 8006d9a:	4b29      	ldr	r3, [pc, #164]	; (8006e40 <ff_wtoupper.part.0+0xb0>)
 8006d9c:	bf34      	ite	cc
 8006d9e:	2161      	movcc	r1, #97	; 0x61
 8006da0:	4613      	movcs	r3, r2
DWORD ff_wtoupper (	/* Returns up-converted code point */
 8006da2:	b530      	push	{r4, r5, lr}
		uc = (WORD)uni;
 8006da4:	b284      	uxth	r4, r0
		p = uc < 0x1000 ? cvt1 : cvt2;
 8006da6:	3304      	adds	r3, #4
		for (;;) {
			bc = *p++;								/* Get the block base */
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 8006da8:	b191      	cbz	r1, 8006dd0 <ff_wtoupper.part.0+0x40>
 8006daa:	428c      	cmp	r4, r1
 8006dac:	d310      	bcc.n	8006dd0 <ff_wtoupper.part.0+0x40>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8006dae:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 8006db2:	461d      	mov	r5, r3
 8006db4:	fa5f fc82 	uxtb.w	ip, r2
			if (uc < bc + nc) {	/* In the block? */
 8006db8:	eb0c 0e01 	add.w	lr, ip, r1
 8006dbc:	4570      	cmp	r0, lr
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8006dbe:	ea4f 2212 	mov.w	r2, r2, lsr #8
			if (uc < bc + nc) {	/* In the block? */
 8006dc2:	db06      	blt.n	8006dd2 <ff_wtoupper.part.0+0x42>
				case 7: uc -= 80; break;			/* Shift -80 */
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	b16a      	cbz	r2, 8006de4 <ff_wtoupper.part.0+0x54>
			bc = *p++;								/* Get the block base */
 8006dc8:	f833 1c04 	ldrh.w	r1, [r3, #-4]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 8006dcc:	2900      	cmp	r1, #0
 8006dce:	d1ec      	bne.n	8006daa <ff_wtoupper.part.0+0x1a>
		}
		uni = uc;
	}

	return uni;
}
 8006dd0:	bd30      	pop	{r4, r5, pc}
				switch (cmd) {
 8006dd2:	2a08      	cmp	r2, #8
 8006dd4:	d8fc      	bhi.n	8006dd0 <ff_wtoupper.part.0+0x40>
 8006dd6:	e8df f002 	tbb	[pc, r2]
 8006dda:	120e      	.short	0x120e
 8006ddc:	24201c18 	.word	0x24201c18
 8006de0:	2c28      	.short	0x2c28
 8006de2:	0a          	.byte	0x0a
 8006de3:	00          	.byte	0x00
			bc = *p++;								/* Get the block base */
 8006de4:	f835 101c 	ldrh.w	r1, [r5, ip, lsl #1]
			if (cmd == 0) p += nc;	/* Skip table if needed */
 8006de8:	eb05 034c 	add.w	r3, r5, ip, lsl #1
 8006dec:	e7db      	b.n	8006da6 <ff_wtoupper.part.0+0x16>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 8006dee:	f5a4 50e3 	sub.w	r0, r4, #7264	; 0x1c60
		uni = uc;
 8006df2:	b280      	uxth	r0, r0
}
 8006df4:	bd30      	pop	{r4, r5, pc}
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
 8006df6:	1a41      	subs	r1, r0, r1
		uni = uc;
 8006df8:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
}
 8006dfc:	bd30      	pop	{r4, r5, pc}
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
 8006dfe:	1a63      	subs	r3, r4, r1
 8006e00:	f003 0301 	and.w	r3, r3, #1
 8006e04:	1ae3      	subs	r3, r4, r3
		uni = uc;
 8006e06:	b298      	uxth	r0, r3
}
 8006e08:	bd30      	pop	{r4, r5, pc}
				case 2: uc -= 16; break;			/* Shift -16 */
 8006e0a:	f1a4 0010 	sub.w	r0, r4, #16
		uni = uc;
 8006e0e:	b280      	uxth	r0, r0
}
 8006e10:	bd30      	pop	{r4, r5, pc}
				case 3:	uc -= 32; break;			/* Shift -32 */
 8006e12:	f1a4 0020 	sub.w	r0, r4, #32
		uni = uc;
 8006e16:	b280      	uxth	r0, r0
}
 8006e18:	bd30      	pop	{r4, r5, pc}
				case 4:	uc -= 48; break;			/* Shift -48 */
 8006e1a:	f1a4 0030 	sub.w	r0, r4, #48	; 0x30
		uni = uc;
 8006e1e:	b280      	uxth	r0, r0
}
 8006e20:	bd30      	pop	{r4, r5, pc}
				case 5:	uc -= 26; break;			/* Shift -26 */
 8006e22:	f1a4 001a 	sub.w	r0, r4, #26
		uni = uc;
 8006e26:	b280      	uxth	r0, r0
}
 8006e28:	bd30      	pop	{r4, r5, pc}
				case 6:	uc += 8; break;				/* Shift +8 */
 8006e2a:	f104 0008 	add.w	r0, r4, #8
		uni = uc;
 8006e2e:	b280      	uxth	r0, r0
}
 8006e30:	bd30      	pop	{r4, r5, pc}
				case 7: uc -= 80; break;			/* Shift -80 */
 8006e32:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
		uni = uc;
 8006e36:	b280      	uxth	r0, r0
}
 8006e38:	bd30      	pop	{r4, r5, pc}
 8006e3a:	bf00      	nop
 8006e3c:	08011d50 	.word	0x08011d50
 8006e40:	08011b5c 	.word	0x08011b5c
	...

08006e50 <__test_assert>:
 8006e50:	b108      	cbz	r0, 8006e56 <__test_assert+0x6>
  return false;
 8006e52:	2000      	movs	r0, #0
}
 8006e54:	4770      	bx	lr
  chtest.global_fail     = true;
 8006e56:	f240 1201 	movw	r2, #257	; 0x101
 8006e5a:	4b02      	ldr	r3, [pc, #8]	; (8006e64 <__test_assert+0x14>)
    return __test_fail(msg);
 8006e5c:	2001      	movs	r0, #1
  chtest.failure_message = msg;
 8006e5e:	6099      	str	r1, [r3, #8]
  chtest.global_fail     = true;
 8006e60:	809a      	strh	r2, [r3, #4]
    return __test_fail(msg);
 8006e62:	4770      	bx	lr
 8006e64:	200010f4 	.word	0x200010f4
	...

08006e70 <__test_assert_sequence>:
bool __test_assert_sequence(char *expected, const char *msg) {
 8006e70:	b470      	push	{r4, r5, r6}
  while (cp < chtest.tokp) {
 8006e72:	4d0d      	ldr	r5, [pc, #52]	; (8006ea8 <__test_assert_sequence+0x38>)
  char *cp = chtest.tokens_buffer;
 8006e74:	f105 0610 	add.w	r6, r5, #16
 8006e78:	4633      	mov	r3, r6
  while (cp < chtest.tokp) {
 8006e7a:	68ec      	ldr	r4, [r5, #12]
 8006e7c:	e005      	b.n	8006e8a <__test_assert_sequence+0x1a>
    if (*cp++ != *expected++)
 8006e7e:	f813 cb01 	ldrb.w	ip, [r3], #1
 8006e82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e86:	4594      	cmp	ip, r2
 8006e88:	d106      	bne.n	8006e98 <__test_assert_sequence+0x28>
  while (cp < chtest.tokp) {
 8006e8a:	429c      	cmp	r4, r3
 8006e8c:	d8f7      	bhi.n	8006e7e <__test_assert_sequence+0xe>
  if (*expected) {
 8006e8e:	7800      	ldrb	r0, [r0, #0]
 8006e90:	b910      	cbnz	r0, 8006e98 <__test_assert_sequence+0x28>
  chtest.tokp = chtest.tokens_buffer;
 8006e92:	60ee      	str	r6, [r5, #12]
}
 8006e94:	bc70      	pop	{r4, r5, r6}
 8006e96:	4770      	bx	lr
  chtest.global_fail     = true;
 8006e98:	f240 1301 	movw	r3, #257	; 0x101
     return __test_fail(msg);
 8006e9c:	2001      	movs	r0, #1
  chtest.failure_message = msg;
 8006e9e:	60a9      	str	r1, [r5, #8]
  chtest.global_fail     = true;
 8006ea0:	80ab      	strh	r3, [r5, #4]
}
 8006ea2:	bc70      	pop	{r4, r5, r6}
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	200010f4 	.word	0x200010f4
 8006eac:	00000000 	.word	0x00000000

08006eb0 <rt_test_005_002_execute>:
static void rt_test_005_002_execute(void) {
 8006eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_set_step(1);
 8006eb4:	2501      	movs	r5, #1
  return __sch_get_currthread();
 8006eb6:	4c80      	ldr	r4, [pc, #512]	; (80070b8 <rt_test_005_002_execute+0x208>)
static void rt_test_005_002_execute(void) {
 8006eb8:	b083      	sub	sp, #12
  return chThdGetSelfX()->hdr.pqueue.prio;
 8006eba:	68e3      	ldr	r3, [r4, #12]
  test_set_step(1);
 8006ebc:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80070bc <rt_test_005_002_execute+0x20c>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8006ec0:	689a      	ldr	r2, [r3, #8]
 8006ec2:	4b7f      	ldr	r3, [pc, #508]	; (80070c0 <rt_test_005_002_execute+0x210>)
 8006ec4:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8006ec8:	9300      	str	r3, [sp, #0]
 8006eca:	3a05      	subs	r2, #5
 8006ecc:	4b7d      	ldr	r3, [pc, #500]	; (80070c4 <rt_test_005_002_execute+0x214>)
 8006ece:	487e      	ldr	r0, [pc, #504]	; (80070c8 <rt_test_005_002_execute+0x218>)
  test_set_step(1);
 8006ed0:	f8cb 5000 	str.w	r5, [fp]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8006ed4:	f7fd fbbc 	bl	8004650 <chThdCreateStatic>
 8006ed8:	68e3      	ldr	r3, [r4, #12]
 8006eda:	4e7c      	ldr	r6, [pc, #496]	; (80070cc <rt_test_005_002_execute+0x21c>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8006edc:	689a      	ldr	r2, [r3, #8]
 8006ede:	4b7c      	ldr	r3, [pc, #496]	; (80070d0 <rt_test_005_002_execute+0x220>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8006ee0:	6030      	str	r0, [r6, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8006ee2:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	3a04      	subs	r2, #4
 8006eea:	4b76      	ldr	r3, [pc, #472]	; (80070c4 <rt_test_005_002_execute+0x214>)
 8006eec:	4879      	ldr	r0, [pc, #484]	; (80070d4 <rt_test_005_002_execute+0x224>)
 8006eee:	f7fd fbaf 	bl	8004650 <chThdCreateStatic>
 8006ef2:	68e3      	ldr	r3, [r4, #12]
 8006ef4:	6070      	str	r0, [r6, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8006ef6:	689a      	ldr	r2, [r3, #8]
 8006ef8:	4b77      	ldr	r3, [pc, #476]	; (80070d8 <rt_test_005_002_execute+0x228>)
 8006efa:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8006efe:	3a03      	subs	r2, #3
 8006f00:	9300      	str	r3, [sp, #0]
 8006f02:	4876      	ldr	r0, [pc, #472]	; (80070dc <rt_test_005_002_execute+0x22c>)
 8006f04:	4b6f      	ldr	r3, [pc, #444]	; (80070c4 <rt_test_005_002_execute+0x214>)
 8006f06:	f7fd fba3 	bl	8004650 <chThdCreateStatic>
 8006f0a:	68e3      	ldr	r3, [r4, #12]
 8006f0c:	60b0      	str	r0, [r6, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8006f0e:	689a      	ldr	r2, [r3, #8]
 8006f10:	4b73      	ldr	r3, [pc, #460]	; (80070e0 <rt_test_005_002_execute+0x230>)
 8006f12:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8006f16:	3a02      	subs	r2, #2
 8006f18:	9300      	str	r3, [sp, #0]
 8006f1a:	4872      	ldr	r0, [pc, #456]	; (80070e4 <rt_test_005_002_execute+0x234>)
 8006f1c:	4b69      	ldr	r3, [pc, #420]	; (80070c4 <rt_test_005_002_execute+0x214>)
 8006f1e:	f7fd fb97 	bl	8004650 <chThdCreateStatic>
 8006f22:	68e3      	ldr	r3, [r4, #12]
 8006f24:	60f0      	str	r0, [r6, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8006f26:	689a      	ldr	r2, [r3, #8]
 8006f28:	4b6f      	ldr	r3, [pc, #444]	; (80070e8 <rt_test_005_002_execute+0x238>)
 8006f2a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8006f2e:	9300      	str	r3, [sp, #0]
 8006f30:	486e      	ldr	r0, [pc, #440]	; (80070ec <rt_test_005_002_execute+0x23c>)
 8006f32:	4b64      	ldr	r3, [pc, #400]	; (80070c4 <rt_test_005_002_execute+0x214>)
 8006f34:	3a01      	subs	r2, #1
 8006f36:	f7fd fb8b 	bl	8004650 <chThdCreateStatic>
      threads[i] = NULL;
 8006f3a:	f04f 0800 	mov.w	r8, #0
 8006f3e:	4635      	mov	r5, r6
 8006f40:	4637      	mov	r7, r6
 8006f42:	46b1      	mov	r9, r6
 8006f44:	6130      	str	r0, [r6, #16]
  for (i = 0; i < MAX_THREADS; i++)
 8006f46:	3614      	adds	r6, #20
    if (threads[i] != NULL) {
 8006f48:	f859 0b04 	ldr.w	r0, [r9], #4
 8006f4c:	b118      	cbz	r0, 8006f56 <rt_test_005_002_execute+0xa6>
      chThdWait(threads[i]);
 8006f4e:	f7fe fd67 	bl	8005a20 <chThdWait>
      threads[i] = NULL;
 8006f52:	f849 8c04 	str.w	r8, [r9, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8006f56:	45b1      	cmp	r9, r6
 8006f58:	d1f6      	bne.n	8006f48 <rt_test_005_002_execute+0x98>
    test_assert_sequence("ABCDE", "invalid sequence");
 8006f5a:	4965      	ldr	r1, [pc, #404]	; (80070f0 <rt_test_005_002_execute+0x240>)
 8006f5c:	4865      	ldr	r0, [pc, #404]	; (80070f4 <rt_test_005_002_execute+0x244>)
 8006f5e:	f7ff ff87 	bl	8006e70 <__test_assert_sequence>
 8006f62:	4680      	mov	r8, r0
 8006f64:	b110      	cbz	r0, 8006f6c <rt_test_005_002_execute+0xbc>
}
 8006f66:	b003      	add	sp, #12
 8006f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  test_set_step(2);
 8006f6c:	2302      	movs	r3, #2
 8006f6e:	f8cb 3000 	str.w	r3, [fp]
 8006f72:	68e3      	ldr	r3, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8006f74:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8006f78:	689a      	ldr	r2, [r3, #8]
 8006f7a:	4b5b      	ldr	r3, [pc, #364]	; (80070e8 <rt_test_005_002_execute+0x238>)
 8006f7c:	3a01      	subs	r2, #1
 8006f7e:	9300      	str	r3, [sp, #0]
 8006f80:	485a      	ldr	r0, [pc, #360]	; (80070ec <rt_test_005_002_execute+0x23c>)
 8006f82:	4b50      	ldr	r3, [pc, #320]	; (80070c4 <rt_test_005_002_execute+0x214>)
 8006f84:	f7fd fb64 	bl	8004650 <chThdCreateStatic>
 8006f88:	68e3      	ldr	r3, [r4, #12]
 8006f8a:	6138      	str	r0, [r7, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8006f8c:	689a      	ldr	r2, [r3, #8]
 8006f8e:	4b54      	ldr	r3, [pc, #336]	; (80070e0 <rt_test_005_002_execute+0x230>)
 8006f90:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8006f94:	9300      	str	r3, [sp, #0]
 8006f96:	3a02      	subs	r2, #2
 8006f98:	4b4a      	ldr	r3, [pc, #296]	; (80070c4 <rt_test_005_002_execute+0x214>)
 8006f9a:	4852      	ldr	r0, [pc, #328]	; (80070e4 <rt_test_005_002_execute+0x234>)
 8006f9c:	f7fd fb58 	bl	8004650 <chThdCreateStatic>
 8006fa0:	68e3      	ldr	r3, [r4, #12]
 8006fa2:	60f8      	str	r0, [r7, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8006fa4:	689a      	ldr	r2, [r3, #8]
 8006fa6:	4b4c      	ldr	r3, [pc, #304]	; (80070d8 <rt_test_005_002_execute+0x228>)
 8006fa8:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	3a03      	subs	r2, #3
 8006fb0:	4b44      	ldr	r3, [pc, #272]	; (80070c4 <rt_test_005_002_execute+0x214>)
 8006fb2:	484a      	ldr	r0, [pc, #296]	; (80070dc <rt_test_005_002_execute+0x22c>)
 8006fb4:	f7fd fb4c 	bl	8004650 <chThdCreateStatic>
 8006fb8:	68e3      	ldr	r3, [r4, #12]
 8006fba:	60b8      	str	r0, [r7, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8006fbc:	689a      	ldr	r2, [r3, #8]
 8006fbe:	4b44      	ldr	r3, [pc, #272]	; (80070d0 <rt_test_005_002_execute+0x220>)
 8006fc0:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8006fc4:	9300      	str	r3, [sp, #0]
 8006fc6:	3a04      	subs	r2, #4
 8006fc8:	4b3e      	ldr	r3, [pc, #248]	; (80070c4 <rt_test_005_002_execute+0x214>)
 8006fca:	4842      	ldr	r0, [pc, #264]	; (80070d4 <rt_test_005_002_execute+0x224>)
 8006fcc:	f7fd fb40 	bl	8004650 <chThdCreateStatic>
 8006fd0:	68e3      	ldr	r3, [r4, #12]
 8006fd2:	6078      	str	r0, [r7, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8006fd4:	689a      	ldr	r2, [r3, #8]
 8006fd6:	4b3a      	ldr	r3, [pc, #232]	; (80070c0 <rt_test_005_002_execute+0x210>)
 8006fd8:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8006fdc:	9300      	str	r3, [sp, #0]
 8006fde:	483a      	ldr	r0, [pc, #232]	; (80070c8 <rt_test_005_002_execute+0x218>)
 8006fe0:	4b38      	ldr	r3, [pc, #224]	; (80070c4 <rt_test_005_002_execute+0x214>)
 8006fe2:	3a05      	subs	r2, #5
 8006fe4:	f7fd fb34 	bl	8004650 <chThdCreateStatic>
 8006fe8:	f8df a10c 	ldr.w	sl, [pc, #268]	; 80070f8 <rt_test_005_002_execute+0x248>
 8006fec:	6038      	str	r0, [r7, #0]
 8006fee:	f1aa 0710 	sub.w	r7, sl, #16
 8006ff2:	46b9      	mov	r9, r7
    if (threads[i] != NULL) {
 8006ff4:	b118      	cbz	r0, 8006ffe <rt_test_005_002_execute+0x14e>
      chThdWait(threads[i]);
 8006ff6:	f7fe fd13 	bl	8005a20 <chThdWait>
      threads[i] = NULL;
 8006ffa:	f8c9 8000 	str.w	r8, [r9]
  for (i = 0; i < MAX_THREADS; i++)
 8006ffe:	45d1      	cmp	r9, sl
 8007000:	d002      	beq.n	8007008 <rt_test_005_002_execute+0x158>
    if (threads[i] != NULL) {
 8007002:	f859 0f04 	ldr.w	r0, [r9, #4]!
 8007006:	e7f5      	b.n	8006ff4 <rt_test_005_002_execute+0x144>
    test_assert_sequence("ABCDE", "invalid sequence");
 8007008:	4939      	ldr	r1, [pc, #228]	; (80070f0 <rt_test_005_002_execute+0x240>)
 800700a:	483a      	ldr	r0, [pc, #232]	; (80070f4 <rt_test_005_002_execute+0x244>)
 800700c:	f7ff ff30 	bl	8006e70 <__test_assert_sequence>
 8007010:	4680      	mov	r8, r0
 8007012:	2800      	cmp	r0, #0
 8007014:	d1a7      	bne.n	8006f66 <rt_test_005_002_execute+0xb6>
  test_set_step(3);
 8007016:	2303      	movs	r3, #3
 8007018:	f8cb 3000 	str.w	r3, [fp]
 800701c:	68e3      	ldr	r3, [r4, #12]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800701e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8007022:	689a      	ldr	r2, [r3, #8]
 8007024:	4b2a      	ldr	r3, [pc, #168]	; (80070d0 <rt_test_005_002_execute+0x220>)
 8007026:	3a04      	subs	r2, #4
 8007028:	9300      	str	r3, [sp, #0]
 800702a:	482a      	ldr	r0, [pc, #168]	; (80070d4 <rt_test_005_002_execute+0x224>)
 800702c:	4b25      	ldr	r3, [pc, #148]	; (80070c4 <rt_test_005_002_execute+0x214>)
 800702e:	f7fd fb0f 	bl	8004650 <chThdCreateStatic>
 8007032:	68e3      	ldr	r3, [r4, #12]
 8007034:	6078      	str	r0, [r7, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8007036:	689a      	ldr	r2, [r3, #8]
 8007038:	4b21      	ldr	r3, [pc, #132]	; (80070c0 <rt_test_005_002_execute+0x210>)
 800703a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800703e:	9300      	str	r3, [sp, #0]
 8007040:	3a05      	subs	r2, #5
 8007042:	4b20      	ldr	r3, [pc, #128]	; (80070c4 <rt_test_005_002_execute+0x214>)
 8007044:	4820      	ldr	r0, [pc, #128]	; (80070c8 <rt_test_005_002_execute+0x218>)
 8007046:	f7fd fb03 	bl	8004650 <chThdCreateStatic>
 800704a:	68e3      	ldr	r3, [r4, #12]
 800704c:	6038      	str	r0, [r7, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 800704e:	689a      	ldr	r2, [r3, #8]
 8007050:	4b25      	ldr	r3, [pc, #148]	; (80070e8 <rt_test_005_002_execute+0x238>)
 8007052:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8007056:	9300      	str	r3, [sp, #0]
 8007058:	3a01      	subs	r2, #1
 800705a:	4b1a      	ldr	r3, [pc, #104]	; (80070c4 <rt_test_005_002_execute+0x214>)
 800705c:	4823      	ldr	r0, [pc, #140]	; (80070ec <rt_test_005_002_execute+0x23c>)
 800705e:	f7fd faf7 	bl	8004650 <chThdCreateStatic>
 8007062:	68e3      	ldr	r3, [r4, #12]
 8007064:	6138      	str	r0, [r7, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8007066:	689a      	ldr	r2, [r3, #8]
 8007068:	4b1d      	ldr	r3, [pc, #116]	; (80070e0 <rt_test_005_002_execute+0x230>)
 800706a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	3a02      	subs	r2, #2
 8007072:	4b14      	ldr	r3, [pc, #80]	; (80070c4 <rt_test_005_002_execute+0x214>)
 8007074:	481b      	ldr	r0, [pc, #108]	; (80070e4 <rt_test_005_002_execute+0x234>)
 8007076:	f7fd faeb 	bl	8004650 <chThdCreateStatic>
 800707a:	68e3      	ldr	r3, [r4, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 800707c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8007080:	689a      	ldr	r2, [r3, #8]
 8007082:	4b15      	ldr	r3, [pc, #84]	; (80070d8 <rt_test_005_002_execute+0x228>)
 8007084:	3a03      	subs	r2, #3
 8007086:	9300      	str	r3, [sp, #0]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8007088:	60f8      	str	r0, [r7, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 800708a:	4b0e      	ldr	r3, [pc, #56]	; (80070c4 <rt_test_005_002_execute+0x214>)
 800708c:	4813      	ldr	r0, [pc, #76]	; (80070dc <rt_test_005_002_execute+0x22c>)
 800708e:	f7fd fadf 	bl	8004650 <chThdCreateStatic>
 8007092:	4644      	mov	r4, r8
 8007094:	60b8      	str	r0, [r7, #8]
 8007096:	f855 0b04 	ldr.w	r0, [r5], #4
 800709a:	b118      	cbz	r0, 80070a4 <rt_test_005_002_execute+0x1f4>
      chThdWait(threads[i]);
 800709c:	f7fe fcc0 	bl	8005a20 <chThdWait>
      threads[i] = NULL;
 80070a0:	f845 4c04 	str.w	r4, [r5, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 80070a4:	42b5      	cmp	r5, r6
 80070a6:	d1f6      	bne.n	8007096 <rt_test_005_002_execute+0x1e6>
    test_assert_sequence("ABCDE", "invalid sequence");
 80070a8:	4911      	ldr	r1, [pc, #68]	; (80070f0 <rt_test_005_002_execute+0x240>)
 80070aa:	4812      	ldr	r0, [pc, #72]	; (80070f4 <rt_test_005_002_execute+0x244>)
}
 80070ac:	b003      	add	sp, #12
 80070ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 80070b2:	f7ff bedd 	b.w	8006e70 <__test_assert_sequence>
 80070b6:	bf00      	nop
 80070b8:	20001050 	.word	0x20001050
 80070bc:	200010f4 	.word	0x200010f4
 80070c0:	080106ac 	.word	0x080106ac
 80070c4:	08000ff1 	.word	0x08000ff1
 80070c8:	20001240 	.word	0x20001240
 80070cc:	20001ab0 	.word	0x20001ab0
 80070d0:	08011a24 	.word	0x08011a24
 80070d4:	200013f0 	.word	0x200013f0
 80070d8:	08010690 	.word	0x08010690
 80070dc:	200015a0 	.word	0x200015a0
 80070e0:	0801031c 	.word	0x0801031c
 80070e4:	20001750 	.word	0x20001750
 80070e8:	08010318 	.word	0x08010318
 80070ec:	20001900 	.word	0x20001900
 80070f0:	08010694 	.word	0x08010694
 80070f4:	080106a8 	.word	0x080106a8
 80070f8:	20001ac0 	.word	0x20001ac0
 80070fc:	00000000 	.word	0x00000000

08007100 <rt_test_007_002_execute>:
static void rt_test_007_002_execute(void) {
 8007100:	b5f0      	push	{r4, r5, r6, r7, lr}
  test_set_step(1);
 8007102:	2701      	movs	r7, #1
  return __sch_get_currthread();
 8007104:	4d5a      	ldr	r5, [pc, #360]	; (8007270 <rt_test_007_002_execute+0x170>)
 8007106:	4e5b      	ldr	r6, [pc, #364]	; (8007274 <rt_test_007_002_execute+0x174>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 8007108:	68ea      	ldr	r2, [r5, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 800710a:	4b5b      	ldr	r3, [pc, #364]	; (8007278 <rt_test_007_002_execute+0x178>)
 800710c:	6892      	ldr	r2, [r2, #8]
static void rt_test_007_002_execute(void) {
 800710e:	b083      	sub	sp, #12
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
  test_set_step(1);
 8007116:	6037      	str	r7, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8007118:	4b58      	ldr	r3, [pc, #352]	; (800727c <rt_test_007_002_execute+0x17c>)
 800711a:	3205      	adds	r2, #5
 800711c:	4858      	ldr	r0, [pc, #352]	; (8007280 <rt_test_007_002_execute+0x180>)
 800711e:	f7fd fa97 	bl	8004650 <chThdCreateStatic>
 8007122:	4607      	mov	r7, r0
 8007124:	68eb      	ldr	r3, [r5, #12]
 8007126:	4c57      	ldr	r4, [pc, #348]	; (8007284 <rt_test_007_002_execute+0x184>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8007128:	689a      	ldr	r2, [r3, #8]
 800712a:	4b57      	ldr	r3, [pc, #348]	; (8007288 <rt_test_007_002_execute+0x188>)
 800712c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8007130:	9300      	str	r3, [sp, #0]
 8007132:	3201      	adds	r2, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8007134:	6027      	str	r7, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8007136:	4b51      	ldr	r3, [pc, #324]	; (800727c <rt_test_007_002_execute+0x17c>)
 8007138:	4854      	ldr	r0, [pc, #336]	; (800728c <rt_test_007_002_execute+0x18c>)
 800713a:	f7fd fa89 	bl	8004650 <chThdCreateStatic>
 800713e:	4607      	mov	r7, r0
 8007140:	68eb      	ldr	r3, [r5, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8007142:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8007146:	689a      	ldr	r2, [r3, #8]
 8007148:	4b51      	ldr	r3, [pc, #324]	; (8007290 <rt_test_007_002_execute+0x190>)
 800714a:	3203      	adds	r2, #3
 800714c:	9300      	str	r3, [sp, #0]
 800714e:	4851      	ldr	r0, [pc, #324]	; (8007294 <rt_test_007_002_execute+0x194>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8007150:	6067      	str	r7, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8007152:	4b4a      	ldr	r3, [pc, #296]	; (800727c <rt_test_007_002_execute+0x17c>)
 8007154:	f7fd fa7c 	bl	8004650 <chThdCreateStatic>
 8007158:	4607      	mov	r7, r0
 800715a:	68eb      	ldr	r3, [r5, #12]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 800715c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8007160:	689a      	ldr	r2, [r3, #8]
 8007162:	4b4d      	ldr	r3, [pc, #308]	; (8007298 <rt_test_007_002_execute+0x198>)
 8007164:	3204      	adds	r2, #4
 8007166:	9300      	str	r3, [sp, #0]
 8007168:	484c      	ldr	r0, [pc, #304]	; (800729c <rt_test_007_002_execute+0x19c>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 800716a:	60a7      	str	r7, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 800716c:	4b43      	ldr	r3, [pc, #268]	; (800727c <rt_test_007_002_execute+0x17c>)
 800716e:	f7fd fa6f 	bl	8004650 <chThdCreateStatic>
 8007172:	4607      	mov	r7, r0
 8007174:	68ea      	ldr	r2, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8007176:	4b4a      	ldr	r3, [pc, #296]	; (80072a0 <rt_test_007_002_execute+0x1a0>)
 8007178:	6892      	ldr	r2, [r2, #8]
 800717a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	3202      	adds	r2, #2
 8007182:	4b3e      	ldr	r3, [pc, #248]	; (800727c <rt_test_007_002_execute+0x17c>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8007184:	60e7      	str	r7, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8007186:	4847      	ldr	r0, [pc, #284]	; (80072a4 <rt_test_007_002_execute+0x1a4>)
 8007188:	f7fd fa62 	bl	8004650 <chThdCreateStatic>
  test_set_step(2);
 800718c:	2202      	movs	r2, #2
 800718e:	2330      	movs	r3, #48	; 0x30
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8007190:	6120      	str	r0, [r4, #16]
  test_set_step(2);
 8007192:	6032      	str	r2, [r6, #0]
 8007194:	f383 8811 	msr	BASEPRI, r3
  if (++sp->cnt <= (cnt_t)0) {
 8007198:	4c43      	ldr	r4, [pc, #268]	; (80072a8 <rt_test_007_002_execute+0x1a8>)
 800719a:	68a3      	ldr	r3, [r4, #8]
 800719c:	3301      	adds	r3, #1
 800719e:	2b00      	cmp	r3, #0
 80071a0:	60a3      	str	r3, [r4, #8]
 80071a2:	dd41      	ble.n	8007228 <rt_test_007_002_execute+0x128>
 80071a4:	2100      	movs	r1, #0
 80071a6:	f381 8811 	msr	BASEPRI, r1
 80071aa:	2330      	movs	r3, #48	; 0x30
 80071ac:	f383 8811 	msr	BASEPRI, r3
 80071b0:	68a3      	ldr	r3, [r4, #8]
 80071b2:	3301      	adds	r3, #1
 80071b4:	428b      	cmp	r3, r1
 80071b6:	60a3      	str	r3, [r4, #8]
 80071b8:	dd53      	ble.n	8007262 <rt_test_007_002_execute+0x162>
 80071ba:	2100      	movs	r1, #0
 80071bc:	f381 8811 	msr	BASEPRI, r1
 80071c0:	2330      	movs	r3, #48	; 0x30
 80071c2:	f383 8811 	msr	BASEPRI, r3
 80071c6:	68a3      	ldr	r3, [r4, #8]
 80071c8:	3301      	adds	r3, #1
 80071ca:	428b      	cmp	r3, r1
 80071cc:	60a3      	str	r3, [r4, #8]
 80071ce:	dd41      	ble.n	8007254 <rt_test_007_002_execute+0x154>
 80071d0:	2100      	movs	r1, #0
 80071d2:	f381 8811 	msr	BASEPRI, r1
 80071d6:	2330      	movs	r3, #48	; 0x30
 80071d8:	f383 8811 	msr	BASEPRI, r3
 80071dc:	68a3      	ldr	r3, [r4, #8]
 80071de:	3301      	adds	r3, #1
 80071e0:	428b      	cmp	r3, r1
 80071e2:	60a3      	str	r3, [r4, #8]
 80071e4:	dd2f      	ble.n	8007246 <rt_test_007_002_execute+0x146>
 80071e6:	2100      	movs	r1, #0
 80071e8:	f381 8811 	msr	BASEPRI, r1
 80071ec:	2330      	movs	r3, #48	; 0x30
 80071ee:	f383 8811 	msr	BASEPRI, r3
 80071f2:	68a3      	ldr	r3, [r4, #8]
 80071f4:	3301      	adds	r3, #1
 80071f6:	428b      	cmp	r3, r1
 80071f8:	60a3      	str	r3, [r4, #8]
 80071fa:	dd1d      	ble.n	8007238 <rt_test_007_002_execute+0x138>
 80071fc:	2600      	movs	r6, #0
 80071fe:	f386 8811 	msr	BASEPRI, r6
 8007202:	4c20      	ldr	r4, [pc, #128]	; (8007284 <rt_test_007_002_execute+0x184>)
 8007204:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 8007208:	f854 0b04 	ldr.w	r0, [r4], #4
 800720c:	b118      	cbz	r0, 8007216 <rt_test_007_002_execute+0x116>
      chThdWait(threads[i]);
 800720e:	f7fe fc07 	bl	8005a20 <chThdWait>
      threads[i] = NULL;
 8007212:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8007216:	42a5      	cmp	r5, r4
 8007218:	d1f6      	bne.n	8007208 <rt_test_007_002_execute+0x108>
    test_assert_sequence("ABCDE", "invalid sequence");
 800721a:	4924      	ldr	r1, [pc, #144]	; (80072ac <rt_test_007_002_execute+0x1ac>)
 800721c:	4824      	ldr	r0, [pc, #144]	; (80072b0 <rt_test_007_002_execute+0x1b0>)
}
 800721e:	b003      	add	sp, #12
 8007220:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8007224:	f7ff be24 	b.w	8006e70 <__test_assert_sequence>
  ch_queue_t *p = qp->next;
 8007228:	6820      	ldr	r0, [r4, #0]
    chSchWakeupS(threadref(ch_queue_fifo_remove(&sp->queue)), MSG_OK);
 800722a:	2100      	movs	r1, #0
  qp->next       = p->next;
 800722c:	6803      	ldr	r3, [r0, #0]
  qp->next->prev = qp;
 800722e:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 8007230:	6023      	str	r3, [r4, #0]
 8007232:	f7fd f895 	bl	8004360 <chSchWakeupS>
 8007236:	e7b5      	b.n	80071a4 <rt_test_007_002_execute+0xa4>
  ch_queue_t *p = qp->next;
 8007238:	6820      	ldr	r0, [r4, #0]
  qp->next       = p->next;
 800723a:	6803      	ldr	r3, [r0, #0]
  qp->next->prev = qp;
 800723c:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 800723e:	6023      	str	r3, [r4, #0]
 8007240:	f7fd f88e 	bl	8004360 <chSchWakeupS>
 8007244:	e7da      	b.n	80071fc <rt_test_007_002_execute+0xfc>
  ch_queue_t *p = qp->next;
 8007246:	6820      	ldr	r0, [r4, #0]
  qp->next       = p->next;
 8007248:	6803      	ldr	r3, [r0, #0]
  qp->next->prev = qp;
 800724a:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 800724c:	6023      	str	r3, [r4, #0]
 800724e:	f7fd f887 	bl	8004360 <chSchWakeupS>
 8007252:	e7c8      	b.n	80071e6 <rt_test_007_002_execute+0xe6>
  ch_queue_t *p = qp->next;
 8007254:	6820      	ldr	r0, [r4, #0]
  qp->next       = p->next;
 8007256:	6803      	ldr	r3, [r0, #0]
  qp->next->prev = qp;
 8007258:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 800725a:	6023      	str	r3, [r4, #0]
 800725c:	f7fd f880 	bl	8004360 <chSchWakeupS>
 8007260:	e7b6      	b.n	80071d0 <rt_test_007_002_execute+0xd0>
  ch_queue_t *p = qp->next;
 8007262:	6820      	ldr	r0, [r4, #0]
  qp->next       = p->next;
 8007264:	6803      	ldr	r3, [r0, #0]
  qp->next->prev = qp;
 8007266:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 8007268:	6023      	str	r3, [r4, #0]
 800726a:	f7fd f879 	bl	8004360 <chSchWakeupS>
 800726e:	e7a4      	b.n	80071ba <rt_test_007_002_execute+0xba>
 8007270:	20001050 	.word	0x20001050
 8007274:	200010f4 	.word	0x200010f4
 8007278:	08010318 	.word	0x08010318
 800727c:	08001671 	.word	0x08001671
 8007280:	20001240 	.word	0x20001240
 8007284:	20001ab0 	.word	0x20001ab0
 8007288:	0801031c 	.word	0x0801031c
 800728c:	200013f0 	.word	0x200013f0
 8007290:	08010690 	.word	0x08010690
 8007294:	200015a0 	.word	0x200015a0
 8007298:	08011a24 	.word	0x08011a24
 800729c:	20001750 	.word	0x20001750
 80072a0:	080106ac 	.word	0x080106ac
 80072a4:	20001900 	.word	0x20001900
 80072a8:	20001224 	.word	0x20001224
 80072ac:	08010694 	.word	0x08010694
 80072b0:	080106a8 	.word	0x080106a8
	...

080072c0 <rt_test_007_004_execute>:
static void rt_test_007_004_execute(void) {
 80072c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 80072c4:	2401      	movs	r4, #1
  return __sch_get_currthread();
 80072c6:	4f35      	ldr	r7, [pc, #212]	; (800739c <rt_test_007_004_execute+0xdc>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 80072c8:	4b35      	ldr	r3, [pc, #212]	; (80073a0 <rt_test_007_004_execute+0xe0>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 80072ca:	68fa      	ldr	r2, [r7, #12]
  test_set_step(1);
 80072cc:	4e35      	ldr	r6, [pc, #212]	; (80073a4 <rt_test_007_004_execute+0xe4>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 80072ce:	6892      	ldr	r2, [r2, #8]
static void rt_test_007_004_execute(void) {
 80072d0:	b082      	sub	sp, #8
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	4422      	add	r2, r4
 80072d6:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80072da:	4b33      	ldr	r3, [pc, #204]	; (80073a8 <rt_test_007_004_execute+0xe8>)
 80072dc:	4833      	ldr	r0, [pc, #204]	; (80073ac <rt_test_007_004_execute+0xec>)
  test_set_step(1);
 80072de:	6034      	str	r4, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 80072e0:	f7fd f9b6 	bl	8004650 <chThdCreateStatic>
  test_set_step(2);
 80072e4:	2202      	movs	r2, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 80072e6:	4932      	ldr	r1, [pc, #200]	; (80073b0 <rt_test_007_004_execute+0xf0>)
 80072e8:	2330      	movs	r3, #48	; 0x30
 80072ea:	6008      	str	r0, [r1, #0]
  test_set_step(2);
 80072ec:	6032      	str	r2, [r6, #0]
 80072ee:	f383 8811 	msr	BASEPRI, r3
 * @param[in] n         value to be added to the semaphore counter. The value
 *                      must be positive.
 *
 * @iclass
 */
void chSemAddCounterI(semaphore_t *sp, cnt_t n) {
 80072f2:	4d30      	ldr	r5, [pc, #192]	; (80073b4 <rt_test_007_004_execute+0xf4>)
  tp->state = CH_STATE_READY;
 80072f4:	f04f 0c00 	mov.w	ip, #0
 80072f8:	68ab      	ldr	r3, [r5, #8]
 80072fa:	1898      	adds	r0, r3, r2
 80072fc:	e001      	b.n	8007302 <rt_test_007_004_execute+0x42>
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->cnt >= (cnt_t)0) && ch_queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && ch_queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 80072fe:	4283      	cmp	r3, r0
 8007300:	d018      	beq.n	8007334 <rt_test_007_004_execute+0x74>
    if (++sp->cnt <= (cnt_t)0) {
 8007302:	3301      	adds	r3, #1
 8007304:	2b00      	cmp	r3, #0
 8007306:	dcfa      	bgt.n	80072fe <rt_test_007_004_execute+0x3e>
  ch_queue_t *p = qp->next;
 8007308:	682a      	ldr	r2, [r5, #0]
  qp->next       = p->next;
 800730a:	6814      	ldr	r4, [r2, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800730c:	6991      	ldr	r1, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800730e:	f8d2 e008 	ldr.w	lr, [r2, #8]
  qp->next       = p->next;
 8007312:	602c      	str	r4, [r5, #0]
  qp->next->prev = qp;
 8007314:	6065      	str	r5, [r4, #4]
  tp->state = CH_STATE_READY;
 8007316:	f882 c028 	strb.w	ip, [r2, #40]	; 0x28
    pqp = pqp->next;
 800731a:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800731c:	688c      	ldr	r4, [r1, #8]
 800731e:	4574      	cmp	r4, lr
 8007320:	d2fb      	bcs.n	800731a <rt_test_007_004_execute+0x5a>
  p->prev       = pqp->prev;
 8007322:	684c      	ldr	r4, [r1, #4]
  while (n > (cnt_t)0) {
 8007324:	4283      	cmp	r3, r0
 8007326:	e9c2 1400 	strd	r1, r4, [r2]
  p->prev->next = p;
 800732a:	6022      	str	r2, [r4, #0]
  pqp->prev     = p;
 800732c:	604a      	str	r2, [r1, #4]
      chSchReadyI(threadref(ch_queue_fifo_remove(&sp->queue)))->u.rdymsg = MSG_OK;
 800732e:	f8c2 c02c 	str.w	ip, [r2, #44]	; 0x2c
  while (n > (cnt_t)0) {
 8007332:	d1e6      	bne.n	8007302 <rt_test_007_004_execute+0x42>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8007334:	6839      	ldr	r1, [r7, #0]
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	6889      	ldr	r1, [r1, #8]
 800733a:	6892      	ldr	r2, [r2, #8]
 800733c:	60ab      	str	r3, [r5, #8]
 800733e:	4291      	cmp	r1, r2
 8007340:	d901      	bls.n	8007346 <rt_test_007_004_execute+0x86>
    __sch_reschedule_ahead();
 8007342:	f7fc fd8d 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 8007346:	f04f 0800 	mov.w	r8, #0
 800734a:	f388 8811 	msr	BASEPRI, r8
 800734e:	4c18      	ldr	r4, [pc, #96]	; (80073b0 <rt_test_007_004_execute+0xf0>)
 8007350:	f104 0714 	add.w	r7, r4, #20
    if (threads[i] != NULL) {
 8007354:	f854 0b04 	ldr.w	r0, [r4], #4
 8007358:	b118      	cbz	r0, 8007362 <rt_test_007_004_execute+0xa2>
      chThdWait(threads[i]);
 800735a:	f7fe fb61 	bl	8005a20 <chThdWait>
      threads[i] = NULL;
 800735e:	f844 8c04 	str.w	r8, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8007362:	42bc      	cmp	r4, r7
 8007364:	d1f6      	bne.n	8007354 <rt_test_007_004_execute+0x94>
 8007366:	2330      	movs	r3, #48	; 0x30
 8007368:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 800736c:	68ab      	ldr	r3, [r5, #8]
 800736e:	2b01      	cmp	r3, #1
 8007370:	d109      	bne.n	8007386 <rt_test_007_004_execute+0xc6>
 8007372:	2300      	movs	r3, #0
 8007374:	f383 8811 	msr	BASEPRI, r3
    test_assert_sequence("A", "invalid sequence");
 8007378:	490f      	ldr	r1, [pc, #60]	; (80073b8 <rt_test_007_004_execute+0xf8>)
 800737a:	4809      	ldr	r0, [pc, #36]	; (80073a0 <rt_test_007_004_execute+0xe0>)
}
 800737c:	b002      	add	sp, #8
 800737e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert_sequence("A", "invalid sequence");
 8007382:	f7ff bd75 	b.w	8006e70 <__test_assert_sequence>
  chtest.global_fail     = true;
 8007386:	f240 1201 	movw	r2, #257	; 0x101
  chtest.failure_message = msg;
 800738a:	490c      	ldr	r1, [pc, #48]	; (80073bc <rt_test_007_004_execute+0xfc>)
 800738c:	2300      	movs	r3, #0
 800738e:	60b1      	str	r1, [r6, #8]
  chtest.global_fail     = true;
 8007390:	80b2      	strh	r2, [r6, #4]
 8007392:	f383 8811 	msr	BASEPRI, r3
}
 8007396:	b002      	add	sp, #8
 8007398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800739c:	20001050 	.word	0x20001050
 80073a0:	08010318 	.word	0x08010318
 80073a4:	200010f4 	.word	0x200010f4
 80073a8:	08001671 	.word	0x08001671
 80073ac:	20001240 	.word	0x20001240
 80073b0:	20001ab0 	.word	0x20001ab0
 80073b4:	20001224 	.word	0x20001224
 80073b8:	08010694 	.word	0x08010694
 80073bc:	080106b0 	.word	0x080106b0

080073c0 <rt_test_008_001_execute>:
  test_set_step(2);
 80073c0:	2202      	movs	r2, #2
static void rt_test_008_001_execute(void) {
 80073c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return __sch_get_currthread();
 80073c6:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 80074a8 <rt_test_008_001_execute+0xe8>
  test_set_step(2);
 80073ca:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 80074ac <rt_test_008_001_execute+0xec>
  return chThdGetSelfX()->hdr.pqueue.prio;
 80073ce:	f8d9 100c 	ldr.w	r1, [r9, #12]
static void rt_test_008_001_execute(void) {
 80073d2:	b083      	sub	sp, #12
 80073d4:	2330      	movs	r3, #48	; 0x30
 80073d6:	688d      	ldr	r5, [r1, #8]
  test_set_step(2);
 80073d8:	f8c8 2000 	str.w	r2, [r8]
 80073dc:	f383 8811 	msr	BASEPRI, r3
 80073e0:	4833      	ldr	r0, [pc, #204]	; (80074b0 <rt_test_008_001_execute+0xf0>)
 80073e2:	f7fd fbcd 	bl	8004b80 <chMtxLockS>
 80073e6:	2700      	movs	r7, #0
 80073e8:	f387 8811 	msr	BASEPRI, r7
  test_set_step(3);
 80073ec:	f04f 0c03 	mov.w	ip, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 80073f0:	4b30      	ldr	r3, [pc, #192]	; (80074b4 <rt_test_008_001_execute+0xf4>)
 80073f2:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	1c6a      	adds	r2, r5, #1
 80073fa:	4b2f      	ldr	r3, [pc, #188]	; (80074b8 <rt_test_008_001_execute+0xf8>)
 80073fc:	482f      	ldr	r0, [pc, #188]	; (80074bc <rt_test_008_001_execute+0xfc>)
  test_set_step(3);
 80073fe:	f8c8 c000 	str.w	ip, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8007402:	f7fd f925 	bl	8004650 <chThdCreateStatic>
 8007406:	4e2e      	ldr	r6, [pc, #184]	; (80074c0 <rt_test_008_001_execute+0x100>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8007408:	4b2e      	ldr	r3, [pc, #184]	; (80074c4 <rt_test_008_001_execute+0x104>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 800740a:	6030      	str	r0, [r6, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 800740c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8007410:	9300      	str	r3, [sp, #0]
 8007412:	1caa      	adds	r2, r5, #2
 8007414:	4b28      	ldr	r3, [pc, #160]	; (80074b8 <rt_test_008_001_execute+0xf8>)
 8007416:	482c      	ldr	r0, [pc, #176]	; (80074c8 <rt_test_008_001_execute+0x108>)
 8007418:	f7fd f91a 	bl	8004650 <chThdCreateStatic>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 800741c:	4b2b      	ldr	r3, [pc, #172]	; (80074cc <rt_test_008_001_execute+0x10c>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 800741e:	6070      	str	r0, [r6, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8007420:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8007424:	9300      	str	r3, [sp, #0]
 8007426:	1cea      	adds	r2, r5, #3
 8007428:	4b23      	ldr	r3, [pc, #140]	; (80074b8 <rt_test_008_001_execute+0xf8>)
 800742a:	4829      	ldr	r0, [pc, #164]	; (80074d0 <rt_test_008_001_execute+0x110>)
 800742c:	f7fd f910 	bl	8004650 <chThdCreateStatic>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8007430:	4b28      	ldr	r3, [pc, #160]	; (80074d4 <rt_test_008_001_execute+0x114>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8007432:	60b0      	str	r0, [r6, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8007434:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8007438:	9300      	str	r3, [sp, #0]
 800743a:	1d2a      	adds	r2, r5, #4
 800743c:	4b1e      	ldr	r3, [pc, #120]	; (80074b8 <rt_test_008_001_execute+0xf8>)
 800743e:	4826      	ldr	r0, [pc, #152]	; (80074d8 <rt_test_008_001_execute+0x118>)
 8007440:	f7fd f906 	bl	8004650 <chThdCreateStatic>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8007444:	4b25      	ldr	r3, [pc, #148]	; (80074dc <rt_test_008_001_execute+0x11c>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8007446:	60f0      	str	r0, [r6, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8007448:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	1d6a      	adds	r2, r5, #5
 8007450:	4b19      	ldr	r3, [pc, #100]	; (80074b8 <rt_test_008_001_execute+0xf8>)
 8007452:	4823      	ldr	r0, [pc, #140]	; (80074e0 <rt_test_008_001_execute+0x120>)
 8007454:	f7fd f8fc 	bl	8004650 <chThdCreateStatic>
  test_set_step(4);
 8007458:	2304      	movs	r3, #4
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 800745a:	6130      	str	r0, [r6, #16]
    chMtxUnlock(&m1);
 800745c:	4814      	ldr	r0, [pc, #80]	; (80074b0 <rt_test_008_001_execute+0xf0>)
  test_set_step(4);
 800745e:	f8c8 3000 	str.w	r3, [r8]
    chMtxUnlock(&m1);
 8007462:	f7fd fc25 	bl	8004cb0 <chMtxUnlock>
 8007466:	4634      	mov	r4, r6
 8007468:	3614      	adds	r6, #20
    if (threads[i] != NULL) {
 800746a:	f854 0b04 	ldr.w	r0, [r4], #4
 800746e:	b118      	cbz	r0, 8007478 <rt_test_008_001_execute+0xb8>
      chThdWait(threads[i]);
 8007470:	f7fe fad6 	bl	8005a20 <chThdWait>
      threads[i] = NULL;
 8007474:	f844 7c04 	str.w	r7, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8007478:	42b4      	cmp	r4, r6
 800747a:	d1f6      	bne.n	800746a <rt_test_008_001_execute+0xaa>
 800747c:	f8d9 300c 	ldr.w	r3, [r9, #12]
  if (!condition) {
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	42ab      	cmp	r3, r5
 8007484:	d106      	bne.n	8007494 <rt_test_008_001_execute+0xd4>
    test_assert_sequence("ABCDE", "invalid sequence");
 8007486:	4917      	ldr	r1, [pc, #92]	; (80074e4 <rt_test_008_001_execute+0x124>)
 8007488:	4817      	ldr	r0, [pc, #92]	; (80074e8 <rt_test_008_001_execute+0x128>)
}
 800748a:	b003      	add	sp, #12
 800748c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8007490:	f7ff bcee 	b.w	8006e70 <__test_assert_sequence>
  chtest.global_fail     = true;
 8007494:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8007498:	4a14      	ldr	r2, [pc, #80]	; (80074ec <rt_test_008_001_execute+0x12c>)
  chtest.global_fail     = true;
 800749a:	f8a8 3004 	strh.w	r3, [r8, #4]
  chtest.failure_message = msg;
 800749e:	f8c8 2008 	str.w	r2, [r8, #8]
}
 80074a2:	b003      	add	sp, #12
 80074a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074a8:	20001050 	.word	0x20001050
 80074ac:	200010f4 	.word	0x200010f4
 80074b0:	20000818 	.word	0x20000818
 80074b4:	080106ac 	.word	0x080106ac
 80074b8:	08004d41 	.word	0x08004d41
 80074bc:	20001240 	.word	0x20001240
 80074c0:	20001ab0 	.word	0x20001ab0
 80074c4:	08011a24 	.word	0x08011a24
 80074c8:	200013f0 	.word	0x200013f0
 80074cc:	08010690 	.word	0x08010690
 80074d0:	200015a0 	.word	0x200015a0
 80074d4:	0801031c 	.word	0x0801031c
 80074d8:	20001750 	.word	0x20001750
 80074dc:	08010318 	.word	0x08010318
 80074e0:	20001900 	.word	0x20001900
 80074e4:	08010694 	.word	0x08010694
 80074e8:	080106a8 	.word	0x080106a8
 80074ec:	08010320 	.word	0x08010320

080074f0 <rt_test_008_007_execute>:
  test_set_step(1);
 80074f0:	f04f 0c01 	mov.w	ip, #1
static void rt_test_008_007_execute(void) {
 80074f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  return __sch_get_currthread();
 80074f6:	4d66      	ldr	r5, [pc, #408]	; (8007690 <rt_test_008_007_execute+0x1a0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 80074f8:	4b66      	ldr	r3, [pc, #408]	; (8007694 <rt_test_008_007_execute+0x1a4>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 80074fa:	68ea      	ldr	r2, [r5, #12]
static void rt_test_008_007_execute(void) {
 80074fc:	b083      	sub	sp, #12
 80074fe:	6896      	ldr	r6, [r2, #8]
  test_set_step(1);
 8007500:	4f65      	ldr	r7, [pc, #404]	; (8007698 <rt_test_008_007_execute+0x1a8>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8007502:	eb06 020c 	add.w	r2, r6, ip
 8007506:	9300      	str	r3, [sp, #0]
 8007508:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800750c:	4b63      	ldr	r3, [pc, #396]	; (800769c <rt_test_008_007_execute+0x1ac>)
 800750e:	4864      	ldr	r0, [pc, #400]	; (80076a0 <rt_test_008_007_execute+0x1b0>)
  test_set_step(1);
 8007510:	f8c7 c000 	str.w	ip, [r7]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8007514:	f7fd f89c 	bl	8004650 <chThdCreateStatic>
 8007518:	4684      	mov	ip, r0
 800751a:	4c62      	ldr	r4, [pc, #392]	; (80076a4 <rt_test_008_007_execute+0x1b4>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 800751c:	4b62      	ldr	r3, [pc, #392]	; (80076a8 <rt_test_008_007_execute+0x1b8>)
 800751e:	1cb2      	adds	r2, r6, #2
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8007526:	f8c4 c000 	str.w	ip, [r4]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 800752a:	4b5c      	ldr	r3, [pc, #368]	; (800769c <rt_test_008_007_execute+0x1ac>)
 800752c:	485f      	ldr	r0, [pc, #380]	; (80076ac <rt_test_008_007_execute+0x1bc>)
 800752e:	f7fd f88f 	bl	8004650 <chThdCreateStatic>
 8007532:	4684      	mov	ip, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8007534:	4b5e      	ldr	r3, [pc, #376]	; (80076b0 <rt_test_008_007_execute+0x1c0>)
 8007536:	1cf2      	adds	r2, r6, #3
 8007538:	9300      	str	r3, [sp, #0]
 800753a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 800753e:	f8c4 c004 	str.w	ip, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8007542:	4b56      	ldr	r3, [pc, #344]	; (800769c <rt_test_008_007_execute+0x1ac>)
 8007544:	485b      	ldr	r0, [pc, #364]	; (80076b4 <rt_test_008_007_execute+0x1c4>)
 8007546:	f7fd f883 	bl	8004650 <chThdCreateStatic>
 800754a:	4684      	mov	ip, r0
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 800754c:	4b5a      	ldr	r3, [pc, #360]	; (80076b8 <rt_test_008_007_execute+0x1c8>)
 800754e:	1d32      	adds	r2, r6, #4
 8007550:	9300      	str	r3, [sp, #0]
 8007552:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8007556:	f8c4 c008 	str.w	ip, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 800755a:	4b50      	ldr	r3, [pc, #320]	; (800769c <rt_test_008_007_execute+0x1ac>)
 800755c:	4857      	ldr	r0, [pc, #348]	; (80076bc <rt_test_008_007_execute+0x1cc>)
 800755e:	f7fd f877 	bl	8004650 <chThdCreateStatic>
 8007562:	4684      	mov	ip, r0
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8007564:	4b56      	ldr	r3, [pc, #344]	; (80076c0 <rt_test_008_007_execute+0x1d0>)
 8007566:	1d72      	adds	r2, r6, #5
 8007568:	9300      	str	r3, [sp, #0]
 800756a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800756e:	4b4b      	ldr	r3, [pc, #300]	; (800769c <rt_test_008_007_execute+0x1ac>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8007570:	f8c4 c00c 	str.w	ip, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8007574:	4853      	ldr	r0, [pc, #332]	; (80076c4 <rt_test_008_007_execute+0x1d4>)
 8007576:	f7fd f86b 	bl	8004650 <chThdCreateStatic>
  test_set_step(2);
 800757a:	2202      	movs	r2, #2
 800757c:	2330      	movs	r3, #48	; 0x30
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 800757e:	6120      	str	r0, [r4, #16]
  test_set_step(2);
 8007580:	603a      	str	r2, [r7, #0]
 8007582:	f383 8811 	msr	BASEPRI, r3
  return (bool)(qp->next != qp);
 8007586:	4b50      	ldr	r3, [pc, #320]	; (80076c8 <rt_test_008_007_execute+0x1d8>)
 8007588:	681a      	ldr	r2, [r3, #0]
  if (ch_queue_notempty(&cp->queue)) {
 800758a:	429a      	cmp	r2, r3
 800758c:	d061      	beq.n	8007652 <rt_test_008_007_execute+0x162>
    tp->u.rdymsg = MSG_OK;
 800758e:	2400      	movs	r4, #0
  qp->next       = p->next;
 8007590:	6811      	ldr	r1, [r2, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8007592:	6990      	ldr	r0, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8007594:	6896      	ldr	r6, [r2, #8]
  qp->next->prev = qp;
 8007596:	604b      	str	r3, [r1, #4]
  qp->next       = p->next;
 8007598:	6019      	str	r1, [r3, #0]
 800759a:	62d4      	str	r4, [r2, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 800759c:	f882 4028 	strb.w	r4, [r2, #40]	; 0x28
    pqp = pqp->next;
 80075a0:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80075a2:	6884      	ldr	r4, [r0, #8]
 80075a4:	42b4      	cmp	r4, r6
 80075a6:	d2fb      	bcs.n	80075a0 <rt_test_008_007_execute+0xb0>
  p->prev       = pqp->prev;
 80075a8:	6844      	ldr	r4, [r0, #4]
  if (ch_queue_notempty(&cp->queue)) {
 80075aa:	4299      	cmp	r1, r3
  p->next       = pqp;
 80075ac:	6010      	str	r0, [r2, #0]
  p->prev       = pqp->prev;
 80075ae:	6054      	str	r4, [r2, #4]
  p->prev->next = p;
 80075b0:	6022      	str	r2, [r4, #0]
  pqp->prev     = p;
 80075b2:	6042      	str	r2, [r0, #4]
 80075b4:	d04d      	beq.n	8007652 <rt_test_008_007_execute+0x162>
    tp->u.rdymsg = MSG_OK;
 80075b6:	2400      	movs	r4, #0
  qp->next       = p->next;
 80075b8:	680a      	ldr	r2, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80075ba:	6988      	ldr	r0, [r1, #24]
  } while (unlikely(pqp->prio >= p->prio));
 80075bc:	688e      	ldr	r6, [r1, #8]
  qp->next->prev = qp;
 80075be:	6053      	str	r3, [r2, #4]
  qp->next       = p->next;
 80075c0:	601a      	str	r2, [r3, #0]
 80075c2:	62cc      	str	r4, [r1, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 80075c4:	f881 4028 	strb.w	r4, [r1, #40]	; 0x28
    pqp = pqp->next;
 80075c8:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80075ca:	6884      	ldr	r4, [r0, #8]
 80075cc:	42b4      	cmp	r4, r6
 80075ce:	d2fb      	bcs.n	80075c8 <rt_test_008_007_execute+0xd8>
  p->prev       = pqp->prev;
 80075d0:	6844      	ldr	r4, [r0, #4]
  if (ch_queue_notempty(&cp->queue)) {
 80075d2:	429a      	cmp	r2, r3
  p->next       = pqp;
 80075d4:	6008      	str	r0, [r1, #0]
  p->prev       = pqp->prev;
 80075d6:	604c      	str	r4, [r1, #4]
  p->prev->next = p;
 80075d8:	6021      	str	r1, [r4, #0]
  pqp->prev     = p;
 80075da:	6041      	str	r1, [r0, #4]
 80075dc:	d039      	beq.n	8007652 <rt_test_008_007_execute+0x162>
    tp->u.rdymsg = MSG_OK;
 80075de:	2400      	movs	r4, #0
  qp->next       = p->next;
 80075e0:	6811      	ldr	r1, [r2, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80075e2:	6990      	ldr	r0, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 80075e4:	6896      	ldr	r6, [r2, #8]
  qp->next->prev = qp;
 80075e6:	604b      	str	r3, [r1, #4]
  qp->next       = p->next;
 80075e8:	6019      	str	r1, [r3, #0]
 80075ea:	62d4      	str	r4, [r2, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 80075ec:	f882 4028 	strb.w	r4, [r2, #40]	; 0x28
    pqp = pqp->next;
 80075f0:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80075f2:	6884      	ldr	r4, [r0, #8]
 80075f4:	42b4      	cmp	r4, r6
 80075f6:	d2fb      	bcs.n	80075f0 <rt_test_008_007_execute+0x100>
  p->prev       = pqp->prev;
 80075f8:	6844      	ldr	r4, [r0, #4]
  if (ch_queue_notempty(&cp->queue)) {
 80075fa:	4299      	cmp	r1, r3
  p->next       = pqp;
 80075fc:	6010      	str	r0, [r2, #0]
  p->prev       = pqp->prev;
 80075fe:	6054      	str	r4, [r2, #4]
  p->prev->next = p;
 8007600:	6022      	str	r2, [r4, #0]
  pqp->prev     = p;
 8007602:	6042      	str	r2, [r0, #4]
 8007604:	d025      	beq.n	8007652 <rt_test_008_007_execute+0x162>
    tp->u.rdymsg = MSG_OK;
 8007606:	2400      	movs	r4, #0
  qp->next       = p->next;
 8007608:	680a      	ldr	r2, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800760a:	6988      	ldr	r0, [r1, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800760c:	688e      	ldr	r6, [r1, #8]
  qp->next->prev = qp;
 800760e:	6053      	str	r3, [r2, #4]
  qp->next       = p->next;
 8007610:	601a      	str	r2, [r3, #0]
 8007612:	62cc      	str	r4, [r1, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 8007614:	f881 4028 	strb.w	r4, [r1, #40]	; 0x28
    pqp = pqp->next;
 8007618:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800761a:	6884      	ldr	r4, [r0, #8]
 800761c:	42b4      	cmp	r4, r6
 800761e:	d2fb      	bcs.n	8007618 <rt_test_008_007_execute+0x128>
  p->prev       = pqp->prev;
 8007620:	6844      	ldr	r4, [r0, #4]
  if (ch_queue_notempty(&cp->queue)) {
 8007622:	429a      	cmp	r2, r3
  p->next       = pqp;
 8007624:	6008      	str	r0, [r1, #0]
  p->prev       = pqp->prev;
 8007626:	604c      	str	r4, [r1, #4]
  p->prev->next = p;
 8007628:	6021      	str	r1, [r4, #0]
  pqp->prev     = p;
 800762a:	6041      	str	r1, [r0, #4]
 800762c:	d011      	beq.n	8007652 <rt_test_008_007_execute+0x162>
    tp->u.rdymsg = MSG_OK;
 800762e:	2100      	movs	r1, #0
  qp->next       = p->next;
 8007630:	6810      	ldr	r0, [r2, #0]
  qp->next->prev = qp;
 8007632:	6043      	str	r3, [r0, #4]
  qp->next       = p->next;
 8007634:	6018      	str	r0, [r3, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8007636:	6993      	ldr	r3, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8007638:	6890      	ldr	r0, [r2, #8]
 800763a:	62d1      	str	r1, [r2, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 800763c:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    pqp = pqp->next;
 8007640:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8007642:	6899      	ldr	r1, [r3, #8]
 8007644:	4281      	cmp	r1, r0
 8007646:	d2fb      	bcs.n	8007640 <rt_test_008_007_execute+0x150>
  p->prev       = pqp->prev;
 8007648:	6859      	ldr	r1, [r3, #4]
 800764a:	e9c2 3100 	strd	r3, r1, [r2]
  p->prev->next = p;
 800764e:	600a      	str	r2, [r1, #0]
  pqp->prev     = p;
 8007650:	605a      	str	r2, [r3, #4]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8007652:	682a      	ldr	r2, [r5, #0]
 8007654:	68eb      	ldr	r3, [r5, #12]
 8007656:	6892      	ldr	r2, [r2, #8]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	429a      	cmp	r2, r3
 800765c:	d901      	bls.n	8007662 <rt_test_008_007_execute+0x172>
    __sch_reschedule_ahead();
 800765e:	f7fc fbff 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 8007662:	2600      	movs	r6, #0
 8007664:	f386 8811 	msr	BASEPRI, r6
 8007668:	4c0e      	ldr	r4, [pc, #56]	; (80076a4 <rt_test_008_007_execute+0x1b4>)
 800766a:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 800766e:	f854 0b04 	ldr.w	r0, [r4], #4
 8007672:	b118      	cbz	r0, 800767c <rt_test_008_007_execute+0x18c>
      chThdWait(threads[i]);
 8007674:	f7fe f9d4 	bl	8005a20 <chThdWait>
      threads[i] = NULL;
 8007678:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 800767c:	42a5      	cmp	r5, r4
 800767e:	d1f6      	bne.n	800766e <rt_test_008_007_execute+0x17e>
    test_assert_sequence("ABCDE", "invalid sequence");
 8007680:	4912      	ldr	r1, [pc, #72]	; (80076cc <rt_test_008_007_execute+0x1dc>)
 8007682:	4813      	ldr	r0, [pc, #76]	; (80076d0 <rt_test_008_007_execute+0x1e0>)
}
 8007684:	b003      	add	sp, #12
 8007686:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 800768a:	f7ff bbf1 	b.w	8006e70 <__test_assert_sequence>
 800768e:	bf00      	nop
 8007690:	20001050 	.word	0x20001050
 8007694:	080106ac 	.word	0x080106ac
 8007698:	200010f4 	.word	0x200010f4
 800769c:	08004e01 	.word	0x08004e01
 80076a0:	20001240 	.word	0x20001240
 80076a4:	20001ab0 	.word	0x20001ab0
 80076a8:	08011a24 	.word	0x08011a24
 80076ac:	200013f0 	.word	0x200013f0
 80076b0:	08010690 	.word	0x08010690
 80076b4:	200015a0 	.word	0x200015a0
 80076b8:	0801031c 	.word	0x0801031c
 80076bc:	20001750 	.word	0x20001750
 80076c0:	08010318 	.word	0x08010318
 80076c4:	20001900 	.word	0x20001900
 80076c8:	20000800 	.word	0x20000800
 80076cc:	08010694 	.word	0x08010694
 80076d0:	080106a8 	.word	0x080106a8
	...

080076e0 <rt_test_008_008_execute>:
  test_set_step(1);
 80076e0:	f04f 0c01 	mov.w	ip, #1
static void rt_test_008_008_execute(void) {
 80076e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  return __sch_get_currthread();
 80076e6:	4e41      	ldr	r6, [pc, #260]	; (80077ec <rt_test_008_008_execute+0x10c>)
  test_set_step(1);
 80076e8:	4f41      	ldr	r7, [pc, #260]	; (80077f0 <rt_test_008_008_execute+0x110>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 80076ea:	68f2      	ldr	r2, [r6, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 80076ec:	4b41      	ldr	r3, [pc, #260]	; (80077f4 <rt_test_008_008_execute+0x114>)
 80076ee:	6895      	ldr	r5, [r2, #8]
static void rt_test_008_008_execute(void) {
 80076f0:	b083      	sub	sp, #12
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	eb05 020c 	add.w	r2, r5, ip
  test_set_step(1);
 80076f8:	f8c7 c000 	str.w	ip, [r7]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 80076fc:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8007700:	4b3d      	ldr	r3, [pc, #244]	; (80077f8 <rt_test_008_008_execute+0x118>)
 8007702:	483e      	ldr	r0, [pc, #248]	; (80077fc <rt_test_008_008_execute+0x11c>)
 8007704:	f7fc ffa4 	bl	8004650 <chThdCreateStatic>
 8007708:	4684      	mov	ip, r0
 800770a:	4c3d      	ldr	r4, [pc, #244]	; (8007800 <rt_test_008_008_execute+0x120>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 800770c:	4b3d      	ldr	r3, [pc, #244]	; (8007804 <rt_test_008_008_execute+0x124>)
 800770e:	1caa      	adds	r2, r5, #2
 8007710:	9300      	str	r3, [sp, #0]
 8007712:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8007716:	f8c4 c000 	str.w	ip, [r4]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 800771a:	4b37      	ldr	r3, [pc, #220]	; (80077f8 <rt_test_008_008_execute+0x118>)
 800771c:	483a      	ldr	r0, [pc, #232]	; (8007808 <rt_test_008_008_execute+0x128>)
 800771e:	f7fc ff97 	bl	8004650 <chThdCreateStatic>
 8007722:	4684      	mov	ip, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8007724:	4b39      	ldr	r3, [pc, #228]	; (800780c <rt_test_008_008_execute+0x12c>)
 8007726:	1cea      	adds	r2, r5, #3
 8007728:	9300      	str	r3, [sp, #0]
 800772a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 800772e:	f8c4 c004 	str.w	ip, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8007732:	4b31      	ldr	r3, [pc, #196]	; (80077f8 <rt_test_008_008_execute+0x118>)
 8007734:	4836      	ldr	r0, [pc, #216]	; (8007810 <rt_test_008_008_execute+0x130>)
 8007736:	f7fc ff8b 	bl	8004650 <chThdCreateStatic>
 800773a:	4684      	mov	ip, r0
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 800773c:	4b35      	ldr	r3, [pc, #212]	; (8007814 <rt_test_008_008_execute+0x134>)
 800773e:	1d2a      	adds	r2, r5, #4
 8007740:	9300      	str	r3, [sp, #0]
 8007742:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8007746:	f8c4 c008 	str.w	ip, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 800774a:	4b2b      	ldr	r3, [pc, #172]	; (80077f8 <rt_test_008_008_execute+0x118>)
 800774c:	4832      	ldr	r0, [pc, #200]	; (8007818 <rt_test_008_008_execute+0x138>)
 800774e:	f7fc ff7f 	bl	8004650 <chThdCreateStatic>
 8007752:	4684      	mov	ip, r0
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8007754:	4b31      	ldr	r3, [pc, #196]	; (800781c <rt_test_008_008_execute+0x13c>)
 8007756:	1d6a      	adds	r2, r5, #5
 8007758:	9300      	str	r3, [sp, #0]
 800775a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800775e:	4b26      	ldr	r3, [pc, #152]	; (80077f8 <rt_test_008_008_execute+0x118>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8007760:	f8c4 c00c 	str.w	ip, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8007764:	482e      	ldr	r0, [pc, #184]	; (8007820 <rt_test_008_008_execute+0x140>)
 8007766:	f7fc ff73 	bl	8004650 <chThdCreateStatic>
  test_set_step(2);
 800776a:	2202      	movs	r2, #2
 800776c:	2330      	movs	r3, #48	; 0x30
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 800776e:	6120      	str	r0, [r4, #16]
  test_set_step(2);
 8007770:	603a      	str	r2, [r7, #0]
 8007772:	f383 8811 	msr	BASEPRI, r3
  return (bool)(qp->next != qp);
 8007776:	482b      	ldr	r0, [pc, #172]	; (8007824 <rt_test_008_008_execute+0x144>)
 8007778:	6801      	ldr	r1, [r0, #0]
  while (ch_queue_notempty(&cp->queue)) {
 800777a:	4281      	cmp	r1, r0
 800777c:	d017      	beq.n	80077ae <rt_test_008_008_execute+0xce>
  tp->state = CH_STATE_READY;
 800777e:	f04f 0c00 	mov.w	ip, #0
    chSchReadyI(threadref(ch_queue_fifo_remove(&cp->queue)))->u.rdymsg = MSG_RESET;
 8007782:	f06f 0701 	mvn.w	r7, #1
 8007786:	460b      	mov	r3, r1
  qp->next       = p->next;
 8007788:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800778a:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800778c:	689d      	ldr	r5, [r3, #8]
  qp->next->prev = qp;
 800778e:	6048      	str	r0, [r1, #4]
  qp->next       = p->next;
 8007790:	6001      	str	r1, [r0, #0]
  tp->state = CH_STATE_READY;
 8007792:	f883 c028 	strb.w	ip, [r3, #40]	; 0x28
    pqp = pqp->next;
 8007796:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8007798:	6894      	ldr	r4, [r2, #8]
 800779a:	42ac      	cmp	r4, r5
 800779c:	d2fb      	bcs.n	8007796 <rt_test_008_008_execute+0xb6>
  p->prev       = pqp->prev;
 800779e:	6854      	ldr	r4, [r2, #4]
  while (ch_queue_notempty(&cp->queue)) {
 80077a0:	4281      	cmp	r1, r0
 80077a2:	e9c3 2400 	strd	r2, r4, [r3]
  p->prev->next = p;
 80077a6:	6023      	str	r3, [r4, #0]
  pqp->prev     = p;
 80077a8:	6053      	str	r3, [r2, #4]
    chSchReadyI(threadref(ch_queue_fifo_remove(&cp->queue)))->u.rdymsg = MSG_RESET;
 80077aa:	62df      	str	r7, [r3, #44]	; 0x2c
  while (ch_queue_notempty(&cp->queue)) {
 80077ac:	d1eb      	bne.n	8007786 <rt_test_008_008_execute+0xa6>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 80077ae:	6832      	ldr	r2, [r6, #0]
 80077b0:	68f3      	ldr	r3, [r6, #12]
 80077b2:	6892      	ldr	r2, [r2, #8]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d901      	bls.n	80077be <rt_test_008_008_execute+0xde>
    __sch_reschedule_ahead();
 80077ba:	f7fc fb51 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 80077be:	2600      	movs	r6, #0
 80077c0:	f386 8811 	msr	BASEPRI, r6
 80077c4:	4c0e      	ldr	r4, [pc, #56]	; (8007800 <rt_test_008_008_execute+0x120>)
 80077c6:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 80077ca:	f854 0b04 	ldr.w	r0, [r4], #4
 80077ce:	b118      	cbz	r0, 80077d8 <rt_test_008_008_execute+0xf8>
      chThdWait(threads[i]);
 80077d0:	f7fe f926 	bl	8005a20 <chThdWait>
      threads[i] = NULL;
 80077d4:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 80077d8:	42a5      	cmp	r5, r4
 80077da:	d1f6      	bne.n	80077ca <rt_test_008_008_execute+0xea>
    test_assert_sequence("ABCDE", "invalid sequence");
 80077dc:	4912      	ldr	r1, [pc, #72]	; (8007828 <rt_test_008_008_execute+0x148>)
 80077de:	4813      	ldr	r0, [pc, #76]	; (800782c <rt_test_008_008_execute+0x14c>)
}
 80077e0:	b003      	add	sp, #12
 80077e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 80077e6:	f7ff bb43 	b.w	8006e70 <__test_assert_sequence>
 80077ea:	bf00      	nop
 80077ec:	20001050 	.word	0x20001050
 80077f0:	200010f4 	.word	0x200010f4
 80077f4:	080106ac 	.word	0x080106ac
 80077f8:	08004e01 	.word	0x08004e01
 80077fc:	20001240 	.word	0x20001240
 8007800:	20001ab0 	.word	0x20001ab0
 8007804:	08011a24 	.word	0x08011a24
 8007808:	200013f0 	.word	0x200013f0
 800780c:	08010690 	.word	0x08010690
 8007810:	200015a0 	.word	0x200015a0
 8007814:	0801031c 	.word	0x0801031c
 8007818:	20001750 	.word	0x20001750
 800781c:	08010318 	.word	0x08010318
 8007820:	20001900 	.word	0x20001900
 8007824:	20000800 	.word	0x20000800
 8007828:	08010694 	.word	0x08010694
 800782c:	080106a8 	.word	0x080106a8

08007830 <rt_test_008_009_execute>:

static void rt_test_008_009_execute(void) {
 8007830:	b5f0      	push	{r4, r5, r6, r7, lr}
  }
  test_end_step(1);

  /* [8.9.2] Thread A is created at priority P(+1), it locks M2, locks
     M1 and goes to wait on C1.*/
  test_set_step(2);
 8007832:	2702      	movs	r7, #2
  return __sch_get_currthread();
 8007834:	4b31      	ldr	r3, [pc, #196]	; (80078fc <rt_test_008_009_execute+0xcc>)
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8007836:	4832      	ldr	r0, [pc, #200]	; (8007900 <rt_test_008_009_execute+0xd0>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 8007838:	68db      	ldr	r3, [r3, #12]
static void rt_test_008_009_execute(void) {
 800783a:	b083      	sub	sp, #12
 800783c:	689e      	ldr	r6, [r3, #8]
  test_set_step(2);
 800783e:	4d31      	ldr	r5, [pc, #196]	; (8007904 <rt_test_008_009_execute+0xd4>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8007840:	1c72      	adds	r2, r6, #1
 8007842:	9000      	str	r0, [sp, #0]
 8007844:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8007848:	4b2f      	ldr	r3, [pc, #188]	; (8007908 <rt_test_008_009_execute+0xd8>)
 800784a:	4830      	ldr	r0, [pc, #192]	; (800790c <rt_test_008_009_execute+0xdc>)
  test_set_step(2);
 800784c:	602f      	str	r7, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 800784e:	f7fc feff 	bl	8004650 <chThdCreateStatic>
 8007852:	4684      	mov	ip, r0
  }
  test_end_step(2);

  /* [8.9.3] Thread C is created at priority P(+2), it enqueues on M1
     and boosts TA priority at P(+2).*/
  test_set_step(3);
 8007854:	2703      	movs	r7, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8007856:	4c2e      	ldr	r4, [pc, #184]	; (8007910 <rt_test_008_009_execute+0xe0>)
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8007858:	4b2e      	ldr	r3, [pc, #184]	; (8007914 <rt_test_008_009_execute+0xe4>)
 800785a:	1cb2      	adds	r2, r6, #2
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8007862:	f8c4 c000 	str.w	ip, [r4]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8007866:	4b2c      	ldr	r3, [pc, #176]	; (8007918 <rt_test_008_009_execute+0xe8>)
 8007868:	482c      	ldr	r0, [pc, #176]	; (800791c <rt_test_008_009_execute+0xec>)
  test_set_step(3);
 800786a:	602f      	str	r7, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 800786c:	f7fc fef0 	bl	8004650 <chThdCreateStatic>
 8007870:	4684      	mov	ip, r0
  }
  test_end_step(3);

  /* [8.9.4] Thread B is created at priority P(+3), it enqueues on M2
     and boosts TA priority at P(+3).*/
  test_set_step(4);
 8007872:	2704      	movs	r7, #4
  {
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8007874:	4b2a      	ldr	r3, [pc, #168]	; (8007920 <rt_test_008_009_execute+0xf0>)
 8007876:	1cf2      	adds	r2, r6, #3
 8007878:	9300      	str	r3, [sp, #0]
 800787a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800787e:	4b29      	ldr	r3, [pc, #164]	; (8007924 <rt_test_008_009_execute+0xf4>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8007880:	f8c4 c004 	str.w	ip, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8007884:	4828      	ldr	r0, [pc, #160]	; (8007928 <rt_test_008_009_execute+0xf8>)
  test_set_step(4);
 8007886:	602f      	str	r7, [r5, #0]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8007888:	f7fc fee2 	bl	8004650 <chThdCreateStatic>
  test_end_step(4);

  /* [8.9.5] Signaling C1: TA wakes up, unlocks M1 and priority goes to
     P(+2). TB locks M1, unlocks M1 and completes. TA unlocks M2 and
     priority goes to P(+1). TC waits on C1. TA completes.*/
  test_set_step(5);
 800788c:	2205      	movs	r2, #5
 800788e:	2330      	movs	r3, #48	; 0x30
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8007890:	60a0      	str	r0, [r4, #8]
  test_set_step(5);
 8007892:	602a      	str	r2, [r5, #0]
 8007894:	f383 8811 	msr	BASEPRI, r3
  return (bool)(qp->next != qp);
 8007898:	4c24      	ldr	r4, [pc, #144]	; (800792c <rt_test_008_009_execute+0xfc>)
 800789a:	6820      	ldr	r0, [r4, #0]
  if (ch_queue_notempty(&cp->queue)) {
 800789c:	42a0      	cmp	r0, r4
 800789e:	d005      	beq.n	80078ac <rt_test_008_009_execute+0x7c>
  qp->next       = p->next;
 80078a0:	6803      	ldr	r3, [r0, #0]
    chSchWakeupS(threadref(ch_queue_fifo_remove(&cp->queue)), MSG_OK);
 80078a2:	2100      	movs	r1, #0
  qp->next->prev = qp;
 80078a4:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 80078a6:	6023      	str	r3, [r4, #0]
 80078a8:	f7fc fd5a 	bl	8004360 <chSchWakeupS>
 80078ac:	2100      	movs	r1, #0
 80078ae:	f381 8811 	msr	BASEPRI, r1
    chCondSignal(&c1);
  }
  test_end_step(5);

  /* [8.9.6] Signaling C1: TC wakes up, unlocks M1 and completes.*/
  test_set_step(6);
 80078b2:	2206      	movs	r2, #6
 80078b4:	2330      	movs	r3, #48	; 0x30
 80078b6:	602a      	str	r2, [r5, #0]
 80078b8:	f383 8811 	msr	BASEPRI, r3
  return (bool)(qp->next != qp);
 80078bc:	6820      	ldr	r0, [r4, #0]
  if (ch_queue_notempty(&cp->queue)) {
 80078be:	42a0      	cmp	r0, r4
 80078c0:	d004      	beq.n	80078cc <rt_test_008_009_execute+0x9c>
  qp->next       = p->next;
 80078c2:	6803      	ldr	r3, [r0, #0]
  qp->next->prev = qp;
 80078c4:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 80078c6:	6023      	str	r3, [r4, #0]
    chSchWakeupS(threadref(ch_queue_fifo_remove(&cp->queue)), MSG_OK);
 80078c8:	f7fc fd4a 	bl	8004360 <chSchWakeupS>
 80078cc:	2700      	movs	r7, #0
 80078ce:	f387 8811 	msr	BASEPRI, r7
    chCondSignal(&c1);
  }
  test_end_step(6);

  /* [8.9.7] Checking the order of operations.*/
  test_set_step(7);
 80078d2:	2307      	movs	r3, #7
 80078d4:	4c0e      	ldr	r4, [pc, #56]	; (8007910 <rt_test_008_009_execute+0xe0>)
 80078d6:	602b      	str	r3, [r5, #0]
 80078d8:	f104 0614 	add.w	r6, r4, #20
    if (threads[i] != NULL) {
 80078dc:	f854 0b04 	ldr.w	r0, [r4], #4
 80078e0:	b118      	cbz	r0, 80078ea <rt_test_008_009_execute+0xba>
      chThdWait(threads[i]);
 80078e2:	f7fe f89d 	bl	8005a20 <chThdWait>
      threads[i] = NULL;
 80078e6:	f844 7c04 	str.w	r7, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 80078ea:	42a6      	cmp	r6, r4
 80078ec:	d1f6      	bne.n	80078dc <rt_test_008_009_execute+0xac>
  {
    test_wait_threads();
    test_assert_sequence("ABC", "invalid sequence");
 80078ee:	4910      	ldr	r1, [pc, #64]	; (8007930 <rt_test_008_009_execute+0x100>)
 80078f0:	4810      	ldr	r0, [pc, #64]	; (8007934 <rt_test_008_009_execute+0x104>)
  }
  test_end_step(7);
}
 80078f2:	b003      	add	sp, #12
 80078f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    test_assert_sequence("ABC", "invalid sequence");
 80078f8:	f7ff baba 	b.w	8006e70 <__test_assert_sequence>
 80078fc:	20001050 	.word	0x20001050
 8007900:	08010318 	.word	0x08010318
 8007904:	200010f4 	.word	0x200010f4
 8007908:	08004ea1 	.word	0x08004ea1
 800790c:	20001240 	.word	0x20001240
 8007910:	20001ab0 	.word	0x20001ab0
 8007914:	08010690 	.word	0x08010690
 8007918:	08004e01 	.word	0x08004e01
 800791c:	200013f0 	.word	0x200013f0
 8007920:	0801031c 	.word	0x0801031c
 8007924:	08004f61 	.word	0x08004f61
 8007928:	200015a0 	.word	0x200015a0
 800792c:	20000800 	.word	0x20000800
 8007930:	08010694 	.word	0x08010694
 8007934:	080106c0 	.word	0x080106c0
	...

08007940 <rt_test_009_001_execute>:
 * - [9.1.1] Starting the messenger thread.
 * - [9.1.2] Waiting for four messages then testing the receive order.
 * .
 */

static void rt_test_009_001_execute(void) {
 8007940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  thread_t *tp;
  msg_t msg;

  /* [9.1.1] Starting the messenger thread.*/
  test_set_step(1);
 8007944:	f04f 0901 	mov.w	r9, #1
  return __sch_get_currthread();
 8007948:	4f30      	ldr	r7, [pc, #192]	; (8007a0c <rt_test_009_001_execute+0xcc>)
 800794a:	4e31      	ldr	r6, [pc, #196]	; (8007a10 <rt_test_009_001_execute+0xd0>)
 800794c:	68fb      	ldr	r3, [r7, #12]
static void rt_test_009_001_execute(void) {
 800794e:	b085      	sub	sp, #20
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8007950:	689a      	ldr	r2, [r3, #8]
 8007952:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8007956:	9300      	str	r3, [sp, #0]
 8007958:	482e      	ldr	r0, [pc, #184]	; (8007a14 <rt_test_009_001_execute+0xd4>)
 800795a:	4b2f      	ldr	r3, [pc, #188]	; (8007a18 <rt_test_009_001_execute+0xd8>)
 800795c:	444a      	add	r2, r9
  test_set_step(1);
 800795e:	f8c6 9000 	str.w	r9, [r6]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8007962:	f7fc fe75 	bl	8004650 <chThdCreateStatic>
  }
  test_end_step(1);

  /* [9.1.2] Waiting for four messages then testing the receive
     order.*/
  test_set_step(2);
 8007966:	46b0      	mov	r8, r6
 8007968:	2302      	movs	r3, #2
 800796a:	2404      	movs	r4, #4
 800796c:	2530      	movs	r5, #48	; 0x30
 800796e:	f848 3b20 	str.w	r3, [r8], #32
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8007972:	4b2a      	ldr	r3, [pc, #168]	; (8007a1c <rt_test_009_001_execute+0xdc>)
 8007974:	6018      	str	r0, [r3, #0]
 8007976:	f385 8811 	msr	BASEPRI, r5
 800797a:	68f9      	ldr	r1, [r7, #12]
 800797c:	f04f 0a00 	mov.w	sl, #0
 8007980:	468b      	mov	fp, r1
 8007982:	f85b 0f34 	ldr.w	r0, [fp, #52]!
 8007986:	4558      	cmp	r0, fp
 8007988:	d02e      	beq.n	80079e8 <rt_test_009_001_execute+0xa8>
  tp->state = CH_STATE_SNDMSG;
 800798a:	f04f 0c0d 	mov.w	ip, #13
 800798e:	6802      	ldr	r2, [r0, #0]
 8007990:	634a      	str	r2, [r1, #52]	; 0x34
  qp->next->prev = qp;
 8007992:	f8c2 b004 	str.w	fp, [r2, #4]
 8007996:	f880 c028 	strb.w	ip, [r0, #40]	; 0x28
 800799a:	f38a 8811 	msr	BASEPRI, sl
  return tp->u.sentmsg;
 800799e:	f8d0 b02c 	ldr.w	fp, [r0, #44]	; 0x2c
 80079a2:	f385 8811 	msr	BASEPRI, r5
  chSchWakeupS(tp, msg);
 80079a6:	4659      	mov	r1, fp
 80079a8:	f7fc fcda 	bl	8004360 <chSchWakeupS>
 80079ac:	f38a 8811 	msr	BASEPRI, sl
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 80079b0:	68f3      	ldr	r3, [r6, #12]
 80079b2:	4543      	cmp	r3, r8
 80079b4:	d203      	bcs.n	80079be <rt_test_009_001_execute+0x7e>
    *chtest.tokp++ = token;
 80079b6:	1c5a      	adds	r2, r3, #1
 80079b8:	60f2      	str	r2, [r6, #12]

    for (i = 0; i < 4; i++) {
      tp = chMsgWait();
      msg = chMsgGet(tp);
      chMsgRelease(tp, msg);
      test_emit_token(msg);
 80079ba:	f883 b000 	strb.w	fp, [r3]
    for (i = 0; i < 4; i++) {
 80079be:	3c01      	subs	r4, #1
 80079c0:	d1d9      	bne.n	8007976 <rt_test_009_001_execute+0x36>
 80079c2:	4d16      	ldr	r5, [pc, #88]	; (8007a1c <rt_test_009_001_execute+0xdc>)
 80079c4:	f105 0614 	add.w	r6, r5, #20
    if (threads[i] != NULL) {
 80079c8:	f855 0b04 	ldr.w	r0, [r5], #4
 80079cc:	b118      	cbz	r0, 80079d6 <rt_test_009_001_execute+0x96>
      chThdWait(threads[i]);
 80079ce:	f7fe f827 	bl	8005a20 <chThdWait>
      threads[i] = NULL;
 80079d2:	f845 4c04 	str.w	r4, [r5, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 80079d6:	42ae      	cmp	r6, r5
 80079d8:	d1f6      	bne.n	80079c8 <rt_test_009_001_execute+0x88>
    }
    test_wait_threads();
    test_assert_sequence("ABCD", "invalid sequence");
 80079da:	4911      	ldr	r1, [pc, #68]	; (8007a20 <rt_test_009_001_execute+0xe0>)
 80079dc:	4811      	ldr	r0, [pc, #68]	; (8007a24 <rt_test_009_001_execute+0xe4>)
  }
  test_end_step(2);
}
 80079de:	b005      	add	sp, #20
 80079e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_assert_sequence("ABCD", "invalid sequence");
 80079e4:	f7ff ba44 	b.w	8006e70 <__test_assert_sequence>
  otp->state = newstate;
 80079e8:	f04f 030e 	mov.w	r3, #14
  ch_priority_queue_t *p = pqp->next;
 80079ec:	6838      	ldr	r0, [r7, #0]
 80079ee:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
  pqp->next       = p->next;
 80079f2:	6802      	ldr	r2, [r0, #0]
  chSysSwitch(ntp, otp);
 80079f4:	9103      	str	r1, [sp, #12]
  pqp->next->prev = pqp;
 80079f6:	6057      	str	r7, [r2, #4]
  ntp->state = CH_STATE_CURRENT;
 80079f8:	f880 9028 	strb.w	r9, [r0, #40]	; 0x28
  __instance_set_currthread(oip, ntp);
 80079fc:	60f8      	str	r0, [r7, #12]
  pqp->next       = p->next;
 80079fe:	603a      	str	r2, [r7, #0]
  chSysSwitch(ntp, otp);
 8007a00:	f7f8 fc1e 	bl	8000240 <__port_switch>
  ch_queue_t *p = qp->next;
 8007a04:	9903      	ldr	r1, [sp, #12]
 8007a06:	6b48      	ldr	r0, [r1, #52]	; 0x34
}
 8007a08:	e7bf      	b.n	800798a <rt_test_009_001_execute+0x4a>
 8007a0a:	bf00      	nop
 8007a0c:	20001050 	.word	0x20001050
 8007a10:	200010f4 	.word	0x200010f4
 8007a14:	20001240 	.word	0x20001240
 8007a18:	08001641 	.word	0x08001641
 8007a1c:	20001ab0 	.word	0x20001ab0
 8007a20:	08010694 	.word	0x08010694
 8007a24:	080106c4 	.word	0x080106c4
	...

08007a30 <rt_test_010_002_execute>:
static void rt_test_010_002_execute(void) {
 8007a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8007a32:	2701      	movs	r7, #1
 8007a34:	2507      	movs	r5, #7
  eid = (eventid_t)0;
 8007a36:	2400      	movs	r4, #0
 8007a38:	4b0c      	ldr	r3, [pc, #48]	; (8007a6c <rt_test_010_002_execute+0x3c>)
 8007a3a:	4e0d      	ldr	r6, [pc, #52]	; (8007a70 <rt_test_010_002_execute+0x40>)
 8007a3c:	601f      	str	r7, [r3, #0]
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8007a3e:	fa25 f304 	lsr.w	r3, r5, r4
 8007a42:	07db      	lsls	r3, r3, #31
      events &= ~EVENT_MASK(eid);
 8007a44:	fa07 f204 	lsl.w	r2, r7, r4
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8007a48:	d50e      	bpl.n	8007a68 <rt_test_010_002_execute+0x38>
      handlers[eid](eid);
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
      events &= ~EVENT_MASK(eid);
 8007a50:	ea25 0502 	bic.w	r5, r5, r2
      handlers[eid](eid);
 8007a54:	3401      	adds	r4, #1
 8007a56:	4798      	blx	r3
  while (events != (eventmask_t)0) {
 8007a58:	2d00      	cmp	r5, #0
 8007a5a:	d1f0      	bne.n	8007a3e <rt_test_010_002_execute+0xe>
}
 8007a5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABC", "invalid sequence");
 8007a60:	4904      	ldr	r1, [pc, #16]	; (8007a74 <rt_test_010_002_execute+0x44>)
 8007a62:	4805      	ldr	r0, [pc, #20]	; (8007a78 <rt_test_010_002_execute+0x48>)
 8007a64:	f7ff ba04 	b.w	8006e70 <__test_assert_sequence>
    eid++;
 8007a68:	3401      	adds	r4, #1
  while (events != (eventmask_t)0) {
 8007a6a:	e7e8      	b.n	8007a3e <rt_test_010_002_execute+0xe>
 8007a6c:	200010f4 	.word	0x200010f4
 8007a70:	08011e78 	.word	0x08011e78
 8007a74:	08010694 	.word	0x08010694
 8007a78:	080106c0 	.word	0x080106c0
 8007a7c:	00000000 	.word	0x00000000

08007a80 <rt_test_011_001_execute>:
  test_set_step(2);
 8007a80:	2202      	movs	r2, #2
static void rt_test_011_001_execute(void) {
 8007a82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a86:	4b6e      	ldr	r3, [pc, #440]	; (8007c40 <rt_test_011_001_execute+0x1c0>)
  test_set_step(2);
 8007a88:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8007c44 <rt_test_011_001_execute+0x1c4>
  return chThdGetSelfX()->hdr.pqueue.prio;
 8007a8c:	68d9      	ldr	r1, [r3, #12]
static void rt_test_011_001_execute(void) {
 8007a8e:	b083      	sub	sp, #12
 8007a90:	2330      	movs	r3, #48	; 0x30
 8007a92:	f8d1 a008 	ldr.w	sl, [r1, #8]
  test_set_step(2);
 8007a96:	f8c8 2000 	str.w	r2, [r8]
 8007a9a:	f383 8811 	msr	BASEPRI, r3
 8007a9e:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8007c48 <rt_test_011_001_execute+0x1c8>
 8007aa2:	2500      	movs	r5, #0
 8007aa4:	f109 0014 	add.w	r0, r9, #20
 8007aa8:	f7fd f86a 	bl	8004b80 <chMtxLockS>
 8007aac:	f385 8811 	msr	BASEPRI, r5
  while (H_FREE_NEXT(qp) != NULL) {
 8007ab0:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8007ab4:	2c00      	cmp	r4, #0
 8007ab6:	f000 809a 	beq.w	8007bee <rt_test_011_001_execute+0x16e>
  tpages = 0U;
 8007aba:	462f      	mov	r7, r5
  n = 0U;
 8007abc:	462e      	mov	r6, r5
    size_t pages = H_FREE_PAGES(H_FREE_NEXT(qp));
 8007abe:	6863      	ldr	r3, [r4, #4]
  while (H_FREE_NEXT(qp) != NULL) {
 8007ac0:	6824      	ldr	r4, [r4, #0]
 8007ac2:	429d      	cmp	r5, r3
 8007ac4:	bf38      	it	cc
 8007ac6:	461d      	movcc	r5, r3
    n++;
 8007ac8:	3601      	adds	r6, #1
    tpages += pages;
 8007aca:	441f      	add	r7, r3
  while (H_FREE_NEXT(qp) != NULL) {
 8007acc:	2c00      	cmp	r4, #0
 8007ace:	d1f6      	bne.n	8007abe <rt_test_011_001_execute+0x3e>
  H_UNLOCK(heapp);
 8007ad0:	485e      	ldr	r0, [pc, #376]	; (8007c4c <rt_test_011_001_execute+0x1cc>)
 8007ad2:	f7fd f8ed 	bl	8004cb0 <chMtxUnlock>
  if (!condition) {
 8007ad6:	2e01      	cmp	r6, #1
 8007ad8:	f040 808d 	bne.w	8007bf6 <rt_test_011_001_execute+0x176>
  test_set_step(3);
 8007adc:	2303      	movs	r3, #3
    threads[0] = chThdCreateFromHeap(&heap1,
 8007ade:	f8df b170 	ldr.w	fp, [pc, #368]	; 8007c50 <rt_test_011_001_execute+0x1d0>
  test_set_step(3);
 8007ae2:	f8c8 3000 	str.w	r3, [r8]
    threads[0] = chThdCreateFromHeap(&heap1,
 8007ae6:	4b5b      	ldr	r3, [pc, #364]	; (8007c54 <rt_test_011_001_execute+0x1d4>)
 8007ae8:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8007aec:	9301      	str	r3, [sp, #4]
 8007aee:	4a5a      	ldr	r2, [pc, #360]	; (8007c58 <rt_test_011_001_execute+0x1d8>)
 8007af0:	4855      	ldr	r0, [pc, #340]	; (8007c48 <rt_test_011_001_execute+0x1c8>)
 8007af2:	f8cd b000 	str.w	fp, [sp]
 8007af6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007afa:	f7fd fef9 	bl	80058f0 <chThdCreateFromHeap>
 8007afe:	4e57      	ldr	r6, [pc, #348]	; (8007c5c <rt_test_011_001_execute+0x1dc>)
 8007b00:	6030      	str	r0, [r6, #0]
 8007b02:	2800      	cmp	r0, #0
 8007b04:	d069      	beq.n	8007bda <rt_test_011_001_execute+0x15a>
  test_set_step(4);
 8007b06:	2304      	movs	r3, #4
 8007b08:	f8c8 3000 	str.w	r3, [r8]
    threads[1] = chThdCreateFromHeap(&heap1,
 8007b0c:	4b54      	ldr	r3, [pc, #336]	; (8007c60 <rt_test_011_001_execute+0x1e0>)
 8007b0e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8007b12:	9301      	str	r3, [sp, #4]
 8007b14:	4a53      	ldr	r2, [pc, #332]	; (8007c64 <rt_test_011_001_execute+0x1e4>)
 8007b16:	484c      	ldr	r0, [pc, #304]	; (8007c48 <rt_test_011_001_execute+0x1c8>)
 8007b18:	f8cd b000 	str.w	fp, [sp]
 8007b1c:	f1aa 0302 	sub.w	r3, sl, #2
 8007b20:	f7fd fee6 	bl	80058f0 <chThdCreateFromHeap>
 8007b24:	6070      	str	r0, [r6, #4]
 8007b26:	2800      	cmp	r0, #0
 8007b28:	d057      	beq.n	8007bda <rt_test_011_001_execute+0x15a>
  test_set_step(5);
 8007b2a:	2205      	movs	r2, #5
 8007b2c:	f8c8 2000 	str.w	r2, [r8]
    threads[2] = chThdCreateFromHeap(&heap1,
 8007b30:	4a4d      	ldr	r2, [pc, #308]	; (8007c68 <rt_test_011_001_execute+0x1e8>)
 8007b32:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007b36:	9201      	str	r2, [sp, #4]
 8007b38:	4843      	ldr	r0, [pc, #268]	; (8007c48 <rt_test_011_001_execute+0x1c8>)
 8007b3a:	4a4c      	ldr	r2, [pc, #304]	; (8007c6c <rt_test_011_001_execute+0x1ec>)
 8007b3c:	f8cd b000 	str.w	fp, [sp]
 8007b40:	f1aa 0303 	sub.w	r3, sl, #3
 8007b44:	f7fd fed4 	bl	80058f0 <chThdCreateFromHeap>
 8007b48:	60b0      	str	r0, [r6, #8]
 8007b4a:	2800      	cmp	r0, #0
 8007b4c:	d15d      	bne.n	8007c0a <rt_test_011_001_execute+0x18a>
  test_set_step(6);
 8007b4e:	2306      	movs	r3, #6
 8007b50:	f106 0a14 	add.w	sl, r6, #20
 8007b54:	f8c8 3000 	str.w	r3, [r8]
    if (threads[i] != NULL) {
 8007b58:	f856 0b04 	ldr.w	r0, [r6], #4
 8007b5c:	b118      	cbz	r0, 8007b66 <rt_test_011_001_execute+0xe6>
      chThdWait(threads[i]);
 8007b5e:	f7fd ff5f 	bl	8005a20 <chThdWait>
      threads[i] = NULL;
 8007b62:	f846 4c04 	str.w	r4, [r6, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8007b66:	4556      	cmp	r6, sl
 8007b68:	d1f6      	bne.n	8007b58 <rt_test_011_001_execute+0xd8>
    test_assert_sequence("AB", "invalid sequence");
 8007b6a:	4941      	ldr	r1, [pc, #260]	; (8007c70 <rt_test_011_001_execute+0x1f0>)
 8007b6c:	4841      	ldr	r0, [pc, #260]	; (8007c74 <rt_test_011_001_execute+0x1f4>)
 8007b6e:	f7ff f97f 	bl	8006e70 <__test_assert_sequence>
 8007b72:	4604      	mov	r4, r0
 8007b74:	2800      	cmp	r0, #0
 8007b76:	d137      	bne.n	8007be8 <rt_test_011_001_execute+0x168>
  test_set_step(7);
 8007b78:	2307      	movs	r3, #7
 8007b7a:	f8c8 3000 	str.w	r3, [r8]
 8007b7e:	2330      	movs	r3, #48	; 0x30
 8007b80:	f383 8811 	msr	BASEPRI, r3
 8007b84:	4831      	ldr	r0, [pc, #196]	; (8007c4c <rt_test_011_001_execute+0x1cc>)
 8007b86:	f7fc fffb 	bl	8004b80 <chMtxLockS>
 8007b8a:	f384 8811 	msr	BASEPRI, r4
  while (H_FREE_NEXT(qp) != NULL) {
 8007b8e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d041      	beq.n	8007c1a <rt_test_011_001_execute+0x19a>
  tpages = 0U;
 8007b96:	4626      	mov	r6, r4
  n = 0U;
 8007b98:	46a1      	mov	r9, r4
    size_t pages = H_FREE_PAGES(H_FREE_NEXT(qp));
 8007b9a:	685a      	ldr	r2, [r3, #4]
  while (H_FREE_NEXT(qp) != NULL) {
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4294      	cmp	r4, r2
 8007ba0:	bf38      	it	cc
 8007ba2:	4614      	movcc	r4, r2
    n++;
 8007ba4:	f109 0901 	add.w	r9, r9, #1
    tpages += pages;
 8007ba8:	4416      	add	r6, r2
  while (H_FREE_NEXT(qp) != NULL) {
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1f5      	bne.n	8007b9a <rt_test_011_001_execute+0x11a>
  H_UNLOCK(heapp);
 8007bae:	4827      	ldr	r0, [pc, #156]	; (8007c4c <rt_test_011_001_execute+0x1cc>)
 8007bb0:	f7fd f87e 	bl	8004cb0 <chMtxUnlock>
 8007bb4:	f1b9 0f01 	cmp.w	r9, #1
 8007bb8:	d132      	bne.n	8007c20 <rt_test_011_001_execute+0x1a0>
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 8007bba:	00f6      	lsls	r6, r6, #3
 8007bbc:	ebb6 0fc7 	cmp.w	r6, r7, lsl #3
 8007bc0:	d136      	bne.n	8007c30 <rt_test_011_001_execute+0x1b0>
    *largestp = lpages * CH_HEAP_ALIGNMENT;
 8007bc2:	00e4      	lsls	r4, r4, #3
 8007bc4:	ebb4 0fc5 	cmp.w	r4, r5, lsl #3
 8007bc8:	d00e      	beq.n	8007be8 <rt_test_011_001_execute+0x168>
  chtest.global_fail     = true;
 8007bca:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8007bce:	4a2a      	ldr	r2, [pc, #168]	; (8007c78 <rt_test_011_001_execute+0x1f8>)
  chtest.global_fail     = true;
 8007bd0:	f8a8 3004 	strh.w	r3, [r8, #4]
  chtest.failure_message = msg;
 8007bd4:	f8c8 2008 	str.w	r2, [r8, #8]
    return __test_fail(msg);
 8007bd8:	e006      	b.n	8007be8 <rt_test_011_001_execute+0x168>
  chtest.global_fail     = true;
 8007bda:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8007bde:	4a27      	ldr	r2, [pc, #156]	; (8007c7c <rt_test_011_001_execute+0x1fc>)
  chtest.global_fail     = true;
 8007be0:	f8a8 3004 	strh.w	r3, [r8, #4]
  chtest.failure_message = msg;
 8007be4:	f8c8 2008 	str.w	r2, [r8, #8]
}
 8007be8:	b003      	add	sp, #12
 8007bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  H_UNLOCK(heapp);
 8007bee:	f109 0014 	add.w	r0, r9, #20
 8007bf2:	f7fd f85d 	bl	8004cb0 <chMtxUnlock>
  chtest.global_fail     = true;
 8007bf6:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8007bfa:	4a21      	ldr	r2, [pc, #132]	; (8007c80 <rt_test_011_001_execute+0x200>)
  chtest.global_fail     = true;
 8007bfc:	f8a8 3004 	strh.w	r3, [r8, #4]
  chtest.failure_message = msg;
 8007c00:	f8c8 2008 	str.w	r2, [r8, #8]
 8007c04:	b003      	add	sp, #12
 8007c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  chtest.global_fail     = true;
 8007c0a:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8007c0e:	4a1d      	ldr	r2, [pc, #116]	; (8007c84 <rt_test_011_001_execute+0x204>)
  chtest.global_fail     = true;
 8007c10:	f8a8 3004 	strh.w	r3, [r8, #4]
  chtest.failure_message = msg;
 8007c14:	f8c8 2008 	str.w	r2, [r8, #8]
 8007c18:	e7e6      	b.n	8007be8 <rt_test_011_001_execute+0x168>
 8007c1a:	480c      	ldr	r0, [pc, #48]	; (8007c4c <rt_test_011_001_execute+0x1cc>)
 8007c1c:	f7fd f848 	bl	8004cb0 <chMtxUnlock>
  chtest.global_fail     = true;
 8007c20:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8007c24:	4a18      	ldr	r2, [pc, #96]	; (8007c88 <rt_test_011_001_execute+0x208>)
  chtest.global_fail     = true;
 8007c26:	f8a8 3004 	strh.w	r3, [r8, #4]
  chtest.failure_message = msg;
 8007c2a:	f8c8 2008 	str.w	r2, [r8, #8]
 8007c2e:	e7db      	b.n	8007be8 <rt_test_011_001_execute+0x168>
  chtest.global_fail     = true;
 8007c30:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8007c34:	4a15      	ldr	r2, [pc, #84]	; (8007c8c <rt_test_011_001_execute+0x20c>)
  chtest.global_fail     = true;
 8007c36:	f8a8 3004 	strh.w	r3, [r8, #4]
  chtest.failure_message = msg;
 8007c3a:	f8c8 2008 	str.w	r2, [r8, #8]
 8007c3e:	e7d3      	b.n	8007be8 <rt_test_011_001_execute+0x168>
 8007c40:	20001050 	.word	0x20001050
 8007c44:	200010f4 	.word	0x200010f4
 8007c48:	200011f0 	.word	0x200011f0
 8007c4c:	20001204 	.word	0x20001204
 8007c50:	08001351 	.word	0x08001351
 8007c54:	08010318 	.word	0x08010318
 8007c58:	080106cc 	.word	0x080106cc
 8007c5c:	20001ab0 	.word	0x20001ab0
 8007c60:	0801031c 	.word	0x0801031c
 8007c64:	080106fc 	.word	0x080106fc
 8007c68:	08010690 	.word	0x08010690
 8007c6c:	08010704 	.word	0x08010704
 8007c70:	08010694 	.word	0x08010694
 8007c74:	08010728 	.word	0x08010728
 8007c78:	08010760 	.word	0x08010760
 8007c7c:	080106e4 	.word	0x080106e4
 8007c80:	080106d4 	.word	0x080106d4
 8007c84:	0801070c 	.word	0x0801070c
 8007c88:	0801072c 	.word	0x0801072c
 8007c8c:	08010744 	.word	0x08010744

08007c90 <rt_test_011_002_execute>:
static void rt_test_011_002_execute(void) {
  unsigned i;
  tprio_t prio;

  /* [11.2.1] Adding four working areas to the pool.*/
  test_set_step(1);
 8007c90:	2101      	movs	r1, #1
static void rt_test_011_002_execute(void) {
 8007c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c96:	2630      	movs	r6, #48	; 0x30
 8007c98:	2400      	movs	r4, #0
  test_set_step(1);
 8007c9a:	4f53      	ldr	r7, [pc, #332]	; (8007de8 <rt_test_011_002_execute+0x158>)
 8007c9c:	4b53      	ldr	r3, [pc, #332]	; (8007dec <rt_test_011_002_execute+0x15c>)
 8007c9e:	4a54      	ldr	r2, [pc, #336]	; (8007df0 <rt_test_011_002_execute+0x160>)
 8007ca0:	4d54      	ldr	r5, [pc, #336]	; (8007df4 <rt_test_011_002_execute+0x164>)
 8007ca2:	f103 000c 	add.w	r0, r3, #12
 8007ca6:	6039      	str	r1, [r7, #0]
 8007ca8:	f386 8811 	msr	BASEPRI, r6
  php->next = mp->next;
 8007cac:	6829      	ldr	r1, [r5, #0]
 8007cae:	6011      	str	r1, [r2, #0]
  mp->next = php;
 8007cb0:	602a      	str	r2, [r5, #0]
 8007cb2:	f384 8811 	msr	BASEPRI, r4
  {
    for (i = 0; i < 4; i++)
 8007cb6:	4298      	cmp	r0, r3
 8007cb8:	d002      	beq.n	8007cc0 <rt_test_011_002_execute+0x30>
      chPoolFree(&mp1, wa[i]);
 8007cba:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cbe:	e7f3      	b.n	8007ca8 <rt_test_011_002_execute+0x18>
    prio = chThdGetPriorityX();
  }
  test_end_step(2);

  /* [11.2.3] Creating the five threads.*/
  test_set_step(3);
 8007cc0:	2303      	movs	r3, #3
  return __sch_get_currthread();
 8007cc2:	494d      	ldr	r1, [pc, #308]	; (8007df8 <rt_test_011_002_execute+0x168>)
  {
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8007cc4:	4a4d      	ldr	r2, [pc, #308]	; (8007dfc <rt_test_011_002_execute+0x16c>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 8007cc6:	68c9      	ldr	r1, [r1, #12]
 8007cc8:	484d      	ldr	r0, [pc, #308]	; (8007e00 <rt_test_011_002_execute+0x170>)
 8007cca:	688e      	ldr	r6, [r1, #8]
  test_set_step(3);
 8007ccc:	603b      	str	r3, [r7, #0]
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8007cce:	1e71      	subs	r1, r6, #1
 8007cd0:	f006 fd5e 	bl	800e790 <chThdCreateFromMemoryPool.constprop.0>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	4c4b      	ldr	r4, [pc, #300]	; (8007e04 <rt_test_011_002_execute+0x174>)
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8007cd8:	1eb1      	subs	r1, r6, #2
 8007cda:	4a4b      	ldr	r2, [pc, #300]	; (8007e08 <rt_test_011_002_execute+0x178>)
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8007cdc:	6023      	str	r3, [r4, #0]
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8007cde:	484b      	ldr	r0, [pc, #300]	; (8007e0c <rt_test_011_002_execute+0x17c>)
 8007ce0:	f006 fd56 	bl	800e790 <chThdCreateFromMemoryPool.constprop.0>
 8007ce4:	4603      	mov	r3, r0
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8007ce6:	1ef1      	subs	r1, r6, #3
 8007ce8:	4a49      	ldr	r2, [pc, #292]	; (8007e10 <rt_test_011_002_execute+0x180>)
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8007cea:	6063      	str	r3, [r4, #4]
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8007cec:	4849      	ldr	r0, [pc, #292]	; (8007e14 <rt_test_011_002_execute+0x184>)
 8007cee:	f006 fd4f 	bl	800e790 <chThdCreateFromMemoryPool.constprop.0>
 8007cf2:	4603      	mov	r3, r0
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8007cf4:	1f31      	subs	r1, r6, #4
 8007cf6:	4a48      	ldr	r2, [pc, #288]	; (8007e18 <rt_test_011_002_execute+0x188>)
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8007cf8:	60a3      	str	r3, [r4, #8]
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8007cfa:	4848      	ldr	r0, [pc, #288]	; (8007e1c <rt_test_011_002_execute+0x18c>)
 8007cfc:	f006 fd48 	bl	800e790 <chThdCreateFromMemoryPool.constprop.0>
 8007d00:	4603      	mov	r3, r0
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8007d02:	4a47      	ldr	r2, [pc, #284]	; (8007e20 <rt_test_011_002_execute+0x190>)
 8007d04:	1f71      	subs	r1, r6, #5
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8007d06:	60e3      	str	r3, [r4, #12]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8007d08:	4846      	ldr	r0, [pc, #280]	; (8007e24 <rt_test_011_002_execute+0x194>)
 8007d0a:	f006 fd41 	bl	800e790 <chThdCreateFromMemoryPool.constprop.0>
  }
  test_end_step(3);

  /* [11.2.4] Testing that only the fifth thread creation failed.*/
  test_set_step(4);
 8007d0e:	2204      	movs	r2, #4
  {
    test_assert((threads[0] != NULL) &&
 8007d10:	6823      	ldr	r3, [r4, #0]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8007d12:	4606      	mov	r6, r0
  test_set_step(4);
 8007d14:	603a      	str	r2, [r7, #0]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8007d16:	6120      	str	r0, [r4, #16]
    test_assert((threads[0] != NULL) &&
 8007d18:	b1ab      	cbz	r3, 8007d46 <rt_test_011_002_execute+0xb6>
 8007d1a:	6862      	ldr	r2, [r4, #4]
 8007d1c:	b19a      	cbz	r2, 8007d46 <rt_test_011_002_execute+0xb6>
 8007d1e:	68a2      	ldr	r2, [r4, #8]
 8007d20:	b18a      	cbz	r2, 8007d46 <rt_test_011_002_execute+0xb6>
 8007d22:	68e2      	ldr	r2, [r4, #12]
 8007d24:	b17a      	cbz	r2, 8007d46 <rt_test_011_002_execute+0xb6>
  if (!condition) {
 8007d26:	2800      	cmp	r0, #0
 8007d28:	d146      	bne.n	8007db8 <rt_test_011_002_execute+0x128>
  }
  test_end_step(4);

  /* [11.2.5] Letting them run, free the memory then checking the
     execution sequence.*/
  test_set_step(5);
 8007d2a:	2205      	movs	r2, #5
 8007d2c:	f104 0810 	add.w	r8, r4, #16
 8007d30:	603a      	str	r2, [r7, #0]
    if (threads[i] != NULL) {
 8007d32:	b11b      	cbz	r3, 8007d3c <rt_test_011_002_execute+0xac>
      chThdWait(threads[i]);
 8007d34:	4618      	mov	r0, r3
 8007d36:	f7fd fe73 	bl	8005a20 <chThdWait>
      threads[i] = NULL;
 8007d3a:	6026      	str	r6, [r4, #0]
  for (i = 0; i < MAX_THREADS; i++)
 8007d3c:	4544      	cmp	r4, r8
 8007d3e:	d009      	beq.n	8007d54 <rt_test_011_002_execute+0xc4>
    if (threads[i] != NULL) {
 8007d40:	f854 3f04 	ldr.w	r3, [r4, #4]!
 8007d44:	e7f5      	b.n	8007d32 <rt_test_011_002_execute+0xa2>
  chtest.global_fail     = true;
 8007d46:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8007d4a:	4a37      	ldr	r2, [pc, #220]	; (8007e28 <rt_test_011_002_execute+0x198>)
  chtest.global_fail     = true;
 8007d4c:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 8007d4e:	60ba      	str	r2, [r7, #8]
    for (i = 0; i < 4; i++)
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
  }
  test_end_step(6);
}
 8007d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    test_assert_sequence("ABCD", "invalid sequence");
 8007d54:	4935      	ldr	r1, [pc, #212]	; (8007e2c <rt_test_011_002_execute+0x19c>)
 8007d56:	4836      	ldr	r0, [pc, #216]	; (8007e30 <rt_test_011_002_execute+0x1a0>)
 8007d58:	f7ff f88a 	bl	8006e70 <__test_assert_sequence>
 8007d5c:	4606      	mov	r6, r0
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	d1f6      	bne.n	8007d50 <rt_test_011_002_execute+0xc0>
  test_set_step(6);
 8007d62:	2306      	movs	r3, #6
 8007d64:	2404      	movs	r4, #4
 8007d66:	f04f 0830 	mov.w	r8, #48	; 0x30
 8007d6a:	603b      	str	r3, [r7, #0]
 8007d6c:	f388 8811 	msr	BASEPRI, r8
  objp = mp->next;
 8007d70:	6828      	ldr	r0, [r5, #0]
  if (objp != NULL) {
 8007d72:	b340      	cbz	r0, 8007dc6 <rt_test_011_002_execute+0x136>
    mp->next = mp->next->next;
 8007d74:	6803      	ldr	r3, [r0, #0]
 8007d76:	602b      	str	r3, [r5, #0]
 8007d78:	f386 8811 	msr	BASEPRI, r6
  if (!condition) {
 8007d7c:	b1a8      	cbz	r0, 8007daa <rt_test_011_002_execute+0x11a>
    for (i = 0; i < 4; i++)
 8007d7e:	3c01      	subs	r4, #1
 8007d80:	d1f4      	bne.n	8007d6c <rt_test_011_002_execute+0xdc>
 8007d82:	2330      	movs	r3, #48	; 0x30
 8007d84:	f383 8811 	msr	BASEPRI, r3
  objp = mp->next;
 8007d88:	6828      	ldr	r0, [r5, #0]
  if (objp != NULL) {
 8007d8a:	b318      	cbz	r0, 8007dd4 <rt_test_011_002_execute+0x144>
    mp->next = mp->next->next;
 8007d8c:	6803      	ldr	r3, [r0, #0]
 8007d8e:	602b      	str	r3, [r5, #0]
 8007d90:	2300      	movs	r3, #0
 8007d92:	f383 8811 	msr	BASEPRI, r3
 8007d96:	2800      	cmp	r0, #0
 8007d98:	d0da      	beq.n	8007d50 <rt_test_011_002_execute+0xc0>
  chtest.global_fail     = true;
 8007d9a:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8007d9e:	4a25      	ldr	r2, [pc, #148]	; (8007e34 <rt_test_011_002_execute+0x1a4>)
  chtest.global_fail     = true;
 8007da0:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 8007da2:	60ba      	str	r2, [r7, #8]
    return __test_fail(msg);
 8007da4:	e7d4      	b.n	8007d50 <rt_test_011_002_execute+0xc0>
 8007da6:	f383 8811 	msr	BASEPRI, r3
  chtest.global_fail     = true;
 8007daa:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8007dae:	4a22      	ldr	r2, [pc, #136]	; (8007e38 <rt_test_011_002_execute+0x1a8>)
  chtest.global_fail     = true;
 8007db0:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 8007db2:	60ba      	str	r2, [r7, #8]
}
 8007db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  chtest.global_fail     = true;
 8007db8:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8007dbc:	4a1f      	ldr	r2, [pc, #124]	; (8007e3c <rt_test_011_002_execute+0x1ac>)
  chtest.global_fail     = true;
 8007dbe:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 8007dc0:	60ba      	str	r2, [r7, #8]
 8007dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (mp->provider != NULL) {
 8007dc6:	68eb      	ldr	r3, [r5, #12]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d0ec      	beq.n	8007da6 <rt_test_011_002_execute+0x116>
    objp = mp->provider(mp->object_size, mp->align);
 8007dcc:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
 8007dd0:	4798      	blx	r3
    chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
 8007dd2:	e7d1      	b.n	8007d78 <rt_test_011_002_execute+0xe8>
  else if (mp->provider != NULL) {
 8007dd4:	68eb      	ldr	r3, [r5, #12]
 8007dd6:	b11b      	cbz	r3, 8007de0 <rt_test_011_002_execute+0x150>
    objp = mp->provider(mp->object_size, mp->align);
 8007dd8:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
 8007ddc:	4798      	blx	r3
    chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
 8007dde:	e7d7      	b.n	8007d90 <rt_test_011_002_execute+0x100>
 8007de0:	f384 8811 	msr	BASEPRI, r4
bool __test_assert(bool condition, const char *msg) {
 8007de4:	e7b4      	b.n	8007d50 <rt_test_011_002_execute+0xc0>
 8007de6:	bf00      	nop
 8007de8:	200010f4 	.word	0x200010f4
 8007dec:	08012860 	.word	0x08012860
 8007df0:	20001240 	.word	0x20001240
 8007df4:	20001214 	.word	0x20001214
 8007df8:	20001050 	.word	0x20001050
 8007dfc:	08010318 	.word	0x08010318
 8007e00:	080106cc 	.word	0x080106cc
 8007e04:	20001ab0 	.word	0x20001ab0
 8007e08:	0801031c 	.word	0x0801031c
 8007e0c:	080106fc 	.word	0x080106fc
 8007e10:	08010690 	.word	0x08010690
 8007e14:	08010704 	.word	0x08010704
 8007e18:	08011a24 	.word	0x08011a24
 8007e1c:	08010780 	.word	0x08010780
 8007e20:	080106ac 	.word	0x080106ac
 8007e24:	08010788 	.word	0x08010788
 8007e28:	080106e4 	.word	0x080106e4
 8007e2c:	08010694 	.word	0x08010694
 8007e30:	080106c4 	.word	0x080106c4
 8007e34:	080107a0 	.word	0x080107a0
 8007e38:	08010790 	.word	0x08010790
 8007e3c:	0801070c 	.word	0x0801070c

08007e40 <test_printf>:
 * @param[in] fmt       formatting string
 * @return              The number of bytes written.
 *
 * @api
 */
int test_printf(const char *fmt, ...) {
 8007e40:	b40f      	push	{r0, r1, r2, r3}
 8007e42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e46:	b087      	sub	sp, #28
 8007e48:	ab10      	add	r3, sp, #64	; 0x40
 8007e4a:	f853 4b04 	ldr.w	r4, [r3], #4
    c = *fmt++;
 8007e4e:	46a0      	mov	r8, r4
 8007e50:	f818 0b01 	ldrb.w	r0, [r8], #1
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8007e54:	9302      	str	r3, [sp, #8]
    if (c == '\0') {
 8007e56:	2800      	cmp	r0, #0
 8007e58:	f000 820d 	beq.w	8008276 <test_printf+0x436>
 8007e5c:	4699      	mov	r9, r3
  n = 0;
 8007e5e:	2600      	movs	r6, #0
 8007e60:	4d8d      	ldr	r5, [pc, #564]	; (8008098 <test_printf+0x258>)
 8007e62:	e009      	b.n	8007e78 <test_printf+0x38>
  if (chtest.putchar != NULL) {
 8007e64:	6a2b      	ldr	r3, [r5, #32]
 8007e66:	b103      	cbz	r3, 8007e6a <test_printf+0x2a>
    chtest.putchar(c);
 8007e68:	4798      	blx	r3
      continue;
 8007e6a:	4644      	mov	r4, r8
      n++;
 8007e6c:	3601      	adds	r6, #1
    c = *fmt++;
 8007e6e:	46a0      	mov	r8, r4
 8007e70:	f818 0b01 	ldrb.w	r0, [r8], #1
    if (c == '\0') {
 8007e74:	2800      	cmp	r0, #0
 8007e76:	d07d      	beq.n	8007f74 <test_printf+0x134>
    if (c != '%') {
 8007e78:	2825      	cmp	r0, #37	; 0x25
 8007e7a:	d1f3      	bne.n	8007e64 <test_printf+0x24>
    if (*fmt == '-') {
 8007e7c:	7863      	ldrb	r3, [r4, #1]
 8007e7e:	2b2d      	cmp	r3, #45	; 0x2d
      fmt++;
 8007e80:	bf08      	it	eq
 8007e82:	f104 0802 	addeq.w	r8, r4, #2
    if (*fmt == '+') {
 8007e86:	f898 3000 	ldrb.w	r3, [r8]
      left_align = true;
 8007e8a:	bf0c      	ite	eq
 8007e8c:	f04f 0a01 	moveq.w	sl, #1
    left_align = false;
 8007e90:	f04f 0a00 	movne.w	sl, #0
    if (*fmt == '+') {
 8007e94:	2b2b      	cmp	r3, #43	; 0x2b
    if (*fmt == '0') {
 8007e96:	bf03      	ittte	eq
 8007e98:	f898 3001 	ldrbeq.w	r3, [r8, #1]
      do_sign = true;
 8007e9c:	f04f 0c01 	moveq.w	ip, #1
      fmt++;
 8007ea0:	f108 0801 	addeq.w	r8, r8, #1
    do_sign = false;
 8007ea4:	f04f 0c00 	movne.w	ip, #0
    if (*fmt == '0') {
 8007ea8:	2b30      	cmp	r3, #48	; 0x30
      fmt++;
 8007eaa:	bf03      	ittte	eq
 8007eac:	f108 0801 	addeq.w	r8, r8, #1
      filler = '0';
 8007eb0:	461f      	moveq	r7, r3
    if ( *fmt == '*') {
 8007eb2:	f898 3000 	ldrbeq.w	r3, [r8]
    filler = ' ';
 8007eb6:	2720      	movne	r7, #32
    if ( *fmt == '*') {
 8007eb8:	2b2a      	cmp	r3, #42	; 0x2a
 8007eba:	d14a      	bne.n	8007f52 <test_printf+0x112>
      c = *fmt++;
 8007ebc:	f898 3001 	ldrb.w	r3, [r8, #1]
      width = va_arg(ap, int);
 8007ec0:	f859 2b04 	ldr.w	r2, [r9], #4
      c = *fmt++;
 8007ec4:	f108 0402 	add.w	r4, r8, #2
    if (c == '.') {
 8007ec8:	2b2e      	cmp	r3, #46	; 0x2e
 8007eca:	f000 8098 	beq.w	8007ffe <test_printf+0x1be>
    precision = 0;
 8007ece:	2000      	movs	r0, #0
    if ((c == 'l') || (c == 'L')) {
 8007ed0:	f003 01df 	and.w	r1, r3, #223	; 0xdf
 8007ed4:	294c      	cmp	r1, #76	; 0x4c
 8007ed6:	d053      	beq.n	8007f80 <test_printf+0x140>
    switch (c) {
 8007ed8:	f1a3 0e44 	sub.w	lr, r3, #68	; 0x44
 8007edc:	f1be 0f34 	cmp.w	lr, #52	; 0x34
 8007ee0:	f200 8097 	bhi.w	8008012 <test_printf+0x1d2>
 8007ee4:	e8df f01e 	tbh	[pc, lr, lsl #1]
 8007ee8:	009500da 	.word	0x009500da
 8007eec:	00950095 	.word	0x00950095
 8007ef0:	00da0095 	.word	0x00da0095
 8007ef4:	00950095 	.word	0x00950095
 8007ef8:	00950095 	.word	0x00950095
 8007efc:	014b0095 	.word	0x014b0095
 8007f00:	0095010e 	.word	0x0095010e
 8007f04:	00950095 	.word	0x00950095
 8007f08:	01ba0095 	.word	0x01ba0095
 8007f0c:	00950095 	.word	0x00950095
 8007f10:	0095010e 	.word	0x0095010e
 8007f14:	00950095 	.word	0x00950095
 8007f18:	00950095 	.word	0x00950095
 8007f1c:	00950095 	.word	0x00950095
 8007f20:	00950095 	.word	0x00950095
 8007f24:	016a0095 	.word	0x016a0095
 8007f28:	009500da 	.word	0x009500da
 8007f2c:	00950095 	.word	0x00950095
 8007f30:	00da0095 	.word	0x00da0095
 8007f34:	00950095 	.word	0x00950095
 8007f38:	00950095 	.word	0x00950095
 8007f3c:	014b0095 	.word	0x014b0095
 8007f40:	0095010e 	.word	0x0095010e
 8007f44:	014e0095 	.word	0x014e0095
 8007f48:	01ba0095 	.word	0x01ba0095
 8007f4c:	00950095 	.word	0x00950095
 8007f50:	010e      	.short	0x010e
        c = *fmt++;
 8007f52:	f108 0401 	add.w	r4, r8, #1
        if (c == '\0') {
 8007f56:	b16b      	cbz	r3, 8007f74 <test_printf+0x134>
      width = 0;
 8007f58:	2200      	movs	r2, #0
        if ((c >= '0') && (c <= '9')) {
 8007f5a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007f5e:	b2c9      	uxtb	r1, r1
 8007f60:	2909      	cmp	r1, #9
          width = width * 10 + c;
 8007f62:	eb02 0082 	add.w	r0, r2, r2, lsl #2
        if ((c >= '0') && (c <= '9')) {
 8007f66:	d8af      	bhi.n	8007ec8 <test_printf+0x88>
        c = *fmt++;
 8007f68:	f814 3b01 	ldrb.w	r3, [r4], #1
          width = width * 10 + c;
 8007f6c:	eb01 0240 	add.w	r2, r1, r0, lsl #1
        if (c == '\0') {
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d1f2      	bne.n	8007f5a <test_printf+0x11a>
  formatted_bytes = test_vprintf(fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8007f74:	4630      	mov	r0, r6
 8007f76:	b007      	add	sp, #28
 8007f78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f7c:	b004      	add	sp, #16
 8007f7e:	4770      	bx	lr
      c = *fmt++;
 8007f80:	f814 3b01 	ldrb.w	r3, [r4], #1
      if (c == '\0') {
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d0f5      	beq.n	8007f74 <test_printf+0x134>
    switch (c) {
 8007f88:	f1a3 0144 	sub.w	r1, r3, #68	; 0x44
 8007f8c:	2934      	cmp	r1, #52	; 0x34
 8007f8e:	d840      	bhi.n	8008012 <test_printf+0x1d2>
 8007f90:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007f94:	003f0084 	.word	0x003f0084
 8007f98:	003f003f 	.word	0x003f003f
 8007f9c:	0084003f 	.word	0x0084003f
 8007fa0:	003f003f 	.word	0x003f003f
 8007fa4:	003f003f 	.word	0x003f003f
 8007fa8:	00f5003f 	.word	0x00f5003f
 8007fac:	003f00b8 	.word	0x003f00b8
 8007fb0:	003f003f 	.word	0x003f003f
 8007fb4:	0164003f 	.word	0x0164003f
 8007fb8:	003f003f 	.word	0x003f003f
 8007fbc:	003f00b8 	.word	0x003f00b8
 8007fc0:	003f003f 	.word	0x003f003f
 8007fc4:	003f003f 	.word	0x003f003f
 8007fc8:	003f003f 	.word	0x003f003f
 8007fcc:	003f003f 	.word	0x003f003f
 8007fd0:	0114003f 	.word	0x0114003f
 8007fd4:	003f0084 	.word	0x003f0084
 8007fd8:	003f003f 	.word	0x003f003f
 8007fdc:	0084003f 	.word	0x0084003f
 8007fe0:	003f003f 	.word	0x003f003f
 8007fe4:	003f003f 	.word	0x003f003f
 8007fe8:	00f5003f 	.word	0x00f5003f
 8007fec:	003f00b8 	.word	0x003f00b8
 8007ff0:	00f8003f 	.word	0x00f8003f
 8007ff4:	0164003f 	.word	0x0164003f
 8007ff8:	003f003f 	.word	0x003f003f
 8007ffc:	00b8      	.short	0x00b8
      c = *fmt++;
 8007ffe:	7823      	ldrb	r3, [r4, #0]
      if (c == '\0') {
 8008000:	2b00      	cmp	r3, #0
 8008002:	d0b7      	beq.n	8007f74 <test_printf+0x134>
      if (c == '*') {
 8008004:	2b2a      	cmp	r3, #42	; 0x2a
 8008006:	d136      	bne.n	8008076 <test_printf+0x236>
        c = *fmt++;
 8008008:	7863      	ldrb	r3, [r4, #1]
        precision = va_arg(ap, int);
 800800a:	f859 0b04 	ldr.w	r0, [r9], #4
        c = *fmt++;
 800800e:	3402      	adds	r4, #2
 8008010:	e75e      	b.n	8007ed0 <test_printf+0x90>
      *p++ = c;
 8008012:	3a01      	subs	r2, #1
 8008014:	f88d 300c 	strb.w	r3, [sp, #12]
    if (width < 0) {
 8008018:	ea22 78e2 	bic.w	r8, r2, r2, asr #31
    if (left_align == false) {
 800801c:	f1ba 0f00 	cmp.w	sl, #0
 8008020:	f040 80d8 	bne.w	80081d4 <test_printf+0x394>
    if (width < 0) {
 8008024:	2a00      	cmp	r2, #0
      width = -width;
 8008026:	f1c8 0800 	rsb	r8, r8, #0
    if (width < 0) {
 800802a:	f8cd a000 	str.w	sl, [sp]
 800802e:	f300 8103 	bgt.w	8008238 <test_printf+0x3f8>
    if (left_align == false) {
 8008032:	ab03      	add	r3, sp, #12
 8008034:	469b      	mov	fp, r3
 8008036:	9b00      	ldr	r3, [sp, #0]
 8008038:	eb0b 0a03 	add.w	sl, fp, r3
  if (chtest.putchar != NULL) {
 800803c:	6a2b      	ldr	r3, [r5, #32]
      test_putchar(*s++);
 800803e:	f10b 0b01 	add.w	fp, fp, #1
  if (chtest.putchar != NULL) {
 8008042:	b113      	cbz	r3, 800804a <test_printf+0x20a>
    chtest.putchar(c);
 8008044:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
 8008048:	4798      	blx	r3
    while (--i >= 0) {
 800804a:	ebaa 030b 	sub.w	r3, sl, fp
 800804e:	2b00      	cmp	r3, #0
 8008050:	daf4      	bge.n	800803c <test_printf+0x1fc>
      n++;
 8008052:	9b00      	ldr	r3, [sp, #0]
 8008054:	3601      	adds	r6, #1
 8008056:	4433      	add	r3, r6
 8008058:	461e      	mov	r6, r3
    while (width) {
 800805a:	f1b8 0f00 	cmp.w	r8, #0
 800805e:	f43f af06 	beq.w	8007e6e <test_printf+0x2e>
 8008062:	46c2      	mov	sl, r8
  if (chtest.putchar != NULL) {
 8008064:	6a2b      	ldr	r3, [r5, #32]
 8008066:	b10b      	cbz	r3, 800806c <test_printf+0x22c>
    chtest.putchar(c);
 8008068:	4638      	mov	r0, r7
 800806a:	4798      	blx	r3
    while (width) {
 800806c:	f1ba 0a01 	subs.w	sl, sl, #1
 8008070:	d1f8      	bne.n	8008064 <test_printf+0x224>
      n++;
 8008072:	4446      	add	r6, r8
 8008074:	e6fb      	b.n	8007e6e <test_printf+0x2e>
    precision = 0;
 8008076:	2000      	movs	r0, #0
      c = *fmt++;
 8008078:	3401      	adds	r4, #1
        while ((c >= '0') && (c <= '9')) {
 800807a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800807e:	b2c9      	uxtb	r1, r1
 8008080:	2909      	cmp	r1, #9
          precision = precision * 10 + c;
 8008082:	eb00 0e80 	add.w	lr, r0, r0, lsl #2
        while ((c >= '0') && (c <= '9')) {
 8008086:	f63f af23 	bhi.w	8007ed0 <test_printf+0x90>
          c = *fmt++;
 800808a:	f814 3b01 	ldrb.w	r3, [r4], #1
          precision = precision * 10 + c;
 800808e:	eb01 004e 	add.w	r0, r1, lr, lsl #1
          if (c == '\0') {
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1f1      	bne.n	800807a <test_printf+0x23a>
 8008096:	e76d      	b.n	8007f74 <test_printf+0x134>
 8008098:	200010f4 	.word	0x200010f4
        arg = va_arg(ap, int);
 800809c:	f859 0b04 	ldr.w	r0, [r9], #4
      if (arg < 0) {
 80080a0:	2800      	cmp	r0, #0
 80080a2:	f2c0 80c1 	blt.w	8008228 <test_printf+0x3e8>
        if (do_sign) {
 80080a6:	f1bc 0f00 	cmp.w	ip, #0
 80080aa:	f000 80df 	beq.w	800826c <test_printf+0x42c>
          *p++ = '+';
 80080ae:	232b      	movs	r3, #43	; 0x2b
 80080b0:	f10d 080d 	add.w	r8, sp, #13
 80080b4:	f88d 300c 	strb.w	r3, [sp, #12]
 80080b8:	ab03      	add	r3, sp, #12
  q = p + MAX_FILLER;
 80080ba:	f108 010b 	add.w	r1, r8, #11
 80080be:	468c      	mov	ip, r1
    c = (int)(l % (long)radix);
 80080c0:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 8008288 <test_printf+0x448>
  q = p + MAX_FILLER;
 80080c4:	9100      	str	r1, [sp, #0]
    c = (int)(l % (long)radix);
 80080c6:	fbab e100 	umull	lr, r1, fp, r0
 80080ca:	08c9      	lsrs	r1, r1, #3
 80080cc:	468e      	mov	lr, r1
 80080ce:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80080d2:	eba0 0141 	sub.w	r1, r0, r1, lsl #1
  } while (ll != 0);
 80080d6:	4670      	mov	r0, lr
    c += '0';
 80080d8:	3130      	adds	r1, #48	; 0x30
    *--q = (char)c;
 80080da:	b2c9      	uxtb	r1, r1
 80080dc:	f80c 1d01 	strb.w	r1, [ip, #-1]!
  } while (ll != 0);
 80080e0:	2800      	cmp	r0, #0
 80080e2:	d1f0      	bne.n	80080c6 <test_printf+0x286>
  i = (int)(p + MAX_FILLER - q);
 80080e4:	9800      	ldr	r0, [sp, #0]
 80080e6:	eba0 000c 	sub.w	r0, r0, ip
 80080ea:	4440      	add	r0, r8
 80080ec:	e001      	b.n	80080f2 <test_printf+0x2b2>
    *p++ = *q++;
 80080ee:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 80080f2:	f808 1b01 	strb.w	r1, [r8], #1
  } while (--i);
 80080f6:	4540      	cmp	r0, r8
 80080f8:	d1f9      	bne.n	80080ee <test_printf+0x2ae>
    i = (int)(p - s);
 80080fa:	1ac0      	subs	r0, r0, r3
        i--;
 80080fc:	1e41      	subs	r1, r0, #1
    width -= i;
 80080fe:	1a12      	subs	r2, r2, r0
        i--;
 8008100:	9100      	str	r1, [sp, #0]
 8008102:	e02e      	b.n	8008162 <test_printf+0x322>
      radix = 16;
 8008104:	f04f 0e10 	mov.w	lr, #16
        arg = va_arg(ap, unsigned int);
 8008108:	f859 cb04 	ldr.w	ip, [r9], #4
    switch (c) {
 800810c:	f10d 0317 	add.w	r3, sp, #23
 8008110:	e000      	b.n	8008114 <test_printf+0x2d4>
 8008112:	465b      	mov	r3, fp
    c = (int)(l % (long)radix);
 8008114:	fb9c f0fe 	sdiv	r0, ip, lr
 8008118:	fb0e c810 	mls	r8, lr, r0, ip
    c += '0';
 800811c:	f108 0130 	add.w	r1, r8, #48	; 0x30
    if (c > '9') {
 8008120:	2939      	cmp	r1, #57	; 0x39
      c += ('A' - '0') - 10;
 8008122:	bfc8      	it	gt
 8008124:	f108 0137 	addgt.w	r1, r8, #55	; 0x37
    *--q = (char)c;
 8008128:	b2c9      	uxtb	r1, r1
    l /= radix;
 800812a:	4684      	mov	ip, r0
    *--q = (char)c;
 800812c:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8008130:	f803 1c01 	strb.w	r1, [r3, #-1]
  } while (ll != 0);
 8008134:	2800      	cmp	r0, #0
 8008136:	d1ec      	bne.n	8008112 <test_printf+0x2d2>
 8008138:	4618      	mov	r0, r3
  i = (int)(p + MAX_FILLER - q);
 800813a:	f10d 0317 	add.w	r3, sp, #23
 800813e:	eba3 0b0b 	sub.w	fp, r3, fp
 8008142:	ab03      	add	r3, sp, #12
 8008144:	469c      	mov	ip, r3
 8008146:	f10d 0e17 	add.w	lr, sp, #23
 800814a:	e001      	b.n	8008150 <test_printf+0x310>
    *p++ = *q++;
 800814c:	f810 1b01 	ldrb.w	r1, [r0], #1
  } while (--i);
 8008150:	4586      	cmp	lr, r0
    *p++ = *q++;
 8008152:	f80c 1b01 	strb.w	r1, [ip], #1
  } while (--i);
 8008156:	d1f9      	bne.n	800814c <test_printf+0x30c>
        i--;
 8008158:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
    width -= i;
 800815c:	eba2 020b 	sub.w	r2, r2, fp
        i--;
 8008160:	9100      	str	r1, [sp, #0]
    if (width < 0) {
 8008162:	ea22 78e2 	bic.w	r8, r2, r2, asr #31
    if (left_align == false) {
 8008166:	f1ba 0f00 	cmp.w	sl, #0
 800816a:	d103      	bne.n	8008174 <test_printf+0x334>
    if (width < 0) {
 800816c:	2a00      	cmp	r2, #0
      width = -width;
 800816e:	f1c8 0800 	rsb	r8, r8, #0
    if (width < 0) {
 8008172:	dc32      	bgt.n	80081da <test_printf+0x39a>
    while (--i >= 0) {
 8008174:	9a00      	ldr	r2, [sp, #0]
 8008176:	2a00      	cmp	r2, #0
 8008178:	f6bf af5c 	bge.w	8008034 <test_printf+0x1f4>
 800817c:	e76d      	b.n	800805a <test_printf+0x21a>
      radix = 8;
 800817e:	f04f 0e08 	mov.w	lr, #8
 8008182:	e7c1      	b.n	8008108 <test_printf+0x2c8>
      if ((s = va_arg(ap, char *)) == NULL) {
 8008184:	f859 3b04 	ldr.w	r3, [r9], #4
 8008188:	2b00      	cmp	r3, #0
 800818a:	d06a      	beq.n	8008262 <test_printf+0x422>
      for (p = s; (*p != '\0') && (--precision >= 0); p++) {
 800818c:	7819      	ldrb	r1, [r3, #0]
      if (precision == 0) {
 800818e:	2800      	cmp	r0, #0
 8008190:	d055      	beq.n	800823e <test_printf+0x3fe>
      for (p = s; (*p != '\0') && (--precision >= 0); p++) {
 8008192:	2900      	cmp	r1, #0
 8008194:	d057      	beq.n	8008246 <test_printf+0x406>
 8008196:	3801      	subs	r0, #1
 8008198:	d455      	bmi.n	8008246 <test_printf+0x406>
 800819a:	4619      	mov	r1, r3
 800819c:	e002      	b.n	80081a4 <test_printf+0x364>
 800819e:	eb1c 0f00 	cmn.w	ip, r0
 80081a2:	d405      	bmi.n	80081b0 <test_printf+0x370>
 80081a4:	f811 7f01 	ldrb.w	r7, [r1, #1]!
 80081a8:	eba3 0c01 	sub.w	ip, r3, r1
 80081ac:	2f00      	cmp	r7, #0
 80081ae:	d1f6      	bne.n	800819e <test_printf+0x35e>
    i = (int)(p - s);
 80081b0:	1ac9      	subs	r1, r1, r3
    width -= i;
 80081b2:	1a52      	subs	r2, r2, r1
        i--;
 80081b4:	3901      	subs	r1, #1
      filler = ' ';
 80081b6:	2720      	movs	r7, #32
        i--;
 80081b8:	9100      	str	r1, [sp, #0]
 80081ba:	e7d2      	b.n	8008162 <test_printf+0x322>
      *p++ = va_arg(ap, int);
 80081bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80081c0:	3a01      	subs	r2, #1
      filler = ' ';
 80081c2:	2720      	movs	r7, #32
      *p++ = va_arg(ap, int);
 80081c4:	f88d 300c 	strb.w	r3, [sp, #12]
    if (width < 0) {
 80081c8:	ea22 78e2 	bic.w	r8, r2, r2, asr #31
    if (left_align == false) {
 80081cc:	f1ba 0f00 	cmp.w	sl, #0
 80081d0:	f43f af28 	beq.w	8008024 <test_printf+0x1e4>
 80081d4:	2300      	movs	r3, #0
 80081d6:	9300      	str	r3, [sp, #0]
 80081d8:	e72b      	b.n	8008032 <test_printf+0x1f2>
      width = -width;
 80081da:	46c2      	mov	sl, r8
      if (((*s == '-') || (*s == '+')) && (filler == '0')) {
 80081dc:	7818      	ldrb	r0, [r3, #0]
 80081de:	282d      	cmp	r0, #45	; 0x2d
 80081e0:	d00b      	beq.n	80081fa <test_printf+0x3ba>
 80081e2:	282b      	cmp	r0, #43	; 0x2b
 80081e4:	d009      	beq.n	80081fa <test_printf+0x3ba>
 80081e6:	469b      	mov	fp, r3
  if (chtest.putchar != NULL) {
 80081e8:	6a2a      	ldr	r2, [r5, #32]
 80081ea:	b10a      	cbz	r2, 80081f0 <test_printf+0x3b0>
    chtest.putchar(c);
 80081ec:	4638      	mov	r0, r7
 80081ee:	4790      	blx	r2
      } while (++width != 0);
 80081f0:	f118 0801 	adds.w	r8, r8, #1
 80081f4:	d010      	beq.n	8008218 <test_printf+0x3d8>
  if (chtest.putchar != NULL) {
 80081f6:	6a2a      	ldr	r2, [r5, #32]
 80081f8:	e7f7      	b.n	80081ea <test_printf+0x3aa>
      if (((*s == '-') || (*s == '+')) && (filler == '0')) {
 80081fa:	2f30      	cmp	r7, #48	; 0x30
 80081fc:	d1f3      	bne.n	80081e6 <test_printf+0x3a6>
  if (chtest.putchar != NULL) {
 80081fe:	6a2a      	ldr	r2, [r5, #32]
        test_putchar(*s++);
 8008200:	3301      	adds	r3, #1
  if (chtest.putchar != NULL) {
 8008202:	b11a      	cbz	r2, 800820c <test_printf+0x3cc>
 8008204:	9301      	str	r3, [sp, #4]
    chtest.putchar(c);
 8008206:	4790      	blx	r2
  if (chtest.putchar != NULL) {
 8008208:	6a2a      	ldr	r2, [r5, #32]
 800820a:	9b01      	ldr	r3, [sp, #4]
    while (--i >= 0) {
 800820c:	9900      	ldr	r1, [sp, #0]
 800820e:	469b      	mov	fp, r3
 8008210:	3901      	subs	r1, #1
        n++;
 8008212:	3601      	adds	r6, #1
    while (--i >= 0) {
 8008214:	9100      	str	r1, [sp, #0]
 8008216:	e7e8      	b.n	80081ea <test_printf+0x3aa>
 8008218:	9a00      	ldr	r2, [sp, #0]
 800821a:	465b      	mov	r3, fp
 800821c:	2a00      	cmp	r2, #0
 800821e:	eba6 060a 	sub.w	r6, r6, sl
 8008222:	f6bf af07 	bge.w	8008034 <test_printf+0x1f4>
 8008226:	e622      	b.n	8007e6e <test_printf+0x2e>
        *p++ = '-';
 8008228:	232d      	movs	r3, #45	; 0x2d
        arg = -arg;
 800822a:	4240      	negs	r0, r0
        *p++ = '-';
 800822c:	f88d 300c 	strb.w	r3, [sp, #12]
 8008230:	f10d 080d 	add.w	r8, sp, #13
 8008234:	ab03      	add	r3, sp, #12
 8008236:	e740      	b.n	80080ba <test_printf+0x27a>
      width = -width;
 8008238:	46c2      	mov	sl, r8
    if (width < 0) {
 800823a:	ab03      	add	r3, sp, #12
 800823c:	e7ce      	b.n	80081dc <test_printf+0x39c>
      for (p = s; (*p != '\0') && (--precision >= 0); p++) {
 800823e:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 8008242:	2900      	cmp	r1, #0
 8008244:	d1a9      	bne.n	800819a <test_printf+0x35a>
    if (width < 0) {
 8008246:	ea22 78e2 	bic.w	r8, r2, r2, asr #31
    if (left_align == false) {
 800824a:	f1ba 0f00 	cmp.w	sl, #0
 800824e:	d103      	bne.n	8008258 <test_printf+0x418>
    if (width < 0) {
 8008250:	2a00      	cmp	r2, #0
      width = -width;
 8008252:	f1c8 0800 	rsb	r8, r8, #0
    if (width < 0) {
 8008256:	dc10      	bgt.n	800827a <test_printf+0x43a>
    if (left_align == false) {
 8008258:	2720      	movs	r7, #32
 800825a:	e6fe      	b.n	800805a <test_printf+0x21a>
    switch (c) {
 800825c:	f04f 0e0a 	mov.w	lr, #10
 8008260:	e752      	b.n	8008108 <test_printf+0x2c8>
      if (precision == 0) {
 8008262:	b930      	cbnz	r0, 8008272 <test_printf+0x432>
      for (p = s; (*p != '\0') && (--precision >= 0); p++) {
 8008264:	f647 70fe 	movw	r0, #32766	; 0x7ffe
        s = "(null)";
 8008268:	4b08      	ldr	r3, [pc, #32]	; (800828c <test_printf+0x44c>)
 800826a:	e796      	b.n	800819a <test_printf+0x35a>
    p = tmpbuf;
 800826c:	ab03      	add	r3, sp, #12
 800826e:	4698      	mov	r8, r3
 8008270:	e723      	b.n	80080ba <test_printf+0x27a>
        s = "(null)";
 8008272:	4b06      	ldr	r3, [pc, #24]	; (800828c <test_printf+0x44c>)
 8008274:	e78f      	b.n	8008196 <test_printf+0x356>
  n = 0;
 8008276:	4606      	mov	r6, r0
  return formatted_bytes;
 8008278:	e67c      	b.n	8007f74 <test_printf+0x134>
    if (width < 0) {
 800827a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
      width = -width;
 800827e:	46c2      	mov	sl, r8
    if (width < 0) {
 8008280:	2720      	movs	r7, #32
 8008282:	9200      	str	r2, [sp, #0]
 8008284:	e7aa      	b.n	80081dc <test_printf+0x39c>
 8008286:	bf00      	nop
 8008288:	cccccccd 	.word	0xcccccccd
 800828c:	08010378 	.word	0x08010378

08008290 <rt_test_001_001_execute.lto_priv.0>:
 */

static void rt_test_001_001_execute(void) {

  /* [1.1.1] Prints the version string.*/
  test_set_step(1);
 8008290:	2201      	movs	r2, #1
static void rt_test_001_001_execute(void) {
 8008292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *
 * @api
 */
static inline void test_print(const char *msgp) {

  test_printf("%s", msgp);
 8008294:	4d25      	ldr	r5, [pc, #148]	; (800832c <rt_test_001_001_execute.lto_priv.0+0x9c>)
  test_set_step(1);
 8008296:	4b26      	ldr	r3, [pc, #152]	; (8008330 <rt_test_001_001_execute.lto_priv.0+0xa0>)
 *
 * @api
 */
static inline void test_println(const char *msgp) {

  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008298:	4c26      	ldr	r4, [pc, #152]	; (8008334 <rt_test_001_001_execute.lto_priv.0+0xa4>)
  test_printf("%s", msgp);
 800829a:	4628      	mov	r0, r5
 800829c:	4926      	ldr	r1, [pc, #152]	; (8008338 <rt_test_001_001_execute.lto_priv.0+0xa8>)
 800829e:	601a      	str	r2, [r3, #0]
 80082a0:	f7ff fdce 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80082a4:	4620      	mov	r0, r4
 80082a6:	4925      	ldr	r1, [pc, #148]	; (800833c <rt_test_001_001_execute.lto_priv.0+0xac>)
 80082a8:	f7ff fdca 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 80082ac:	4628      	mov	r0, r5
 80082ae:	4924      	ldr	r1, [pc, #144]	; (8008340 <rt_test_001_001_execute.lto_priv.0+0xb0>)
 80082b0:	f7ff fdc6 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80082b4:	4620      	mov	r0, r4
 80082b6:	4923      	ldr	r1, [pc, #140]	; (8008344 <rt_test_001_001_execute.lto_priv.0+0xb4>)
 80082b8:	f7ff fdc2 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 80082bc:	4628      	mov	r0, r5
 80082be:	4922      	ldr	r1, [pc, #136]	; (8008348 <rt_test_001_001_execute.lto_priv.0+0xb8>)
 80082c0:	f7ff fdbe 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80082c4:	4620      	mov	r0, r4
 80082c6:	4921      	ldr	r1, [pc, #132]	; (800834c <rt_test_001_001_execute.lto_priv.0+0xbc>)
 80082c8:	f7ff fdba 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 80082cc:	4628      	mov	r0, r5
 80082ce:	4920      	ldr	r1, [pc, #128]	; (8008350 <rt_test_001_001_execute.lto_priv.0+0xc0>)
 80082d0:	f7ff fdb6 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 80082d4:	4f1f      	ldr	r7, [pc, #124]	; (8008354 <rt_test_001_001_execute.lto_priv.0+0xc4>)
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80082d6:	4620      	mov	r0, r4
 80082d8:	491f      	ldr	r1, [pc, #124]	; (8008358 <rt_test_001_001_execute.lto_priv.0+0xc8>)
 80082da:	f7ff fdb1 	bl	8007e40 <test_printf>
 80082de:	4e1f      	ldr	r6, [pc, #124]	; (800835c <rt_test_001_001_execute.lto_priv.0+0xcc>)
  test_printf("%s", msgp);
 80082e0:	4628      	mov	r0, r5
 80082e2:	491f      	ldr	r1, [pc, #124]	; (8008360 <rt_test_001_001_execute.lto_priv.0+0xd0>)
 80082e4:	f7ff fdac 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 80082e8:	2104      	movs	r1, #4
 80082ea:	4638      	mov	r0, r7
 80082ec:	f7ff fda8 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80082f0:	4631      	mov	r1, r6
 80082f2:	4620      	mov	r0, r4
 80082f4:	f7ff fda4 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 80082f8:	4628      	mov	r0, r5
 80082fa:	491a      	ldr	r1, [pc, #104]	; (8008364 <rt_test_001_001_execute.lto_priv.0+0xd4>)
 80082fc:	f7ff fda0 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8008300:	2108      	movs	r1, #8
 8008302:	4638      	mov	r0, r7
 8008304:	f7ff fd9c 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008308:	4631      	mov	r1, r6
 800830a:	4620      	mov	r0, r4
 800830c:	f7ff fd98 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 8008310:	4628      	mov	r0, r5
 8008312:	4915      	ldr	r1, [pc, #84]	; (8008368 <rt_test_001_001_execute.lto_priv.0+0xd8>)
 8008314:	f7ff fd94 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8008318:	2108      	movs	r1, #8
 800831a:	4638      	mov	r0, r7
 800831c:	f7ff fd90 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008320:	4631      	mov	r1, r6
 8008322:	4620      	mov	r0, r4
    test_printn(PORT_WORKING_AREA_ALIGN);
    test_println("");
#endif
  }
  test_end_step(1);
}
 8008324:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008328:	f7ff bd8a 	b.w	8007e40 <test_printf>
 800832c:	080103f8 	.word	0x080103f8
 8008330:	200010f4 	.word	0x200010f4
 8008334:	08013080 	.word	0x08013080
 8008338:	080107b4 	.word	0x080107b4
 800833c:	0801045c 	.word	0x0801045c
 8008340:	080107e0 	.word	0x080107e0
 8008344:	08010478 	.word	0x08010478
 8008348:	0801080c 	.word	0x0801080c
 800834c:	08010428 	.word	0x08010428
 8008350:	08010838 	.word	0x08010838
 8008354:	08010890 	.word	0x08010890
 8008358:	08010498 	.word	0x08010498
 800835c:	08010400 	.word	0x08010400
 8008360:	08010864 	.word	0x08010864
 8008364:	08010894 	.word	0x08010894
 8008368:	080108c0 	.word	0x080108c0
 800836c:	00000000 	.word	0x00000000

08008370 <rt_test_001_002_execute>:
 * <h2>Test Steps</h2>
 * - [1.2.1] Prints the version string.
 * .
 */

static void rt_test_001_002_execute(void) {
 8008370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* [1.2.1] Prints the version string.*/
  test_set_step(1);
 8008374:	f04f 0801 	mov.w	r8, #1
 8008378:	4c22      	ldr	r4, [pc, #136]	; (8008404 <rt_test_001_002_execute+0x94>)
 800837a:	4b23      	ldr	r3, [pc, #140]	; (8008408 <rt_test_001_002_execute+0x98>)
  test_printf("%s", msgp);
 800837c:	4d23      	ldr	r5, [pc, #140]	; (800840c <rt_test_001_002_execute+0x9c>)
  test_printf("%u", n);
 800837e:	4f24      	ldr	r7, [pc, #144]	; (8008410 <rt_test_001_002_execute+0xa0>)
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008380:	4620      	mov	r0, r4
 8008382:	4924      	ldr	r1, [pc, #144]	; (8008414 <rt_test_001_002_execute+0xa4>)
 8008384:	f8c3 8000 	str.w	r8, [r3]
 8008388:	4e23      	ldr	r6, [pc, #140]	; (8008418 <rt_test_001_002_execute+0xa8>)
 800838a:	f7ff fd59 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 800838e:	4628      	mov	r0, r5
 8008390:	4922      	ldr	r1, [pc, #136]	; (800841c <rt_test_001_002_execute+0xac>)
 8008392:	f7ff fd55 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8008396:	2100      	movs	r1, #0
 8008398:	4638      	mov	r0, r7
 800839a:	f7ff fd51 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800839e:	4631      	mov	r1, r6
 80083a0:	4620      	mov	r0, r4
 80083a2:	f7ff fd4d 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 80083a6:	4628      	mov	r0, r5
 80083a8:	491d      	ldr	r1, [pc, #116]	; (8008420 <rt_test_001_002_execute+0xb0>)
 80083aa:	f7ff fd49 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80083ae:	4620      	mov	r0, r4
 80083b0:	491c      	ldr	r1, [pc, #112]	; (8008424 <rt_test_001_002_execute+0xb4>)
 80083b2:	f7ff fd45 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 80083b6:	4628      	mov	r0, r5
 80083b8:	491b      	ldr	r1, [pc, #108]	; (8008428 <rt_test_001_002_execute+0xb8>)
 80083ba:	f7ff fd41 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 80083be:	2107      	movs	r1, #7
 80083c0:	4638      	mov	r0, r7
 80083c2:	f7ff fd3d 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80083c6:	4631      	mov	r1, r6
 80083c8:	4620      	mov	r0, r4
 80083ca:	f7ff fd39 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 80083ce:	4628      	mov	r0, r5
 80083d0:	4916      	ldr	r1, [pc, #88]	; (800842c <rt_test_001_002_execute+0xbc>)
 80083d2:	f7ff fd35 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 80083d6:	4641      	mov	r1, r8
 80083d8:	4638      	mov	r0, r7
 80083da:	f7ff fd31 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80083de:	4631      	mov	r1, r6
 80083e0:	4620      	mov	r0, r4
 80083e2:	f7ff fd2d 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 80083e6:	4628      	mov	r0, r5
 80083e8:	4911      	ldr	r1, [pc, #68]	; (8008430 <rt_test_001_002_execute+0xc0>)
 80083ea:	f7ff fd29 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 80083ee:	2100      	movs	r1, #0
 80083f0:	4638      	mov	r0, r7
 80083f2:	f7ff fd25 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80083f6:	4631      	mov	r1, r6
 80083f8:	4620      	mov	r0, r4
    test_print("--- Patch Number:                       ");
    test_printn(CH_KERNEL_PATCH);
    test_println("");
  }
  test_end_step(1);
}
 80083fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083fe:	f7ff bd1f 	b.w	8007e40 <test_printf>
 8008402:	bf00      	nop
 8008404:	08013080 	.word	0x08013080
 8008408:	200010f4 	.word	0x200010f4
 800840c:	080103f8 	.word	0x080103f8
 8008410:	08010890 	.word	0x08010890
 8008414:	080108ec 	.word	0x080108ec
 8008418:	08010400 	.word	0x08010400
 800841c:	08010920 	.word	0x08010920
 8008420:	0801094c 	.word	0x0801094c
 8008424:	0801040c 	.word	0x0801040c
 8008428:	08010978 	.word	0x08010978
 800842c:	080109a4 	.word	0x080109a4
 8008430:	080109d0 	.word	0x080109d0
	...

08008440 <rt_test_001_003_execute>:
 * <h2>Test Steps</h2>
 * - [1.3.1] Prints the configuration options settings.
 * .
 */

static void rt_test_001_003_execute(void) {
 8008440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* [1.3.1] Prints the configuration options settings.*/
  test_set_step(1);
 8008444:	f04f 0801 	mov.w	r8, #1
  test_printf("%s", msgp);
 8008448:	4fc4      	ldr	r7, [pc, #784]	; (800875c <rt_test_001_003_execute+0x31c>)
 800844a:	4bc5      	ldr	r3, [pc, #788]	; (8008760 <rt_test_001_003_execute+0x320>)
  test_printf("%u", n);
 800844c:	4ec5      	ldr	r6, [pc, #788]	; (8008764 <rt_test_001_003_execute+0x324>)
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800844e:	4dc6      	ldr	r5, [pc, #792]	; (8008768 <rt_test_001_003_execute+0x328>)
 8008450:	4cc6      	ldr	r4, [pc, #792]	; (800876c <rt_test_001_003_execute+0x32c>)
  test_printf("%s", msgp);
 8008452:	4638      	mov	r0, r7
 8008454:	49c6      	ldr	r1, [pc, #792]	; (8008770 <rt_test_001_003_execute+0x330>)
 8008456:	f8c3 8000 	str.w	r8, [r3]
 800845a:	f7ff fcf1 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 800845e:	2110      	movs	r1, #16
 8008460:	4630      	mov	r0, r6
 8008462:	f7ff fced 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008466:	4629      	mov	r1, r5
 8008468:	4620      	mov	r0, r4
 800846a:	f7ff fce9 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 800846e:	4638      	mov	r0, r7
 8008470:	49c0      	ldr	r1, [pc, #768]	; (8008774 <rt_test_001_003_execute+0x334>)
 8008472:	f7ff fce5 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8008476:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800847a:	4630      	mov	r0, r6
 800847c:	f7ff fce0 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008480:	4629      	mov	r1, r5
 8008482:	4620      	mov	r0, r4
 8008484:	f7ff fcdc 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 8008488:	4638      	mov	r0, r7
 800848a:	49bb      	ldr	r1, [pc, #748]	; (8008778 <rt_test_001_003_execute+0x338>)
 800848c:	f7ff fcd8 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8008490:	2120      	movs	r1, #32
 8008492:	4630      	mov	r0, r6
 8008494:	f7ff fcd4 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008498:	4629      	mov	r1, r5
 800849a:	4620      	mov	r0, r4
 800849c:	f7ff fcd0 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 80084a0:	4638      	mov	r0, r7
 80084a2:	49b6      	ldr	r1, [pc, #728]	; (800877c <rt_test_001_003_execute+0x33c>)
 80084a4:	f7ff fccc 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 80084a8:	2120      	movs	r1, #32
 80084aa:	4630      	mov	r0, r6
 80084ac:	f7ff fcc8 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80084b0:	4629      	mov	r1, r5
 80084b2:	4620      	mov	r0, r4
 80084b4:	f7ff fcc4 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 80084b8:	4638      	mov	r0, r7
 80084ba:	49b1      	ldr	r1, [pc, #708]	; (8008780 <rt_test_001_003_execute+0x340>)
 80084bc:	f7ff fcc0 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 80084c0:	2102      	movs	r1, #2
 80084c2:	4630      	mov	r0, r6
 80084c4:	f7ff fcbc 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80084c8:	4629      	mov	r1, r5
 80084ca:	4620      	mov	r0, r4
 80084cc:	f7ff fcb8 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 80084d0:	4638      	mov	r0, r7
 80084d2:	49ac      	ldr	r1, [pc, #688]	; (8008784 <rt_test_001_003_execute+0x344>)
 80084d4:	f7ff fcb4 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 80084d8:	2100      	movs	r1, #0
 80084da:	4630      	mov	r0, r6
 80084dc:	f7ff fcb0 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80084e0:	4629      	mov	r1, r5
 80084e2:	4620      	mov	r0, r4
 80084e4:	f7ff fcac 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 80084e8:	4638      	mov	r0, r7
 80084ea:	49a7      	ldr	r1, [pc, #668]	; (8008788 <rt_test_001_003_execute+0x348>)
 80084ec:	f7ff fca8 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 80084f0:	2100      	movs	r1, #0
 80084f2:	4630      	mov	r0, r6
 80084f4:	f7ff fca4 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80084f8:	4629      	mov	r1, r5
 80084fa:	4620      	mov	r0, r4
 80084fc:	f7ff fca0 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 8008500:	4638      	mov	r0, r7
 8008502:	49a2      	ldr	r1, [pc, #648]	; (800878c <rt_test_001_003_execute+0x34c>)
 8008504:	f7ff fc9c 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8008508:	2100      	movs	r1, #0
 800850a:	4630      	mov	r0, r6
 800850c:	f7ff fc98 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008510:	4629      	mov	r1, r5
 8008512:	4620      	mov	r0, r4
 8008514:	f7ff fc94 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 8008518:	4638      	mov	r0, r7
 800851a:	499d      	ldr	r1, [pc, #628]	; (8008790 <rt_test_001_003_execute+0x350>)
 800851c:	f7ff fc90 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8008520:	4641      	mov	r1, r8
 8008522:	4630      	mov	r0, r6
 8008524:	f7ff fc8c 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008528:	4629      	mov	r1, r5
 800852a:	4620      	mov	r0, r4
 800852c:	f7ff fc88 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 8008530:	4638      	mov	r0, r7
 8008532:	4998      	ldr	r1, [pc, #608]	; (8008794 <rt_test_001_003_execute+0x354>)
 8008534:	f7ff fc84 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8008538:	4641      	mov	r1, r8
 800853a:	4630      	mov	r0, r6
 800853c:	f7ff fc80 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008540:	4629      	mov	r1, r5
 8008542:	4620      	mov	r0, r4
 8008544:	f7ff fc7c 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 8008548:	4638      	mov	r0, r7
 800854a:	4993      	ldr	r1, [pc, #588]	; (8008798 <rt_test_001_003_execute+0x358>)
 800854c:	f7ff fc78 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8008550:	4641      	mov	r1, r8
 8008552:	4630      	mov	r0, r6
 8008554:	f7ff fc74 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008558:	4629      	mov	r1, r5
 800855a:	4620      	mov	r0, r4
 800855c:	f7ff fc70 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 8008560:	4638      	mov	r0, r7
 8008562:	498e      	ldr	r1, [pc, #568]	; (800879c <rt_test_001_003_execute+0x35c>)
 8008564:	f7ff fc6c 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8008568:	4641      	mov	r1, r8
 800856a:	4630      	mov	r0, r6
 800856c:	f7ff fc68 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008570:	4629      	mov	r1, r5
 8008572:	4620      	mov	r0, r4
 8008574:	f7ff fc64 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 8008578:	4638      	mov	r0, r7
 800857a:	4989      	ldr	r1, [pc, #548]	; (80087a0 <rt_test_001_003_execute+0x360>)
 800857c:	f7ff fc60 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8008580:	4641      	mov	r1, r8
 8008582:	4630      	mov	r0, r6
 8008584:	f7ff fc5c 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008588:	4629      	mov	r1, r5
 800858a:	4620      	mov	r0, r4
 800858c:	f7ff fc58 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 8008590:	4638      	mov	r0, r7
 8008592:	4984      	ldr	r1, [pc, #528]	; (80087a4 <rt_test_001_003_execute+0x364>)
 8008594:	f7ff fc54 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8008598:	2100      	movs	r1, #0
 800859a:	4630      	mov	r0, r6
 800859c:	f7ff fc50 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80085a0:	4629      	mov	r1, r5
 80085a2:	4620      	mov	r0, r4
 80085a4:	f7ff fc4c 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 80085a8:	4638      	mov	r0, r7
 80085aa:	497f      	ldr	r1, [pc, #508]	; (80087a8 <rt_test_001_003_execute+0x368>)
 80085ac:	f7ff fc48 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 80085b0:	4641      	mov	r1, r8
 80085b2:	4630      	mov	r0, r6
 80085b4:	f7ff fc44 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80085b8:	4629      	mov	r1, r5
 80085ba:	4620      	mov	r0, r4
 80085bc:	f7ff fc40 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 80085c0:	4638      	mov	r0, r7
 80085c2:	497a      	ldr	r1, [pc, #488]	; (80087ac <rt_test_001_003_execute+0x36c>)
 80085c4:	f7ff fc3c 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 80085c8:	2100      	movs	r1, #0
 80085ca:	4630      	mov	r0, r6
 80085cc:	f7ff fc38 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80085d0:	4629      	mov	r1, r5
 80085d2:	4620      	mov	r0, r4
 80085d4:	f7ff fc34 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 80085d8:	4638      	mov	r0, r7
 80085da:	4975      	ldr	r1, [pc, #468]	; (80087b0 <rt_test_001_003_execute+0x370>)
 80085dc:	f7ff fc30 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 80085e0:	4641      	mov	r1, r8
 80085e2:	4630      	mov	r0, r6
 80085e4:	f7ff fc2c 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80085e8:	4629      	mov	r1, r5
 80085ea:	4620      	mov	r0, r4
 80085ec:	f7ff fc28 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 80085f0:	4638      	mov	r0, r7
 80085f2:	4970      	ldr	r1, [pc, #448]	; (80087b4 <rt_test_001_003_execute+0x374>)
 80085f4:	f7ff fc24 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 80085f8:	4641      	mov	r1, r8
 80085fa:	4630      	mov	r0, r6
 80085fc:	f7ff fc20 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008600:	4629      	mov	r1, r5
 8008602:	4620      	mov	r0, r4
 8008604:	f7ff fc1c 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 8008608:	4638      	mov	r0, r7
 800860a:	496b      	ldr	r1, [pc, #428]	; (80087b8 <rt_test_001_003_execute+0x378>)
 800860c:	f7ff fc18 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8008610:	4641      	mov	r1, r8
 8008612:	4630      	mov	r0, r6
 8008614:	f7ff fc14 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008618:	4629      	mov	r1, r5
 800861a:	4620      	mov	r0, r4
 800861c:	f7ff fc10 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 8008620:	4638      	mov	r0, r7
 8008622:	4966      	ldr	r1, [pc, #408]	; (80087bc <rt_test_001_003_execute+0x37c>)
 8008624:	f7ff fc0c 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8008628:	4641      	mov	r1, r8
 800862a:	4630      	mov	r0, r6
 800862c:	f7ff fc08 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008630:	4629      	mov	r1, r5
 8008632:	4620      	mov	r0, r4
 8008634:	f7ff fc04 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 8008638:	4638      	mov	r0, r7
 800863a:	4961      	ldr	r1, [pc, #388]	; (80087c0 <rt_test_001_003_execute+0x380>)
 800863c:	f7ff fc00 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8008640:	4641      	mov	r1, r8
 8008642:	4630      	mov	r0, r6
 8008644:	f7ff fbfc 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008648:	4629      	mov	r1, r5
 800864a:	4620      	mov	r0, r4
 800864c:	f7ff fbf8 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 8008650:	4638      	mov	r0, r7
 8008652:	495c      	ldr	r1, [pc, #368]	; (80087c4 <rt_test_001_003_execute+0x384>)
 8008654:	f7ff fbf4 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8008658:	2100      	movs	r1, #0
 800865a:	4630      	mov	r0, r6
 800865c:	f7ff fbf0 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008660:	4629      	mov	r1, r5
 8008662:	4620      	mov	r0, r4
 8008664:	f7ff fbec 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 8008668:	4638      	mov	r0, r7
 800866a:	4957      	ldr	r1, [pc, #348]	; (80087c8 <rt_test_001_003_execute+0x388>)
 800866c:	f7ff fbe8 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8008670:	4641      	mov	r1, r8
 8008672:	4630      	mov	r0, r6
 8008674:	f7ff fbe4 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008678:	4629      	mov	r1, r5
 800867a:	4620      	mov	r0, r4
 800867c:	f7ff fbe0 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 8008680:	4638      	mov	r0, r7
 8008682:	4952      	ldr	r1, [pc, #328]	; (80087cc <rt_test_001_003_execute+0x38c>)
 8008684:	f7ff fbdc 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8008688:	2100      	movs	r1, #0
 800868a:	4630      	mov	r0, r6
 800868c:	f7ff fbd8 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008690:	4629      	mov	r1, r5
 8008692:	4620      	mov	r0, r4
 8008694:	f7ff fbd4 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 8008698:	4638      	mov	r0, r7
 800869a:	494d      	ldr	r1, [pc, #308]	; (80087d0 <rt_test_001_003_execute+0x390>)
 800869c:	f7ff fbd0 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 80086a0:	2100      	movs	r1, #0
 80086a2:	4630      	mov	r0, r6
 80086a4:	f7ff fbcc 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80086a8:	4629      	mov	r1, r5
 80086aa:	4620      	mov	r0, r4
 80086ac:	f7ff fbc8 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 80086b0:	4638      	mov	r0, r7
 80086b2:	4948      	ldr	r1, [pc, #288]	; (80087d4 <rt_test_001_003_execute+0x394>)
 80086b4:	f7ff fbc4 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 80086b8:	2100      	movs	r1, #0
 80086ba:	4630      	mov	r0, r6
 80086bc:	f7ff fbc0 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80086c0:	4629      	mov	r1, r5
 80086c2:	4620      	mov	r0, r4
 80086c4:	f7ff fbbc 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 80086c8:	4638      	mov	r0, r7
 80086ca:	4943      	ldr	r1, [pc, #268]	; (80087d8 <rt_test_001_003_execute+0x398>)
 80086cc:	f7ff fbb8 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 80086d0:	2100      	movs	r1, #0
 80086d2:	4630      	mov	r0, r6
 80086d4:	f7ff fbb4 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80086d8:	4629      	mov	r1, r5
 80086da:	4620      	mov	r0, r4
 80086dc:	f7ff fbb0 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 80086e0:	4638      	mov	r0, r7
 80086e2:	493e      	ldr	r1, [pc, #248]	; (80087dc <rt_test_001_003_execute+0x39c>)
 80086e4:	f7ff fbac 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 80086e8:	21ff      	movs	r1, #255	; 0xff
 80086ea:	4630      	mov	r0, r6
 80086ec:	f7ff fba8 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80086f0:	4629      	mov	r1, r5
 80086f2:	4620      	mov	r0, r4
 80086f4:	f7ff fba4 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 80086f8:	4638      	mov	r0, r7
 80086fa:	4939      	ldr	r1, [pc, #228]	; (80087e0 <rt_test_001_003_execute+0x3a0>)
 80086fc:	f7ff fba0 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8008700:	2180      	movs	r1, #128	; 0x80
 8008702:	4630      	mov	r0, r6
 8008704:	f7ff fb9c 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008708:	4629      	mov	r1, r5
 800870a:	4620      	mov	r0, r4
 800870c:	f7ff fb98 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 8008710:	4638      	mov	r0, r7
 8008712:	4934      	ldr	r1, [pc, #208]	; (80087e4 <rt_test_001_003_execute+0x3a4>)
 8008714:	f7ff fb94 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8008718:	2100      	movs	r1, #0
 800871a:	4630      	mov	r0, r6
 800871c:	f7ff fb90 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008720:	4629      	mov	r1, r5
 8008722:	4620      	mov	r0, r4
 8008724:	f7ff fb8c 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 8008728:	4638      	mov	r0, r7
 800872a:	492f      	ldr	r1, [pc, #188]	; (80087e8 <rt_test_001_003_execute+0x3a8>)
 800872c:	f7ff fb88 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8008730:	2100      	movs	r1, #0
 8008732:	4630      	mov	r0, r6
 8008734:	f7ff fb84 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008738:	4629      	mov	r1, r5
 800873a:	4620      	mov	r0, r4
 800873c:	f7ff fb80 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 8008740:	4638      	mov	r0, r7
 8008742:	492a      	ldr	r1, [pc, #168]	; (80087ec <rt_test_001_003_execute+0x3ac>)
 8008744:	f7ff fb7c 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8008748:	2100      	movs	r1, #0
 800874a:	4630      	mov	r0, r6
 800874c:	f7ff fb78 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008750:	4629      	mov	r1, r5
 8008752:	4620      	mov	r0, r4
    test_print("--- CH_DBG_THREADS_PROFILING:           ");
    test_printn(CH_DBG_THREADS_PROFILING);
    test_println("");
  }
  test_end_step(1);
}
 8008754:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008758:	f7ff bb72 	b.w	8007e40 <test_printf>
 800875c:	080103f8 	.word	0x080103f8
 8008760:	200010f4 	.word	0x200010f4
 8008764:	08010890 	.word	0x08010890
 8008768:	08010400 	.word	0x08010400
 800876c:	08013080 	.word	0x08013080
 8008770:	080109fc 	.word	0x080109fc
 8008774:	08010a28 	.word	0x08010a28
 8008778:	08010a54 	.word	0x08010a54
 800877c:	08010a80 	.word	0x08010a80
 8008780:	08010aac 	.word	0x08010aac
 8008784:	08010ad8 	.word	0x08010ad8
 8008788:	08010b04 	.word	0x08010b04
 800878c:	08010b30 	.word	0x08010b30
 8008790:	08010b5c 	.word	0x08010b5c
 8008794:	08010b88 	.word	0x08010b88
 8008798:	08010bb4 	.word	0x08010bb4
 800879c:	08010be0 	.word	0x08010be0
 80087a0:	08010c0c 	.word	0x08010c0c
 80087a4:	08010c38 	.word	0x08010c38
 80087a8:	08010c64 	.word	0x08010c64
 80087ac:	08010c90 	.word	0x08010c90
 80087b0:	08010cbc 	.word	0x08010cbc
 80087b4:	08010ce8 	.word	0x08010ce8
 80087b8:	08010d14 	.word	0x08010d14
 80087bc:	08010d40 	.word	0x08010d40
 80087c0:	08010d6c 	.word	0x08010d6c
 80087c4:	08010d98 	.word	0x08010d98
 80087c8:	08010dc4 	.word	0x08010dc4
 80087cc:	08010df0 	.word	0x08010df0
 80087d0:	08010e1c 	.word	0x08010e1c
 80087d4:	08010e48 	.word	0x08010e48
 80087d8:	08010e74 	.word	0x08010e74
 80087dc:	08010ea0 	.word	0x08010ea0
 80087e0:	08010ecc 	.word	0x08010ecc
 80087e4:	08010ef8 	.word	0x08010ef8
 80087e8:	08010f24 	.word	0x08010f24
 80087ec:	08010f50 	.word	0x08010f50

080087f0 <rt_test_012_001_execute>:
 *   second time window.
 * - [12.1.3] Score is printed.
 * .
 */

static void rt_test_012_001_execute(void) {
 80087f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* [12.1.1] The messenger thread is started at a lower priority than
     the current thread.*/
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 80087f4:	2700      	movs	r7, #0
  test_set_step(1);
 80087f6:	2601      	movs	r6, #1
  return __sch_get_currthread();
 80087f8:	4b1e      	ldr	r3, [pc, #120]	; (8008874 <rt_test_012_001_execute+0x84>)
static void rt_test_012_001_execute(void) {
 80087fa:	b082      	sub	sp, #8
  return chThdGetSelfX()->hdr.pqueue.prio;
 80087fc:	68db      	ldr	r3, [r3, #12]
  test_set_step(1);
 80087fe:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8008878 <rt_test_012_001_execute+0x88>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8008802:	689a      	ldr	r2, [r3, #8]
 8008804:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8008808:	4b1c      	ldr	r3, [pc, #112]	; (800887c <rt_test_012_001_execute+0x8c>)
 800880a:	3a01      	subs	r2, #1
 800880c:	481c      	ldr	r0, [pc, #112]	; (8008880 <rt_test_012_001_execute+0x90>)
 800880e:	9700      	str	r7, [sp, #0]
  test_set_step(1);
 8008810:	f8c8 6000 	str.w	r6, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8008814:	f7fb ff1c 	bl	8004650 <chThdCreateStatic>
  }
  test_end_step(1);

  /* [12.1.2] The number of messages exchanged is counted in a one
     second time window.*/
  test_set_step(2);
 8008818:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 800881a:	4d1a      	ldr	r5, [pc, #104]	; (8008884 <rt_test_012_001_execute+0x94>)
  test_set_step(2);
 800881c:	f8c8 3000 	str.w	r3, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8008820:	6028      	str	r0, [r5, #0]
  {
    n = msg_loop_test(threads[0]);
 8008822:	f7fb f845 	bl	80038b0 <msg_loop_test>
 8008826:	4606      	mov	r6, r0
  for (i = 0; i < MAX_THREADS; i++)
 8008828:	462c      	mov	r4, r5
 800882a:	3514      	adds	r5, #20
    if (threads[i] != NULL) {
 800882c:	f854 0b04 	ldr.w	r0, [r4], #4
 8008830:	b118      	cbz	r0, 800883a <rt_test_012_001_execute+0x4a>
      chThdWait(threads[i]);
 8008832:	f7fd f8f5 	bl	8005a20 <chThdWait>
      threads[i] = NULL;
 8008836:	f844 7c04 	str.w	r7, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 800883a:	42ac      	cmp	r4, r5
 800883c:	d1f6      	bne.n	800882c <rt_test_012_001_execute+0x3c>
    test_wait_threads();
  }
  test_end_step(2);

  /* [12.1.3] Score is printed.*/
  test_set_step(3);
 800883e:	2303      	movs	r3, #3
  test_printf("%s", msgp);
 8008840:	4911      	ldr	r1, [pc, #68]	; (8008888 <rt_test_012_001_execute+0x98>)
 8008842:	4812      	ldr	r0, [pc, #72]	; (800888c <rt_test_012_001_execute+0x9c>)
 8008844:	f8c8 3000 	str.w	r3, [r8]
 8008848:	f7ff fafa 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 800884c:	4631      	mov	r1, r6
 800884e:	4810      	ldr	r0, [pc, #64]	; (8008890 <rt_test_012_001_execute+0xa0>)
 8008850:	f7ff faf6 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 8008854:	490f      	ldr	r1, [pc, #60]	; (8008894 <rt_test_012_001_execute+0xa4>)
 8008856:	480d      	ldr	r0, [pc, #52]	; (800888c <rt_test_012_001_execute+0x9c>)
 8008858:	f7ff faf2 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 800885c:	0071      	lsls	r1, r6, #1
 800885e:	480c      	ldr	r0, [pc, #48]	; (8008890 <rt_test_012_001_execute+0xa0>)
 8008860:	f7ff faee 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008864:	490c      	ldr	r1, [pc, #48]	; (8008898 <rt_test_012_001_execute+0xa8>)
 8008866:	480d      	ldr	r0, [pc, #52]	; (800889c <rt_test_012_001_execute+0xac>)
    test_print(" msgs/S, ");
    test_printn(n << 1);
    test_println(" ctxswc/S");
  }
  test_end_step(3);
}
 8008868:	b002      	add	sp, #8
 800886a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800886e:	f7ff bae7 	b.w	8007e40 <test_printf>
 8008872:	bf00      	nop
 8008874:	20001050 	.word	0x20001050
 8008878:	200010f4 	.word	0x200010f4
 800887c:	08004551 	.word	0x08004551
 8008880:	20001240 	.word	0x20001240
 8008884:	20001ab0 	.word	0x20001ab0
 8008888:	08010f7c 	.word	0x08010f7c
 800888c:	080103f8 	.word	0x080103f8
 8008890:	08010890 	.word	0x08010890
 8008894:	08010f8c 	.word	0x08010f8c
 8008898:	08010f98 	.word	0x08010f98
 800889c:	08013080 	.word	0x08013080

080088a0 <rt_test_012_002_execute>:
 *   second time window.
 * - [12.2.3] Score is printed.
 * .
 */

static void rt_test_012_002_execute(void) {
 80088a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t n;

  /* [12.2.1] The messenger thread is started at an higher priority
     than the current thread.*/
  test_set_step(1);
 80088a4:	2601      	movs	r6, #1
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80088a6:	2700      	movs	r7, #0
  return __sch_get_currthread();
 80088a8:	4b1e      	ldr	r3, [pc, #120]	; (8008924 <rt_test_012_002_execute+0x84>)
static void rt_test_012_002_execute(void) {
 80088aa:	b082      	sub	sp, #8
  return chThdGetSelfX()->hdr.pqueue.prio;
 80088ac:	68db      	ldr	r3, [r3, #12]
  test_set_step(1);
 80088ae:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8008928 <rt_test_012_002_execute+0x88>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80088b2:	689a      	ldr	r2, [r3, #8]
 80088b4:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80088b8:	4432      	add	r2, r6
 80088ba:	4b1c      	ldr	r3, [pc, #112]	; (800892c <rt_test_012_002_execute+0x8c>)
 80088bc:	481c      	ldr	r0, [pc, #112]	; (8008930 <rt_test_012_002_execute+0x90>)
 80088be:	9700      	str	r7, [sp, #0]
  test_set_step(1);
 80088c0:	f8c8 6000 	str.w	r6, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80088c4:	f7fb fec4 	bl	8004650 <chThdCreateStatic>
  }
  test_end_step(1);

  /* [12.2.2] The number of messages exchanged is counted in a one
     second time window.*/
  test_set_step(2);
 80088c8:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80088ca:	4d1a      	ldr	r5, [pc, #104]	; (8008934 <rt_test_012_002_execute+0x94>)
  test_set_step(2);
 80088cc:	f8c8 3000 	str.w	r3, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80088d0:	6028      	str	r0, [r5, #0]
  {
    n = msg_loop_test(threads[0]);
 80088d2:	f7fa ffed 	bl	80038b0 <msg_loop_test>
 80088d6:	4606      	mov	r6, r0
 80088d8:	462c      	mov	r4, r5
 80088da:	3514      	adds	r5, #20
    if (threads[i] != NULL) {
 80088dc:	f854 0b04 	ldr.w	r0, [r4], #4
 80088e0:	b118      	cbz	r0, 80088ea <rt_test_012_002_execute+0x4a>
      chThdWait(threads[i]);
 80088e2:	f7fd f89d 	bl	8005a20 <chThdWait>
      threads[i] = NULL;
 80088e6:	f844 7c04 	str.w	r7, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 80088ea:	42ac      	cmp	r4, r5
 80088ec:	d1f6      	bne.n	80088dc <rt_test_012_002_execute+0x3c>
    test_wait_threads();
  }
  test_end_step(2);

  /* [12.2.3] Score is printed.*/
  test_set_step(3);
 80088ee:	2303      	movs	r3, #3
  test_printf("%s", msgp);
 80088f0:	4911      	ldr	r1, [pc, #68]	; (8008938 <rt_test_012_002_execute+0x98>)
 80088f2:	4812      	ldr	r0, [pc, #72]	; (800893c <rt_test_012_002_execute+0x9c>)
 80088f4:	f8c8 3000 	str.w	r3, [r8]
 80088f8:	f7ff faa2 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 80088fc:	4631      	mov	r1, r6
 80088fe:	4810      	ldr	r0, [pc, #64]	; (8008940 <rt_test_012_002_execute+0xa0>)
 8008900:	f7ff fa9e 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 8008904:	490f      	ldr	r1, [pc, #60]	; (8008944 <rt_test_012_002_execute+0xa4>)
 8008906:	480d      	ldr	r0, [pc, #52]	; (800893c <rt_test_012_002_execute+0x9c>)
 8008908:	f7ff fa9a 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 800890c:	0071      	lsls	r1, r6, #1
 800890e:	480c      	ldr	r0, [pc, #48]	; (8008940 <rt_test_012_002_execute+0xa0>)
 8008910:	f7ff fa96 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008914:	490c      	ldr	r1, [pc, #48]	; (8008948 <rt_test_012_002_execute+0xa8>)
 8008916:	480d      	ldr	r0, [pc, #52]	; (800894c <rt_test_012_002_execute+0xac>)
    test_print(" msgs/S, ");
    test_printn(n << 1);
    test_println(" ctxswc/S");
  }
  test_end_step(3);
}
 8008918:	b002      	add	sp, #8
 800891a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800891e:	f7ff ba8f 	b.w	8007e40 <test_printf>
 8008922:	bf00      	nop
 8008924:	20001050 	.word	0x20001050
 8008928:	200010f4 	.word	0x200010f4
 800892c:	08004551 	.word	0x08004551
 8008930:	20001240 	.word	0x20001240
 8008934:	20001ab0 	.word	0x20001ab0
 8008938:	08010f7c 	.word	0x08010f7c
 800893c:	080103f8 	.word	0x080103f8
 8008940:	08010890 	.word	0x08010890
 8008944:	08010f8c 	.word	0x08010f8c
 8008948:	08010f98 	.word	0x08010f98
 800894c:	08013080 	.word	0x08013080

08008950 <rt_test_012_003_execute>:
 *   second time window.
 * - [12.3.4] Score is printed.
 * .
 */

static void rt_test_012_003_execute(void) {
 8008950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* [12.3.1] The messenger thread is started at an higher priority
     than the current thread.*/
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008954:	2500      	movs	r5, #0
  test_set_step(1);
 8008956:	2401      	movs	r4, #1
  return __sch_get_currthread();
 8008958:	4f37      	ldr	r7, [pc, #220]	; (8008a38 <rt_test_012_003_execute+0xe8>)
static void rt_test_012_003_execute(void) {
 800895a:	b082      	sub	sp, #8
  return chThdGetSelfX()->hdr.pqueue.prio;
 800895c:	68fb      	ldr	r3, [r7, #12]
  test_set_step(1);
 800895e:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8008a3c <rt_test_012_003_execute+0xec>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008962:	689a      	ldr	r2, [r3, #8]
 8008964:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8008968:	4422      	add	r2, r4
 800896a:	4b35      	ldr	r3, [pc, #212]	; (8008a40 <rt_test_012_003_execute+0xf0>)
 800896c:	4835      	ldr	r0, [pc, #212]	; (8008a44 <rt_test_012_003_execute+0xf4>)
 800896e:	9500      	str	r5, [sp, #0]
  test_set_step(1);
 8008970:	f8c8 4000 	str.w	r4, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008974:	f7fb fe6c 	bl	8004650 <chThdCreateStatic>
  }
  test_end_step(1);

  /* [12.3.2] Four threads are started at a lower priority than the
     current thread.*/
  test_set_step(2);
 8008978:	2302      	movs	r3, #2
 800897a:	f8c8 3000 	str.w	r3, [r8]
 800897e:	68fb      	ldr	r3, [r7, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008980:	4e31      	ldr	r6, [pc, #196]	; (8008a48 <rt_test_012_003_execute+0xf8>)
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8008982:	689a      	ldr	r2, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008984:	6030      	str	r0, [r6, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8008986:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800898a:	4b30      	ldr	r3, [pc, #192]	; (8008a4c <rt_test_012_003_execute+0xfc>)
 800898c:	3a02      	subs	r2, #2
 800898e:	4830      	ldr	r0, [pc, #192]	; (8008a50 <rt_test_012_003_execute+0x100>)
 8008990:	9500      	str	r5, [sp, #0]
 8008992:	f7fb fe5d 	bl	8004650 <chThdCreateStatic>
 8008996:	4684      	mov	ip, r0
 8008998:	68fb      	ldr	r3, [r7, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, bmk_thread3, NULL);
 800899a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800899e:	689a      	ldr	r2, [r3, #8]
 80089a0:	482c      	ldr	r0, [pc, #176]	; (8008a54 <rt_test_012_003_execute+0x104>)
 80089a2:	4b2a      	ldr	r3, [pc, #168]	; (8008a4c <rt_test_012_003_execute+0xfc>)
 80089a4:	9500      	str	r5, [sp, #0]
 80089a6:	3a03      	subs	r2, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 80089a8:	f8c6 c004 	str.w	ip, [r6, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, bmk_thread3, NULL);
 80089ac:	f7fb fe50 	bl	8004650 <chThdCreateStatic>
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	60b0      	str	r0, [r6, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
 80089b4:	689a      	ldr	r2, [r3, #8]
 80089b6:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80089ba:	4b24      	ldr	r3, [pc, #144]	; (8008a4c <rt_test_012_003_execute+0xfc>)
 80089bc:	3a04      	subs	r2, #4
 80089be:	4826      	ldr	r0, [pc, #152]	; (8008a58 <rt_test_012_003_execute+0x108>)
 80089c0:	9500      	str	r5, [sp, #0]
 80089c2:	f7fb fe45 	bl	8004650 <chThdCreateStatic>
 80089c6:	68fb      	ldr	r3, [r7, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 80089c8:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80089cc:	689a      	ldr	r2, [r3, #8]
 80089ce:	4b1f      	ldr	r3, [pc, #124]	; (8008a4c <rt_test_012_003_execute+0xfc>)
 80089d0:	9500      	str	r5, [sp, #0]
 80089d2:	3a05      	subs	r2, #5
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
 80089d4:	60f0      	str	r0, [r6, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 80089d6:	4821      	ldr	r0, [pc, #132]	; (8008a5c <rt_test_012_003_execute+0x10c>)
 80089d8:	f7fb fe3a 	bl	8004650 <chThdCreateStatic>
  }
  test_end_step(2);

  /* [12.3.3] The number of messages exchanged is counted in a one
     second time window.*/
  test_set_step(3);
 80089dc:	2303      	movs	r3, #3
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 80089de:	6130      	str	r0, [r6, #16]
  {
    n = msg_loop_test(threads[0]);
 80089e0:	6830      	ldr	r0, [r6, #0]
  test_set_step(3);
 80089e2:	f8c8 3000 	str.w	r3, [r8]
    n = msg_loop_test(threads[0]);
 80089e6:	f7fa ff63 	bl	80038b0 <msg_loop_test>
 80089ea:	4607      	mov	r7, r0
 80089ec:	4634      	mov	r4, r6
 80089ee:	3614      	adds	r6, #20
    if (threads[i] != NULL) {
 80089f0:	f854 0b04 	ldr.w	r0, [r4], #4
 80089f4:	b118      	cbz	r0, 80089fe <rt_test_012_003_execute+0xae>
      chThdWait(threads[i]);
 80089f6:	f7fd f813 	bl	8005a20 <chThdWait>
      threads[i] = NULL;
 80089fa:	f844 5c04 	str.w	r5, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 80089fe:	42b4      	cmp	r4, r6
 8008a00:	d1f6      	bne.n	80089f0 <rt_test_012_003_execute+0xa0>
    test_wait_threads();
  }
  test_end_step(3);

  /* [12.3.4] Score is printed.*/
  test_set_step(4);
 8008a02:	2304      	movs	r3, #4
  test_printf("%s", msgp);
 8008a04:	4916      	ldr	r1, [pc, #88]	; (8008a60 <rt_test_012_003_execute+0x110>)
 8008a06:	4817      	ldr	r0, [pc, #92]	; (8008a64 <rt_test_012_003_execute+0x114>)
 8008a08:	f8c8 3000 	str.w	r3, [r8]
 8008a0c:	f7ff fa18 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8008a10:	4639      	mov	r1, r7
 8008a12:	4815      	ldr	r0, [pc, #84]	; (8008a68 <rt_test_012_003_execute+0x118>)
 8008a14:	f7ff fa14 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 8008a18:	4914      	ldr	r1, [pc, #80]	; (8008a6c <rt_test_012_003_execute+0x11c>)
 8008a1a:	4812      	ldr	r0, [pc, #72]	; (8008a64 <rt_test_012_003_execute+0x114>)
 8008a1c:	f7ff fa10 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8008a20:	0079      	lsls	r1, r7, #1
 8008a22:	4811      	ldr	r0, [pc, #68]	; (8008a68 <rt_test_012_003_execute+0x118>)
 8008a24:	f7ff fa0c 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008a28:	4911      	ldr	r1, [pc, #68]	; (8008a70 <rt_test_012_003_execute+0x120>)
 8008a2a:	4812      	ldr	r0, [pc, #72]	; (8008a74 <rt_test_012_003_execute+0x124>)
    test_print(" msgs/S, ");
    test_printn(n << 1);
    test_println(" ctxswc/S");
  }
  test_end_step(4);
}
 8008a2c:	b002      	add	sp, #8
 8008a2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a32:	f7ff ba05 	b.w	8007e40 <test_printf>
 8008a36:	bf00      	nop
 8008a38:	20001050 	.word	0x20001050
 8008a3c:	200010f4 	.word	0x200010f4
 8008a40:	08004551 	.word	0x08004551
 8008a44:	20001240 	.word	0x20001240
 8008a48:	20001ab0 	.word	0x20001ab0
 8008a4c:	080016e1 	.word	0x080016e1
 8008a50:	200013f0 	.word	0x200013f0
 8008a54:	200015a0 	.word	0x200015a0
 8008a58:	20001750 	.word	0x20001750
 8008a5c:	20001900 	.word	0x20001900
 8008a60:	08010f7c 	.word	0x08010f7c
 8008a64:	080103f8 	.word	0x080103f8
 8008a68:	08010890 	.word	0x08010890
 8008a6c:	08010f8c 	.word	0x08010f8c
 8008a70:	08010f98 	.word	0x08010f98
 8008a74:	08013080 	.word	0x08013080
	...

08008a80 <test_wait_tick>:
}

/*
 * Delays execution until next system time tick.
 */
systime_t test_wait_tick(void) {
 8008a80:	b510      	push	{r4, lr}
 8008a82:	2330      	movs	r3, #48	; 0x30
 8008a84:	b086      	sub	sp, #24
 8008a86:	f383 8811 	msr	BASEPRI, r3
  vtp->reload  = (sysinterval_t)0;
 8008a8a:	2300      	movs	r3, #0
  thread_t *tp = __instance_get_currthread(currcore);
 8008a8c:	4c15      	ldr	r4, [pc, #84]	; (8008ae4 <test_wait_tick+0x64>)
  vtp->func    = vtfunc;
 8008a8e:	4a16      	ldr	r2, [pc, #88]	; (8008ae8 <test_wait_tick+0x68>)
  vtp->par     = par;
 8008a90:	68e1      	ldr	r1, [r4, #12]
  vt_enqueue(vtlp, vtp, delay);
 8008a92:	4668      	mov	r0, sp
  vtp->func    = vtfunc;
 8008a94:	e9cd 2103 	strd	r2, r1, [sp, #12]
  vt_enqueue(vtlp, vtp, delay);
 8008a98:	2101      	movs	r1, #1
  vtp->reload  = (sysinterval_t)0;
 8008a9a:	9305      	str	r3, [sp, #20]
  vt_enqueue(vtlp, vtp, delay);
 8008a9c:	f006 f848 	bl	800eb30 <vt_enqueue.constprop.0>
  otp->state = newstate;
 8008aa0:	2308      	movs	r3, #8
  ntp->state = CH_STATE_CURRENT;
 8008aa2:	2201      	movs	r2, #1
  thread_t *otp = __instance_get_currthread(oip);
 8008aa4:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 8008aa6:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 8008aa8:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
  pqp->next       = p->next;
 8008aac:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 8008aae:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8008ab0:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  pqp->next       = p->next;
 8008ab4:	6023      	str	r3, [r4, #0]
  __instance_set_currthread(oip, ntp);
 8008ab6:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8008ab8:	f7f7 fbc2 	bl	8000240 <__port_switch>
    if (chVTIsArmedI(&vt)) {
 8008abc:	9b00      	ldr	r3, [sp, #0]
 8008abe:	b113      	cbz	r3, 8008ac6 <test_wait_tick+0x46>
      chVTDoResetI(&vt);
 8008ac0:	4668      	mov	r0, sp
 8008ac2:	f7fa f8b5 	bl	8002c30 <chVTDoResetI>
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	f383 8811 	msr	BASEPRI, r3
 8008acc:	2230      	movs	r2, #48	; 0x30
 8008ace:	f382 8811 	msr	BASEPRI, r2
 8008ad2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008ad6:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8008ad8:	f383 8811 	msr	BASEPRI, r3

  chThdSleep(1);
  return chVTGetSystemTime();
}
 8008adc:	b280      	uxth	r0, r0
 8008ade:	b006      	add	sp, #24
 8008ae0:	bd10      	pop	{r4, pc}
 8008ae2:	bf00      	nop
 8008ae4:	20001050 	.word	0x20001050
 8008ae8:	080013e1 	.word	0x080013e1
 8008aec:	00000000 	.word	0x00000000

08008af0 <rt_test_007_003_execute>:
  test_set_step(1);
 8008af0:	2301      	movs	r3, #1
static void rt_test_007_003_execute(void) {
 8008af2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 8008af6:	4d61      	ldr	r5, [pc, #388]	; (8008c7c <rt_test_007_003_execute+0x18c>)
 8008af8:	2630      	movs	r6, #48	; 0x30
static void rt_test_007_003_execute(void) {
 8008afa:	b082      	sub	sp, #8
  test_set_step(1);
 8008afc:	602b      	str	r3, [r5, #0]
 8008afe:	f386 8811 	msr	BASEPRI, r6
  if (--sp->cnt < (cnt_t)0) {
 8008b02:	4c5f      	ldr	r4, [pc, #380]	; (8008c80 <rt_test_007_003_execute+0x190>)
 8008b04:	68a2      	ldr	r2, [r4, #8]
 8008b06:	1e53      	subs	r3, r2, #1
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	60a3      	str	r3, [r4, #8]
 8008b0c:	f04f 0300 	mov.w	r3, #0
 8008b10:	db09      	blt.n	8008b26 <rt_test_007_003_execute+0x36>
 8008b12:	f383 8811 	msr	BASEPRI, r3
  chtest.global_fail     = true;
 8008b16:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8008b1a:	4a5a      	ldr	r2, [pc, #360]	; (8008c84 <rt_test_007_003_execute+0x194>)
  chtest.global_fail     = true;
 8008b1c:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 8008b1e:	60aa      	str	r2, [r5, #8]
}
 8008b20:	b002      	add	sp, #8
 8008b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      sp->cnt++;
 8008b26:	60a2      	str	r2, [r4, #8]
 8008b28:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 8008b2c:	6823      	ldr	r3, [r4, #0]
 8008b2e:	42a3      	cmp	r3, r4
 8008b30:	d151      	bne.n	8008bd6 <rt_test_007_003_execute+0xe6>
    test_assert(sem1.cnt == 0, "counter not zero");
 8008b32:	68a7      	ldr	r7, [r4, #8]
 8008b34:	2f00      	cmp	r7, #0
 8008b36:	d156      	bne.n	8008be6 <rt_test_007_003_execute+0xf6>
  test_set_step(2);
 8008b38:	f04f 0c02 	mov.w	ip, #2
  return __sch_get_currthread();
 8008b3c:	f8df 8148 	ldr.w	r8, [pc, #328]	; 8008c88 <rt_test_007_003_execute+0x198>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008b40:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
  return chThdGetSelfX()->hdr.pqueue.prio;
 8008b44:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b48:	4850      	ldr	r0, [pc, #320]	; (8008c8c <rt_test_007_003_execute+0x19c>)
 8008b4a:	689a      	ldr	r2, [r3, #8]
 8008b4c:	4b50      	ldr	r3, [pc, #320]	; (8008c90 <rt_test_007_003_execute+0x1a0>)
 8008b4e:	9700      	str	r7, [sp, #0]
 8008b50:	3a01      	subs	r2, #1
  test_set_step(2);
 8008b52:	f8c5 c000 	str.w	ip, [r5]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008b56:	f7fb fd7b 	bl	8004650 <chThdCreateStatic>
 8008b5a:	4b4e      	ldr	r3, [pc, #312]	; (8008c94 <rt_test_007_003_execute+0x1a4>)
 8008b5c:	6018      	str	r0, [r3, #0]
 8008b5e:	f386 8811 	msr	BASEPRI, r6
  if (--sp->cnt < (cnt_t)0) {
 8008b62:	68a3      	ldr	r3, [r4, #8]
 8008b64:	3b01      	subs	r3, #1
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	60a3      	str	r3, [r4, #8]
 8008b6a:	db44      	blt.n	8008bf6 <rt_test_007_003_execute+0x106>
 8008b6c:	f04f 0a00 	mov.w	sl, #0
 8008b70:	f38a 8811 	msr	BASEPRI, sl
  for (i = 0; i < MAX_THREADS; i++)
 8008b74:	4e47      	ldr	r6, [pc, #284]	; (8008c94 <rt_test_007_003_execute+0x1a4>)
 8008b76:	f106 0914 	add.w	r9, r6, #20
    if (threads[i] != NULL) {
 8008b7a:	f856 0b04 	ldr.w	r0, [r6], #4
 8008b7e:	b118      	cbz	r0, 8008b88 <rt_test_007_003_execute+0x98>
      chThdWait(threads[i]);
 8008b80:	f7fc ff4e 	bl	8005a20 <chThdWait>
      threads[i] = NULL;
 8008b84:	f846 ac04 	str.w	sl, [r6, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8008b88:	45b1      	cmp	r9, r6
 8008b8a:	d1f6      	bne.n	8008b7a <rt_test_007_003_execute+0x8a>
 8008b8c:	b9ef      	cbnz	r7, 8008bca <rt_test_007_003_execute+0xda>
 8008b8e:	6823      	ldr	r3, [r4, #0]
 8008b90:	42a3      	cmp	r3, r4
 8008b92:	d120      	bne.n	8008bd6 <rt_test_007_003_execute+0xe6>
 8008b94:	68a3      	ldr	r3, [r4, #8]
 8008b96:	bb33      	cbnz	r3, 8008be6 <rt_test_007_003_execute+0xf6>
  test_set_step(3);
 8008b98:	2303      	movs	r3, #3
 8008b9a:	602b      	str	r3, [r5, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(5 * 50));
 8008b9c:	f7ff ff70 	bl	8008a80 <test_wait_tick>
 8008ba0:	2641      	movs	r6, #65	; 0x41
 8008ba2:	f04f 0930 	mov.w	r9, #48	; 0x30
 8008ba6:	4682      	mov	sl, r0
    for (i = 0; i < 5; i++) {
 8008ba8:	4f3b      	ldr	r7, [pc, #236]	; (8008c98 <rt_test_007_003_execute+0x1a8>)
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8008baa:	68eb      	ldr	r3, [r5, #12]
 8008bac:	42bb      	cmp	r3, r7
 8008bae:	d202      	bcs.n	8008bb6 <rt_test_007_003_execute+0xc6>
    *chtest.tokp++ = token;
 8008bb0:	1c5a      	adds	r2, r3, #1
 8008bb2:	60ea      	str	r2, [r5, #12]
 8008bb4:	701e      	strb	r6, [r3, #0]
 8008bb6:	f389 8811 	msr	BASEPRI, r9
 8008bba:	68a3      	ldr	r3, [r4, #8]
 8008bbc:	3b01      	subs	r3, #1
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	60a3      	str	r3, [r4, #8]
 8008bc2:	db27      	blt.n	8008c14 <rt_test_007_003_execute+0x124>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	f383 8811 	msr	BASEPRI, r3
  chtest.global_fail     = true;
 8008bca:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8008bce:	4a2d      	ldr	r2, [pc, #180]	; (8008c84 <rt_test_007_003_execute+0x194>)
  chtest.global_fail     = true;
 8008bd0:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 8008bd2:	60aa      	str	r2, [r5, #8]
 8008bd4:	e7a4      	b.n	8008b20 <rt_test_007_003_execute+0x30>
  chtest.global_fail     = true;
 8008bd6:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8008bda:	4a30      	ldr	r2, [pc, #192]	; (8008c9c <rt_test_007_003_execute+0x1ac>)
  chtest.global_fail     = true;
 8008bdc:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 8008bde:	60aa      	str	r2, [r5, #8]
}
 8008be0:	b002      	add	sp, #8
 8008be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  chtest.global_fail     = true;
 8008be6:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8008bea:	4a2d      	ldr	r2, [pc, #180]	; (8008ca0 <rt_test_007_003_execute+0x1b0>)
  chtest.global_fail     = true;
 8008bec:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 8008bee:	60aa      	str	r2, [r5, #8]
 8008bf0:	b002      	add	sp, #8
 8008bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return __sch_get_currthread();
 8008bf6:	f8d8 300c 	ldr.w	r3, [r8, #12]
  p->prev       = qp->prev;
 8008bfa:	6862      	ldr	r2, [r4, #4]
    currtp->u.wtsemp = sp;
 8008bfc:	62dc      	str	r4, [r3, #44]	; 0x2c
 8008bfe:	e9c3 4200 	strd	r4, r2, [r3]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 8008c02:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  p->prev->next = p;
 8008c06:	6013      	str	r3, [r2, #0]
 8008c08:	2005      	movs	r0, #5
  qp->prev      = p;
 8008c0a:	6063      	str	r3, [r4, #4]
 8008c0c:	f7fa f868 	bl	8002ce0 <chSchGoSleepTimeoutS>
 8008c10:	4607      	mov	r7, r0
 8008c12:	e7ab      	b.n	8008b6c <rt_test_007_003_execute+0x7c>
 8008c14:	f8d8 300c 	ldr.w	r3, [r8, #12]
  p->prev       = qp->prev;
 8008c18:	6862      	ldr	r2, [r4, #4]
  p->next       = qp;
 8008c1a:	601c      	str	r4, [r3, #0]
  p->prev       = qp->prev;
 8008c1c:	605a      	str	r2, [r3, #4]
    currtp->u.wtsemp = sp;
 8008c1e:	62dc      	str	r4, [r3, #44]	; 0x2c
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 8008c20:	2164      	movs	r1, #100	; 0x64
  p->prev->next = p;
 8008c22:	6013      	str	r3, [r2, #0]
 8008c24:	2005      	movs	r0, #5
  qp->prev      = p;
 8008c26:	6063      	str	r3, [r4, #4]
 8008c28:	f7fa f85a 	bl	8002ce0 <chSchGoSleepTimeoutS>
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 8008c32:	3001      	adds	r0, #1
 8008c34:	d1c9      	bne.n	8008bca <rt_test_007_003_execute+0xda>
 8008c36:	6823      	ldr	r3, [r4, #0]
    for (i = 0; i < 5; i++) {
 8008c38:	3601      	adds	r6, #1
 8008c3a:	42a3      	cmp	r3, r4
 8008c3c:	b2f6      	uxtb	r6, r6
 8008c3e:	d1ca      	bne.n	8008bd6 <rt_test_007_003_execute+0xe6>
 8008c40:	68a3      	ldr	r3, [r4, #8]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1cf      	bne.n	8008be6 <rt_test_007_003_execute+0xf6>
 8008c46:	2e46      	cmp	r6, #70	; 0x46
 8008c48:	d1af      	bne.n	8008baa <rt_test_007_003_execute+0xba>
    test_assert_sequence("ABCDE", "invalid sequence");
 8008c4a:	4916      	ldr	r1, [pc, #88]	; (8008ca4 <rt_test_007_003_execute+0x1b4>)
 8008c4c:	4816      	ldr	r0, [pc, #88]	; (8008ca8 <rt_test_007_003_execute+0x1b8>)
 8008c4e:	f7fe f90f 	bl	8006e70 <__test_assert_sequence>
 8008c52:	2800      	cmp	r0, #0
 8008c54:	f47f af64 	bne.w	8008b20 <rt_test_007_003_execute+0x30>
 8008c58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c5e:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8008c62:	eba3 030a 	sub.w	r3, r3, sl
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	2b03      	cmp	r3, #3
 8008c6a:	f67f af59 	bls.w	8008b20 <rt_test_007_003_execute+0x30>
  chtest.global_fail     = true;
 8008c6e:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8008c72:	4a0e      	ldr	r2, [pc, #56]	; (8008cac <rt_test_007_003_execute+0x1bc>)
  chtest.global_fail     = true;
 8008c74:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 8008c76:	60aa      	str	r2, [r5, #8]
    return __test_fail(msg);
 8008c78:	e752      	b.n	8008b20 <rt_test_007_003_execute+0x30>
 8008c7a:	bf00      	nop
 8008c7c:	200010f4 	.word	0x200010f4
 8008c80:	20001224 	.word	0x20001224
 8008c84:	08010fa4 	.word	0x08010fa4
 8008c88:	20001050 	.word	0x20001050
 8008c8c:	20001240 	.word	0x20001240
 8008c90:	08004271 	.word	0x08004271
 8008c94:	20001ab0 	.word	0x20001ab0
 8008c98:	20001114 	.word	0x20001114
 8008c9c:	080102b4 	.word	0x080102b4
 8008ca0:	080102c4 	.word	0x080102c4
 8008ca4:	08010694 	.word	0x08010694
 8008ca8:	080106a8 	.word	0x080106a8
 8008cac:	080101c0 	.word	0x080101c0

08008cb0 <rt_test_010_003_execute>:
  test_set_step(1);
 8008cb0:	2301      	movs	r3, #1
static void rt_test_010_003_execute(void) {
 8008cb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 8008cb6:	4c3c      	ldr	r4, [pc, #240]	; (8008da8 <rt_test_010_003_execute+0xf8>)
 8008cb8:	2730      	movs	r7, #48	; 0x30
static void rt_test_010_003_execute(void) {
 8008cba:	b082      	sub	sp, #8
  test_set_step(1);
 8008cbc:	6023      	str	r3, [r4, #0]
 8008cbe:	f387 8811 	msr	BASEPRI, r7
 *
 * @iclass
 */
static inline eventmask_t chEvtAddEventsI(eventmask_t events) {

  return __sch_get_currthread()->epending |= events;
 8008cc2:	4e3a      	ldr	r6, [pc, #232]	; (8008dac <rt_test_010_003_execute+0xfc>)
 8008cc4:	2500      	movs	r5, #0
 8008cc6:	68f2      	ldr	r2, [r6, #12]
 8008cc8:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8008cca:	f043 0307 	orr.w	r3, r3, #7
 8008cce:	63d3      	str	r3, [r2, #60]	; 0x3c
 8008cd0:	f385 8811 	msr	BASEPRI, r5
  test_set_step(2);
 8008cd4:	2302      	movs	r3, #2
 8008cd6:	6023      	str	r3, [r4, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 8008cd8:	f005 fdca 	bl	800e870 <chEvtWaitOne.constprop.0>
  if (!condition) {
 8008cdc:	2801      	cmp	r0, #1
 8008cde:	d148      	bne.n	8008d72 <rt_test_010_003_execute+0xc2>
    m = chEvtWaitOne(ALL_EVENTS);
 8008ce0:	f005 fdc6 	bl	800e870 <chEvtWaitOne.constprop.0>
 8008ce4:	2802      	cmp	r0, #2
 8008ce6:	d144      	bne.n	8008d72 <rt_test_010_003_execute+0xc2>
    m = chEvtWaitOne(ALL_EVENTS);
 8008ce8:	f005 fdc2 	bl	800e870 <chEvtWaitOne.constprop.0>
 8008cec:	2804      	cmp	r0, #4
 8008cee:	4680      	mov	r8, r0
 8008cf0:	d13f      	bne.n	8008d72 <rt_test_010_003_execute+0xc2>
 8008cf2:	f387 8811 	msr	BASEPRI, r7
 8008cf6:	68f3      	ldr	r3, [r6, #12]
  m = currtp->epending & events;
 8008cf8:	f8d3 903c 	ldr.w	r9, [r3, #60]	; 0x3c
  currtp->epending &= ~events;
 8008cfc:	63dd      	str	r5, [r3, #60]	; 0x3c
 8008cfe:	f385 8811 	msr	BASEPRI, r5
 8008d02:	f1b9 0f00 	cmp.w	r9, #0
 8008d06:	d13c      	bne.n	8008d82 <rt_test_010_003_execute+0xd2>
  test_set_step(3);
 8008d08:	2303      	movs	r3, #3
 8008d0a:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8008d0c:	f7ff feb8 	bl	8008a80 <test_wait_tick>
 8008d10:	68f3      	ldr	r3, [r6, #12]
 8008d12:	4682      	mov	sl, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008d14:	689a      	ldr	r2, [r3, #8]
 8008d16:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8008d1a:	9300      	str	r3, [sp, #0]
 8008d1c:	3a01      	subs	r2, #1
 8008d1e:	4b24      	ldr	r3, [pc, #144]	; (8008db0 <rt_test_010_003_execute+0x100>)
 8008d20:	4824      	ldr	r0, [pc, #144]	; (8008db4 <rt_test_010_003_execute+0x104>)
 8008d22:	f7fb fc95 	bl	8004650 <chThdCreateStatic>
 8008d26:	4d24      	ldr	r5, [pc, #144]	; (8008db8 <rt_test_010_003_execute+0x108>)
  test_set_step(4);
 8008d28:	f8c4 8000 	str.w	r8, [r4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008d2c:	6028      	str	r0, [r5, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 8008d2e:	f005 fd9f 	bl	800e870 <chEvtWaitOne.constprop.0>
 8008d32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d38:	3b64      	subs	r3, #100	; 0x64
 8008d3a:	eba3 030a 	sub.w	r3, r3, sl
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	2b03      	cmp	r3, #3
 8008d42:	d82a      	bhi.n	8008d9a <rt_test_010_003_execute+0xea>
 8008d44:	2801      	cmp	r0, #1
 8008d46:	d122      	bne.n	8008d8e <rt_test_010_003_execute+0xde>
 8008d48:	f387 8811 	msr	BASEPRI, r7
 8008d4c:	68f3      	ldr	r3, [r6, #12]
  m = currtp->epending & events;
 8008d4e:	6bde      	ldr	r6, [r3, #60]	; 0x3c
  currtp->epending &= ~events;
 8008d50:	f8c3 903c 	str.w	r9, [r3, #60]	; 0x3c
 8008d54:	f389 8811 	msr	BASEPRI, r9
 8008d58:	b99e      	cbnz	r6, 8008d82 <rt_test_010_003_execute+0xd2>
 8008d5a:	f105 0414 	add.w	r4, r5, #20
    if (threads[i] != NULL) {
 8008d5e:	f855 0b04 	ldr.w	r0, [r5], #4
 8008d62:	b118      	cbz	r0, 8008d6c <rt_test_010_003_execute+0xbc>
      chThdWait(threads[i]);
 8008d64:	f7fc fe5c 	bl	8005a20 <chThdWait>
      threads[i] = NULL;
 8008d68:	f845 6c04 	str.w	r6, [r5, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8008d6c:	42ac      	cmp	r4, r5
 8008d6e:	d1f6      	bne.n	8008d5e <rt_test_010_003_execute+0xae>
 8008d70:	e004      	b.n	8008d7c <rt_test_010_003_execute+0xcc>
  chtest.global_fail     = true;
 8008d72:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8008d76:	4a11      	ldr	r2, [pc, #68]	; (8008dbc <rt_test_010_003_execute+0x10c>)
  chtest.global_fail     = true;
 8008d78:	80a3      	strh	r3, [r4, #4]
  chtest.failure_message = msg;
 8008d7a:	60a2      	str	r2, [r4, #8]
}
 8008d7c:	b002      	add	sp, #8
 8008d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  chtest.global_fail     = true;
 8008d82:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8008d86:	4a0e      	ldr	r2, [pc, #56]	; (8008dc0 <rt_test_010_003_execute+0x110>)
  chtest.global_fail     = true;
 8008d88:	80a3      	strh	r3, [r4, #4]
  chtest.failure_message = msg;
 8008d8a:	60a2      	str	r2, [r4, #8]
 8008d8c:	e7f6      	b.n	8008d7c <rt_test_010_003_execute+0xcc>
  chtest.global_fail     = true;
 8008d8e:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8008d92:	4a0c      	ldr	r2, [pc, #48]	; (8008dc4 <rt_test_010_003_execute+0x114>)
  chtest.global_fail     = true;
 8008d94:	80a3      	strh	r3, [r4, #4]
  chtest.failure_message = msg;
 8008d96:	60a2      	str	r2, [r4, #8]
 8008d98:	e7f0      	b.n	8008d7c <rt_test_010_003_execute+0xcc>
  chtest.global_fail     = true;
 8008d9a:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8008d9e:	4a0a      	ldr	r2, [pc, #40]	; (8008dc8 <rt_test_010_003_execute+0x118>)
  chtest.global_fail     = true;
 8008da0:	80a3      	strh	r3, [r4, #4]
  chtest.failure_message = msg;
 8008da2:	60a2      	str	r2, [r4, #8]
 8008da4:	e7ea      	b.n	8008d7c <rt_test_010_003_execute+0xcc>
 8008da6:	bf00      	nop
 8008da8:	200010f4 	.word	0x200010f4
 8008dac:	20001050 	.word	0x20001050
 8008db0:	080042e1 	.word	0x080042e1
 8008db4:	20001240 	.word	0x20001240
 8008db8:	20001ab0 	.word	0x20001ab0
 8008dbc:	08010fbc 	.word	0x08010fbc
 8008dc0:	0801036c 	.word	0x0801036c
 8008dc4:	08010fd0 	.word	0x08010fd0
 8008dc8:	080101c0 	.word	0x080101c0
 8008dcc:	00000000 	.word	0x00000000

08008dd0 <rt_test_010_004_execute>:
static void rt_test_010_004_execute(void) {
 8008dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8008dd4:	2701      	movs	r7, #1
 8008dd6:	4d55      	ldr	r5, [pc, #340]	; (8008f2c <rt_test_010_004_execute+0x15c>)
 8008dd8:	2230      	movs	r2, #48	; 0x30
static void rt_test_010_004_execute(void) {
 8008dda:	b082      	sub	sp, #8
  test_set_step(1);
 8008ddc:	602f      	str	r7, [r5, #0]
 8008dde:	f382 8811 	msr	BASEPRI, r2
 8008de2:	4c53      	ldr	r4, [pc, #332]	; (8008f30 <rt_test_010_004_execute+0x160>)
 8008de4:	2000      	movs	r0, #0
 8008de6:	68e1      	ldr	r1, [r4, #12]
 8008de8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8008dea:	f043 0305 	orr.w	r3, r3, #5
 8008dee:	63cb      	str	r3, [r1, #60]	; 0x3c
 8008df0:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 8008df4:	2302      	movs	r3, #2
 8008df6:	68e6      	ldr	r6, [r4, #12]
 8008df8:	602b      	str	r3, [r5, #0]
 8008dfa:	f382 8811 	msr	BASEPRI, r2
  m = currtp->epending & events;
 8008dfe:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
  if (m == (eventmask_t)0) {
 8008e00:	2a00      	cmp	r2, #0
 8008e02:	d057      	beq.n	8008eb4 <rt_test_010_004_execute+0xe4>
  currtp->epending &= ~m;
 8008e04:	2300      	movs	r3, #0
 8008e06:	63f3      	str	r3, [r6, #60]	; 0x3c
 8008e08:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 8008e0c:	2a05      	cmp	r2, #5
 8008e0e:	d149      	bne.n	8008ea4 <rt_test_010_004_execute+0xd4>
 8008e10:	2630      	movs	r6, #48	; 0x30
 8008e12:	f386 8811 	msr	BASEPRI, r6
 8008e16:	68e2      	ldr	r2, [r4, #12]
  m = currtp->epending & events;
 8008e18:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
  currtp->epending &= ~events;
 8008e1a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8008e1c:	f383 8811 	msr	BASEPRI, r3
 8008e20:	2900      	cmp	r1, #0
 8008e22:	d159      	bne.n	8008ed8 <rt_test_010_004_execute+0x108>
  test_set_step(3);
 8008e24:	2303      	movs	r3, #3
 8008e26:	602b      	str	r3, [r5, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8008e28:	f7ff fe2a 	bl	8008a80 <test_wait_tick>
 8008e2c:	68e3      	ldr	r3, [r4, #12]
 8008e2e:	4607      	mov	r7, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008e30:	689a      	ldr	r2, [r3, #8]
 8008e32:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8008e36:	9300      	str	r3, [sp, #0]
 8008e38:	3a01      	subs	r2, #1
 8008e3a:	4b3e      	ldr	r3, [pc, #248]	; (8008f34 <rt_test_010_004_execute+0x164>)
 8008e3c:	483e      	ldr	r0, [pc, #248]	; (8008f38 <rt_test_010_004_execute+0x168>)
 8008e3e:	f7fb fc07 	bl	8004650 <chThdCreateStatic>
  test_set_step(4);
 8008e42:	2304      	movs	r3, #4
 8008e44:	602b      	str	r3, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008e46:	4b3d      	ldr	r3, [pc, #244]	; (8008f3c <rt_test_010_004_execute+0x16c>)
 8008e48:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8008e4c:	6018      	str	r0, [r3, #0]
 8008e4e:	f386 8811 	msr	BASEPRI, r6
  m = currtp->epending & events;
 8008e52:	f8d8 203c 	ldr.w	r2, [r8, #60]	; 0x3c
  if (m == (eventmask_t)0) {
 8008e56:	2a00      	cmp	r2, #0
 8008e58:	d04c      	beq.n	8008ef4 <rt_test_010_004_execute+0x124>
  currtp->epending &= ~m;
 8008e5a:	2100      	movs	r1, #0
 8008e5c:	f8c8 103c 	str.w	r1, [r8, #60]	; 0x3c
 8008e60:	f381 8811 	msr	BASEPRI, r1
 8008e64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6a:	3b64      	subs	r3, #100	; 0x64
 8008e6c:	1bd8      	subs	r0, r3, r7
 8008e6e:	b280      	uxth	r0, r0
 8008e70:	2803      	cmp	r0, #3
 8008e72:	d839      	bhi.n	8008ee8 <rt_test_010_004_execute+0x118>
 8008e74:	2a01      	cmp	r2, #1
 8008e76:	d152      	bne.n	8008f1e <rt_test_010_004_execute+0x14e>
 8008e78:	2330      	movs	r3, #48	; 0x30
 8008e7a:	f383 8811 	msr	BASEPRI, r3
 8008e7e:	68e3      	ldr	r3, [r4, #12]
  m = currtp->epending & events;
 8008e80:	6bde      	ldr	r6, [r3, #60]	; 0x3c
  currtp->epending &= ~events;
 8008e82:	63d9      	str	r1, [r3, #60]	; 0x3c
 8008e84:	f381 8811 	msr	BASEPRI, r1
 8008e88:	bb36      	cbnz	r6, 8008ed8 <rt_test_010_004_execute+0x108>
 8008e8a:	4c2c      	ldr	r4, [pc, #176]	; (8008f3c <rt_test_010_004_execute+0x16c>)
 8008e8c:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 8008e90:	f854 0b04 	ldr.w	r0, [r4], #4
 8008e94:	b118      	cbz	r0, 8008e9e <rt_test_010_004_execute+0xce>
      chThdWait(threads[i]);
 8008e96:	f7fc fdc3 	bl	8005a20 <chThdWait>
      threads[i] = NULL;
 8008e9a:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8008e9e:	42a5      	cmp	r5, r4
 8008ea0:	d1f6      	bne.n	8008e90 <rt_test_010_004_execute+0xc0>
 8008ea2:	e004      	b.n	8008eae <rt_test_010_004_execute+0xde>
  chtest.global_fail     = true;
 8008ea4:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8008ea8:	4a25      	ldr	r2, [pc, #148]	; (8008f40 <rt_test_010_004_execute+0x170>)
  chtest.global_fail     = true;
 8008eaa:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 8008eac:	60aa      	str	r2, [r5, #8]
}
 8008eae:	b002      	add	sp, #8
 8008eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    currtp->u.ewmask = events;
 8008eb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  otp->state = newstate;
 8008eb8:	230a      	movs	r3, #10
  thread_t *otp = __instance_get_currthread(oip);
 8008eba:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 8008ebc:	6820      	ldr	r0, [r4, #0]
 8008ebe:	62f2      	str	r2, [r6, #44]	; 0x2c
  otp->state = newstate;
 8008ec0:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
  pqp->next       = p->next;
 8008ec4:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 8008ec6:	605c      	str	r4, [r3, #4]
  pqp->next       = p->next;
 8008ec8:	6023      	str	r3, [r4, #0]
  ntp->state = CH_STATE_CURRENT;
 8008eca:	f880 7028 	strb.w	r7, [r0, #40]	; 0x28
  __instance_set_currthread(oip, ntp);
 8008ece:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8008ed0:	f7f7 f9b6 	bl	8000240 <__port_switch>
    m = currtp->epending & events;
 8008ed4:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8008ed6:	e795      	b.n	8008e04 <rt_test_010_004_execute+0x34>
  chtest.global_fail     = true;
 8008ed8:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8008edc:	4a19      	ldr	r2, [pc, #100]	; (8008f44 <rt_test_010_004_execute+0x174>)
  chtest.global_fail     = true;
 8008ede:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 8008ee0:	60aa      	str	r2, [r5, #8]
 8008ee2:	b002      	add	sp, #8
 8008ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  chtest.global_fail     = true;
 8008ee8:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8008eec:	4a16      	ldr	r2, [pc, #88]	; (8008f48 <rt_test_010_004_execute+0x178>)
  chtest.global_fail     = true;
 8008eee:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 8008ef0:	60aa      	str	r2, [r5, #8]
 8008ef2:	e7dc      	b.n	8008eae <rt_test_010_004_execute+0xde>
  otp->state = newstate;
 8008ef4:	230a      	movs	r3, #10
    currtp->u.ewmask = events;
 8008ef6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  ntp->state = CH_STATE_CURRENT;
 8008efa:	2201      	movs	r2, #1
  thread_t *otp = __instance_get_currthread(oip);
 8008efc:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 8008efe:	6820      	ldr	r0, [r4, #0]
 8008f00:	f8c8 602c 	str.w	r6, [r8, #44]	; 0x2c
  otp->state = newstate;
 8008f04:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
  pqp->next       = p->next;
 8008f08:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 8008f0a:	605c      	str	r4, [r3, #4]
  pqp->next       = p->next;
 8008f0c:	6023      	str	r3, [r4, #0]
  ntp->state = CH_STATE_CURRENT;
 8008f0e:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  __instance_set_currthread(oip, ntp);
 8008f12:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8008f14:	f7f7 f994 	bl	8000240 <__port_switch>
    m = currtp->epending & events;
 8008f18:	f8d8 203c 	ldr.w	r2, [r8, #60]	; 0x3c
 8008f1c:	e79d      	b.n	8008e5a <rt_test_010_004_execute+0x8a>
  chtest.global_fail     = true;
 8008f1e:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 8008f22:	4a0a      	ldr	r2, [pc, #40]	; (8008f4c <rt_test_010_004_execute+0x17c>)
  chtest.global_fail     = true;
 8008f24:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 8008f26:	60aa      	str	r2, [r5, #8]
 8008f28:	e7c1      	b.n	8008eae <rt_test_010_004_execute+0xde>
 8008f2a:	bf00      	nop
 8008f2c:	200010f4 	.word	0x200010f4
 8008f30:	20001050 	.word	0x20001050
 8008f34:	080042e1 	.word	0x080042e1
 8008f38:	20001240 	.word	0x20001240
 8008f3c:	20001ab0 	.word	0x20001ab0
 8008f40:	08010fe4 	.word	0x08010fe4
 8008f44:	0801036c 	.word	0x0801036c
 8008f48:	080101c0 	.word	0x080101c0
 8008f4c:	08010fd0 	.word	0x08010fd0

08008f50 <rt_test_010_005_execute>:
static void rt_test_010_005_execute(void) {
 8008f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8008f54:	2701      	movs	r7, #1
 8008f56:	4d54      	ldr	r5, [pc, #336]	; (80090a8 <rt_test_010_005_execute+0x158>)
 8008f58:	2230      	movs	r2, #48	; 0x30
static void rt_test_010_005_execute(void) {
 8008f5a:	b082      	sub	sp, #8
  test_set_step(1);
 8008f5c:	602f      	str	r7, [r5, #0]
 8008f5e:	f382 8811 	msr	BASEPRI, r2
 8008f62:	4c52      	ldr	r4, [pc, #328]	; (80090ac <rt_test_010_005_execute+0x15c>)
 8008f64:	2000      	movs	r0, #0
 8008f66:	68e1      	ldr	r1, [r4, #12]
 8008f68:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8008f6a:	f043 0305 	orr.w	r3, r3, #5
 8008f6e:	63cb      	str	r3, [r1, #60]	; 0x3c
 8008f70:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 8008f74:	2302      	movs	r3, #2
 8008f76:	68e6      	ldr	r6, [r4, #12]
 8008f78:	602b      	str	r3, [r5, #0]
 8008f7a:	f382 8811 	msr	BASEPRI, r2
  if ((currtp->epending & events) != events) {
 8008f7e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8008f80:	f003 0205 	and.w	r2, r3, #5
 8008f84:	2a05      	cmp	r2, #5
 8008f86:	d00f      	beq.n	8008fa8 <rt_test_010_005_execute+0x58>
    currtp->u.ewmask = events;
 8008f88:	2205      	movs	r2, #5
  otp->state = newstate;
 8008f8a:	230b      	movs	r3, #11
  thread_t *otp = __instance_get_currthread(oip);
 8008f8c:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 8008f8e:	6820      	ldr	r0, [r4, #0]
 8008f90:	62f2      	str	r2, [r6, #44]	; 0x2c
  otp->state = newstate;
 8008f92:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
  pqp->next       = p->next;
 8008f96:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 8008f98:	605c      	str	r4, [r3, #4]
  pqp->next       = p->next;
 8008f9a:	6023      	str	r3, [r4, #0]
  ntp->state = CH_STATE_CURRENT;
 8008f9c:	f880 7028 	strb.w	r7, [r0, #40]	; 0x28
  __instance_set_currthread(oip, ntp);
 8008fa0:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8008fa2:	f7f7 f94d 	bl	8000240 <__port_switch>
  currtp->epending &= ~events;
 8008fa6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8008fa8:	f023 0305 	bic.w	r3, r3, #5
 8008fac:	2200      	movs	r2, #0
 8008fae:	63f3      	str	r3, [r6, #60]	; 0x3c
 8008fb0:	f382 8811 	msr	BASEPRI, r2
 8008fb4:	2630      	movs	r6, #48	; 0x30
 8008fb6:	f386 8811 	msr	BASEPRI, r6
 8008fba:	68e3      	ldr	r3, [r4, #12]
  m = currtp->epending & events;
 8008fbc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  currtp->epending &= ~events;
 8008fbe:	63da      	str	r2, [r3, #60]	; 0x3c
 8008fc0:	f382 8811 	msr	BASEPRI, r2
  if (!condition) {
 8008fc4:	2900      	cmp	r1, #0
 8008fc6:	d167      	bne.n	8009098 <rt_test_010_005_execute+0x148>
  test_set_step(3);
 8008fc8:	2303      	movs	r3, #3
 8008fca:	602b      	str	r3, [r5, #0]
 8008fcc:	f386 8811 	msr	BASEPRI, r6
 8008fd0:	68e2      	ldr	r2, [r4, #12]
 8008fd2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8008fd4:	f043 0304 	orr.w	r3, r3, #4
 8008fd8:	63d3      	str	r3, [r2, #60]	; 0x3c
 8008fda:	f381 8811 	msr	BASEPRI, r1
  test_set_step(4);
 8008fde:	2304      	movs	r3, #4
 8008fe0:	602b      	str	r3, [r5, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8008fe2:	f7ff fd4d 	bl	8008a80 <test_wait_tick>
 8008fe6:	68e3      	ldr	r3, [r4, #12]
 8008fe8:	4607      	mov	r7, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008fea:	689a      	ldr	r2, [r3, #8]
 8008fec:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8008ff0:	9300      	str	r3, [sp, #0]
 8008ff2:	3a01      	subs	r2, #1
 8008ff4:	4b2e      	ldr	r3, [pc, #184]	; (80090b0 <rt_test_010_005_execute+0x160>)
 8008ff6:	482f      	ldr	r0, [pc, #188]	; (80090b4 <rt_test_010_005_execute+0x164>)
 8008ff8:	f7fb fb2a 	bl	8004650 <chThdCreateStatic>
  test_set_step(5);
 8008ffc:	2205      	movs	r2, #5
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008ffe:	4b2e      	ldr	r3, [pc, #184]	; (80090b8 <rt_test_010_005_execute+0x168>)
 8009000:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8009004:	6018      	str	r0, [r3, #0]
  test_set_step(5);
 8009006:	602a      	str	r2, [r5, #0]
 8009008:	f386 8811 	msr	BASEPRI, r6
  if ((currtp->epending & events) != events) {
 800900c:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8009010:	ea03 0102 	and.w	r1, r3, r2
 8009014:	4291      	cmp	r1, r2
 8009016:	d124      	bne.n	8009062 <rt_test_010_005_execute+0x112>
  currtp->epending &= ~events;
 8009018:	f023 0305 	bic.w	r3, r3, #5
 800901c:	2200      	movs	r2, #0
 800901e:	f8c8 303c 	str.w	r3, [r8, #60]	; 0x3c
 8009022:	f382 8811 	msr	BASEPRI, r2
 8009026:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800902a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902c:	3b64      	subs	r3, #100	; 0x64
 800902e:	1bd8      	subs	r0, r3, r7
 8009030:	b280      	uxth	r0, r0
 8009032:	2803      	cmp	r0, #3
 8009034:	d828      	bhi.n	8009088 <rt_test_010_005_execute+0x138>
 8009036:	2330      	movs	r3, #48	; 0x30
 8009038:	f383 8811 	msr	BASEPRI, r3
 800903c:	68e3      	ldr	r3, [r4, #12]
  m = currtp->epending & events;
 800903e:	6bde      	ldr	r6, [r3, #60]	; 0x3c
  currtp->epending &= ~events;
 8009040:	63da      	str	r2, [r3, #60]	; 0x3c
 8009042:	f382 8811 	msr	BASEPRI, r2
 8009046:	bb3e      	cbnz	r6, 8009098 <rt_test_010_005_execute+0x148>
 8009048:	4c1b      	ldr	r4, [pc, #108]	; (80090b8 <rt_test_010_005_execute+0x168>)
 800904a:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 800904e:	f854 0b04 	ldr.w	r0, [r4], #4
 8009052:	b118      	cbz	r0, 800905c <rt_test_010_005_execute+0x10c>
      chThdWait(threads[i]);
 8009054:	f7fc fce4 	bl	8005a20 <chThdWait>
      threads[i] = NULL;
 8009058:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 800905c:	42a5      	cmp	r5, r4
 800905e:	d1f6      	bne.n	800904e <rt_test_010_005_execute+0xfe>
 8009060:	e017      	b.n	8009092 <rt_test_010_005_execute+0x142>
  otp->state = newstate;
 8009062:	230b      	movs	r3, #11
    currtp->u.ewmask = events;
 8009064:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
  ntp->state = CH_STATE_CURRENT;
 8009068:	2201      	movs	r2, #1
  thread_t *otp = __instance_get_currthread(oip);
 800906a:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 800906c:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 800906e:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
  pqp->next       = p->next;
 8009072:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 8009074:	605c      	str	r4, [r3, #4]
  pqp->next       = p->next;
 8009076:	6023      	str	r3, [r4, #0]
  ntp->state = CH_STATE_CURRENT;
 8009078:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  __instance_set_currthread(oip, ntp);
 800907c:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 800907e:	f7f7 f8df 	bl	8000240 <__port_switch>
  currtp->epending &= ~events;
 8009082:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
}
 8009086:	e7c7      	b.n	8009018 <rt_test_010_005_execute+0xc8>
  chtest.global_fail     = true;
 8009088:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800908c:	4a0b      	ldr	r2, [pc, #44]	; (80090bc <rt_test_010_005_execute+0x16c>)
  chtest.global_fail     = true;
 800908e:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 8009090:	60aa      	str	r2, [r5, #8]
}
 8009092:	b002      	add	sp, #8
 8009094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  chtest.global_fail     = true;
 8009098:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800909c:	4a08      	ldr	r2, [pc, #32]	; (80090c0 <rt_test_010_005_execute+0x170>)
  chtest.global_fail     = true;
 800909e:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 80090a0:	60aa      	str	r2, [r5, #8]
 80090a2:	b002      	add	sp, #8
 80090a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090a8:	200010f4 	.word	0x200010f4
 80090ac:	20001050 	.word	0x20001050
 80090b0:	080042e1 	.word	0x080042e1
 80090b4:	20001240 	.word	0x20001240
 80090b8:	20001ab0 	.word	0x20001ab0
 80090bc:	080101c0 	.word	0x080101c0
 80090c0:	0801036c 	.word	0x0801036c
	...

080090d0 <rt_test_012_007_setup.lto_priv.0>:
  sp->cnt = n;
 80090d0:	2200      	movs	r2, #0
  qp->next = qp;
 80090d2:	4b02      	ldr	r3, [pc, #8]	; (80090dc <rt_test_012_007_setup.lto_priv.0+0xc>)
  qp->prev = qp;
 80090d4:	e9c3 3300 	strd	r3, r3, [r3]
 80090d8:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_012_007_setup(void) {
  chSemObjectInit(&sem1, 0);
}
 80090da:	4770      	bx	lr
 80090dc:	20001230 	.word	0x20001230

080090e0 <rt_test_012_010_setup.lto_priv.0>:
 80090e0:	2201      	movs	r2, #1
  qp->next = qp;
 80090e2:	4b02      	ldr	r3, [pc, #8]	; (80090ec <rt_test_012_010_setup.lto_priv.0+0xc>)
  qp->prev = qp;
 80090e4:	e9c3 3300 	strd	r3, r3, [r3]
 80090e8:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_012_010_setup(void) {
  chSemObjectInit(&sem1, 1);
}
 80090ea:	4770      	bx	lr
 80090ec:	20001230 	.word	0x20001230

080090f0 <rt_test_012_011_setup.lto_priv.0>:
  mp->owner = NULL;
 80090f0:	2200      	movs	r2, #0
  qp->next = qp;
 80090f2:	4b02      	ldr	r3, [pc, #8]	; (80090fc <rt_test_012_011_setup.lto_priv.0+0xc>)
  qp->prev = qp;
 80090f4:	e9c3 3300 	strd	r3, r3, [r3]
 80090f8:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_012_011_setup(void) {
  chMtxObjectInit(&mtx1);
}
 80090fa:	4770      	bx	lr
 80090fc:	200024cc 	.word	0x200024cc

08009100 <oslib_test_002_003_setup.lto_priv.0>:
  mbp->cnt    = (size_t)0;
 8009100:	2100      	movs	r1, #0
 *   active state.
 * - [2.3.4] Testing chMBFetchTimeout() and chMBFetchI() timeout.
 * .
 */

static void oslib_test_002_003_setup(void) {
 8009102:	b430      	push	{r4, r5}
  mbp->buffer = buf;
 8009104:	4b09      	ldr	r3, [pc, #36]	; (800912c <oslib_test_002_003_setup.lto_priv.0+0x2c>)
 8009106:	4a0a      	ldr	r2, [pc, #40]	; (8009130 <oslib_test_002_003_setup.lto_priv.0+0x30>)
  qp->next = qp;
 8009108:	f103 0418 	add.w	r4, r3, #24
  mbp->top    = &buf[n];
 800910c:	f102 0510 	add.w	r5, r2, #16
 8009110:	f103 0020 	add.w	r0, r3, #32
  mbp->buffer = buf;
 8009114:	e9c3 2500 	strd	r2, r5, [r3]
  qp->prev = qp;
 8009118:	e9c3 4406 	strd	r4, r4, [r3, #24]
  chMBObjectInit(&mb1, mb_buffer, MB_SIZE);
}
 800911c:	bc30      	pop	{r4, r5}
  mbp->wrptr  = buf;
 800911e:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8009122:	e9c3 0008 	strd	r0, r0, [r3, #32]
  mbp->cnt    = (size_t)0;
 8009126:	6119      	str	r1, [r3, #16]
  mbp->reset  = false;
 8009128:	7519      	strb	r1, [r3, #20]
 800912a:	4770      	bx	lr
 800912c:	20000854 	.word	0x20000854
 8009130:	200024ac 	.word	0x200024ac
	...

08009140 <oslib_test_002_001_setup.lto_priv.0>:
 8009140:	2100      	movs	r1, #0
 8009142:	b430      	push	{r4, r5}
 8009144:	4b09      	ldr	r3, [pc, #36]	; (800916c <oslib_test_002_001_setup.lto_priv.0+0x2c>)
 8009146:	4a0a      	ldr	r2, [pc, #40]	; (8009170 <oslib_test_002_001_setup.lto_priv.0+0x30>)
 8009148:	f103 0418 	add.w	r4, r3, #24
 800914c:	f102 0510 	add.w	r5, r2, #16
 8009150:	f103 0020 	add.w	r0, r3, #32
 8009154:	e9c3 2500 	strd	r2, r5, [r3]
 8009158:	e9c3 4406 	strd	r4, r4, [r3, #24]
 800915c:	bc30      	pop	{r4, r5}
 800915e:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8009162:	e9c3 0008 	strd	r0, r0, [r3, #32]
 8009166:	6119      	str	r1, [r3, #16]
 8009168:	7519      	strb	r1, [r3, #20]
 800916a:	4770      	bx	lr
 800916c:	20000854 	.word	0x20000854
 8009170:	200024ac 	.word	0x200024ac
	...

08009180 <oslib_test_002_002_setup.lto_priv.0>:
 8009180:	2100      	movs	r1, #0
 8009182:	b430      	push	{r4, r5}
 8009184:	4b09      	ldr	r3, [pc, #36]	; (80091ac <oslib_test_002_002_setup.lto_priv.0+0x2c>)
 8009186:	4a0a      	ldr	r2, [pc, #40]	; (80091b0 <oslib_test_002_002_setup.lto_priv.0+0x30>)
 8009188:	f103 0418 	add.w	r4, r3, #24
 800918c:	f102 0510 	add.w	r5, r2, #16
 8009190:	f103 0020 	add.w	r0, r3, #32
 8009194:	e9c3 2500 	strd	r2, r5, [r3]
 8009198:	e9c3 4406 	strd	r4, r4, [r3, #24]
 800919c:	bc30      	pop	{r4, r5}
 800919e:	e9c3 2202 	strd	r2, r2, [r3, #8]
 80091a2:	e9c3 0008 	strd	r0, r0, [r3, #32]
 80091a6:	6119      	str	r1, [r3, #16]
 80091a8:	7519      	strb	r1, [r3, #20]
 80091aa:	4770      	bx	lr
 80091ac:	20000854 	.word	0x20000854
 80091b0:	200024ac 	.word	0x200024ac
	...

080091c0 <oslib_test_003_001_setup.lto_priv.0>:

  pp->buffer = buf;
  pp->rdptr  = buf;
  pp->wrptr  = buf;
  pp->top    = &buf[n];
  pp->cnt    = (size_t)0;
 80091c0:	2200      	movs	r2, #0
 * - [3.1.13] Write wrapping buffer boundary.
 * - [3.1.14] Read wrapping buffer boundary.
 * .
 */

static void oslib_test_003_001_setup(void) {
 80091c2:	b430      	push	{r4, r5}
  pp->buffer = buf;
 80091c4:	490e      	ldr	r1, [pc, #56]	; (8009200 <oslib_test_003_001_setup.lto_priv.0+0x40>)
 80091c6:	4b0f      	ldr	r3, [pc, #60]	; (8009204 <oslib_test_003_001_setup.lto_priv.0+0x44>)
  pp->top    = &buf[n];
 80091c8:	f101 0510 	add.w	r5, r1, #16
  pp->buffer = buf;
 80091cc:	e9c3 1500 	strd	r1, r5, [r3]
  qp->next = qp;
 80091d0:	f103 0420 	add.w	r4, r3, #32
  pp->wrptr  = buf;
 80091d4:	e9c3 1102 	strd	r1, r1, [r3, #8]
 80091d8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80091dc:	f103 0140 	add.w	r1, r3, #64	; 0x40
  qp->prev = qp;
 80091e0:	e9c3 4408 	strd	r4, r4, [r3, #32]
  chPipeObjectInit(&pipe1, buffer, PIPE_SIZE);
}
 80091e4:	bc30      	pop	{r4, r5}
 80091e6:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30
 80091ea:	e9c3 1110 	strd	r1, r1, [r3, #64]	; 0x40
  pp->reset  = false;
  pp->wtr    = NULL;
  pp->rtr    = NULL;
 80091ee:	e9c3 2206 	strd	r2, r2, [r3, #24]
  pp->cnt    = (size_t)0;
 80091f2:	611a      	str	r2, [r3, #16]
  pp->reset  = false;
 80091f4:	751a      	strb	r2, [r3, #20]
 80091f6:	629a      	str	r2, [r3, #40]	; 0x28
 80091f8:	639a      	str	r2, [r3, #56]	; 0x38
 80091fa:	649a      	str	r2, [r3, #72]	; 0x48
 80091fc:	4770      	bx	lr
 80091fe:	bf00      	nop
 8009200:	20001d0c 	.word	0x20001d0c
 8009204:	20000894 	.word	0x20000894
	...

08009210 <oslib_test_003_002_setup.lto_priv.0>:
  pp->cnt    = (size_t)0;
 8009210:	2200      	movs	r2, #0
 * - [3.2.1] Reading while pipe is empty.
 * - [3.2.2] Writing a string larger than pipe buffer.
 * .
 */

static void oslib_test_003_002_setup(void) {
 8009212:	b430      	push	{r4, r5}
  pp->buffer = buf;
 8009214:	490e      	ldr	r1, [pc, #56]	; (8009250 <oslib_test_003_002_setup.lto_priv.0+0x40>)
 8009216:	4b0f      	ldr	r3, [pc, #60]	; (8009254 <oslib_test_003_002_setup.lto_priv.0+0x44>)
  pp->top    = &buf[n];
 8009218:	f101 0508 	add.w	r5, r1, #8
  pp->buffer = buf;
 800921c:	e9c3 1500 	strd	r1, r5, [r3]
  qp->next = qp;
 8009220:	f103 0420 	add.w	r4, r3, #32
  pp->wrptr  = buf;
 8009224:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8009228:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800922c:	f103 0140 	add.w	r1, r3, #64	; 0x40
  qp->prev = qp;
 8009230:	e9c3 4408 	strd	r4, r4, [r3, #32]
  chPipeObjectInit(&pipe1, buffer, PIPE_SIZE / 2);
}
 8009234:	bc30      	pop	{r4, r5}
 8009236:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30
 800923a:	e9c3 1110 	strd	r1, r1, [r3, #64]	; 0x40
  pp->rtr    = NULL;
 800923e:	e9c3 2206 	strd	r2, r2, [r3, #24]
  pp->cnt    = (size_t)0;
 8009242:	611a      	str	r2, [r3, #16]
  pp->reset  = false;
 8009244:	751a      	strb	r2, [r3, #20]
 8009246:	629a      	str	r2, [r3, #40]	; 0x28
 8009248:	639a      	str	r2, [r3, #56]	; 0x38
 800924a:	649a      	str	r2, [r3, #72]	; 0x48
 800924c:	4770      	bx	lr
 800924e:	bf00      	nop
 8009250:	20001d0c 	.word	0x20001d0c
 8009254:	20000894 	.word	0x20000894
	...

08009260 <dis_func0>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8009260:	4b06      	ldr	r3, [pc, #24]	; (800927c <dis_func0+0x1c>)
 8009262:	68da      	ldr	r2, [r3, #12]
 8009264:	f103 0120 	add.w	r1, r3, #32
 8009268:	428a      	cmp	r2, r1
 800926a:	d203      	bcs.n	8009274 <dis_func0+0x14>
    *chtest.tokp++ = token;
 800926c:	2130      	movs	r1, #48	; 0x30
 800926e:	1c50      	adds	r0, r2, #1
 8009270:	60d8      	str	r0, [r3, #12]
 8009272:	7011      	strb	r1, [r2, #0]
static int dis_func0(void) {

  test_emit_token('0');

  return (msg_t)0x55AA;
}
 8009274:	f245 50aa 	movw	r0, #21930	; 0x55aa
 8009278:	4770      	bx	lr
 800927a:	bf00      	nop
 800927c:	200010f4 	.word	0x200010f4

08009280 <dis_func1>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8009280:	4b04      	ldr	r3, [pc, #16]	; (8009294 <dis_func1+0x14>)
 8009282:	68da      	ldr	r2, [r3, #12]
 8009284:	f103 0120 	add.w	r1, r3, #32
 8009288:	428a      	cmp	r2, r1
 800928a:	d202      	bcs.n	8009292 <dis_func1+0x12>
    *chtest.tokp++ = token;
 800928c:	1c51      	adds	r1, r2, #1
 800928e:	60d9      	str	r1, [r3, #12]

static msg_t dis_func1(msg_t a) {

  test_emit_token((char)a);
 8009290:	7010      	strb	r0, [r2, #0]

  return (msg_t)a;
}
 8009292:	4770      	bx	lr
 8009294:	200010f4 	.word	0x200010f4
	...

080092a0 <dis_func2>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 80092a0:	4b09      	ldr	r3, [pc, #36]	; (80092c8 <dis_func2+0x28>)
 80092a2:	68da      	ldr	r2, [r3, #12]
 80092a4:	f103 0c20 	add.w	ip, r3, #32
 80092a8:	4562      	cmp	r2, ip
 80092aa:	d20c      	bcs.n	80092c6 <dis_func2+0x26>

static msg_t dis_func2(msg_t a, msg_t b) {
 80092ac:	b410      	push	{r4}
    *chtest.tokp++ = token;
 80092ae:	1c54      	adds	r4, r2, #1
 80092b0:	60dc      	str	r4, [r3, #12]

  test_emit_token((char)a);
 80092b2:	7010      	strb	r0, [r2, #0]
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 80092b4:	68da      	ldr	r2, [r3, #12]
  test_emit_token((char)b);
 80092b6:	b2c9      	uxtb	r1, r1
 80092b8:	4562      	cmp	r2, ip
 80092ba:	d202      	bcs.n	80092c2 <dis_func2+0x22>
    *chtest.tokp++ = token;
 80092bc:	1c54      	adds	r4, r2, #1
 80092be:	60dc      	str	r4, [r3, #12]
 80092c0:	7011      	strb	r1, [r2, #0]

  return (msg_t)a;
}
 80092c2:	bc10      	pop	{r4}
 80092c4:	4770      	bx	lr
 80092c6:	4770      	bx	lr
 80092c8:	200010f4 	.word	0x200010f4
 80092cc:	00000000 	.word	0x00000000

080092d0 <dis_func3>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 80092d0:	4b0c      	ldr	r3, [pc, #48]	; (8009304 <dis_func3+0x34>)

static msg_t dis_func3(msg_t a, msg_t b, msg_t c) {
 80092d2:	b430      	push	{r4, r5}
 80092d4:	68dc      	ldr	r4, [r3, #12]
 80092d6:	f103 0c20 	add.w	ip, r3, #32
 80092da:	4564      	cmp	r4, ip
 80092dc:	d210      	bcs.n	8009300 <dis_func3+0x30>
    *chtest.tokp++ = token;
 80092de:	1c65      	adds	r5, r4, #1
 80092e0:	60dd      	str	r5, [r3, #12]

  test_emit_token((char)a);
 80092e2:	7020      	strb	r0, [r4, #0]
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 80092e4:	68dc      	ldr	r4, [r3, #12]
  test_emit_token((char)b);
 80092e6:	b2c9      	uxtb	r1, r1
 80092e8:	4564      	cmp	r4, ip
 80092ea:	d209      	bcs.n	8009300 <dis_func3+0x30>
    *chtest.tokp++ = token;
 80092ec:	1c65      	adds	r5, r4, #1
 80092ee:	60dd      	str	r5, [r3, #12]
 80092f0:	7021      	strb	r1, [r4, #0]
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 80092f2:	68d9      	ldr	r1, [r3, #12]
  test_emit_token((char)c);
 80092f4:	b2d2      	uxtb	r2, r2
 80092f6:	4561      	cmp	r1, ip
 80092f8:	d202      	bcs.n	8009300 <dis_func3+0x30>
    *chtest.tokp++ = token;
 80092fa:	1c4c      	adds	r4, r1, #1
 80092fc:	60dc      	str	r4, [r3, #12]
 80092fe:	700a      	strb	r2, [r1, #0]

  return (msg_t)a;
}
 8009300:	bc30      	pop	{r4, r5}
 8009302:	4770      	bx	lr
 8009304:	200010f4 	.word	0x200010f4
	...

08009310 <dis_func4>:

static msg_t dis_func4(msg_t a, msg_t b, msg_t c, msg_t d) {
 8009310:	b470      	push	{r4, r5, r6}
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8009312:	4c10      	ldr	r4, [pc, #64]	; (8009354 <dis_func4+0x44>)
 8009314:	68e5      	ldr	r5, [r4, #12]
 8009316:	f104 0c20 	add.w	ip, r4, #32
 800931a:	4565      	cmp	r5, ip
 800931c:	d217      	bcs.n	800934e <dis_func4+0x3e>
    *chtest.tokp++ = token;
 800931e:	1c6e      	adds	r6, r5, #1
 8009320:	60e6      	str	r6, [r4, #12]

  test_emit_token((char)a);
 8009322:	7028      	strb	r0, [r5, #0]
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8009324:	68e5      	ldr	r5, [r4, #12]
  test_emit_token((char)b);
 8009326:	b2c9      	uxtb	r1, r1
 8009328:	4565      	cmp	r5, ip
 800932a:	d210      	bcs.n	800934e <dis_func4+0x3e>
    *chtest.tokp++ = token;
 800932c:	1c6e      	adds	r6, r5, #1
 800932e:	60e6      	str	r6, [r4, #12]
 8009330:	7029      	strb	r1, [r5, #0]
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8009332:	68e1      	ldr	r1, [r4, #12]
  test_emit_token((char)c);
 8009334:	b2d2      	uxtb	r2, r2
 8009336:	4561      	cmp	r1, ip
 8009338:	d209      	bcs.n	800934e <dis_func4+0x3e>
    *chtest.tokp++ = token;
 800933a:	1c4d      	adds	r5, r1, #1
 800933c:	60e5      	str	r5, [r4, #12]
 800933e:	700a      	strb	r2, [r1, #0]
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8009340:	68e2      	ldr	r2, [r4, #12]
  test_emit_token((char)d);
 8009342:	b2db      	uxtb	r3, r3
 8009344:	4562      	cmp	r2, ip
 8009346:	d202      	bcs.n	800934e <dis_func4+0x3e>
    *chtest.tokp++ = token;
 8009348:	1c51      	adds	r1, r2, #1
 800934a:	60e1      	str	r1, [r4, #12]
 800934c:	7013      	strb	r3, [r2, #0]

  return (msg_t)a;
}
 800934e:	bc70      	pop	{r4, r5, r6}
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	200010f4 	.word	0x200010f4
	...

08009360 <dis_func_end>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8009360:	4b07      	ldr	r3, [pc, #28]	; (8009380 <dis_func_end+0x20>)
 8009362:	68da      	ldr	r2, [r3, #12]
 8009364:	f103 0120 	add.w	r1, r3, #32
 8009368:	428a      	cmp	r2, r1
 800936a:	d203      	bcs.n	8009374 <dis_func_end+0x14>
    *chtest.tokp++ = token;
 800936c:	215a      	movs	r1, #90	; 0x5a
 800936e:	1c50      	adds	r0, r2, #1
 8009370:	60d8      	str	r0, [r3, #12]
 8009372:	7011      	strb	r1, [r2, #0]

static int dis_func_end(void) {

  test_emit_token('Z');
  exit_flag = true;
 8009374:	2201      	movs	r2, #1
 8009376:	4b03      	ldr	r3, [pc, #12]	; (8009384 <dis_func_end+0x24>)

  return (msg_t)0xAA55;
}
 8009378:	f64a 2055 	movw	r0, #43605	; 0xaa55
  exit_flag = true;
 800937c:	701a      	strb	r2, [r3, #0]
}
 800937e:	4770      	bx	lr
 8009380:	200010f4 	.word	0x200010f4
 8009384:	20001edc 	.word	0x20001edc
	...

08009390 <obj_write>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8009390:	4b06      	ldr	r3, [pc, #24]	; (80093ac <obj_write+0x1c>)
 8009392:	68da      	ldr	r2, [r3, #12]
 8009394:	f103 0020 	add.w	r0, r3, #32
 8009398:	4282      	cmp	r2, r0
 800939a:	d204      	bcs.n	80093a6 <obj_write+0x16>
                      oc_object_t *objp,
                      bool async) {
  (void)ocp;
  (void)async;

  test_emit_token('A' + objp->obj_key);
 800939c:	6949      	ldr	r1, [r1, #20]
    *chtest.tokp++ = token;
 800939e:	1c50      	adds	r0, r2, #1
 80093a0:	3141      	adds	r1, #65	; 0x41
 80093a2:	60d8      	str	r0, [r3, #12]
 80093a4:	7011      	strb	r1, [r2, #0]

  return false;
}
 80093a6:	2000      	movs	r0, #0
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	200010f4 	.word	0x200010f4

080093b0 <null_provider>:

  (void)size;
  (void)align;

  return NULL;
}
 80093b0:	2000      	movs	r0, #0
 80093b2:	4770      	bx	lr
	...

080093c0 <oslib_test_007_001_setup.lto_priv.0>:
  mp->next = NULL;
 80093c0:	2200      	movs	r2, #0
  mp->object_size = size;
 80093c2:	2104      	movs	r1, #4
  mp->next = NULL;
 80093c4:	4b02      	ldr	r3, [pc, #8]	; (80093d0 <oslib_test_007_001_setup.lto_priv.0+0x10>)
  mp->object_size = size;
 80093c6:	e9c3 2100 	strd	r2, r1, [r3]
  mp->provider = provider;
 80093ca:	e9c3 1202 	strd	r1, r2, [r3, #8]
 * .
 */

static void oslib_test_007_001_setup(void) {
  chPoolObjectInit(&mp1, sizeof (uint32_t), NULL);
}
 80093ce:	4770      	bx	lr
 80093d0:	2000087c 	.word	0x2000087c
	...

080093e0 <oslib_test_007_001_execute.lto_priv.0>:

static void oslib_test_007_001_execute(void) {
  unsigned i;

  /* [7.1.1] Adding the objects to the pool using chPoolLoadArray().*/
  test_set_step(1);
 80093e0:	2101      	movs	r1, #1
static void oslib_test_007_001_execute(void) {
 80093e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 80093e6:	2204      	movs	r2, #4
 80093e8:	2530      	movs	r5, #48	; 0x30
 80093ea:	2000      	movs	r0, #0
 80093ec:	4f5b      	ldr	r7, [pc, #364]	; (800955c <oslib_test_007_001_execute.lto_priv.0+0x17c>)
 80093ee:	4b5c      	ldr	r3, [pc, #368]	; (8009560 <oslib_test_007_001_execute.lto_priv.0+0x180>)
 80093f0:	4c5c      	ldr	r4, [pc, #368]	; (8009564 <oslib_test_007_001_execute.lto_priv.0+0x184>)
 80093f2:	6039      	str	r1, [r7, #0]
 80093f4:	f385 8811 	msr	BASEPRI, r5
  php->next = mp->next;
 80093f8:	6821      	ldr	r1, [r4, #0]
  mp->next = php;
 80093fa:	6023      	str	r3, [r4, #0]
  php->next = mp->next;
 80093fc:	6019      	str	r1, [r3, #0]
 80093fe:	f380 8811 	msr	BASEPRI, r0
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8009402:	6861      	ldr	r1, [r4, #4]
  while (n != 0U) {
 8009404:	3a01      	subs	r2, #1
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8009406:	440b      	add	r3, r1
  while (n != 0U) {
 8009408:	d1f4      	bne.n	80093f4 <oslib_test_007_001_execute.lto_priv.0+0x14>
    chPoolLoadArray(&mp1, objects, MEMORY_POOL_SIZE);
  }
  test_end_step(1);

  /* [7.1.2] Emptying the pool using chPoolAlloc().*/
  test_set_step(2);
 800940a:	2302      	movs	r3, #2
 800940c:	2604      	movs	r6, #4
 800940e:	4615      	mov	r5, r2
 8009410:	f04f 0830 	mov.w	r8, #48	; 0x30
 8009414:	603b      	str	r3, [r7, #0]
 8009416:	f388 8811 	msr	BASEPRI, r8
  objp = mp->next;
 800941a:	6820      	ldr	r0, [r4, #0]
  if (objp != NULL) {
 800941c:	2800      	cmp	r0, #0
 800941e:	d06f      	beq.n	8009500 <oslib_test_007_001_execute.lto_priv.0+0x120>
    mp->next = mp->next->next;
 8009420:	6803      	ldr	r3, [r0, #0]
 8009422:	6023      	str	r3, [r4, #0]
 8009424:	f385 8811 	msr	BASEPRI, r5
  if (!condition) {
 8009428:	2800      	cmp	r0, #0
 800942a:	d062      	beq.n	80094f2 <oslib_test_007_001_execute.lto_priv.0+0x112>
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800942c:	3e01      	subs	r6, #1
 800942e:	d1f2      	bne.n	8009416 <oslib_test_007_001_execute.lto_priv.0+0x36>
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
  }
  test_end_step(2);

  /* [7.1.3] Now must be empty.*/
  test_set_step(3);
 8009430:	2203      	movs	r2, #3
 8009432:	2330      	movs	r3, #48	; 0x30
 8009434:	603a      	str	r2, [r7, #0]
 8009436:	f383 8811 	msr	BASEPRI, r3
  objp = mp->next;
 800943a:	6820      	ldr	r0, [r4, #0]
  if (objp != NULL) {
 800943c:	2800      	cmp	r0, #0
 800943e:	d071      	beq.n	8009524 <oslib_test_007_001_execute.lto_priv.0+0x144>
    mp->next = mp->next->next;
 8009440:	6803      	ldr	r3, [r0, #0]
 8009442:	6023      	str	r3, [r4, #0]
 8009444:	2300      	movs	r3, #0
 8009446:	f383 8811 	msr	BASEPRI, r3
 800944a:	2800      	cmp	r0, #0
 800944c:	d163      	bne.n	8009516 <oslib_test_007_001_execute.lto_priv.0+0x136>
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
  }
  test_end_step(3);

  /* [7.1.4] Adding the objects to the pool using chPoolFree().*/
  test_set_step(4);
 800944e:	2204      	movs	r2, #4
 8009450:	2630      	movs	r6, #48	; 0x30
 8009452:	2500      	movs	r5, #0
 8009454:	4b42      	ldr	r3, [pc, #264]	; (8009560 <oslib_test_007_001_execute.lto_priv.0+0x180>)
 8009456:	603a      	str	r2, [r7, #0]
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8009458:	f103 0010 	add.w	r0, r3, #16
 800945c:	f386 8811 	msr	BASEPRI, r6
  php->next = mp->next;
 8009460:	6822      	ldr	r2, [r4, #0]
  mp->next = php;
 8009462:	6023      	str	r3, [r4, #0]
  php->next = mp->next;
 8009464:	f843 2b04 	str.w	r2, [r3], #4
 8009468:	f385 8811 	msr	BASEPRI, r5
 800946c:	4298      	cmp	r0, r3
 800946e:	d1f5      	bne.n	800945c <oslib_test_007_001_execute.lto_priv.0+0x7c>
      chPoolFree(&mp1, &objects[i]);
  }
  test_end_step(4);

  /* [7.1.5] Emptying the pool using chPoolAlloc() again.*/
  test_set_step(5);
 8009470:	2305      	movs	r3, #5
 8009472:	2504      	movs	r5, #4
 8009474:	2630      	movs	r6, #48	; 0x30
 8009476:	f04f 0800 	mov.w	r8, #0
 800947a:	603b      	str	r3, [r7, #0]
 800947c:	f386 8811 	msr	BASEPRI, r6
  objp = mp->next;
 8009480:	6820      	ldr	r0, [r4, #0]
  if (objp != NULL) {
 8009482:	2800      	cmp	r0, #0
 8009484:	d031      	beq.n	80094ea <oslib_test_007_001_execute.lto_priv.0+0x10a>
    mp->next = mp->next->next;
 8009486:	6803      	ldr	r3, [r0, #0]
 8009488:	6023      	str	r3, [r4, #0]
 800948a:	f388 8811 	msr	BASEPRI, r8
 800948e:	2800      	cmp	r0, #0
 8009490:	d02f      	beq.n	80094f2 <oslib_test_007_001_execute.lto_priv.0+0x112>
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8009492:	3d01      	subs	r5, #1
 8009494:	d1f2      	bne.n	800947c <oslib_test_007_001_execute.lto_priv.0+0x9c>
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
  }
  test_end_step(5);

  /* [7.1.6] Now must be empty again.*/
  test_set_step(6);
 8009496:	2206      	movs	r2, #6
 8009498:	2330      	movs	r3, #48	; 0x30
 800949a:	603a      	str	r2, [r7, #0]
 800949c:	f383 8811 	msr	BASEPRI, r3
  objp = mp->next;
 80094a0:	6820      	ldr	r0, [r4, #0]
  if (objp != NULL) {
 80094a2:	2800      	cmp	r0, #0
 80094a4:	d044      	beq.n	8009530 <oslib_test_007_001_execute.lto_priv.0+0x150>
    mp->next = mp->next->next;
 80094a6:	6803      	ldr	r3, [r0, #0]
 80094a8:	6023      	str	r3, [r4, #0]
 80094aa:	2300      	movs	r3, #0
 80094ac:	f383 8811 	msr	BASEPRI, r3
 80094b0:	2800      	cmp	r0, #0
 80094b2:	d130      	bne.n	8009516 <oslib_test_007_001_execute.lto_priv.0+0x136>
  mp->object_size = size;
 80094b4:	2304      	movs	r3, #4
  }
  test_end_step(6);

  /* [7.1.7] Covering the case where a provider is unable to return
     more memory.*/
  test_set_step(7);
 80094b6:	2007      	movs	r0, #7
  mp->next = NULL;
 80094b8:	2100      	movs	r1, #0
  mp->provider = provider;
 80094ba:	4a2b      	ldr	r2, [pc, #172]	; (8009568 <oslib_test_007_001_execute.lto_priv.0+0x188>)
  mp->object_size = size;
 80094bc:	6063      	str	r3, [r4, #4]
  mp->provider = provider;
 80094be:	60e2      	str	r2, [r4, #12]
 80094c0:	6038      	str	r0, [r7, #0]
 80094c2:	2230      	movs	r2, #48	; 0x30
  mp->next = NULL;
 80094c4:	6021      	str	r1, [r4, #0]
  mp->align = align;
 80094c6:	60a3      	str	r3, [r4, #8]
 80094c8:	f382 8811 	msr	BASEPRI, r2
  objp = mp->next;
 80094cc:	6820      	ldr	r0, [r4, #0]
  if (objp != NULL) {
 80094ce:	2800      	cmp	r0, #0
 80094d0:	d034      	beq.n	800953c <oslib_test_007_001_execute.lto_priv.0+0x15c>
    mp->next = mp->next->next;
 80094d2:	6803      	ldr	r3, [r0, #0]
 80094d4:	6023      	str	r3, [r4, #0]
 80094d6:	2300      	movs	r3, #0
 80094d8:	f383 8811 	msr	BASEPRI, r3
 80094dc:	b170      	cbz	r0, 80094fc <oslib_test_007_001_execute.lto_priv.0+0x11c>
  chtest.global_fail     = true;
 80094de:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 80094e2:	4a22      	ldr	r2, [pc, #136]	; (800956c <oslib_test_007_001_execute.lto_priv.0+0x18c>)
  chtest.global_fail     = true;
 80094e4:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 80094e6:	60ba      	str	r2, [r7, #8]
    return __test_fail(msg);
 80094e8:	e008      	b.n	80094fc <oslib_test_007_001_execute.lto_priv.0+0x11c>
  else if (mp->provider != NULL) {
 80094ea:	68e3      	ldr	r3, [r4, #12]
 80094ec:	b97b      	cbnz	r3, 800950e <oslib_test_007_001_execute.lto_priv.0+0x12e>
 80094ee:	f383 8811 	msr	BASEPRI, r3
  chtest.global_fail     = true;
 80094f2:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 80094f6:	4a1e      	ldr	r2, [pc, #120]	; (8009570 <oslib_test_007_001_execute.lto_priv.0+0x190>)
  chtest.global_fail     = true;
 80094f8:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 80094fa:	60ba      	str	r2, [r7, #8]
  {
    chPoolObjectInit(&mp1, sizeof (uint32_t), null_provider);
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
  }
  test_end_step(7);
}
 80094fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009500:	68e3      	ldr	r3, [r4, #12]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d0f3      	beq.n	80094ee <oslib_test_007_001_execute.lto_priv.0+0x10e>
    objp = mp->provider(mp->object_size, mp->align);
 8009506:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 800950a:	4798      	blx	r3
    chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
 800950c:	e78a      	b.n	8009424 <oslib_test_007_001_execute.lto_priv.0+0x44>
    objp = mp->provider(mp->object_size, mp->align);
 800950e:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8009512:	4798      	blx	r3
    chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
 8009514:	e7b9      	b.n	800948a <oslib_test_007_001_execute.lto_priv.0+0xaa>
  chtest.global_fail     = true;
 8009516:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800951a:	4a16      	ldr	r2, [pc, #88]	; (8009574 <oslib_test_007_001_execute.lto_priv.0+0x194>)
  chtest.global_fail     = true;
 800951c:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800951e:	60ba      	str	r2, [r7, #8]
 8009520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (mp->provider != NULL) {
 8009524:	68e3      	ldr	r3, [r4, #12]
 8009526:	b17b      	cbz	r3, 8009548 <oslib_test_007_001_execute.lto_priv.0+0x168>
    objp = mp->provider(mp->object_size, mp->align);
 8009528:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 800952c:	4798      	blx	r3
    chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
 800952e:	e789      	b.n	8009444 <oslib_test_007_001_execute.lto_priv.0+0x64>
  else if (mp->provider != NULL) {
 8009530:	68e3      	ldr	r3, [r4, #12]
 8009532:	b163      	cbz	r3, 800954e <oslib_test_007_001_execute.lto_priv.0+0x16e>
    objp = mp->provider(mp->object_size, mp->align);
 8009534:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8009538:	4798      	blx	r3
    chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
 800953a:	e7b6      	b.n	80094aa <oslib_test_007_001_execute.lto_priv.0+0xca>
  else if (mp->provider != NULL) {
 800953c:	68e3      	ldr	r3, [r4, #12]
 800953e:	b14b      	cbz	r3, 8009554 <oslib_test_007_001_execute.lto_priv.0+0x174>
    objp = mp->provider(mp->object_size, mp->align);
 8009540:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8009544:	4798      	blx	r3
    chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
 8009546:	e7c6      	b.n	80094d6 <oslib_test_007_001_execute.lto_priv.0+0xf6>
 8009548:	f386 8811 	msr	BASEPRI, r6
  if (!condition) {
 800954c:	e77f      	b.n	800944e <oslib_test_007_001_execute.lto_priv.0+0x6e>
 800954e:	f385 8811 	msr	BASEPRI, r5
 8009552:	e7af      	b.n	80094b4 <oslib_test_007_001_execute.lto_priv.0+0xd4>
 8009554:	f383 8811 	msr	BASEPRI, r3
 8009558:	e7d0      	b.n	80094fc <oslib_test_007_001_execute.lto_priv.0+0x11c>
 800955a:	bf00      	nop
 800955c:	200010f4 	.word	0x200010f4
 8009560:	200025cc 	.word	0x200025cc
 8009564:	2000087c 	.word	0x2000087c
 8009568:	080093b1 	.word	0x080093b1
 800956c:	08012890 	.word	0x08012890
 8009570:	08012874 	.word	0x08012874
 8009574:	08012880 	.word	0x08012880
	...

08009580 <oslib_test_007_003_setup.lto_priv.0>:
  mp->next = NULL;
 8009580:	2200      	movs	r2, #0
  mp->object_size = size;
 8009582:	2104      	movs	r1, #4
  mp->next = NULL;
 8009584:	4b04      	ldr	r3, [pc, #16]	; (8009598 <oslib_test_007_003_setup.lto_priv.0+0x18>)
 8009586:	e9c3 3300 	strd	r3, r3, [r3]
  mp->object_size = size;
 800958a:	e9c3 2103 	strd	r2, r1, [r3, #12]
  mp->provider = provider;
 800958e:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8009592:	609a      	str	r2, [r3, #8]
 * .
 */

static void oslib_test_007_003_setup(void) {
  chGuardedPoolObjectInit(&gmp1, sizeof (uint32_t));
}
 8009594:	4770      	bx	lr
 8009596:	bf00      	nop
 8009598:	20000838 	.word	0x20000838
 800959c:	00000000 	.word	0x00000000

080095a0 <oslib_test_007_002_setup.lto_priv.0>:
 80095a0:	2200      	movs	r2, #0
 80095a2:	2104      	movs	r1, #4
 80095a4:	4b04      	ldr	r3, [pc, #16]	; (80095b8 <oslib_test_007_002_setup.lto_priv.0+0x18>)
 80095a6:	e9c3 3300 	strd	r3, r3, [r3]
 80095aa:	e9c3 2103 	strd	r2, r1, [r3, #12]
 80095ae:	e9c3 1205 	strd	r1, r2, [r3, #20]
 80095b2:	609a      	str	r2, [r3, #8]
 80095b4:	4770      	bx	lr
 80095b6:	bf00      	nop
 80095b8:	20000838 	.word	0x20000838
 80095bc:	00000000 	.word	0x00000000

080095c0 <oslib_test_008_001_setup.lto_priv.0>:
  heapp->provider = NULL;
 80095c0:	2000      	movs	r0, #0
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 80095c2:	4b0c      	ldr	r3, [pc, #48]	; (80095f4 <oslib_test_008_001_setup.lto_priv.0+0x34>)
  heapp->provider = NULL;
 80095c4:	4a0c      	ldr	r2, [pc, #48]	; (80095f8 <oslib_test_008_001_setup.lto_priv.0+0x38>)
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 80095c6:	1dd9      	adds	r1, r3, #7
 80095c8:	f021 0107 	bic.w	r1, r1, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 80095cc:	1acb      	subs	r3, r1, r3
  H_FREE_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 80095ce:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 80095d2:	08db      	lsrs	r3, r3, #3
  H_FREE_NEXT(&heapp->header) = hp;
 80095d4:	60d1      	str	r1, [r2, #12]
  H_FREE_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 80095d6:	604b      	str	r3, [r1, #4]
  heapp->area.size = H_FREE_FULLSIZE(hp);
 80095d8:	3301      	adds	r3, #1
 80095da:	00db      	lsls	r3, r3, #3
 80095dc:	6093      	str	r3, [r2, #8]
  qp->next = qp;
 80095de:	f102 0314 	add.w	r3, r2, #20
  qp->prev = qp;
 80095e2:	e9c2 3305 	strd	r3, r3, [r2, #20]
  heapp->area.base = (uint8_t *)(void *)hp;
 80095e6:	6051      	str	r1, [r2, #4]
  heapp->provider = NULL;
 80095e8:	6010      	str	r0, [r2, #0]
  H_FREE_PAGES(&heapp->header) = 0;
 80095ea:	6110      	str	r0, [r2, #16]
  H_FREE_NEXT(hp) = NULL;
 80095ec:	6008      	str	r0, [r1, #0]
 80095ee:	61d0      	str	r0, [r2, #28]
 * .
 */

static void oslib_test_008_001_setup(void) {
  chHeapObjectInit(&test_heap, test_heap_buffer, sizeof(test_heap_buffer));
}
 80095f0:	4770      	bx	lr
 80095f2:	bf00      	nop
 80095f4:	20002608 	.word	0x20002608
 80095f8:	200025e4 	.word	0x200025e4
 80095fc:	00000000 	.word	0x00000000

08009600 <Thread1.lto_priv.2>:
 8009600:	2630      	movs	r6, #48	; 0x30

/*
 * Green LED blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 8009602:	b508      	push	{r3, lr}
 8009604:	4b0c      	ldr	r3, [pc, #48]	; (8009638 <Thread1.lto_priv.2+0x38>)
 8009606:	4a0d      	ldr	r2, [pc, #52]	; (800963c <Thread1.lto_priv.2+0x3c>)
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	4d0d      	ldr	r5, [pc, #52]	; (8009640 <Thread1.lto_priv.2+0x40>)

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    palTogglePad(GPIOF, GPIOF_LED1);
 800960c:	4c0d      	ldr	r4, [pc, #52]	; (8009644 <Thread1.lto_priv.2+0x44>)
 800960e:	61da      	str	r2, [r3, #28]
 8009610:	68e3      	ldr	r3, [r4, #12]
 8009612:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8009616:	60e3      	str	r3, [r4, #12]
    chThdSleepMilliseconds(fs_ready ? 125 : 500);
 8009618:	782b      	ldrb	r3, [r5, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	bf14      	ite	ne
 800961e:	21fa      	movne	r1, #250	; 0xfa
 8009620:	f44f 717a 	moveq.w	r1, #1000	; 0x3e8
 8009624:	f386 8811 	msr	BASEPRI, r6
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8009628:	2008      	movs	r0, #8
 800962a:	f7f9 fb59 	bl	8002ce0 <chSchGoSleepTimeoutS>
 800962e:	2300      	movs	r3, #0
 8009630:	f383 8811 	msr	BASEPRI, r3
}
 8009634:	e7ec      	b.n	8009610 <Thread1.lto_priv.2+0x10>
 8009636:	bf00      	nop
 8009638:	20001050 	.word	0x20001050
 800963c:	080128ac 	.word	0x080128ac
 8009640:	20002400 	.word	0x20002400
 8009644:	40011c00 	.word	0x40011c00
	...

08009650 <init_alloc_info.isra.0>:
	obj->n_frag = 0;										/* No last fragment info */
 8009650:	2200      	movs	r2, #0
	rv = rv << 8 | ptr[0];
 8009652:	6b43      	ldr	r3, [r0, #52]	; 0x34
static void init_alloc_info (
 8009654:	b410      	push	{r4}
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
 8009656:	608b      	str	r3, [r1, #8]
	rv = rv << 8 | ptr[0];
 8009658:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800965a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 800965c:	e9c1 4304 	strd	r4, r3, [r1, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
 8009660:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
}
 8009664:	bc10      	pop	{r4}
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
 8009666:	f003 0302 	and.w	r3, r3, #2
	obj->n_frag = 0;										/* No last fragment info */
 800966a:	61ca      	str	r2, [r1, #28]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
 800966c:	71cb      	strb	r3, [r1, #7]
}
 800966e:	4770      	bx	lr

08009670 <rt_test_012_012_execute.lto_priv.0>:
 * - [12.12.8] The size of an event listener is printed.
 * - [12.12.9] The size of a mailbox is printed.
 * .
 */

static void rt_test_012_012_execute(void) {
 8009670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  /* [12.12.1] The size of the system area is printed.*/
  test_set_step(1);
 8009674:	2301      	movs	r3, #1
  test_printf("%s", msgp);
 8009676:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8009784 <rt_test_012_012_execute.lto_priv.0+0x114>
 800967a:	4f43      	ldr	r7, [pc, #268]	; (8009788 <rt_test_012_012_execute.lto_priv.0+0x118>)
  test_printf("%u", n);
 800967c:	4e43      	ldr	r6, [pc, #268]	; (800978c <rt_test_012_012_execute.lto_priv.0+0x11c>)
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800967e:	4d44      	ldr	r5, [pc, #272]	; (8009790 <rt_test_012_012_execute.lto_priv.0+0x120>)
 8009680:	4c44      	ldr	r4, [pc, #272]	; (8009794 <rt_test_012_012_execute.lto_priv.0+0x124>)
  test_printf("%s", msgp);
 8009682:	4640      	mov	r0, r8
 8009684:	4944      	ldr	r1, [pc, #272]	; (8009798 <rt_test_012_012_execute.lto_priv.0+0x128>)
 8009686:	603b      	str	r3, [r7, #0]
 8009688:	f7fe fbda 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 800968c:	2190      	movs	r1, #144	; 0x90
 800968e:	4630      	mov	r0, r6
 8009690:	f7fe fbd6 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8009694:	4629      	mov	r1, r5
 8009696:	4620      	mov	r0, r4
 8009698:	f7fe fbd2 	bl	8007e40 <test_printf>
    test_println(" bytes");
  }
  test_end_step(1);

  /* [12.12.2] The size of a thread structure is printed.*/
  test_set_step(2);
 800969c:	2302      	movs	r3, #2
  test_printf("%s", msgp);
 800969e:	4640      	mov	r0, r8
 80096a0:	493e      	ldr	r1, [pc, #248]	; (800979c <rt_test_012_012_execute.lto_priv.0+0x12c>)
 80096a2:	603b      	str	r3, [r7, #0]
 80096a4:	f7fe fbcc 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 80096a8:	214c      	movs	r1, #76	; 0x4c
 80096aa:	4630      	mov	r0, r6
 80096ac:	f7fe fbc8 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80096b0:	4629      	mov	r1, r5
 80096b2:	4620      	mov	r0, r4
 80096b4:	f7fe fbc4 	bl	8007e40 <test_printf>
    test_println(" bytes");
  }
  test_end_step(2);

  /* [12.12.3] The size of a virtual timer structure is printed.*/
  test_set_step(3);
 80096b8:	2303      	movs	r3, #3
    test_println(" bytes");
  }
  test_end_step(3);

  /* [12.12.4] The size of a semaphore structure is printed.*/
  test_set_step(4);
 80096ba:	f04f 0904 	mov.w	r9, #4
  test_printf("%s", msgp);
 80096be:	4640      	mov	r0, r8
 80096c0:	4937      	ldr	r1, [pc, #220]	; (80097a0 <rt_test_012_012_execute.lto_priv.0+0x130>)
  test_set_step(3);
 80096c2:	603b      	str	r3, [r7, #0]
 80096c4:	f7fe fbbc 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 80096c8:	2118      	movs	r1, #24
 80096ca:	4630      	mov	r0, r6
 80096cc:	f7fe fbb8 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80096d0:	4629      	mov	r1, r5
 80096d2:	4620      	mov	r0, r4
 80096d4:	f7fe fbb4 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 80096d8:	4640      	mov	r0, r8
 80096da:	4932      	ldr	r1, [pc, #200]	; (80097a4 <rt_test_012_012_execute.lto_priv.0+0x134>)
  test_set_step(4);
 80096dc:	f8c7 9000 	str.w	r9, [r7]
 80096e0:	f7fe fbae 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 80096e4:	210c      	movs	r1, #12
 80096e6:	4630      	mov	r0, r6
 80096e8:	f7fe fbaa 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80096ec:	4629      	mov	r1, r5
 80096ee:	4620      	mov	r0, r4
 80096f0:	f7fe fba6 	bl	8007e40 <test_printf>
#endif
  }
  test_end_step(4);

  /* [12.12.5] The size of a mutex is printed.*/
  test_set_step(5);
 80096f4:	2305      	movs	r3, #5
  test_printf("%s", msgp);
 80096f6:	4640      	mov	r0, r8
 80096f8:	492b      	ldr	r1, [pc, #172]	; (80097a8 <rt_test_012_012_execute.lto_priv.0+0x138>)
 80096fa:	603b      	str	r3, [r7, #0]
 80096fc:	f7fe fba0 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8009700:	2110      	movs	r1, #16
 8009702:	4630      	mov	r0, r6
 8009704:	f7fe fb9c 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8009708:	4629      	mov	r1, r5
 800970a:	4620      	mov	r0, r4
 800970c:	f7fe fb98 	bl	8007e40 <test_printf>
#endif
  }
  test_end_step(5);

  /* [12.12.6] The size of a condition variable is printed.*/
  test_set_step(6);
 8009710:	2306      	movs	r3, #6
  test_printf("%s", msgp);
 8009712:	4640      	mov	r0, r8
 8009714:	4925      	ldr	r1, [pc, #148]	; (80097ac <rt_test_012_012_execute.lto_priv.0+0x13c>)
 8009716:	603b      	str	r3, [r7, #0]
 8009718:	f7fe fb92 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 800971c:	2108      	movs	r1, #8
 800971e:	4630      	mov	r0, r6
 8009720:	f7fe fb8e 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8009724:	4629      	mov	r1, r5
 8009726:	4620      	mov	r0, r4
 8009728:	f7fe fb8a 	bl	8007e40 <test_printf>
#endif
  }
  test_end_step(6);

  /* [12.12.7] The size of an event source is printed.*/
  test_set_step(7);
 800972c:	2307      	movs	r3, #7
  test_printf("%s", msgp);
 800972e:	4640      	mov	r0, r8
 8009730:	491f      	ldr	r1, [pc, #124]	; (80097b0 <rt_test_012_012_execute.lto_priv.0+0x140>)
 8009732:	603b      	str	r3, [r7, #0]
 8009734:	f7fe fb84 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8009738:	4649      	mov	r1, r9
 800973a:	4630      	mov	r0, r6
 800973c:	f7fe fb80 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8009740:	4629      	mov	r1, r5
 8009742:	4620      	mov	r0, r4
 8009744:	f7fe fb7c 	bl	8007e40 <test_printf>
#endif
  }
  test_end_step(7);

  /* [12.12.8] The size of an event listener is printed.*/
  test_set_step(8);
 8009748:	2308      	movs	r3, #8
  test_printf("%s", msgp);
 800974a:	4640      	mov	r0, r8
 800974c:	4919      	ldr	r1, [pc, #100]	; (80097b4 <rt_test_012_012_execute.lto_priv.0+0x144>)
 800974e:	603b      	str	r3, [r7, #0]
 8009750:	f7fe fb76 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8009754:	2114      	movs	r1, #20
 8009756:	4630      	mov	r0, r6
 8009758:	f7fe fb72 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800975c:	4629      	mov	r1, r5
 800975e:	4620      	mov	r0, r4
 8009760:	f7fe fb6e 	bl	8007e40 <test_printf>
#endif
  }
  test_end_step(8);

  /* [12.12.9] The size of a mailbox is printed.*/
  test_set_step(9);
 8009764:	2309      	movs	r3, #9
  test_printf("%s", msgp);
 8009766:	4640      	mov	r0, r8
 8009768:	4913      	ldr	r1, [pc, #76]	; (80097b8 <rt_test_012_012_execute.lto_priv.0+0x148>)
 800976a:	603b      	str	r3, [r7, #0]
 800976c:	f7fe fb68 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8009770:	2128      	movs	r1, #40	; 0x28
 8009772:	4630      	mov	r0, r6
 8009774:	f7fe fb64 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8009778:	4629      	mov	r1, r5
 800977a:	4620      	mov	r0, r4
    test_printn(sizeof(mailbox_t));
    test_println(" bytes");
#endif
  }
  test_end_step(9);
}
 800977c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009780:	f7fe bb5e 	b.w	8007e40 <test_printf>
 8009784:	080103f8 	.word	0x080103f8
 8009788:	200010f4 	.word	0x200010f4
 800978c:	08010890 	.word	0x08010890
 8009790:	080128c4 	.word	0x080128c4
 8009794:	08013080 	.word	0x08013080
 8009798:	080128b4 	.word	0x080128b4
 800979c:	080128cc 	.word	0x080128cc
 80097a0:	080128dc 	.word	0x080128dc
 80097a4:	080128ec 	.word	0x080128ec
 80097a8:	080128fc 	.word	0x080128fc
 80097ac:	0801290c 	.word	0x0801290c
 80097b0:	0801291c 	.word	0x0801291c
 80097b4:	0801292c 	.word	0x0801292c
 80097b8:	0801293c 	.word	0x0801293c
 80097bc:	00000000 	.word	0x00000000

080097c0 <oslib_test_001_002_execute.lto_priv.0>:
 * <h2>Test Steps</h2>
 * - [1.2.1] Prints the version string.
 * .
 */

static void oslib_test_001_002_execute(void) {
 80097c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* [1.2.1] Prints the version string.*/
  test_set_step(1);
 80097c4:	f04f 0801 	mov.w	r8, #1
 80097c8:	4c22      	ldr	r4, [pc, #136]	; (8009854 <oslib_test_001_002_execute.lto_priv.0+0x94>)
 80097ca:	4b23      	ldr	r3, [pc, #140]	; (8009858 <oslib_test_001_002_execute.lto_priv.0+0x98>)
  test_printf("%s", msgp);
 80097cc:	4d23      	ldr	r5, [pc, #140]	; (800985c <oslib_test_001_002_execute.lto_priv.0+0x9c>)
  test_printf("%u", n);
 80097ce:	4f24      	ldr	r7, [pc, #144]	; (8009860 <oslib_test_001_002_execute.lto_priv.0+0xa0>)
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80097d0:	4620      	mov	r0, r4
 80097d2:	4924      	ldr	r1, [pc, #144]	; (8009864 <oslib_test_001_002_execute.lto_priv.0+0xa4>)
 80097d4:	f8c3 8000 	str.w	r8, [r3]
 80097d8:	4e23      	ldr	r6, [pc, #140]	; (8009868 <oslib_test_001_002_execute.lto_priv.0+0xa8>)
 80097da:	f7fe fb31 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 80097de:	4628      	mov	r0, r5
 80097e0:	4922      	ldr	r1, [pc, #136]	; (800986c <oslib_test_001_002_execute.lto_priv.0+0xac>)
 80097e2:	f7fe fb2d 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 80097e6:	2100      	movs	r1, #0
 80097e8:	4638      	mov	r0, r7
 80097ea:	f7fe fb29 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80097ee:	4631      	mov	r1, r6
 80097f0:	4620      	mov	r0, r4
 80097f2:	f7fe fb25 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 80097f6:	4628      	mov	r0, r5
 80097f8:	491d      	ldr	r1, [pc, #116]	; (8009870 <oslib_test_001_002_execute.lto_priv.0+0xb0>)
 80097fa:	f7fe fb21 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80097fe:	4620      	mov	r0, r4
 8009800:	491c      	ldr	r1, [pc, #112]	; (8009874 <oslib_test_001_002_execute.lto_priv.0+0xb4>)
 8009802:	f7fe fb1d 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 8009806:	4628      	mov	r0, r5
 8009808:	491b      	ldr	r1, [pc, #108]	; (8009878 <oslib_test_001_002_execute.lto_priv.0+0xb8>)
 800980a:	f7fe fb19 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 800980e:	4641      	mov	r1, r8
 8009810:	4638      	mov	r0, r7
 8009812:	f7fe fb15 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8009816:	4631      	mov	r1, r6
 8009818:	4620      	mov	r0, r4
 800981a:	f7fe fb11 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 800981e:	4628      	mov	r0, r5
 8009820:	4916      	ldr	r1, [pc, #88]	; (800987c <oslib_test_001_002_execute.lto_priv.0+0xbc>)
 8009822:	f7fe fb0d 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8009826:	2104      	movs	r1, #4
 8009828:	4638      	mov	r0, r7
 800982a:	f7fe fb09 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800982e:	4631      	mov	r1, r6
 8009830:	4620      	mov	r0, r4
 8009832:	f7fe fb05 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 8009836:	4628      	mov	r0, r5
 8009838:	4911      	ldr	r1, [pc, #68]	; (8009880 <oslib_test_001_002_execute.lto_priv.0+0xc0>)
 800983a:	f7fe fb01 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 800983e:	2100      	movs	r1, #0
 8009840:	4638      	mov	r0, r7
 8009842:	f7fe fafd 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8009846:	4631      	mov	r1, r6
 8009848:	4620      	mov	r0, r4
    test_print("--- Patch Number:                       ");
    test_printn(CH_OSLIB_PATCH);
    test_println("");
  }
  test_end_step(1);
}
 800984a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800984e:	f7fe baf7 	b.w	8007e40 <test_printf>
 8009852:	bf00      	nop
 8009854:	08013080 	.word	0x08013080
 8009858:	200010f4 	.word	0x200010f4
 800985c:	080103f8 	.word	0x080103f8
 8009860:	08010890 	.word	0x08010890
 8009864:	0801294c 	.word	0x0801294c
 8009868:	08010400 	.word	0x08010400
 800986c:	08010920 	.word	0x08010920
 8009870:	0801094c 	.word	0x0801094c
 8009874:	08012980 	.word	0x08012980
 8009878:	08010978 	.word	0x08010978
 800987c:	080109a4 	.word	0x080109a4
 8009880:	080109d0 	.word	0x080109d0
	...

08009890 <oslib_test_001_003_execute.lto_priv.0>:
 * <h2>Test Steps</h2>
 * - [1.3.1] Prints the configuration options settings.
 * .
 */

static void oslib_test_001_003_execute(void) {
 8009890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* [1.3.1] Prints the configuration options settings.*/
  test_set_step(1);
 8009894:	2701      	movs	r7, #1
  test_printf("%s", msgp);
 8009896:	f8df 8190 	ldr.w	r8, [pc, #400]	; 8009a28 <oslib_test_001_003_execute.lto_priv.0+0x198>
 800989a:	4b64      	ldr	r3, [pc, #400]	; (8009a2c <oslib_test_001_003_execute.lto_priv.0+0x19c>)
  test_printf("%u", n);
 800989c:	4e64      	ldr	r6, [pc, #400]	; (8009a30 <oslib_test_001_003_execute.lto_priv.0+0x1a0>)
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800989e:	4d65      	ldr	r5, [pc, #404]	; (8009a34 <oslib_test_001_003_execute.lto_priv.0+0x1a4>)
 80098a0:	4c65      	ldr	r4, [pc, #404]	; (8009a38 <oslib_test_001_003_execute.lto_priv.0+0x1a8>)
  test_printf("%s", msgp);
 80098a2:	4640      	mov	r0, r8
 80098a4:	4965      	ldr	r1, [pc, #404]	; (8009a3c <oslib_test_001_003_execute.lto_priv.0+0x1ac>)
 80098a6:	601f      	str	r7, [r3, #0]
 80098a8:	f7fe faca 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 80098ac:	4639      	mov	r1, r7
 80098ae:	4630      	mov	r0, r6
 80098b0:	f7fe fac6 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80098b4:	4629      	mov	r1, r5
 80098b6:	4620      	mov	r0, r4
 80098b8:	f7fe fac2 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 80098bc:	4640      	mov	r0, r8
 80098be:	4960      	ldr	r1, [pc, #384]	; (8009a40 <oslib_test_001_003_execute.lto_priv.0+0x1b0>)
 80098c0:	f7fe fabe 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 80098c4:	4639      	mov	r1, r7
 80098c6:	4630      	mov	r0, r6
 80098c8:	f7fe faba 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80098cc:	4629      	mov	r1, r5
 80098ce:	4620      	mov	r0, r4
 80098d0:	f7fe fab6 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 80098d4:	4640      	mov	r0, r8
 80098d6:	495b      	ldr	r1, [pc, #364]	; (8009a44 <oslib_test_001_003_execute.lto_priv.0+0x1b4>)
 80098d8:	f7fe fab2 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 80098dc:	4639      	mov	r1, r7
 80098de:	4630      	mov	r0, r6
 80098e0:	f7fe faae 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80098e4:	4629      	mov	r1, r5
 80098e6:	4620      	mov	r0, r4
 80098e8:	f7fe faaa 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 80098ec:	4640      	mov	r0, r8
 80098ee:	4956      	ldr	r1, [pc, #344]	; (8009a48 <oslib_test_001_003_execute.lto_priv.0+0x1b8>)
 80098f0:	f7fe faa6 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 80098f4:	4639      	mov	r1, r7
 80098f6:	4630      	mov	r0, r6
 80098f8:	f7fe faa2 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80098fc:	4629      	mov	r1, r5
 80098fe:	4620      	mov	r0, r4
 8009900:	f7fe fa9e 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 8009904:	4640      	mov	r0, r8
 8009906:	4951      	ldr	r1, [pc, #324]	; (8009a4c <oslib_test_001_003_execute.lto_priv.0+0x1bc>)
 8009908:	f7fe fa9a 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 800990c:	4639      	mov	r1, r7
 800990e:	4630      	mov	r0, r6
 8009910:	f7fe fa96 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8009914:	4629      	mov	r1, r5
 8009916:	4620      	mov	r0, r4
 8009918:	f7fe fa92 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 800991c:	4640      	mov	r0, r8
 800991e:	494c      	ldr	r1, [pc, #304]	; (8009a50 <oslib_test_001_003_execute.lto_priv.0+0x1c0>)
 8009920:	f7fe fa8e 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8009924:	4639      	mov	r1, r7
 8009926:	4630      	mov	r0, r6
 8009928:	f7fe fa8a 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800992c:	4629      	mov	r1, r5
 800992e:	4620      	mov	r0, r4
 8009930:	f7fe fa86 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 8009934:	4640      	mov	r0, r8
 8009936:	4947      	ldr	r1, [pc, #284]	; (8009a54 <oslib_test_001_003_execute.lto_priv.0+0x1c4>)
 8009938:	f7fe fa82 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 800993c:	4639      	mov	r1, r7
 800993e:	4630      	mov	r0, r6
 8009940:	f7fe fa7e 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8009944:	4629      	mov	r1, r5
 8009946:	4620      	mov	r0, r4
 8009948:	f7fe fa7a 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 800994c:	4640      	mov	r0, r8
 800994e:	4942      	ldr	r1, [pc, #264]	; (8009a58 <oslib_test_001_003_execute.lto_priv.0+0x1c8>)
 8009950:	f7fe fa76 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8009954:	4639      	mov	r1, r7
 8009956:	4630      	mov	r0, r6
 8009958:	f7fe fa72 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800995c:	4629      	mov	r1, r5
 800995e:	4620      	mov	r0, r4
 8009960:	f7fe fa6e 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 8009964:	4640      	mov	r0, r8
 8009966:	493d      	ldr	r1, [pc, #244]	; (8009a5c <oslib_test_001_003_execute.lto_priv.0+0x1cc>)
 8009968:	f7fe fa6a 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 800996c:	4639      	mov	r1, r7
 800996e:	4630      	mov	r0, r6
 8009970:	f7fe fa66 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8009974:	4629      	mov	r1, r5
 8009976:	4620      	mov	r0, r4
 8009978:	f7fe fa62 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 800997c:	4640      	mov	r0, r8
 800997e:	4938      	ldr	r1, [pc, #224]	; (8009a60 <oslib_test_001_003_execute.lto_priv.0+0x1d0>)
 8009980:	f7fe fa5e 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8009984:	2108      	movs	r1, #8
 8009986:	4630      	mov	r0, r6
 8009988:	f7fe fa5a 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800998c:	4629      	mov	r1, r5
 800998e:	4620      	mov	r0, r4
 8009990:	f7fe fa56 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 8009994:	4640      	mov	r0, r8
 8009996:	4933      	ldr	r1, [pc, #204]	; (8009a64 <oslib_test_001_003_execute.lto_priv.0+0x1d4>)
 8009998:	f7fe fa52 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 800999c:	4639      	mov	r1, r7
 800999e:	4630      	mov	r0, r6
 80099a0:	f7fe fa4e 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80099a4:	4629      	mov	r1, r5
 80099a6:	4620      	mov	r0, r4
 80099a8:	f7fe fa4a 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 80099ac:	4640      	mov	r0, r8
 80099ae:	492e      	ldr	r1, [pc, #184]	; (8009a68 <oslib_test_001_003_execute.lto_priv.0+0x1d8>)
 80099b0:	f7fe fa46 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 80099b4:	4639      	mov	r1, r7
 80099b6:	4630      	mov	r0, r6
 80099b8:	f7fe fa42 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80099bc:	4629      	mov	r1, r5
 80099be:	4620      	mov	r0, r4
 80099c0:	f7fe fa3e 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 80099c4:	4640      	mov	r0, r8
 80099c6:	4929      	ldr	r1, [pc, #164]	; (8009a6c <oslib_test_001_003_execute.lto_priv.0+0x1dc>)
 80099c8:	f7fe fa3a 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 80099cc:	4639      	mov	r1, r7
 80099ce:	4630      	mov	r0, r6
 80099d0:	f7fe fa36 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80099d4:	4629      	mov	r1, r5
 80099d6:	4620      	mov	r0, r4
 80099d8:	f7fe fa32 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 80099dc:	4640      	mov	r0, r8
 80099de:	4924      	ldr	r1, [pc, #144]	; (8009a70 <oslib_test_001_003_execute.lto_priv.0+0x1e0>)
 80099e0:	f7fe fa2e 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 80099e4:	4639      	mov	r1, r7
 80099e6:	4630      	mov	r0, r6
 80099e8:	f7fe fa2a 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80099ec:	4629      	mov	r1, r5
 80099ee:	4620      	mov	r0, r4
 80099f0:	f7fe fa26 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 80099f4:	4640      	mov	r0, r8
 80099f6:	491f      	ldr	r1, [pc, #124]	; (8009a74 <oslib_test_001_003_execute.lto_priv.0+0x1e4>)
 80099f8:	f7fe fa22 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 80099fc:	4639      	mov	r1, r7
 80099fe:	4630      	mov	r0, r6
 8009a00:	f7fe fa1e 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8009a04:	4629      	mov	r1, r5
 8009a06:	4620      	mov	r0, r4
 8009a08:	f7fe fa1a 	bl	8007e40 <test_printf>
  test_printf("%s", msgp);
 8009a0c:	4640      	mov	r0, r8
 8009a0e:	491a      	ldr	r1, [pc, #104]	; (8009a78 <oslib_test_001_003_execute.lto_priv.0+0x1e8>)
 8009a10:	f7fe fa16 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8009a14:	4639      	mov	r1, r7
 8009a16:	4630      	mov	r0, r6
 8009a18:	f7fe fa12 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8009a1c:	4629      	mov	r1, r5
 8009a1e:	4620      	mov	r0, r4
    test_print("--- CH_CFG_FACTORY_PIPES:               ");
    test_printn(CH_CFG_FACTORY_PIPES);
    test_println("");
  }
  test_end_step(1);
}
 8009a20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a24:	f7fe ba0c 	b.w	8007e40 <test_printf>
 8009a28:	080103f8 	.word	0x080103f8
 8009a2c:	200010f4 	.word	0x200010f4
 8009a30:	08010890 	.word	0x08010890
 8009a34:	08010400 	.word	0x08010400
 8009a38:	08013080 	.word	0x08013080
 8009a3c:	08012988 	.word	0x08012988
 8009a40:	080129b4 	.word	0x080129b4
 8009a44:	080129e0 	.word	0x080129e0
 8009a48:	08012a0c 	.word	0x08012a0c
 8009a4c:	08012a38 	.word	0x08012a38
 8009a50:	08012a64 	.word	0x08012a64
 8009a54:	08012a90 	.word	0x08012a90
 8009a58:	08012abc 	.word	0x08012abc
 8009a5c:	08012ae8 	.word	0x08012ae8
 8009a60:	08012b14 	.word	0x08012b14
 8009a64:	08012b40 	.word	0x08012b40
 8009a68:	08012b6c 	.word	0x08012b6c
 8009a6c:	08012b98 	.word	0x08012b98
 8009a70:	08012bc4 	.word	0x08012bc4
 8009a74:	08012bf0 	.word	0x08012bf0
 8009a78:	08012c1c 	.word	0x08012c1c
 8009a7c:	00000000 	.word	0x00000000

08009a80 <rt_test_012_004_execute.lto_priv.0>:
static void rt_test_012_004_execute(void) {
 8009a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 8009a84:	2701      	movs	r7, #1
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8009a86:	2500      	movs	r5, #0
  return __sch_get_currthread();
 8009a88:	4b37      	ldr	r3, [pc, #220]	; (8009b68 <rt_test_012_004_execute.lto_priv.0+0xe8>)
  test_set_step(1);
 8009a8a:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8009b6c <rt_test_012_004_execute.lto_priv.0+0xec>
  return chThdGetSelfX()->hdr.pqueue.prio;
 8009a8e:	68da      	ldr	r2, [r3, #12]
static void rt_test_012_004_execute(void) {
 8009a90:	b082      	sub	sp, #8
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8009a92:	6892      	ldr	r2, [r2, #8]
 8009a94:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8009a98:	4b35      	ldr	r3, [pc, #212]	; (8009b70 <rt_test_012_004_execute.lto_priv.0+0xf0>)
 8009a9a:	443a      	add	r2, r7
 8009a9c:	9500      	str	r5, [sp, #0]
 8009a9e:	4835      	ldr	r0, [pc, #212]	; (8009b74 <rt_test_012_004_execute.lto_priv.0+0xf4>)
  test_set_step(1);
 8009aa0:	f8ca 7000 	str.w	r7, [sl]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8009aa4:	f7fa fdd4 	bl	8004650 <chThdCreateStatic>
  test_set_step(2);
 8009aa8:	2302      	movs	r3, #2
 8009aaa:	f8ca 3000 	str.w	r3, [sl]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8009aae:	4b32      	ldr	r3, [pc, #200]	; (8009b78 <rt_test_012_004_execute.lto_priv.0+0xf8>)
 8009ab0:	2630      	movs	r6, #48	; 0x30
 8009ab2:	4604      	mov	r4, r0
 8009ab4:	6018      	str	r0, [r3, #0]
 8009ab6:	f386 8811 	msr	BASEPRI, r6
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8009aba:	2008      	movs	r0, #8
 8009abc:	4639      	mov	r1, r7
 8009abe:	f7f9 f90f 	bl	8002ce0 <chSchGoSleepTimeoutS>
 8009ac2:	f385 8811 	msr	BASEPRI, r5
 8009ac6:	f386 8811 	msr	BASEPRI, r6
 8009aca:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
 8009ace:	f8d9 7024 	ldr.w	r7, [r9, #36]	; 0x24
 8009ad2:	b2bf      	uxth	r7, r7
 8009ad4:	f385 8811 	msr	BASEPRI, r5
      chSchWakeupS(tp, MSG_OK);
 8009ad8:	46a8      	mov	r8, r5
 8009ada:	f386 8811 	msr	BASEPRI, r6
 8009ade:	2100      	movs	r1, #0
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	f7fa fc3d 	bl	8004360 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	2100      	movs	r1, #0
 8009aea:	f7fa fc39 	bl	8004360 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 8009aee:	4620      	mov	r0, r4
 8009af0:	2100      	movs	r1, #0
 8009af2:	f7fa fc35 	bl	8004360 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 8009af6:	2100      	movs	r1, #0
 8009af8:	4620      	mov	r0, r4
 8009afa:	f7fa fc31 	bl	8004360 <chSchWakeupS>
 8009afe:	f388 8811 	msr	BASEPRI, r8
 8009b02:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
      n += 4;
 8009b06:	3504      	adds	r5, #4
 8009b08:	1bdb      	subs	r3, r3, r7
    } while (chVTIsSystemTimeWithinX(start, end));
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009b10:	d3e3      	bcc.n	8009ada <rt_test_012_004_execute.lto_priv.0+0x5a>
  test_set_step(3);
 8009b12:	2303      	movs	r3, #3
 8009b14:	f8ca 3000 	str.w	r3, [sl]
 8009b18:	f386 8811 	msr	BASEPRI, r6
    chSchWakeupS(tp, MSG_TIMEOUT);
 8009b1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009b20:	4620      	mov	r0, r4
 8009b22:	f7fa fc1d 	bl	8004360 <chSchWakeupS>
 8009b26:	f388 8811 	msr	BASEPRI, r8
      threads[i] = NULL;
 8009b2a:	2700      	movs	r7, #0
 8009b2c:	4c12      	ldr	r4, [pc, #72]	; (8009b78 <rt_test_012_004_execute.lto_priv.0+0xf8>)
 8009b2e:	f104 0614 	add.w	r6, r4, #20
    if (threads[i] != NULL) {
 8009b32:	f854 0b04 	ldr.w	r0, [r4], #4
 8009b36:	b118      	cbz	r0, 8009b40 <rt_test_012_004_execute.lto_priv.0+0xc0>
      chThdWait(threads[i]);
 8009b38:	f7fb ff72 	bl	8005a20 <chThdWait>
      threads[i] = NULL;
 8009b3c:	f844 7c04 	str.w	r7, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8009b40:	42a6      	cmp	r6, r4
 8009b42:	d1f6      	bne.n	8009b32 <rt_test_012_004_execute.lto_priv.0+0xb2>
  test_set_step(4);
 8009b44:	2304      	movs	r3, #4
  test_printf("%s", msgp);
 8009b46:	490d      	ldr	r1, [pc, #52]	; (8009b7c <rt_test_012_004_execute.lto_priv.0+0xfc>)
 8009b48:	480d      	ldr	r0, [pc, #52]	; (8009b80 <rt_test_012_004_execute.lto_priv.0+0x100>)
 8009b4a:	f8ca 3000 	str.w	r3, [sl]
 8009b4e:	f7fe f977 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8009b52:	0069      	lsls	r1, r5, #1
 8009b54:	480b      	ldr	r0, [pc, #44]	; (8009b84 <rt_test_012_004_execute.lto_priv.0+0x104>)
 8009b56:	f7fe f973 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8009b5a:	490b      	ldr	r1, [pc, #44]	; (8009b88 <rt_test_012_004_execute.lto_priv.0+0x108>)
 8009b5c:	480b      	ldr	r0, [pc, #44]	; (8009b8c <rt_test_012_004_execute.lto_priv.0+0x10c>)
}
 8009b5e:	b002      	add	sp, #8
 8009b60:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b64:	f7fe b96c 	b.w	8007e40 <test_printf>
 8009b68:	20001050 	.word	0x20001050
 8009b6c:	200010f4 	.word	0x200010f4
 8009b70:	08001771 	.word	0x08001771
 8009b74:	20001240 	.word	0x20001240
 8009b78:	20001ab0 	.word	0x20001ab0
 8009b7c:	08010f7c 	.word	0x08010f7c
 8009b80:	080103f8 	.word	0x080103f8
 8009b84:	08010890 	.word	0x08010890
 8009b88:	08010f98 	.word	0x08010f98
 8009b8c:	08013080 	.word	0x08013080

08009b90 <rt_test_012_005_execute.lto_priv.0>:
  test_set_step(1);
 8009b90:	2101      	movs	r1, #1
  return __sch_get_currthread();
 8009b92:	4b23      	ldr	r3, [pc, #140]	; (8009c20 <rt_test_012_005_execute.lto_priv.0+0x90>)
static void rt_test_012_005_execute(void) {
 8009b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return chThdGetSelfX()->hdr.pqueue.prio;
 8009b98:	68db      	ldr	r3, [r3, #12]
  test_set_step(1);
 8009b9a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8009c24 <rt_test_012_005_execute.lto_priv.0+0x94>
  tprio_t prio = chThdGetPriorityX() - 1;
 8009b9e:	689e      	ldr	r6, [r3, #8]
static void rt_test_012_005_execute(void) {
 8009ba0:	b082      	sub	sp, #8
 8009ba2:	2530      	movs	r5, #48	; 0x30
  tprio_t prio = chThdGetPriorityX() - 1;
 8009ba4:	3e01      	subs	r6, #1
  test_set_step(1);
 8009ba6:	f8c9 1000 	str.w	r1, [r9]
 8009baa:	f385 8811 	msr	BASEPRI, r5
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8009bae:	2008      	movs	r0, #8
 8009bb0:	f7f9 f896 	bl	8002ce0 <chSchGoSleepTimeoutS>
 8009bb4:	2400      	movs	r4, #0
 8009bb6:	f384 8811 	msr	BASEPRI, r4
 8009bba:	f385 8811 	msr	BASEPRI, r5
 8009bbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009bc2:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8009bc4:	b2ad      	uxth	r5, r5
 8009bc6:	f384 8811 	msr	BASEPRI, r4
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8009bca:	4627      	mov	r7, r4
 8009bcc:	f8df a058 	ldr.w	sl, [pc, #88]	; 8009c28 <rt_test_012_005_execute.lto_priv.0+0x98>
 8009bd0:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8009c2c <rt_test_012_005_execute.lto_priv.0+0x9c>
 8009bd4:	4653      	mov	r3, sl
 8009bd6:	4632      	mov	r2, r6
 8009bd8:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8009bdc:	4640      	mov	r0, r8
 8009bde:	9700      	str	r7, [sp, #0]
 8009be0:	f7fa fd36 	bl	8004650 <chThdCreateStatic>
 8009be4:	f7fb ff1c 	bl	8005a20 <chThdWait>
 8009be8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009bec:	6a58      	ldr	r0, [r3, #36]	; 0x24
      n++;
 8009bee:	3401      	adds	r4, #1
 8009bf0:	1b40      	subs	r0, r0, r5
    } while (chVTIsSystemTimeWithinX(start, end));
 8009bf2:	b280      	uxth	r0, r0
 8009bf4:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8009bf8:	d3ec      	bcc.n	8009bd4 <rt_test_012_005_execute.lto_priv.0+0x44>
  test_set_step(2);
 8009bfa:	2302      	movs	r3, #2
  test_printf("%s", msgp);
 8009bfc:	490c      	ldr	r1, [pc, #48]	; (8009c30 <rt_test_012_005_execute.lto_priv.0+0xa0>)
 8009bfe:	480d      	ldr	r0, [pc, #52]	; (8009c34 <rt_test_012_005_execute.lto_priv.0+0xa4>)
 8009c00:	f8c9 3000 	str.w	r3, [r9]
 8009c04:	f7fe f91c 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8009c08:	4621      	mov	r1, r4
 8009c0a:	480b      	ldr	r0, [pc, #44]	; (8009c38 <rt_test_012_005_execute.lto_priv.0+0xa8>)
 8009c0c:	f7fe f918 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8009c10:	490a      	ldr	r1, [pc, #40]	; (8009c3c <rt_test_012_005_execute.lto_priv.0+0xac>)
 8009c12:	480b      	ldr	r0, [pc, #44]	; (8009c40 <rt_test_012_005_execute.lto_priv.0+0xb0>)
}
 8009c14:	b002      	add	sp, #8
 8009c16:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c1a:	f7fe b911 	b.w	8007e40 <test_printf>
 8009c1e:	bf00      	nop
 8009c20:	20001050 	.word	0x20001050
 8009c24:	200010f4 	.word	0x200010f4
 8009c28:	080016e1 	.word	0x080016e1
 8009c2c:	20001240 	.word	0x20001240
 8009c30:	08010f7c 	.word	0x08010f7c
 8009c34:	080103f8 	.word	0x080103f8
 8009c38:	08010890 	.word	0x08010890
 8009c3c:	08012c48 	.word	0x08012c48
 8009c40:	08013080 	.word	0x08013080
	...

08009c50 <rt_test_012_008_execute.lto_priv.0>:
static void rt_test_012_008_execute(void) {
 8009c50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 8009c54:	2301      	movs	r3, #1
    n = 0;
 8009c56:	2600      	movs	r6, #0
  return __sch_get_currthread();
 8009c58:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8009d58 <rt_test_012_008_execute.lto_priv.0+0x108>
  test_set_step(1);
 8009c5c:	4f3f      	ldr	r7, [pc, #252]	; (8009d5c <rt_test_012_008_execute.lto_priv.0+0x10c>)
static void rt_test_012_008_execute(void) {
 8009c5e:	b085      	sub	sp, #20
  test_set_step(1);
 8009c60:	603b      	str	r3, [r7, #0]
    n = 0;
 8009c62:	9603      	str	r6, [sp, #12]
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8009c64:	f7fe ff0c 	bl	8008a80 <test_wait_tick>
  return chThdGetSelfX()->hdr.pqueue.prio;
 8009c68:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009c6c:	ad03      	add	r5, sp, #12
 8009c6e:	689a      	ldr	r2, [r3, #8]
 8009c70:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8009c74:	4b3a      	ldr	r3, [pc, #232]	; (8009d60 <rt_test_012_008_execute.lto_priv.0+0x110>)
 8009c76:	9500      	str	r5, [sp, #0]
 8009c78:	3a01      	subs	r2, #1
 8009c7a:	483a      	ldr	r0, [pc, #232]	; (8009d64 <rt_test_012_008_execute.lto_priv.0+0x114>)
 8009c7c:	f7fa fce8 	bl	8004650 <chThdCreateStatic>
 8009c80:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009c84:	4c38      	ldr	r4, [pc, #224]	; (8009d68 <rt_test_012_008_execute.lto_priv.0+0x118>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8009c86:	689a      	ldr	r2, [r3, #8]
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8009c88:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8009c8a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8009c8e:	4b34      	ldr	r3, [pc, #208]	; (8009d60 <rt_test_012_008_execute.lto_priv.0+0x110>)
 8009c90:	9500      	str	r5, [sp, #0]
 8009c92:	3a01      	subs	r2, #1
 8009c94:	4835      	ldr	r0, [pc, #212]	; (8009d6c <rt_test_012_008_execute.lto_priv.0+0x11c>)
 8009c96:	f7fa fcdb 	bl	8004650 <chThdCreateStatic>
 8009c9a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009c9e:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8009ca0:	689a      	ldr	r2, [r3, #8]
 8009ca2:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8009ca6:	4b2e      	ldr	r3, [pc, #184]	; (8009d60 <rt_test_012_008_execute.lto_priv.0+0x110>)
 8009ca8:	9500      	str	r5, [sp, #0]
 8009caa:	3a01      	subs	r2, #1
 8009cac:	4830      	ldr	r0, [pc, #192]	; (8009d70 <rt_test_012_008_execute.lto_priv.0+0x120>)
 8009cae:	f7fa fccf 	bl	8004650 <chThdCreateStatic>
 8009cb2:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009cb6:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8009cb8:	689a      	ldr	r2, [r3, #8]
 8009cba:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8009cbe:	4b28      	ldr	r3, [pc, #160]	; (8009d60 <rt_test_012_008_execute.lto_priv.0+0x110>)
 8009cc0:	9500      	str	r5, [sp, #0]
 8009cc2:	3a01      	subs	r2, #1
 8009cc4:	482b      	ldr	r0, [pc, #172]	; (8009d74 <rt_test_012_008_execute.lto_priv.0+0x124>)
 8009cc6:	f7fa fcc3 	bl	8004650 <chThdCreateStatic>
 8009cca:	f8d9 300c 	ldr.w	r3, [r9, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8009cce:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8009cd2:	689a      	ldr	r2, [r3, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8009cd4:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8009cd6:	4b22      	ldr	r3, [pc, #136]	; (8009d60 <rt_test_012_008_execute.lto_priv.0+0x110>)
 8009cd8:	9500      	str	r5, [sp, #0]
 8009cda:	3a01      	subs	r2, #1
 8009cdc:	4826      	ldr	r0, [pc, #152]	; (8009d78 <rt_test_012_008_execute.lto_priv.0+0x128>)
 8009cde:	f7fa fcb7 	bl	8004650 <chThdCreateStatic>
  test_set_step(2);
 8009ce2:	2302      	movs	r3, #2
 8009ce4:	f04f 0830 	mov.w	r8, #48	; 0x30
 8009ce8:	603b      	str	r3, [r7, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8009cea:	6120      	str	r0, [r4, #16]
 8009cec:	f388 8811 	msr	BASEPRI, r8
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8009cf0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009cf4:	2008      	movs	r0, #8
 8009cf6:	f7f8 fff3 	bl	8002ce0 <chSchGoSleepTimeoutS>
 8009cfa:	f386 8811 	msr	BASEPRI, r6
 8009cfe:	4623      	mov	r3, r4
 8009d00:	f104 0514 	add.w	r5, r4, #20
    if (threads[i])
 8009d04:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d08:	b14a      	cbz	r2, 8009d1e <rt_test_012_008_execute.lto_priv.0+0xce>
 8009d0a:	f388 8811 	msr	BASEPRI, r8
  tp->flags |= CH_FLAG_TERMINATE;
 8009d0e:	f892 1029 	ldrb.w	r1, [r2, #41]	; 0x29
 8009d12:	f041 0104 	orr.w	r1, r1, #4
 8009d16:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
 8009d1a:	f386 8811 	msr	BASEPRI, r6
  for (i = 0; i < MAX_THREADS; i++)
 8009d1e:	42ab      	cmp	r3, r5
 8009d20:	d1f0      	bne.n	8009d04 <rt_test_012_008_execute.lto_priv.0+0xb4>
      threads[i] = NULL;
 8009d22:	2600      	movs	r6, #0
    if (threads[i] != NULL) {
 8009d24:	f854 0b04 	ldr.w	r0, [r4], #4
 8009d28:	b118      	cbz	r0, 8009d32 <rt_test_012_008_execute.lto_priv.0+0xe2>
      chThdWait(threads[i]);
 8009d2a:	f7fb fe79 	bl	8005a20 <chThdWait>
      threads[i] = NULL;
 8009d2e:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8009d32:	42ac      	cmp	r4, r5
 8009d34:	d1f6      	bne.n	8009d24 <rt_test_012_008_execute.lto_priv.0+0xd4>
  test_set_step(3);
 8009d36:	2303      	movs	r3, #3
  test_printf("%s", msgp);
 8009d38:	4910      	ldr	r1, [pc, #64]	; (8009d7c <rt_test_012_008_execute.lto_priv.0+0x12c>)
 8009d3a:	4811      	ldr	r0, [pc, #68]	; (8009d80 <rt_test_012_008_execute.lto_priv.0+0x130>)
 8009d3c:	603b      	str	r3, [r7, #0]
 8009d3e:	f7fe f87f 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8009d42:	9903      	ldr	r1, [sp, #12]
 8009d44:	480f      	ldr	r0, [pc, #60]	; (8009d84 <rt_test_012_008_execute.lto_priv.0+0x134>)
 8009d46:	f7fe f87b 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8009d4a:	490f      	ldr	r1, [pc, #60]	; (8009d88 <rt_test_012_008_execute.lto_priv.0+0x138>)
 8009d4c:	480f      	ldr	r0, [pc, #60]	; (8009d8c <rt_test_012_008_execute.lto_priv.0+0x13c>)
 8009d4e:	f7fe f877 	bl	8007e40 <test_printf>
}
 8009d52:	b005      	add	sp, #20
 8009d54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d58:	20001050 	.word	0x20001050
 8009d5c:	200010f4 	.word	0x200010f4
 8009d60:	08001821 	.word	0x08001821
 8009d64:	20001240 	.word	0x20001240
 8009d68:	20001ab0 	.word	0x20001ab0
 8009d6c:	200013f0 	.word	0x200013f0
 8009d70:	200015a0 	.word	0x200015a0
 8009d74:	20001750 	.word	0x20001750
 8009d78:	20001900 	.word	0x20001900
 8009d7c:	08010f7c 	.word	0x08010f7c
 8009d80:	080103f8 	.word	0x080103f8
 8009d84:	08010890 	.word	0x08010890
 8009d88:	08010f98 	.word	0x08010f98
 8009d8c:	08013080 	.word	0x08013080

08009d90 <ShellHandler>:
static void ShellHandler(eventid_t id) {
 8009d90:	b510      	push	{r4, lr}
  if (chThdTerminatedX(shelltp)) {
 8009d92:	4c06      	ldr	r4, [pc, #24]	; (8009dac <ShellHandler+0x1c>)
 8009d94:	6820      	ldr	r0, [r4, #0]
 8009d96:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8009d9a:	2b0f      	cmp	r3, #15
 8009d9c:	d000      	beq.n	8009da0 <ShellHandler+0x10>
}
 8009d9e:	bd10      	pop	{r4, pc}
    chThdWait(shelltp);                 /* Returning memory to heap.        */
 8009da0:	f7fb fe3e 	bl	8005a20 <chThdWait>
    shelltp = NULL;
 8009da4:	2300      	movs	r3, #0
 8009da6:	6023      	str	r3, [r4, #0]
}
 8009da8:	bd10      	pop	{r4, pc}
 8009daa:	bf00      	nop
 8009dac:	200025e0 	.word	0x200025e0

08009db0 <rt_test_012_006_execute.lto_priv.0>:
  test_set_step(1);
 8009db0:	2101      	movs	r1, #1
  return __sch_get_currthread();
 8009db2:	4b2b      	ldr	r3, [pc, #172]	; (8009e60 <rt_test_012_006_execute.lto_priv.0+0xb0>)
static void rt_test_012_006_execute(void) {
 8009db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return chThdGetSelfX()->hdr.pqueue.prio;
 8009db8:	68db      	ldr	r3, [r3, #12]
  test_set_step(1);
 8009dba:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8009e64 <rt_test_012_006_execute.lto_priv.0+0xb4>
  tprio_t prio = chThdGetPriorityX() + 1;
 8009dbe:	689f      	ldr	r7, [r3, #8]
 8009dc0:	2530      	movs	r5, #48	; 0x30
static void rt_test_012_006_execute(void) {
 8009dc2:	b082      	sub	sp, #8
  tprio_t prio = chThdGetPriorityX() + 1;
 8009dc4:	440f      	add	r7, r1
  test_set_step(1);
 8009dc6:	f8ca 1000 	str.w	r1, [sl]
 8009dca:	f385 8811 	msr	BASEPRI, r5
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8009dce:	2008      	movs	r0, #8
 8009dd0:	f7f8 ff86 	bl	8002ce0 <chSchGoSleepTimeoutS>
 8009dd4:	2400      	movs	r4, #0
 8009dd6:	f384 8811 	msr	BASEPRI, r4
 8009dda:	f385 8811 	msr	BASEPRI, r5
 8009dde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009de2:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8009de4:	b2b6      	uxth	r6, r6
 8009de6:	f384 8811 	msr	BASEPRI, r4
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8009dea:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8009e68 <rt_test_012_006_execute.lto_priv.0+0xb8>
 8009dee:	4625      	mov	r5, r4
 8009df0:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8009e6c <rt_test_012_006_execute.lto_priv.0+0xbc>
 8009df4:	e00a      	b.n	8009e0c <rt_test_012_006_execute.lto_priv.0+0x5c>
 8009df6:	f385 8811 	msr	BASEPRI, r5
 8009dfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      n++;
 8009e00:	3401      	adds	r4, #1
 8009e02:	1b9b      	subs	r3, r3, r6
    } while (chVTIsSystemTimeWithinX(start, end));
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009e0a:	d217      	bcs.n	8009e3c <rt_test_012_006_execute.lto_priv.0+0x8c>
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8009e0c:	463a      	mov	r2, r7
 8009e0e:	464b      	mov	r3, r9
 8009e10:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8009e14:	4640      	mov	r0, r8
 8009e16:	9500      	str	r5, [sp, #0]
 8009e18:	f7fa fc1a 	bl	8004650 <chThdCreateStatic>
 8009e1c:	2230      	movs	r2, #48	; 0x30
 8009e1e:	f382 8811 	msr	BASEPRI, r2
  tp->refs--;
 8009e22:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
 8009e26:	3a01      	subs	r2, #1
 8009e28:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 8009e2c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009e2e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8009e32:	2b0f      	cmp	r3, #15
 8009e34:	d1df      	bne.n	8009df6 <rt_test_012_006_execute.lto_priv.0+0x46>
 8009e36:	f7fb fdd3 	bl	80059e0 <chThdRelease.part.0>
 8009e3a:	e7de      	b.n	8009dfa <rt_test_012_006_execute.lto_priv.0+0x4a>
  test_set_step(2);
 8009e3c:	2302      	movs	r3, #2
  test_printf("%s", msgp);
 8009e3e:	490c      	ldr	r1, [pc, #48]	; (8009e70 <rt_test_012_006_execute.lto_priv.0+0xc0>)
 8009e40:	480c      	ldr	r0, [pc, #48]	; (8009e74 <rt_test_012_006_execute.lto_priv.0+0xc4>)
 8009e42:	f8ca 3000 	str.w	r3, [sl]
 8009e46:	f7fd fffb 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 8009e4a:	4621      	mov	r1, r4
 8009e4c:	480a      	ldr	r0, [pc, #40]	; (8009e78 <rt_test_012_006_execute.lto_priv.0+0xc8>)
 8009e4e:	f7fd fff7 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8009e52:	490a      	ldr	r1, [pc, #40]	; (8009e7c <rt_test_012_006_execute.lto_priv.0+0xcc>)
 8009e54:	480a      	ldr	r0, [pc, #40]	; (8009e80 <rt_test_012_006_execute.lto_priv.0+0xd0>)
}
 8009e56:	b002      	add	sp, #8
 8009e58:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e5c:	f7fd bff0 	b.w	8007e40 <test_printf>
 8009e60:	20001050 	.word	0x20001050
 8009e64:	200010f4 	.word	0x200010f4
 8009e68:	080016e1 	.word	0x080016e1
 8009e6c:	20001240 	.word	0x20001240
 8009e70:	08010f7c 	.word	0x08010f7c
 8009e74:	080103f8 	.word	0x080103f8
 8009e78:	08010890 	.word	0x08010890
 8009e7c:	08012c48 	.word	0x08012c48
 8009e80:	08013080 	.word	0x08013080
	...

08009e90 <rt_test_012_010_execute.lto_priv.0>:
  test_set_step(1);
 8009e90:	2301      	movs	r3, #1
static void rt_test_012_010_execute(void) {
 8009e92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 8009e96:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 800a068 <rt_test_012_010_execute.lto_priv.0+0x1d8>
    n = 0;
 8009e9a:	f04f 0800 	mov.w	r8, #0
  test_set_step(1);
 8009e9e:	f8ca 3000 	str.w	r3, [sl]
    start = test_wait_tick();
 8009ea2:	f7fe fded 	bl	8008a80 <test_wait_tick>
 8009ea6:	2630      	movs	r6, #48	; 0x30
 8009ea8:	4645      	mov	r5, r8
 8009eaa:	4681      	mov	r9, r0
  return systime + (systime_t)interval;
 8009eac:	4c6f      	ldr	r4, [pc, #444]	; (800a06c <rt_test_012_010_execute.lto_priv.0+0x1dc>)
  return __sch_get_currthread();
 8009eae:	4f70      	ldr	r7, [pc, #448]	; (800a070 <rt_test_012_010_execute.lto_priv.0+0x1e0>)
 8009eb0:	e044      	b.n	8009f3c <rt_test_012_010_execute.lto_priv.0+0xac>
 8009eb2:	f385 8811 	msr	BASEPRI, r5
 8009eb6:	f386 8811 	msr	BASEPRI, r6
  if (--sp->cnt < (cnt_t)0) {
 8009eba:	68a3      	ldr	r3, [r4, #8]
 8009ebc:	3b01      	subs	r3, #1
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	60a3      	str	r3, [r4, #8]
 8009ec2:	db6b      	blt.n	8009f9c <rt_test_012_010_execute.lto_priv.0+0x10c>
 8009ec4:	f385 8811 	msr	BASEPRI, r5
 8009ec8:	f386 8811 	msr	BASEPRI, r6
  if (++sp->cnt <= (cnt_t)0) {
 8009ecc:	68a3      	ldr	r3, [r4, #8]
 8009ece:	3301      	adds	r3, #1
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	60a3      	str	r3, [r4, #8]
 8009ed4:	dd5a      	ble.n	8009f8c <rt_test_012_010_execute.lto_priv.0+0xfc>
 8009ed6:	f385 8811 	msr	BASEPRI, r5
 8009eda:	f386 8811 	msr	BASEPRI, r6
  if (--sp->cnt < (cnt_t)0) {
 8009ede:	68a3      	ldr	r3, [r4, #8]
 8009ee0:	3b01      	subs	r3, #1
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	60a3      	str	r3, [r4, #8]
 8009ee6:	f2c0 8098 	blt.w	800a01a <rt_test_012_010_execute.lto_priv.0+0x18a>
 8009eea:	f385 8811 	msr	BASEPRI, r5
 8009eee:	f386 8811 	msr	BASEPRI, r6
  if (++sp->cnt <= (cnt_t)0) {
 8009ef2:	68a3      	ldr	r3, [r4, #8]
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	60a3      	str	r3, [r4, #8]
 8009efa:	dd3f      	ble.n	8009f7c <rt_test_012_010_execute.lto_priv.0+0xec>
 8009efc:	f385 8811 	msr	BASEPRI, r5
 8009f00:	f386 8811 	msr	BASEPRI, r6
  if (--sp->cnt < (cnt_t)0) {
 8009f04:	68a3      	ldr	r3, [r4, #8]
 8009f06:	3b01      	subs	r3, #1
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	60a3      	str	r3, [r4, #8]
 8009f0c:	db70      	blt.n	8009ff0 <rt_test_012_010_execute.lto_priv.0+0x160>
 8009f0e:	f385 8811 	msr	BASEPRI, r5
 8009f12:	f386 8811 	msr	BASEPRI, r6
  if (++sp->cnt <= (cnt_t)0) {
 8009f16:	68a3      	ldr	r3, [r4, #8]
 8009f18:	3301      	adds	r3, #1
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	60a3      	str	r3, [r4, #8]
 8009f1e:	dd25      	ble.n	8009f6c <rt_test_012_010_execute.lto_priv.0+0xdc>
 8009f20:	f385 8811 	msr	BASEPRI, r5
 8009f24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      n++;
 8009f2a:	f108 0801 	add.w	r8, r8, #1
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8009f2e:	eba3 0309 	sub.w	r3, r3, r9
    } while (chVTIsSystemTimeWithinX(start, end));
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009f38:	f080 8084 	bcs.w	800a044 <rt_test_012_010_execute.lto_priv.0+0x1b4>
 8009f3c:	f386 8811 	msr	BASEPRI, r6
  if (--sp->cnt < (cnt_t)0) {
 8009f40:	68a3      	ldr	r3, [r4, #8]
 8009f42:	3b01      	subs	r3, #1
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	60a3      	str	r3, [r4, #8]
 8009f48:	db3d      	blt.n	8009fc6 <rt_test_012_010_execute.lto_priv.0+0x136>
 8009f4a:	f385 8811 	msr	BASEPRI, r5
 8009f4e:	f386 8811 	msr	BASEPRI, r6
  if (++sp->cnt <= (cnt_t)0) {
 8009f52:	68a3      	ldr	r3, [r4, #8]
 8009f54:	3301      	adds	r3, #1
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	60a3      	str	r3, [r4, #8]
 8009f5a:	dcaa      	bgt.n	8009eb2 <rt_test_012_010_execute.lto_priv.0+0x22>
  ch_queue_t *p = qp->next;
 8009f5c:	6820      	ldr	r0, [r4, #0]
    chSchWakeupS(threadref(ch_queue_fifo_remove(&sp->queue)), MSG_OK);
 8009f5e:	2100      	movs	r1, #0
  qp->next       = p->next;
 8009f60:	6803      	ldr	r3, [r0, #0]
  qp->next->prev = qp;
 8009f62:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 8009f64:	6023      	str	r3, [r4, #0]
 8009f66:	f7fa f9fb 	bl	8004360 <chSchWakeupS>
 8009f6a:	e7a2      	b.n	8009eb2 <rt_test_012_010_execute.lto_priv.0+0x22>
  ch_queue_t *p = qp->next;
 8009f6c:	6820      	ldr	r0, [r4, #0]
 8009f6e:	2100      	movs	r1, #0
  qp->next       = p->next;
 8009f70:	6803      	ldr	r3, [r0, #0]
  qp->next->prev = qp;
 8009f72:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 8009f74:	6023      	str	r3, [r4, #0]
 8009f76:	f7fa f9f3 	bl	8004360 <chSchWakeupS>
 8009f7a:	e7d1      	b.n	8009f20 <rt_test_012_010_execute.lto_priv.0+0x90>
  ch_queue_t *p = qp->next;
 8009f7c:	6820      	ldr	r0, [r4, #0]
 8009f7e:	2100      	movs	r1, #0
  qp->next       = p->next;
 8009f80:	6803      	ldr	r3, [r0, #0]
  qp->next->prev = qp;
 8009f82:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 8009f84:	6023      	str	r3, [r4, #0]
 8009f86:	f7fa f9eb 	bl	8004360 <chSchWakeupS>
 8009f8a:	e7b7      	b.n	8009efc <rt_test_012_010_execute.lto_priv.0+0x6c>
  ch_queue_t *p = qp->next;
 8009f8c:	6820      	ldr	r0, [r4, #0]
 8009f8e:	2100      	movs	r1, #0
  qp->next       = p->next;
 8009f90:	6803      	ldr	r3, [r0, #0]
  qp->next->prev = qp;
 8009f92:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 8009f94:	6023      	str	r3, [r4, #0]
 8009f96:	f7fa f9e3 	bl	8004360 <chSchWakeupS>
 8009f9a:	e79c      	b.n	8009ed6 <rt_test_012_010_execute.lto_priv.0+0x46>
  otp->state = newstate;
 8009f9c:	2005      	movs	r0, #5
  ntp->state = CH_STATE_CURRENT;
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	68f9      	ldr	r1, [r7, #12]
  p->prev       = qp->prev;
 8009fa2:	6863      	ldr	r3, [r4, #4]
  p->next       = qp;
 8009fa4:	600c      	str	r4, [r1, #0]
  p->prev       = qp->prev;
 8009fa6:	604b      	str	r3, [r1, #4]
    currtp->u.wtsemp = sp;
 8009fa8:	62cc      	str	r4, [r1, #44]	; 0x2c
  p->prev->next = p;
 8009faa:	6019      	str	r1, [r3, #0]
  otp->state = newstate;
 8009fac:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
  ch_priority_queue_t *p = pqp->next;
 8009fb0:	6838      	ldr	r0, [r7, #0]
  qp->prev      = p;
 8009fb2:	6061      	str	r1, [r4, #4]
  pqp->next       = p->next;
 8009fb4:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 8009fb6:	605f      	str	r7, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8009fb8:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  pqp->next       = p->next;
 8009fbc:	603b      	str	r3, [r7, #0]
  __instance_set_currthread(oip, ntp);
 8009fbe:	60f8      	str	r0, [r7, #12]
  chSysSwitch(ntp, otp);
 8009fc0:	f7f6 f93e 	bl	8000240 <__port_switch>
    return currtp->u.rdymsg;
 8009fc4:	e77e      	b.n	8009ec4 <rt_test_012_010_execute.lto_priv.0+0x34>
  otp->state = newstate;
 8009fc6:	2005      	movs	r0, #5
  ntp->state = CH_STATE_CURRENT;
 8009fc8:	2201      	movs	r2, #1
 8009fca:	68f9      	ldr	r1, [r7, #12]
  p->prev       = qp->prev;
 8009fcc:	6863      	ldr	r3, [r4, #4]
  p->next       = qp;
 8009fce:	600c      	str	r4, [r1, #0]
  p->prev       = qp->prev;
 8009fd0:	604b      	str	r3, [r1, #4]
    currtp->u.wtsemp = sp;
 8009fd2:	62cc      	str	r4, [r1, #44]	; 0x2c
  p->prev->next = p;
 8009fd4:	6019      	str	r1, [r3, #0]
  otp->state = newstate;
 8009fd6:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
  ch_priority_queue_t *p = pqp->next;
 8009fda:	6838      	ldr	r0, [r7, #0]
  qp->prev      = p;
 8009fdc:	6061      	str	r1, [r4, #4]
  pqp->next       = p->next;
 8009fde:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 8009fe0:	605f      	str	r7, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8009fe2:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  pqp->next       = p->next;
 8009fe6:	603b      	str	r3, [r7, #0]
  __instance_set_currthread(oip, ntp);
 8009fe8:	60f8      	str	r0, [r7, #12]
  chSysSwitch(ntp, otp);
 8009fea:	f7f6 f929 	bl	8000240 <__port_switch>
    return currtp->u.rdymsg;
 8009fee:	e7ac      	b.n	8009f4a <rt_test_012_010_execute.lto_priv.0+0xba>
  otp->state = newstate;
 8009ff0:	2005      	movs	r0, #5
  ntp->state = CH_STATE_CURRENT;
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	68f9      	ldr	r1, [r7, #12]
  p->prev       = qp->prev;
 8009ff6:	6863      	ldr	r3, [r4, #4]
  p->next       = qp;
 8009ff8:	600c      	str	r4, [r1, #0]
  p->prev       = qp->prev;
 8009ffa:	604b      	str	r3, [r1, #4]
    currtp->u.wtsemp = sp;
 8009ffc:	62cc      	str	r4, [r1, #44]	; 0x2c
  p->prev->next = p;
 8009ffe:	6019      	str	r1, [r3, #0]
  otp->state = newstate;
 800a000:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
  ch_priority_queue_t *p = pqp->next;
 800a004:	6838      	ldr	r0, [r7, #0]
  qp->prev      = p;
 800a006:	6061      	str	r1, [r4, #4]
  pqp->next       = p->next;
 800a008:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 800a00a:	605f      	str	r7, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 800a00c:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  pqp->next       = p->next;
 800a010:	603b      	str	r3, [r7, #0]
  __instance_set_currthread(oip, ntp);
 800a012:	60f8      	str	r0, [r7, #12]
  chSysSwitch(ntp, otp);
 800a014:	f7f6 f914 	bl	8000240 <__port_switch>
    return currtp->u.rdymsg;
 800a018:	e779      	b.n	8009f0e <rt_test_012_010_execute.lto_priv.0+0x7e>
  otp->state = newstate;
 800a01a:	2005      	movs	r0, #5
  ntp->state = CH_STATE_CURRENT;
 800a01c:	2201      	movs	r2, #1
 800a01e:	68f9      	ldr	r1, [r7, #12]
  p->prev       = qp->prev;
 800a020:	6863      	ldr	r3, [r4, #4]
  p->next       = qp;
 800a022:	600c      	str	r4, [r1, #0]
  p->prev       = qp->prev;
 800a024:	604b      	str	r3, [r1, #4]
    currtp->u.wtsemp = sp;
 800a026:	62cc      	str	r4, [r1, #44]	; 0x2c
  p->prev->next = p;
 800a028:	6019      	str	r1, [r3, #0]
  otp->state = newstate;
 800a02a:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
  ch_priority_queue_t *p = pqp->next;
 800a02e:	6838      	ldr	r0, [r7, #0]
  qp->prev      = p;
 800a030:	6061      	str	r1, [r4, #4]
  pqp->next       = p->next;
 800a032:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 800a034:	605f      	str	r7, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 800a036:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  pqp->next       = p->next;
 800a03a:	603b      	str	r3, [r7, #0]
  __instance_set_currthread(oip, ntp);
 800a03c:	60f8      	str	r0, [r7, #12]
  chSysSwitch(ntp, otp);
 800a03e:	f7f6 f8ff 	bl	8000240 <__port_switch>
    return currtp->u.rdymsg;
 800a042:	e752      	b.n	8009eea <rt_test_012_010_execute.lto_priv.0+0x5a>
  test_set_step(2);
 800a044:	2302      	movs	r3, #2
  test_printf("%s", msgp);
 800a046:	490b      	ldr	r1, [pc, #44]	; (800a074 <rt_test_012_010_execute.lto_priv.0+0x1e4>)
 800a048:	480b      	ldr	r0, [pc, #44]	; (800a078 <rt_test_012_010_execute.lto_priv.0+0x1e8>)
 800a04a:	f8ca 3000 	str.w	r3, [sl]
 800a04e:	f7fd fef7 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 800a052:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800a056:	4809      	ldr	r0, [pc, #36]	; (800a07c <rt_test_012_010_execute.lto_priv.0+0x1ec>)
 800a058:	f7fd fef2 	bl	8007e40 <test_printf>
}
 800a05c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800a060:	4907      	ldr	r1, [pc, #28]	; (800a080 <rt_test_012_010_execute.lto_priv.0+0x1f0>)
 800a062:	4808      	ldr	r0, [pc, #32]	; (800a084 <rt_test_012_010_execute.lto_priv.0+0x1f4>)
 800a064:	f7fd beec 	b.w	8007e40 <test_printf>
 800a068:	200010f4 	.word	0x200010f4
 800a06c:	20001230 	.word	0x20001230
 800a070:	20001050 	.word	0x20001050
 800a074:	08010f7c 	.word	0x08010f7c
 800a078:	080103f8 	.word	0x080103f8
 800a07c:	08010890 	.word	0x08010890
 800a080:	08012c54 	.word	0x08012c54
 800a084:	08013080 	.word	0x08013080
	...

0800a090 <chCacheGetObject.constprop.0>:
 * @param[in] key       object identifier within the group
 * @return              The pointer to the retrieved object.
 *
 * @api
 */
oc_object_t *chCacheGetObject(objects_cache_t *ocp,
 800a090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a094:	2330      	movs	r3, #48	; 0x30
 800a096:	4605      	mov	r5, r0
 800a098:	f383 8811 	msr	BASEPRI, r3
  hhp  = &ocp->hashp[OC_HASH_FUNCTION(ocp, group, key)];
 800a09c:	4e53      	ldr	r6, [pc, #332]	; (800a1ec <chCacheGetObject.constprop.0+0x15c>)
 800a09e:	e9d6 3100 	ldrd	r3, r1, [r6]
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	4003      	ands	r3, r0
  objp = hhp->hash_next;
 800a0a6:	f851 4033 	ldr.w	r4, [r1, r3, lsl #3]
  hhp  = &ocp->hashp[OC_HASH_FUNCTION(ocp, group, key)];
 800a0aa:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
  while (objp != (oc_object_t *)hhp) {
 800a0ae:	42a2      	cmp	r2, r4
 800a0b0:	d103      	bne.n	800a0ba <chCacheGetObject.constprop.0+0x2a>
 800a0b2:	e01b      	b.n	800a0ec <chCacheGetObject.constprop.0+0x5c>
    objp = objp->hash_next;
 800a0b4:	6824      	ldr	r4, [r4, #0]
  while (objp != (oc_object_t *)hhp) {
 800a0b6:	42a2      	cmp	r2, r4
 800a0b8:	d018      	beq.n	800a0ec <chCacheGetObject.constprop.0+0x5c>
    if ((objp->obj_key == key) && (objp->obj_group == group)) {
 800a0ba:	6963      	ldr	r3, [r4, #20]
 800a0bc:	429d      	cmp	r5, r3
 800a0be:	d1f9      	bne.n	800a0b4 <chCacheGetObject.constprop.0+0x24>
 800a0c0:	6923      	ldr	r3, [r4, #16]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d1f6      	bne.n	800a0b4 <chCacheGetObject.constprop.0+0x24>
 */
static inline cnt_t chSemGetCounterI(const semaphore_t *sp) {

  chDbgCheckClassI();

  return sp->cnt;
 800a0c6:	6a23      	ldr	r3, [r4, #32]
    chDbgAssert((objp->obj_flags & OC_FLAG_INHASH) == OC_FLAG_INHASH,
                "not in hash");

    /* Cache hit, checking if the buffer is owned by some
       other thread.*/
    if (chSemGetCounterI(&objp->obj_sem) > (cnt_t)0) {
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	dd51      	ble.n	800a170 <chCacheGetObject.constprop.0+0xe0>

      chDbgAssert((objp->obj_flags & OC_FLAG_INLRU) == OC_FLAG_INLRU,
                  "not in LRU");

      /* Removing the object from LRU, now it is "owned".*/
      LRU_REMOVE(objp);
 800a0cc:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
      objp->obj_flags &= ~OC_FLAG_INLRU;
 800a0d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
  sp->cnt--;
 800a0d2:	3b01      	subs	r3, #1
 800a0d4:	f022 0201 	bic.w	r2, r2, #1
      LRU_REMOVE(objp);
 800a0d8:	6081      	str	r1, [r0, #8]
 800a0da:	60c8      	str	r0, [r1, #12]
 800a0dc:	e9c4 3208 	strd	r3, r2, [r4, #32]
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	f383 8811 	msr	BASEPRI, r3

  /* Out of critical section and returning the object.*/
  chSysUnlock();

  return objp;
}
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    currtp->u.wtsemp = sp;
 800a0ec:	4f40      	ldr	r7, [pc, #256]	; (800a1f0 <chCacheGetObject.constprop.0+0x160>)
 800a0ee:	f8df 8104 	ldr.w	r8, [pc, #260]	; 800a1f4 <chCacheGetObject.constprop.0+0x164>
    (void) ocp->writef(ocp, objp, true);
 800a0f2:	f1a7 0930 	sub.w	r9, r7, #48	; 0x30
 800a0f6:	e01c      	b.n	800a132 <chCacheGetObject.constprop.0+0xa2>
    objp = ocp->lru.lru_prev;
 800a0f8:	6a34      	ldr	r4, [r6, #32]
 800a0fa:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
    LRU_REMOVE(objp);
 800a0fe:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 800a102:	3b01      	subs	r3, #1
 800a104:	6081      	str	r1, [r0, #8]
 800a106:	60c8      	str	r0, [r1, #12]
    objp->obj_flags &= ~OC_FLAG_INLRU;
 800a108:	f022 0101 	bic.w	r1, r2, #1
 800a10c:	e9c4 3108 	strd	r3, r1, [r4, #32]
    if ((objp->obj_flags & OC_FLAG_LAZYWRITE) == 0U) {
 800a110:	06d1      	lsls	r1, r2, #27
 800a112:	d54c      	bpl.n	800a1ae <chCacheGetObject.constprop.0+0x11e>
 800a114:	2300      	movs	r3, #0
 800a116:	f383 8811 	msr	BASEPRI, r3
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_FORGET;
 800a11a:	f04f 0c22 	mov.w	ip, #34	; 0x22
    (void) ocp->writef(ocp, objp, true);
 800a11e:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800a120:	2201      	movs	r2, #1
 800a122:	4621      	mov	r1, r4
 800a124:	4648      	mov	r0, r9
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_FORGET;
 800a126:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
    (void) ocp->writef(ocp, objp, true);
 800a12a:	4798      	blx	r3
 800a12c:	2330      	movs	r3, #48	; 0x30
 800a12e:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 800a132:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800a134:	3b01      	subs	r3, #1
 800a136:	2b00      	cmp	r3, #0
 800a138:	63b3      	str	r3, [r6, #56]	; 0x38
 800a13a:	dadd      	bge.n	800a0f8 <chCacheGetObject.constprop.0+0x68>
  otp->state = newstate;
 800a13c:	2005      	movs	r0, #5
  ntp->state = CH_STATE_CURRENT;
 800a13e:	2201      	movs	r2, #1
 800a140:	f8d8 100c 	ldr.w	r1, [r8, #12]
  p->prev       = qp->prev;
 800a144:	6b73      	ldr	r3, [r6, #52]	; 0x34
  p->next       = qp;
 800a146:	600f      	str	r7, [r1, #0]
  p->prev       = qp->prev;
 800a148:	604b      	str	r3, [r1, #4]
    currtp->u.wtsemp = sp;
 800a14a:	62cf      	str	r7, [r1, #44]	; 0x2c
  p->prev->next = p;
 800a14c:	6019      	str	r1, [r3, #0]
  qp->prev      = p;
 800a14e:	6371      	str	r1, [r6, #52]	; 0x34
  otp->state = newstate;
 800a150:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
  ch_priority_queue_t *p = pqp->next;
 800a154:	f8d8 0000 	ldr.w	r0, [r8]
  pqp->next       = p->next;
 800a158:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 800a15a:	f8c3 8004 	str.w	r8, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 800a15e:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  pqp->next       = p->next;
 800a162:	f8c8 3000 	str.w	r3, [r8]
  __instance_set_currthread(oip, ntp);
 800a166:	f8c8 000c 	str.w	r0, [r8, #12]
  chSysSwitch(ntp, otp);
 800a16a:	f7f6 f869 	bl	8000240 <__port_switch>
 800a16e:	e7c3      	b.n	800a0f8 <chCacheGetObject.constprop.0+0x68>
 800a170:	4a20      	ldr	r2, [pc, #128]	; (800a1f4 <chCacheGetObject.constprop.0+0x164>)
  otp->state = newstate;
 800a172:	2605      	movs	r6, #5
  p->prev       = qp->prev;
 800a174:	69e5      	ldr	r5, [r4, #28]
 800a176:	68d1      	ldr	r1, [r2, #12]
      (void) chSemWaitS(&objp->obj_sem);
 800a178:	f104 0018 	add.w	r0, r4, #24
  if (--sp->cnt < (cnt_t)0) {
 800a17c:	3b01      	subs	r3, #1
 800a17e:	6223      	str	r3, [r4, #32]
  p->next       = qp;
 800a180:	6008      	str	r0, [r1, #0]
  p->prev       = qp->prev;
 800a182:	604d      	str	r5, [r1, #4]
    currtp->u.wtsemp = sp;
 800a184:	62c8      	str	r0, [r1, #44]	; 0x2c
  p->prev->next = p;
 800a186:	6029      	str	r1, [r5, #0]
  ntp->state = CH_STATE_CURRENT;
 800a188:	2501      	movs	r5, #1
  ch_priority_queue_t *p = pqp->next;
 800a18a:	6810      	ldr	r0, [r2, #0]
  qp->prev      = p;
 800a18c:	61e1      	str	r1, [r4, #28]
  otp->state = newstate;
 800a18e:	f881 6028 	strb.w	r6, [r1, #40]	; 0x28
  pqp->next       = p->next;
 800a192:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 800a194:	605a      	str	r2, [r3, #4]
  pqp->next       = p->next;
 800a196:	6013      	str	r3, [r2, #0]
  ntp->state = CH_STATE_CURRENT;
 800a198:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
  __instance_set_currthread(oip, ntp);
 800a19c:	60d0      	str	r0, [r2, #12]
  chSysSwitch(ntp, otp);
 800a19e:	f7f6 f84f 	bl	8000240 <__port_switch>
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	f383 8811 	msr	BASEPRI, r3
}
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if ((objp->obj_flags & OC_FLAG_INHASH) != 0U) {
 800a1ae:	0793      	lsls	r3, r2, #30
 800a1b0:	d504      	bpl.n	800a1bc <chCacheGetObject.constprop.0+0x12c>
        HASH_REMOVE(objp);
 800a1b2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a1b6:	601a      	str	r2, [r3, #0]
 800a1b8:	6822      	ldr	r2, [r4, #0]
 800a1ba:	6053      	str	r3, [r2, #4]
    objp->obj_group = group;
 800a1bc:	2000      	movs	r0, #0
    HASH_INSERT(ocp, objp, group, key);
 800a1be:	e9d6 3200 	ldrd	r3, r2, [r6]
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_NOTSYNC;
 800a1c2:	210a      	movs	r1, #10
    HASH_INSERT(ocp, objp, group, key);
 800a1c4:	3b01      	subs	r3, #1
    objp->obj_key   = key;
 800a1c6:	6165      	str	r5, [r4, #20]
    HASH_INSERT(ocp, objp, group, key);
 800a1c8:	401d      	ands	r5, r3
 800a1ca:	f852 3035 	ldr.w	r3, [r2, r5, lsl #3]
 800a1ce:	eb02 06c5 	add.w	r6, r2, r5, lsl #3
 800a1d2:	6023      	str	r3, [r4, #0]
 800a1d4:	6066      	str	r6, [r4, #4]
    objp->obj_group = group;
 800a1d6:	6120      	str	r0, [r4, #16]
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_NOTSYNC;
 800a1d8:	6261      	str	r1, [r4, #36]	; 0x24
    HASH_INSERT(ocp, objp, group, key);
 800a1da:	605c      	str	r4, [r3, #4]
 800a1dc:	f842 4035 	str.w	r4, [r2, r5, lsl #3]
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	f383 8811 	msr	BASEPRI, r3
}
 800a1e6:	4620      	mov	r0, r4
 800a1e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1ec:	20001d1c 	.word	0x20001d1c
 800a1f0:	20001d4c 	.word	0x20001d4c
 800a1f4:	20001050 	.word	0x20001050
	...

0800a200 <rt_test_012_011_execute.lto_priv.0>:
  test_set_step(1);
 800a200:	2101      	movs	r1, #1
static void rt_test_012_011_execute(void) {
 800a202:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 800a206:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800a2c0 <rt_test_012_011_execute.lto_priv.0+0xc0>
 800a20a:	2530      	movs	r5, #48	; 0x30
 800a20c:	f8c8 1000 	str.w	r1, [r8]
 800a210:	f385 8811 	msr	BASEPRI, r5
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800a214:	2008      	movs	r0, #8
 800a216:	f7f8 fd63 	bl	8002ce0 <chSchGoSleepTimeoutS>
 800a21a:	f04f 0900 	mov.w	r9, #0
 800a21e:	f389 8811 	msr	BASEPRI, r9
 800a222:	f385 8811 	msr	BASEPRI, r5
 800a226:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a22a:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 800a22c:	b2bf      	uxth	r7, r7
 800a22e:	f389 8811 	msr	BASEPRI, r9
 800a232:	464e      	mov	r6, r9
  chMtxLockS(mp);
 800a234:	4c23      	ldr	r4, [pc, #140]	; (800a2c4 <rt_test_012_011_execute.lto_priv.0+0xc4>)
 800a236:	f385 8811 	msr	BASEPRI, r5
 800a23a:	4620      	mov	r0, r4
 800a23c:	f7fa fca0 	bl	8004b80 <chMtxLockS>
 800a240:	f386 8811 	msr	BASEPRI, r6
      chMtxUnlock(&mtx1);
 800a244:	4620      	mov	r0, r4
 800a246:	f7fa fd33 	bl	8004cb0 <chMtxUnlock>
 800a24a:	f385 8811 	msr	BASEPRI, r5
 800a24e:	4620      	mov	r0, r4
 800a250:	f7fa fc96 	bl	8004b80 <chMtxLockS>
 800a254:	f386 8811 	msr	BASEPRI, r6
      chMtxUnlock(&mtx1);
 800a258:	4620      	mov	r0, r4
 800a25a:	f7fa fd29 	bl	8004cb0 <chMtxUnlock>
 800a25e:	f385 8811 	msr	BASEPRI, r5
 800a262:	4620      	mov	r0, r4
 800a264:	f7fa fc8c 	bl	8004b80 <chMtxLockS>
 800a268:	f386 8811 	msr	BASEPRI, r6
      chMtxUnlock(&mtx1);
 800a26c:	4620      	mov	r0, r4
 800a26e:	f7fa fd1f 	bl	8004cb0 <chMtxUnlock>
 800a272:	f385 8811 	msr	BASEPRI, r5
 800a276:	4620      	mov	r0, r4
 800a278:	f7fa fc82 	bl	8004b80 <chMtxLockS>
 800a27c:	f386 8811 	msr	BASEPRI, r6
      chMtxUnlock(&mtx1);
 800a280:	4620      	mov	r0, r4
 800a282:	f7fa fd15 	bl	8004cb0 <chMtxUnlock>
 800a286:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      n++;
 800a28c:	f109 0901 	add.w	r9, r9, #1
 800a290:	1bdb      	subs	r3, r3, r7
    } while (chVTIsSystemTimeWithinX(start, end));
 800a292:	b29b      	uxth	r3, r3
 800a294:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a298:	d3cd      	bcc.n	800a236 <rt_test_012_011_execute.lto_priv.0+0x36>
  test_set_step(2);
 800a29a:	2302      	movs	r3, #2
  test_printf("%s", msgp);
 800a29c:	490a      	ldr	r1, [pc, #40]	; (800a2c8 <rt_test_012_011_execute.lto_priv.0+0xc8>)
 800a29e:	480b      	ldr	r0, [pc, #44]	; (800a2cc <rt_test_012_011_execute.lto_priv.0+0xcc>)
 800a2a0:	f8c8 3000 	str.w	r3, [r8]
 800a2a4:	f7fd fdcc 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 800a2a8:	ea4f 0189 	mov.w	r1, r9, lsl #2
 800a2ac:	4808      	ldr	r0, [pc, #32]	; (800a2d0 <rt_test_012_011_execute.lto_priv.0+0xd0>)
 800a2ae:	f7fd fdc7 	bl	8007e40 <test_printf>
}
 800a2b2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800a2b6:	4907      	ldr	r1, [pc, #28]	; (800a2d4 <rt_test_012_011_execute.lto_priv.0+0xd4>)
 800a2b8:	4807      	ldr	r0, [pc, #28]	; (800a2d8 <rt_test_012_011_execute.lto_priv.0+0xd8>)
 800a2ba:	f7fd bdc1 	b.w	8007e40 <test_printf>
 800a2be:	bf00      	nop
 800a2c0:	200010f4 	.word	0x200010f4
 800a2c4:	200024cc 	.word	0x200024cc
 800a2c8:	08010f7c 	.word	0x08010f7c
 800a2cc:	080103f8 	.word	0x080103f8
 800a2d0:	08010890 	.word	0x08010890
 800a2d4:	08012c64 	.word	0x08012c64
 800a2d8:	08013080 	.word	0x08013080
 800a2dc:	00000000 	.word	0x00000000

0800a2e0 <chHeapIntegrityCheck.constprop.0>:
 800a2e0:	2330      	movs	r3, #48	; 0x30
 * @retval false        The test succeeded.
 * @retval true         Test failed.
 *
 * @api
 */
bool chHeapIntegrityCheck(memory_heap_t *heapp) {
 800a2e2:	b510      	push	{r4, lr}
 800a2e4:	f383 8811 	msr	BASEPRI, r3
 800a2e8:	4c15      	ldr	r4, [pc, #84]	; (800a340 <chHeapIntegrityCheck.constprop.0+0x60>)
 800a2ea:	f104 0014 	add.w	r0, r4, #20
 800a2ee:	f7fa fc47 	bl	8004b80 <chMtxLockS>
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	f383 8811 	msr	BASEPRI, r3
 * @xclass
 */
static inline bool chMemIsSpaceWithinX(const memory_area_t *map,
                                       const void *p,
                                       size_t size) {
  const uint8_t *mem_base = (const uint8_t *)map->base;
 800a2f8:	e9d4 1201 	ldrd	r1, r2, [r4, #4]

  /* Taking heap mutex.*/
  H_LOCK(heapp);

  prevhp = NULL;
  hp = &heapp->header;
 800a2fc:	340c      	adds	r4, #12
  while ((hp = H_FREE_NEXT(hp)) != NULL) {
 800a2fe:	6824      	ldr	r4, [r4, #0]
  const uint8_t *mem_end  = mem_base + map->size - (size_t)1;
 800a300:	3a01      	subs	r2, #1
 800a302:	440a      	add	r2, r1
 800a304:	b18c      	cbz	r4, 800a32a <chHeapIntegrityCheck.constprop.0+0x4a>

    /* Order violation or loop.*/
    if (hp <= prevhp) {
 800a306:	42a3      	cmp	r3, r4
 800a308:	d214      	bcs.n	800a334 <chHeapIntegrityCheck.constprop.0+0x54>
      result = true;
      break;
    }

    /* Checking pointer alignment.*/
    if (!MEM_IS_ALIGNED(hp, CH_HEAP_ALIGNMENT)) {
 800a30a:	0763      	lsls	r3, r4, #29
 800a30c:	d112      	bne.n	800a334 <chHeapIntegrityCheck.constprop.0+0x54>
    }

    /* Validating the found free block.*/
    if (!chMemIsSpaceWithinX(&heapp->area,
                             (void *)hp,
                             H_FREE_FULLSIZE(hp))) {
 800a30e:	6863      	ldr	r3, [r4, #4]
  const uint8_t *base     = (const uint8_t *)p;
  const uint8_t *end      = base + size - (size_t)1;
 800a310:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800a314:	3307      	adds	r3, #7

  chDbgAssert((mem_base <= mem_end) && (base <= end), "invalid memory area");

  return (bool)((base <= end) && (base >= mem_base) && (end <= mem_end));
 800a316:	429c      	cmp	r4, r3
 800a318:	d80c      	bhi.n	800a334 <chHeapIntegrityCheck.constprop.0+0x54>
 800a31a:	428c      	cmp	r4, r1
 800a31c:	d30a      	bcc.n	800a334 <chHeapIntegrityCheck.constprop.0+0x54>
 800a31e:	429a      	cmp	r2, r3
 800a320:	d308      	bcc.n	800a334 <chHeapIntegrityCheck.constprop.0+0x54>
 800a322:	4623      	mov	r3, r4
  while ((hp = H_FREE_NEXT(hp)) != NULL) {
 800a324:	6824      	ldr	r4, [r4, #0]
 800a326:	2c00      	cmp	r4, #0
 800a328:	d1ed      	bne.n	800a306 <chHeapIntegrityCheck.constprop.0+0x26>

    prevhp = hp;
  }

  /* Releasing the heap mutex.*/
  H_UNLOCK(heapp);
 800a32a:	4806      	ldr	r0, [pc, #24]	; (800a344 <chHeapIntegrityCheck.constprop.0+0x64>)
 800a32c:	f7fa fcc0 	bl	8004cb0 <chMtxUnlock>

  return result;
}
 800a330:	4620      	mov	r0, r4
 800a332:	bd10      	pop	{r4, pc}
      result = true;
 800a334:	2401      	movs	r4, #1
  H_UNLOCK(heapp);
 800a336:	4803      	ldr	r0, [pc, #12]	; (800a344 <chHeapIntegrityCheck.constprop.0+0x64>)
 800a338:	f7fa fcba 	bl	8004cb0 <chMtxUnlock>
}
 800a33c:	4620      	mov	r0, r4
 800a33e:	bd10      	pop	{r4, pc}
 800a340:	200025e4 	.word	0x200025e4
 800a344:	200025f8 	.word	0x200025f8
	...

0800a350 <chFactoryReleaseSemaphore.isra.0>:
 *                      release.
 * @retval 0            if the object has been released.
 *
 * @api
 */
ucnt_t chFactoryReleaseSemaphore(dyn_semaphore_t *dsp) {
 800a350:	b538      	push	{r3, r4, r5, lr}
 800a352:	2330      	movs	r3, #48	; 0x30
 800a354:	4604      	mov	r4, r0
 800a356:	f383 8811 	msr	BASEPRI, r3
 800a35a:	4d15      	ldr	r5, [pc, #84]	; (800a3b0 <chFactoryReleaseSemaphore.isra.0+0x60>)
 800a35c:	4628      	mov	r0, r5
 800a35e:	f7fa fc0f 	bl	8004b80 <chMtxLockS>
 800a362:	2300      	movs	r3, #0
 800a364:	f383 8811 	msr	BASEPRI, r3
  refs = --dep->refs;
 800a368:	6863      	ldr	r3, [r4, #4]
 800a36a:	3b01      	subs	r3, #1
 800a36c:	6063      	str	r3, [r4, #4]
  if (refs == (ucnt_t)0) {
 800a36e:	b99b      	cbnz	r3, 800a398 <chFactoryReleaseSemaphore.isra.0+0x48>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 800a370:	f105 0228 	add.w	r2, r5, #40	; 0x28
 800a374:	4613      	mov	r3, r2
 800a376:	4619      	mov	r1, r3
  while (prev->next != (dyn_element_t *)dlp) {
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d011      	beq.n	800a3a2 <chFactoryReleaseSemaphore.isra.0+0x52>
    if (prev->next == element) {
 800a37e:	429c      	cmp	r4, r3
 800a380:	d1f9      	bne.n	800a376 <chFactoryReleaseSemaphore.isra.0+0x26>
      prev->next = element->next;
 800a382:	6822      	ldr	r2, [r4, #0]
 800a384:	2330      	movs	r3, #48	; 0x30
 800a386:	600a      	str	r2, [r1, #0]
 800a388:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 800a38c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800a38e:	2300      	movs	r3, #0
 800a390:	6022      	str	r2, [r4, #0]
  mp->next = php;
 800a392:	62ec      	str	r4, [r5, #44]	; 0x2c
 800a394:	f383 8811 	msr	BASEPRI, r3

  refs = dyn_release_object_pool(&dsp->element,
                                 &ch_factory.sem_list,
                                 &ch_factory.sem_pool);

  FACTORY_UNLOCK();
 800a398:	4805      	ldr	r0, [pc, #20]	; (800a3b0 <chFactoryReleaseSemaphore.isra.0+0x60>)

  return refs;
}
 800a39a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  FACTORY_UNLOCK();
 800a39e:	f7fa bc87 	b.w	8004cb0 <chMtxUnlock>
 800a3a2:	2330      	movs	r3, #48	; 0x30
 800a3a4:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800a3ac:	601a      	str	r2, [r3, #0]
 800a3ae:	deff      	udf	#255	; 0xff
 800a3b0:	20001e90 	.word	0x20001e90
	...

0800a3c0 <chFactoryReleaseObject.isra.0>:
ucnt_t chFactoryReleaseObject(registered_object_t *rop) {
 800a3c0:	b538      	push	{r3, r4, r5, lr}
 800a3c2:	2330      	movs	r3, #48	; 0x30
 800a3c4:	4604      	mov	r4, r0
 800a3c6:	f383 8811 	msr	BASEPRI, r3
 800a3ca:	4d15      	ldr	r5, [pc, #84]	; (800a420 <chFactoryReleaseObject.isra.0+0x60>)
 800a3cc:	4628      	mov	r0, r5
 800a3ce:	f7fa fbd7 	bl	8004b80 <chMtxLockS>
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	f383 8811 	msr	BASEPRI, r3
  refs = --dep->refs;
 800a3d8:	6863      	ldr	r3, [r4, #4]
 800a3da:	3b01      	subs	r3, #1
 800a3dc:	6063      	str	r3, [r4, #4]
  if (refs == (ucnt_t)0) {
 800a3de:	b99b      	cbnz	r3, 800a408 <chFactoryReleaseObject.isra.0+0x48>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 800a3e0:	f105 0210 	add.w	r2, r5, #16
 800a3e4:	4613      	mov	r3, r2
 800a3e6:	4619      	mov	r1, r3
  while (prev->next != (dyn_element_t *)dlp) {
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d011      	beq.n	800a412 <chFactoryReleaseObject.isra.0+0x52>
    if (prev->next == element) {
 800a3ee:	429c      	cmp	r4, r3
 800a3f0:	d1f9      	bne.n	800a3e6 <chFactoryReleaseObject.isra.0+0x26>
      prev->next = element->next;
 800a3f2:	6822      	ldr	r2, [r4, #0]
 800a3f4:	2330      	movs	r3, #48	; 0x30
 800a3f6:	600a      	str	r2, [r1, #0]
 800a3f8:	f383 8811 	msr	BASEPRI, r3
 800a3fc:	696a      	ldr	r2, [r5, #20]
 800a3fe:	2300      	movs	r3, #0
 800a400:	6022      	str	r2, [r4, #0]
  mp->next = php;
 800a402:	616c      	str	r4, [r5, #20]
 800a404:	f383 8811 	msr	BASEPRI, r3
  FACTORY_UNLOCK();
 800a408:	4805      	ldr	r0, [pc, #20]	; (800a420 <chFactoryReleaseObject.isra.0+0x60>)
}
 800a40a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  FACTORY_UNLOCK();
 800a40e:	f7fa bc4f 	b.w	8004cb0 <chMtxUnlock>
 800a412:	2330      	movs	r3, #48	; 0x30
 800a414:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 800a418:	2300      	movs	r3, #0
 800a41a:	696a      	ldr	r2, [r5, #20]
 800a41c:	601a      	str	r2, [r3, #0]
 800a41e:	deff      	udf	#255	; 0xff
 800a420:	20001e90 	.word	0x20001e90
	...

0800a430 <oslib_test_001_001_execute.lto_priv.0>:
 800a430:	f7fd bf2e 	b.w	8008290 <rt_test_001_001_execute.lto_priv.0>
	...

0800a440 <chMBPostAheadI.constprop.0>:
  if (mbp->reset) {
 800a440:	4b19      	ldr	r3, [pc, #100]	; (800a4a8 <chMBPostAheadI.constprop.0+0x68>)
 800a442:	7d1a      	ldrb	r2, [r3, #20]
 800a444:	2a00      	cmp	r2, #0
 800a446:	d12c      	bne.n	800a4a2 <chMBPostAheadI.constprop.0+0x62>
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 800a448:	b430      	push	{r4, r5}
  return (size_t)(mbp->top - mbp->buffer);
 800a44a:	e9d3 2500 	ldrd	r2, r5, [r3]
  return mbp->cnt;
 800a44e:	691c      	ldr	r4, [r3, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800a450:	1aa9      	subs	r1, r5, r2
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 800a452:	ebb4 0fa1 	cmp.w	r4, r1, asr #2
 800a456:	d021      	beq.n	800a49c <chMBPostAheadI.constprop.0+0x5c>
    if (--mbp->rdptr < mbp->buffer) {
 800a458:	68d9      	ldr	r1, [r3, #12]
    mbp->cnt++;
 800a45a:	3401      	adds	r4, #1
    if (--mbp->rdptr < mbp->buffer) {
 800a45c:	3904      	subs	r1, #4
 800a45e:	428a      	cmp	r2, r1
      mbp->rdptr = mbp->top - 1;
 800a460:	bf88      	it	hi
 800a462:	1f29      	subhi	r1, r5, #4
  return (bool)(qp->next != qp);
 800a464:	6a1a      	ldr	r2, [r3, #32]
 800a466:	60d9      	str	r1, [r3, #12]
    *mbp->rdptr = msg;
 800a468:	6008      	str	r0, [r1, #0]
  if (ch_queue_notempty(&tqp->queue)) {
 800a46a:	4910      	ldr	r1, [pc, #64]	; (800a4ac <chMBPostAheadI.constprop.0+0x6c>)
  tp->u.rdymsg = msg;
 800a46c:	2000      	movs	r0, #0
 800a46e:	428a      	cmp	r2, r1
    mbp->cnt++;
 800a470:	611c      	str	r4, [r3, #16]
 800a472:	d011      	beq.n	800a498 <chMBPostAheadI.constprop.0+0x58>
  qp->next       = p->next;
 800a474:	6814      	ldr	r4, [r2, #0]
 800a476:	621c      	str	r4, [r3, #32]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800a478:	6993      	ldr	r3, [r2, #24]
  qp->next->prev = qp;
 800a47a:	6061      	str	r1, [r4, #4]
  } while (unlikely(pqp->prio >= p->prio));
 800a47c:	6894      	ldr	r4, [r2, #8]
 800a47e:	62d0      	str	r0, [r2, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 800a480:	f882 0028 	strb.w	r0, [r2, #40]	; 0x28
    pqp = pqp->next;
 800a484:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800a486:	6899      	ldr	r1, [r3, #8]
 800a488:	42a1      	cmp	r1, r4
 800a48a:	d2fb      	bcs.n	800a484 <chMBPostAheadI.constprop.0+0x44>
    return MSG_OK;
 800a48c:	2000      	movs	r0, #0
  p->prev       = pqp->prev;
 800a48e:	6859      	ldr	r1, [r3, #4]
 800a490:	e9c2 3100 	strd	r3, r1, [r2]
  p->prev->next = p;
 800a494:	600a      	str	r2, [r1, #0]
  pqp->prev     = p;
 800a496:	605a      	str	r2, [r3, #4]
}
 800a498:	bc30      	pop	{r4, r5}
 800a49a:	4770      	bx	lr
  return MSG_TIMEOUT;
 800a49c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4a0:	e7fa      	b.n	800a498 <chMBPostAheadI.constprop.0+0x58>
    return MSG_RESET;
 800a4a2:	f06f 0001 	mvn.w	r0, #1
}
 800a4a6:	4770      	bx	lr
 800a4a8:	20000854 	.word	0x20000854
 800a4ac:	20000874 	.word	0x20000874

0800a4b0 <oslib_test_002_001_teardown.lto_priv.0>:
 800a4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4b2:	2330      	movs	r3, #48	; 0x30
 800a4b4:	f383 8811 	msr	BASEPRI, r3
 800a4b8:	4c26      	ldr	r4, [pc, #152]	; (800a554 <oslib_test_002_001_teardown.lto_priv.0+0xa4>)
 800a4ba:	2700      	movs	r7, #0
 800a4bc:	4625      	mov	r5, r4
 800a4be:	2201      	movs	r2, #1
 800a4c0:	f855 1f18 	ldr.w	r1, [r5, #24]!
 800a4c4:	6823      	ldr	r3, [r4, #0]
 800a4c6:	42a9      	cmp	r1, r5
 800a4c8:	e9c4 3302 	strd	r3, r3, [r4, #8]
 800a4cc:	6127      	str	r7, [r4, #16]
 800a4ce:	7522      	strb	r2, [r4, #20]
 800a4d0:	d016      	beq.n	800a500 <oslib_test_002_001_teardown.lto_priv.0+0x50>
 800a4d2:	f06f 0c01 	mvn.w	ip, #1
 800a4d6:	460b      	mov	r3, r1
 800a4d8:	6809      	ldr	r1, [r1, #0]
 800a4da:	699a      	ldr	r2, [r3, #24]
 800a4dc:	689e      	ldr	r6, [r3, #8]
 800a4de:	61a1      	str	r1, [r4, #24]
 800a4e0:	604d      	str	r5, [r1, #4]
 800a4e2:	f8c3 c02c 	str.w	ip, [r3, #44]	; 0x2c
 800a4e6:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
 800a4ea:	6812      	ldr	r2, [r2, #0]
 800a4ec:	6890      	ldr	r0, [r2, #8]
 800a4ee:	42b0      	cmp	r0, r6
 800a4f0:	d2fb      	bcs.n	800a4ea <oslib_test_002_001_teardown.lto_priv.0+0x3a>
 800a4f2:	6850      	ldr	r0, [r2, #4]
 800a4f4:	42a9      	cmp	r1, r5
 800a4f6:	e9c3 2000 	strd	r2, r0, [r3]
 800a4fa:	6003      	str	r3, [r0, #0]
 800a4fc:	6053      	str	r3, [r2, #4]
 800a4fe:	d1ea      	bne.n	800a4d6 <oslib_test_002_001_teardown.lto_priv.0+0x26>
 800a500:	6a21      	ldr	r1, [r4, #32]
 800a502:	4d15      	ldr	r5, [pc, #84]	; (800a558 <oslib_test_002_001_teardown.lto_priv.0+0xa8>)
 800a504:	42a9      	cmp	r1, r5
 800a506:	d017      	beq.n	800a538 <oslib_test_002_001_teardown.lto_priv.0+0x88>
 800a508:	f06f 0c01 	mvn.w	ip, #1
 800a50c:	2700      	movs	r7, #0
 800a50e:	460b      	mov	r3, r1
 800a510:	6809      	ldr	r1, [r1, #0]
 800a512:	699a      	ldr	r2, [r3, #24]
 800a514:	689e      	ldr	r6, [r3, #8]
 800a516:	6221      	str	r1, [r4, #32]
 800a518:	604d      	str	r5, [r1, #4]
 800a51a:	f8c3 c02c 	str.w	ip, [r3, #44]	; 0x2c
 800a51e:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
 800a522:	6812      	ldr	r2, [r2, #0]
 800a524:	6890      	ldr	r0, [r2, #8]
 800a526:	42b0      	cmp	r0, r6
 800a528:	d2fb      	bcs.n	800a522 <oslib_test_002_001_teardown.lto_priv.0+0x72>
 800a52a:	6850      	ldr	r0, [r2, #4]
 800a52c:	42a9      	cmp	r1, r5
 800a52e:	e9c3 2000 	strd	r2, r0, [r3]
 800a532:	6003      	str	r3, [r0, #0]
 800a534:	6053      	str	r3, [r2, #4]
 800a536:	d1ea      	bne.n	800a50e <oslib_test_002_001_teardown.lto_priv.0+0x5e>
 800a538:	4b08      	ldr	r3, [pc, #32]	; (800a55c <oslib_test_002_001_teardown.lto_priv.0+0xac>)
 800a53a:	681a      	ldr	r2, [r3, #0]
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	6892      	ldr	r2, [r2, #8]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	429a      	cmp	r2, r3
 800a544:	d901      	bls.n	800a54a <oslib_test_002_001_teardown.lto_priv.0+0x9a>
 800a546:	f7f9 fc8b 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 800a54a:	2300      	movs	r3, #0
 800a54c:	f383 8811 	msr	BASEPRI, r3
 800a550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a552:	bf00      	nop
 800a554:	20000854 	.word	0x20000854
 800a558:	20000874 	.word	0x20000874
 800a55c:	20001050 	.word	0x20001050

0800a560 <oslib_test_002_002_teardown.lto_priv.0>:
 800a560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a562:	2330      	movs	r3, #48	; 0x30
 800a564:	f383 8811 	msr	BASEPRI, r3
 800a568:	4c26      	ldr	r4, [pc, #152]	; (800a604 <oslib_test_002_002_teardown.lto_priv.0+0xa4>)
 800a56a:	2700      	movs	r7, #0
 800a56c:	4625      	mov	r5, r4
 800a56e:	2201      	movs	r2, #1
 800a570:	f855 1f18 	ldr.w	r1, [r5, #24]!
 800a574:	6823      	ldr	r3, [r4, #0]
 800a576:	42a9      	cmp	r1, r5
 800a578:	e9c4 3302 	strd	r3, r3, [r4, #8]
 800a57c:	6127      	str	r7, [r4, #16]
 800a57e:	7522      	strb	r2, [r4, #20]
 800a580:	d016      	beq.n	800a5b0 <oslib_test_002_002_teardown.lto_priv.0+0x50>
 800a582:	f06f 0c01 	mvn.w	ip, #1
 800a586:	460b      	mov	r3, r1
 800a588:	6809      	ldr	r1, [r1, #0]
 800a58a:	699a      	ldr	r2, [r3, #24]
 800a58c:	689e      	ldr	r6, [r3, #8]
 800a58e:	61a1      	str	r1, [r4, #24]
 800a590:	604d      	str	r5, [r1, #4]
 800a592:	f8c3 c02c 	str.w	ip, [r3, #44]	; 0x2c
 800a596:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
 800a59a:	6812      	ldr	r2, [r2, #0]
 800a59c:	6890      	ldr	r0, [r2, #8]
 800a59e:	42b0      	cmp	r0, r6
 800a5a0:	d2fb      	bcs.n	800a59a <oslib_test_002_002_teardown.lto_priv.0+0x3a>
 800a5a2:	6850      	ldr	r0, [r2, #4]
 800a5a4:	42a9      	cmp	r1, r5
 800a5a6:	e9c3 2000 	strd	r2, r0, [r3]
 800a5aa:	6003      	str	r3, [r0, #0]
 800a5ac:	6053      	str	r3, [r2, #4]
 800a5ae:	d1ea      	bne.n	800a586 <oslib_test_002_002_teardown.lto_priv.0+0x26>
 800a5b0:	6a21      	ldr	r1, [r4, #32]
 800a5b2:	4d15      	ldr	r5, [pc, #84]	; (800a608 <oslib_test_002_002_teardown.lto_priv.0+0xa8>)
 800a5b4:	42a9      	cmp	r1, r5
 800a5b6:	d017      	beq.n	800a5e8 <oslib_test_002_002_teardown.lto_priv.0+0x88>
 800a5b8:	f06f 0c01 	mvn.w	ip, #1
 800a5bc:	2700      	movs	r7, #0
 800a5be:	460b      	mov	r3, r1
 800a5c0:	6809      	ldr	r1, [r1, #0]
 800a5c2:	699a      	ldr	r2, [r3, #24]
 800a5c4:	689e      	ldr	r6, [r3, #8]
 800a5c6:	6221      	str	r1, [r4, #32]
 800a5c8:	604d      	str	r5, [r1, #4]
 800a5ca:	f8c3 c02c 	str.w	ip, [r3, #44]	; 0x2c
 800a5ce:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
 800a5d2:	6812      	ldr	r2, [r2, #0]
 800a5d4:	6890      	ldr	r0, [r2, #8]
 800a5d6:	42b0      	cmp	r0, r6
 800a5d8:	d2fb      	bcs.n	800a5d2 <oslib_test_002_002_teardown.lto_priv.0+0x72>
 800a5da:	6850      	ldr	r0, [r2, #4]
 800a5dc:	42a9      	cmp	r1, r5
 800a5de:	e9c3 2000 	strd	r2, r0, [r3]
 800a5e2:	6003      	str	r3, [r0, #0]
 800a5e4:	6053      	str	r3, [r2, #4]
 800a5e6:	d1ea      	bne.n	800a5be <oslib_test_002_002_teardown.lto_priv.0+0x5e>
 800a5e8:	4b08      	ldr	r3, [pc, #32]	; (800a60c <oslib_test_002_002_teardown.lto_priv.0+0xac>)
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	68db      	ldr	r3, [r3, #12]
 800a5ee:	6892      	ldr	r2, [r2, #8]
 800a5f0:	689b      	ldr	r3, [r3, #8]
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d901      	bls.n	800a5fa <oslib_test_002_002_teardown.lto_priv.0+0x9a>
 800a5f6:	f7f9 fc33 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	f383 8811 	msr	BASEPRI, r3
 800a600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a602:	bf00      	nop
 800a604:	20000854 	.word	0x20000854
 800a608:	20000874 	.word	0x20000874
 800a60c:	20001050 	.word	0x20001050

0800a610 <oslib_test_002_003_teardown.lto_priv.0>:

static void oslib_test_002_003_teardown(void) {
 800a610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a612:	2330      	movs	r3, #48	; 0x30
 800a614:	f383 8811 	msr	BASEPRI, r3
  mbp->wrptr = mbp->buffer;
 800a618:	4c26      	ldr	r4, [pc, #152]	; (800a6b4 <oslib_test_002_003_teardown.lto_priv.0+0xa4>)
  mbp->cnt   = (size_t)0;
 800a61a:	2700      	movs	r7, #0
  return (bool)(qp->next != qp);
 800a61c:	4625      	mov	r5, r4
  mbp->reset = true;
 800a61e:	2201      	movs	r2, #1
 800a620:	f855 1f18 	ldr.w	r1, [r5, #24]!
  mbp->wrptr = mbp->buffer;
 800a624:	6823      	ldr	r3, [r4, #0]
  while (ch_queue_notempty(&tqp->queue)) {
 800a626:	42a9      	cmp	r1, r5
  mbp->rdptr = mbp->buffer;
 800a628:	e9c4 3302 	strd	r3, r3, [r4, #8]
  mbp->cnt   = (size_t)0;
 800a62c:	6127      	str	r7, [r4, #16]
  mbp->reset = true;
 800a62e:	7522      	strb	r2, [r4, #20]
 800a630:	d016      	beq.n	800a660 <oslib_test_002_003_teardown.lto_priv.0+0x50>
 800a632:	f06f 0c01 	mvn.w	ip, #1
 800a636:	460b      	mov	r3, r1
  qp->next       = p->next;
 800a638:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800a63a:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800a63c:	689e      	ldr	r6, [r3, #8]
  qp->next       = p->next;
 800a63e:	61a1      	str	r1, [r4, #24]
  qp->next->prev = qp;
 800a640:	604d      	str	r5, [r1, #4]
 800a642:	f8c3 c02c 	str.w	ip, [r3, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 800a646:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
    pqp = pqp->next;
 800a64a:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800a64c:	6890      	ldr	r0, [r2, #8]
 800a64e:	42b0      	cmp	r0, r6
 800a650:	d2fb      	bcs.n	800a64a <oslib_test_002_003_teardown.lto_priv.0+0x3a>
  p->prev       = pqp->prev;
 800a652:	6850      	ldr	r0, [r2, #4]
 800a654:	42a9      	cmp	r1, r5
 800a656:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 800a65a:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 800a65c:	6053      	str	r3, [r2, #4]
 800a65e:	d1ea      	bne.n	800a636 <oslib_test_002_003_teardown.lto_priv.0+0x26>
  return (bool)(qp->next != qp);
 800a660:	6a21      	ldr	r1, [r4, #32]
 800a662:	4d15      	ldr	r5, [pc, #84]	; (800a6b8 <oslib_test_002_003_teardown.lto_priv.0+0xa8>)
 800a664:	42a9      	cmp	r1, r5
 800a666:	d017      	beq.n	800a698 <oslib_test_002_003_teardown.lto_priv.0+0x88>
 800a668:	f06f 0c01 	mvn.w	ip, #1
 800a66c:	2700      	movs	r7, #0
 800a66e:	460b      	mov	r3, r1
  qp->next       = p->next;
 800a670:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800a672:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800a674:	689e      	ldr	r6, [r3, #8]
  qp->next       = p->next;
 800a676:	6221      	str	r1, [r4, #32]
  qp->next->prev = qp;
 800a678:	604d      	str	r5, [r1, #4]
 800a67a:	f8c3 c02c 	str.w	ip, [r3, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 800a67e:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
    pqp = pqp->next;
 800a682:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800a684:	6890      	ldr	r0, [r2, #8]
 800a686:	42b0      	cmp	r0, r6
 800a688:	d2fb      	bcs.n	800a682 <oslib_test_002_003_teardown.lto_priv.0+0x72>
  p->prev       = pqp->prev;
 800a68a:	6850      	ldr	r0, [r2, #4]
 800a68c:	42a9      	cmp	r1, r5
 800a68e:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 800a692:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 800a694:	6053      	str	r3, [r2, #4]
 800a696:	d1ea      	bne.n	800a66e <oslib_test_002_003_teardown.lto_priv.0+0x5e>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800a698:	4b08      	ldr	r3, [pc, #32]	; (800a6bc <oslib_test_002_003_teardown.lto_priv.0+0xac>)
 800a69a:	681a      	ldr	r2, [r3, #0]
 800a69c:	68db      	ldr	r3, [r3, #12]
 800a69e:	6892      	ldr	r2, [r2, #8]
 800a6a0:	689b      	ldr	r3, [r3, #8]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d901      	bls.n	800a6aa <oslib_test_002_003_teardown.lto_priv.0+0x9a>
    __sch_reschedule_ahead();
 800a6a6:	f7f9 fbdb 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	f383 8811 	msr	BASEPRI, r3
  chMBReset(&mb1);
}
 800a6b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	20000854 	.word	0x20000854
 800a6b8:	20000874 	.word	0x20000874
 800a6bc:	20001050 	.word	0x20001050

0800a6c0 <obj_read>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 800a6c0:	4b2f      	ldr	r3, [pc, #188]	; (800a780 <obj_read+0xc0>)
                     bool async) {
 800a6c2:	b570      	push	{r4, r5, r6, lr}
 800a6c4:	68dd      	ldr	r5, [r3, #12]
 800a6c6:	f103 0c20 	add.w	ip, r3, #32
 800a6ca:	4565      	cmp	r5, ip
 800a6cc:	460c      	mov	r4, r1
 800a6ce:	d204      	bcs.n	800a6da <obj_read+0x1a>
  test_emit_token('a' + objp->obj_key);
 800a6d0:	6949      	ldr	r1, [r1, #20]
    *chtest.tokp++ = token;
 800a6d2:	1c6e      	adds	r6, r5, #1
 800a6d4:	3161      	adds	r1, #97	; 0x61
 800a6d6:	60de      	str	r6, [r3, #12]
 800a6d8:	7029      	strb	r1, [r5, #0]
  objp->obj_flags &= ~OC_FLAG_NOTSYNC;
 800a6da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6dc:	f023 0308 	bic.w	r3, r3, #8
 800a6e0:	6263      	str	r3, [r4, #36]	; 0x24
  if (async) {
 800a6e2:	b90a      	cbnz	r2, 800a6e8 <obj_read+0x28>
}
 800a6e4:	2000      	movs	r0, #0
 800a6e6:	bd70      	pop	{r4, r5, r6, pc}
 800a6e8:	2330      	movs	r3, #48	; 0x30
 800a6ea:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(chSemGetCounterI(&objp->obj_sem) <= (cnt_t)0,
              "semaphore counter greater than 0");

  /* If some thread is waiting for this specific buffer then it is
     handed directly without going through the LRU.*/
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 800a6ee:	6a23      	ldr	r3, [r4, #32]
 800a6f0:	2b00      	cmp	r3, #0
    /* Clearing all flags except those that are still meaningful, note,
       OC_FLAG_NOTSYNC and OC_FLAG_LAZYWRITE are passed, the other thread
       will handle them.*/
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 800a6f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 800a6f4:	db3c      	blt.n	800a770 <obj_read+0xb0>
    return;
  }

  /* If the object specifies OC_FLAG_NOTSYNC then it must be invalidated
     and removed from the hash table.*/
  if ((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U) {
 800a6f6:	0719      	lsls	r1, r3, #28
 800a6f8:	d421      	bmi.n	800a73e <obj_read+0x7e>
    objp->obj_key   = 0U;
    objp->obj_flags = OC_FLAG_INLRU;
  }
  else {
    /* LRU insertion point depends on the OC_FLAG_FORGET flag.*/
    if ((objp->obj_flags & OC_FLAG_FORGET) == 0U) {
 800a6fa:	069a      	lsls	r2, r3, #26
 800a6fc:	d430      	bmi.n	800a760 <obj_read+0xa0>
      /* Placing it on head.*/
      LRU_INSERT_HEAD(ocp, objp);
 800a6fe:	69c2      	ldr	r2, [r0, #28]
 800a700:	f100 0114 	add.w	r1, r0, #20
 800a704:	e9c4 2102 	strd	r2, r1, [r4, #8]
 800a708:	60d4      	str	r4, [r2, #12]
 800a70a:	61c4      	str	r4, [r0, #28]
    }
    else {
      /* Low priority data, placing it on tail.*/
      LRU_INSERT_TAIL(ocp, objp);
    }
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_LAZYWRITE;
 800a70c:	f003 0312 	and.w	r3, r3, #18
    objp->obj_flags |= OC_FLAG_INLRU;
 800a710:	f043 0301 	orr.w	r3, r3, #1
 800a714:	6263      	str	r3, [r4, #36]	; 0x24
  }

  /* Increasing the LRU counter semaphore.*/
  chSemSignalI(&ocp->lru_sem);
 800a716:	3030      	adds	r0, #48	; 0x30
 800a718:	f7fa f8e2 	bl	80048e0 <chSemSignalI>
  sp->cnt++;
 800a71c:	6a23      	ldr	r3, [r4, #32]
 800a71e:	3301      	adds	r3, #1
 800a720:	6223      	str	r3, [r4, #32]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800a722:	4b18      	ldr	r3, [pc, #96]	; (800a784 <obj_read+0xc4>)
 800a724:	681a      	ldr	r2, [r3, #0]
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	6892      	ldr	r2, [r2, #8]
 800a72a:	689b      	ldr	r3, [r3, #8]
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d901      	bls.n	800a734 <obj_read+0x74>
    __sch_reschedule_ahead();
 800a730:	f7f9 fb96 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 800a734:	2300      	movs	r3, #0
 800a736:	f383 8811 	msr	BASEPRI, r3
 800a73a:	2000      	movs	r0, #0
 800a73c:	bd70      	pop	{r4, r5, r6, pc}
    objp->obj_group = 0U;
 800a73e:	2300      	movs	r3, #0
    HASH_REMOVE(objp);
 800a740:	e9d4 1500 	ldrd	r1, r5, [r4]
    objp->obj_flags = OC_FLAG_INLRU;
 800a744:	2601      	movs	r6, #1
    LRU_INSERT_TAIL(ocp, objp);
 800a746:	6a02      	ldr	r2, [r0, #32]
    HASH_REMOVE(objp);
 800a748:	6029      	str	r1, [r5, #0]
 800a74a:	604d      	str	r5, [r1, #4]
    LRU_INSERT_TAIL(ocp, objp);
 800a74c:	f100 0114 	add.w	r1, r0, #20
 800a750:	60e2      	str	r2, [r4, #12]
 800a752:	60a1      	str	r1, [r4, #8]
 800a754:	6094      	str	r4, [r2, #8]
 800a756:	6204      	str	r4, [r0, #32]
    objp->obj_key   = 0U;
 800a758:	e9c4 3304 	strd	r3, r3, [r4, #16]
    objp->obj_flags = OC_FLAG_INLRU;
 800a75c:	6266      	str	r6, [r4, #36]	; 0x24
 800a75e:	e7da      	b.n	800a716 <obj_read+0x56>
      LRU_INSERT_TAIL(ocp, objp);
 800a760:	6a02      	ldr	r2, [r0, #32]
 800a762:	f100 0114 	add.w	r1, r0, #20
 800a766:	e9c4 1202 	strd	r1, r2, [r4, #8]
 800a76a:	6094      	str	r4, [r2, #8]
 800a76c:	6204      	str	r4, [r0, #32]
 800a76e:	e7cd      	b.n	800a70c <obj_read+0x4c>
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 800a770:	f003 031a 	and.w	r3, r3, #26
    chSemSignalI(&objp->obj_sem);
 800a774:	f104 0018 	add.w	r0, r4, #24
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 800a778:	6263      	str	r3, [r4, #36]	; 0x24
    chSemSignalI(&objp->obj_sem);
 800a77a:	f7fa f8b1 	bl	80048e0 <chSemSignalI>
    return;
 800a77e:	e7d0      	b.n	800a722 <obj_read+0x62>
 800a780:	200010f4 	.word	0x200010f4
 800a784:	20001050 	.word	0x20001050
	...

0800a790 <chMBPostAheadTimeout.constprop.0>:
msg_t chMBPostAheadTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 800a790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a794:	2330      	movs	r3, #48	; 0x30
 800a796:	4607      	mov	r7, r0
 800a798:	4688      	mov	r8, r1
 800a79a:	f383 8811 	msr	BASEPRI, r3
 800a79e:	4c28      	ldr	r4, [pc, #160]	; (800a840 <chMBPostAheadTimeout.constprop.0+0xb0>)
  return __sch_get_currthread();
 800a7a0:	4e28      	ldr	r6, [pc, #160]	; (800a844 <chMBPostAheadTimeout.constprop.0+0xb4>)
  p->next       = qp;
 800a7a2:	f104 0518 	add.w	r5, r4, #24
 800a7a6:	e011      	b.n	800a7cc <chMBPostAheadTimeout.constprop.0+0x3c>
  return mbp->cnt;
 800a7a8:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800a7aa:	e9d4 2100 	ldrd	r2, r1, [r4]
 800a7ae:	1a88      	subs	r0, r1, r2
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 800a7b0:	ebb3 0fa0 	cmp.w	r3, r0, asr #2
 800a7b4:	d114      	bne.n	800a7e0 <chMBPostAheadTimeout.constprop.0+0x50>
 800a7b6:	68f3      	ldr	r3, [r6, #12]
  p->prev       = qp->prev;
 800a7b8:	69e2      	ldr	r2, [r4, #28]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800a7ba:	4641      	mov	r1, r8
 800a7bc:	e9c3 5200 	strd	r5, r2, [r3]
 800a7c0:	2004      	movs	r0, #4
  p->prev->next = p;
 800a7c2:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 800a7c4:	61e3      	str	r3, [r4, #28]
 800a7c6:	f7f8 fa8b 	bl	8002ce0 <chSchGoSleepTimeoutS>
  } while (rdymsg == MSG_OK);
 800a7ca:	b920      	cbnz	r0, 800a7d6 <chMBPostAheadTimeout.constprop.0+0x46>
    if (mbp->reset) {
 800a7cc:	7d23      	ldrb	r3, [r4, #20]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d0ea      	beq.n	800a7a8 <chMBPostAheadTimeout.constprop.0+0x18>
      return MSG_RESET;
 800a7d2:	f06f 0001 	mvn.w	r0, #1
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	f383 8811 	msr	BASEPRI, r3
}
 800a7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (--mbp->rdptr < mbp->buffer) {
 800a7e0:	68e0      	ldr	r0, [r4, #12]
      mbp->cnt++;
 800a7e2:	3301      	adds	r3, #1
      if (--mbp->rdptr < mbp->buffer) {
 800a7e4:	3804      	subs	r0, #4
 800a7e6:	4282      	cmp	r2, r0
        mbp->rdptr = mbp->top - 1;
 800a7e8:	bf88      	it	hi
 800a7ea:	1f08      	subhi	r0, r1, #4
  return (bool)(qp->next != qp);
 800a7ec:	6a22      	ldr	r2, [r4, #32]
  if (ch_queue_notempty(&tqp->queue)) {
 800a7ee:	4916      	ldr	r1, [pc, #88]	; (800a848 <chMBPostAheadTimeout.constprop.0+0xb8>)
 800a7f0:	60e0      	str	r0, [r4, #12]
 800a7f2:	428a      	cmp	r2, r1
      *mbp->rdptr = msg;
 800a7f4:	6007      	str	r7, [r0, #0]
      mbp->cnt++;
 800a7f6:	6123      	str	r3, [r4, #16]
 800a7f8:	d011      	beq.n	800a81e <chMBPostAheadTimeout.constprop.0+0x8e>
  tp->u.rdymsg = msg;
 800a7fa:	2000      	movs	r0, #0
  qp->next       = p->next;
 800a7fc:	6815      	ldr	r5, [r2, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800a7fe:	6993      	ldr	r3, [r2, #24]
 800a800:	6225      	str	r5, [r4, #32]
  } while (unlikely(pqp->prio >= p->prio));
 800a802:	6894      	ldr	r4, [r2, #8]
  qp->next->prev = qp;
 800a804:	6069      	str	r1, [r5, #4]
 800a806:	62d0      	str	r0, [r2, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 800a808:	f882 0028 	strb.w	r0, [r2, #40]	; 0x28
    pqp = pqp->next;
 800a80c:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800a80e:	6899      	ldr	r1, [r3, #8]
 800a810:	42a1      	cmp	r1, r4
 800a812:	d2fb      	bcs.n	800a80c <chMBPostAheadTimeout.constprop.0+0x7c>
  p->prev       = pqp->prev;
 800a814:	6859      	ldr	r1, [r3, #4]
 800a816:	e9c2 3100 	strd	r3, r1, [r2]
  p->prev->next = p;
 800a81a:	600a      	str	r2, [r1, #0]
  pqp->prev     = p;
 800a81c:	605a      	str	r2, [r3, #4]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800a81e:	4b09      	ldr	r3, [pc, #36]	; (800a844 <chMBPostAheadTimeout.constprop.0+0xb4>)
 800a820:	681a      	ldr	r2, [r3, #0]
 800a822:	68db      	ldr	r3, [r3, #12]
 800a824:	6892      	ldr	r2, [r2, #8]
 800a826:	689b      	ldr	r3, [r3, #8]
 800a828:	429a      	cmp	r2, r3
 800a82a:	d907      	bls.n	800a83c <chMBPostAheadTimeout.constprop.0+0xac>
    __sch_reschedule_ahead();
 800a82c:	f7f9 fb18 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
      return MSG_OK;
 800a830:	2000      	movs	r0, #0
 800a832:	2300      	movs	r3, #0
 800a834:	f383 8811 	msr	BASEPRI, r3
}
 800a838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return MSG_OK;
 800a83c:	2000      	movs	r0, #0
 800a83e:	e7ca      	b.n	800a7d6 <chMBPostAheadTimeout.constprop.0+0x46>
 800a840:	20000854 	.word	0x20000854
 800a844:	20001050 	.word	0x20001050
 800a848:	20000874 	.word	0x20000874
 800a84c:	00000000 	.word	0x00000000

0800a850 <oslib_test_006_001_execute.lto_priv.0>:
  sp->cnt = n;
 800a850:	2104      	movs	r1, #4
  ocp->hashn            = hashn;
 800a852:	2008      	movs	r0, #8
 * - [6.1.5] Checking cached objects.
 * - [6.1.6] Checking non-cached objects.
 * .
 */

static void oslib_test_006_001_execute(void) {
 800a854:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ocp->lru.hash_next    = NULL;
 800a858:	2200      	movs	r2, #0
 800a85a:	2501      	movs	r5, #1
  qp->next = qp;
 800a85c:	4c5a      	ldr	r4, [pc, #360]	; (800a9c8 <oslib_test_006_001_execute.lto_priv.0+0x178>)
  ocp->hashp            = hashp;
 800a85e:	4b5b      	ldr	r3, [pc, #364]	; (800a9cc <oslib_test_006_001_execute.lto_priv.0+0x17c>)
 800a860:	63a1      	str	r1, [r4, #56]	; 0x38
  ocp->objn             = objn;
 800a862:	60a1      	str	r1, [r4, #8]
  ocp->readf            = readf;
 800a864:	495a      	ldr	r1, [pc, #360]	; (800a9d0 <oslib_test_006_001_execute.lto_priv.0+0x180>)
  ocp->hashn            = hashn;
 800a866:	6020      	str	r0, [r4, #0]
  ocp->readf            = readf;
 800a868:	63e1      	str	r1, [r4, #60]	; 0x3c
  ocp->writef           = writef;
 800a86a:	495a      	ldr	r1, [pc, #360]	; (800a9d4 <oslib_test_006_001_execute.lto_priv.0+0x184>)
  ocp->objvp            = objvp;
 800a86c:	485a      	ldr	r0, [pc, #360]	; (800a9d8 <oslib_test_006_001_execute.lto_priv.0+0x188>)
  ocp->writef           = writef;
 800a86e:	6421      	str	r1, [r4, #64]	; 0x40
 800a870:	f104 0124 	add.w	r1, r4, #36	; 0x24
  qp->prev = qp;
 800a874:	e9c4 1109 	strd	r1, r1, [r4, #36]	; 0x24
  qp->next = qp;
 800a878:	f104 0130 	add.w	r1, r4, #48	; 0x30
  qp->prev = qp;
 800a87c:	e9c4 110c 	strd	r1, r1, [r4, #48]	; 0x30
  ocp->lru.lru_prev     = (oc_object_t *)&ocp->lru;
 800a880:	f104 0614 	add.w	r6, r4, #20
  ocp->lru.hash_prev    = NULL;
 800a884:	e9c4 2205 	strd	r2, r2, [r4, #20]
  ocp->hashp            = hashp;
 800a888:	6063      	str	r3, [r4, #4]
 800a88a:	62e5      	str	r5, [r4, #44]	; 0x2c
  ocp->objvp            = objvp;
 800a88c:	6120      	str	r0, [r4, #16]
  ocp->lru.lru_prev     = (oc_object_t *)&ocp->lru;
 800a88e:	6226      	str	r6, [r4, #32]
 800a890:	f103 0240 	add.w	r2, r3, #64	; 0x40
    hashp->hash_prev = (oc_object_t *)hashp;
 800a894:	e9c3 3300 	strd	r3, r3, [r3]
    hashp++;
 800a898:	3308      	adds	r3, #8
  } while (hashp < &ocp->hashp[ocp->hashn]);
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d1fa      	bne.n	800a894 <oslib_test_006_001_execute.lto_priv.0+0x44>
 800a89e:	4b4e      	ldr	r3, [pc, #312]	; (800a9d8 <oslib_test_006_001_execute.lto_priv.0+0x188>)
 800a8a0:	2701      	movs	r7, #1
    objp->obj_group = 0U;
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	494d      	ldr	r1, [pc, #308]	; (800a9dc <oslib_test_006_001_execute.lto_priv.0+0x18c>)
 800a8a6:	f103 0cf0 	add.w	ip, r3, #240	; 0xf0
 800a8aa:	e000      	b.n	800a8ae <oslib_test_006_001_execute.lto_priv.0+0x5e>
 800a8ac:	462b      	mov	r3, r5
    objvp = (void *)((uint8_t *)objvp + objsz);
 800a8ae:	f103 053c 	add.w	r5, r3, #60	; 0x3c
 800a8b2:	f103 0018 	add.w	r0, r3, #24
  } while (objn > (ucnt_t)0);
 800a8b6:	4565      	cmp	r5, ip
    LRU_INSERT_HEAD(ocp, objp);
 800a8b8:	6099      	str	r1, [r3, #8]
 800a8ba:	e9c3 0006 	strd	r0, r0, [r3, #24]
 800a8be:	621f      	str	r7, [r3, #32]
 800a8c0:	60de      	str	r6, [r3, #12]
 800a8c2:	60cb      	str	r3, [r1, #12]
 800a8c4:	4619      	mov	r1, r3
    objp->obj_key   = 0U;
 800a8c6:	e9c3 2204 	strd	r2, r2, [r3, #16]
    objp->dptr      = NULL;
 800a8ca:	e9c3 7209 	strd	r7, r2, [r3, #36]	; 0x24
  } while (objn > (ucnt_t)0);
 800a8ce:	d1ed      	bne.n	800a8ac <oslib_test_006_001_execute.lto_priv.0+0x5c>
                      obj_write);
  }
  test_end_step(1);

  /* [6.1.2] Getting and releasing objects without initialization.*/
  test_set_step(2);
 800a8d0:	2302      	movs	r3, #2
 800a8d2:	4a43      	ldr	r2, [pc, #268]	; (800a9e0 <oslib_test_006_001_execute.lto_priv.0+0x190>)
 800a8d4:	4d43      	ldr	r5, [pc, #268]	; (800a9e4 <oslib_test_006_001_execute.lto_priv.0+0x194>)
  {
    uint32_t i;

    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 800a8d6:	f04f 0800 	mov.w	r8, #0
 800a8da:	f04f 0930 	mov.w	r9, #48	; 0x30
  chSemSignalI(&ocp->lru_sem);
 800a8de:	f8df a108 	ldr.w	sl, [pc, #264]	; 800a9e8 <oslib_test_006_001_execute.lto_priv.0+0x198>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800a8e2:	4f42      	ldr	r7, [pc, #264]	; (800a9ec <oslib_test_006_001_execute.lto_priv.0+0x19c>)
 800a8e4:	61e2      	str	r2, [r4, #28]
  test_set_step(2);
 800a8e6:	602b      	str	r3, [r5, #0]
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 800a8e8:	e02b      	b.n	800a942 <oslib_test_006_001_execute.lto_priv.0+0xf2>
    objp->obj_group = 0U;
 800a8ea:	2300      	movs	r3, #0
    objp->obj_flags = OC_FLAG_INLRU;
 800a8ec:	f04f 0c01 	mov.w	ip, #1
    LRU_INSERT_TAIL(ocp, objp);
 800a8f0:	6a22      	ldr	r2, [r4, #32]
    HASH_REMOVE(objp);
 800a8f2:	f8db 0004 	ldr.w	r0, [fp, #4]
 800a8f6:	f8db 1000 	ldr.w	r1, [fp]
 800a8fa:	6001      	str	r1, [r0, #0]
 800a8fc:	6048      	str	r0, [r1, #4]
    LRU_INSERT_TAIL(ocp, objp);
 800a8fe:	e9cb 6202 	strd	r6, r2, [fp, #8]
 800a902:	f8c2 b008 	str.w	fp, [r2, #8]
 800a906:	f8c4 b020 	str.w	fp, [r4, #32]
    objp->obj_key   = 0U;
 800a90a:	e9cb 3304 	strd	r3, r3, [fp, #16]
    objp->obj_flags = OC_FLAG_INLRU;
 800a90e:	f8cb c024 	str.w	ip, [fp, #36]	; 0x24
  chSemSignalI(&ocp->lru_sem);
 800a912:	4650      	mov	r0, sl
 800a914:	f7f9 ffe4 	bl	80048e0 <chSemSignalI>
 800a918:	f8db 3020 	ldr.w	r3, [fp, #32]
 800a91c:	3301      	adds	r3, #1
 800a91e:	f8cb 3020 	str.w	r3, [fp, #32]
 800a922:	683a      	ldr	r2, [r7, #0]
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	6892      	ldr	r2, [r2, #8]
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d901      	bls.n	800a932 <oslib_test_006_001_execute.lto_priv.0+0xe2>
    __sch_reschedule_ahead();
 800a92e:	f7f9 fa97 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 800a932:	2300      	movs	r3, #0
 800a934:	f383 8811 	msr	BASEPRI, r3
 800a938:	f108 0801 	add.w	r8, r8, #1
 800a93c:	f1b8 0f08 	cmp.w	r8, #8
 800a940:	d05a      	beq.n	800a9f8 <oslib_test_006_001_execute.lto_priv.0+0x1a8>
      oc_object_t * objp = chCacheGetObject(&cache1, 0U, i);
 800a942:	4640      	mov	r0, r8
 800a944:	f7ff fba4 	bl	800a090 <chCacheGetObject.constprop.0>

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800a948:	6a43      	ldr	r3, [r0, #36]	; 0x24
      oc_object_t * objp = chCacheGetObject(&cache1, 0U, i);
 800a94a:	4683      	mov	fp, r0
  if (!condition) {
 800a94c:	0798      	lsls	r0, r3, #30
 800a94e:	d51b      	bpl.n	800a988 <oslib_test_006_001_execute.lto_priv.0+0x138>
 800a950:	0719      	lsls	r1, r3, #28
 800a952:	d520      	bpl.n	800a996 <oslib_test_006_001_execute.lto_priv.0+0x146>
 800a954:	f389 8811 	msr	BASEPRI, r9
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 800a958:	f8db 3020 	ldr.w	r3, [fp, #32]
 800a95c:	2b00      	cmp	r3, #0
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 800a95e:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 800a962:	db27      	blt.n	800a9b4 <oslib_test_006_001_execute.lto_priv.0+0x164>
  if ((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U) {
 800a964:	071a      	lsls	r2, r3, #28
 800a966:	d4c0      	bmi.n	800a8ea <oslib_test_006_001_execute.lto_priv.0+0x9a>
    if ((objp->obj_flags & OC_FLAG_FORGET) == 0U) {
 800a968:	0698      	lsls	r0, r3, #26
 800a96a:	d41b      	bmi.n	800a9a4 <oslib_test_006_001_execute.lto_priv.0+0x154>
      LRU_INSERT_HEAD(ocp, objp);
 800a96c:	69e2      	ldr	r2, [r4, #28]
 800a96e:	e9cb 2602 	strd	r2, r6, [fp, #8]
 800a972:	f8c2 b00c 	str.w	fp, [r2, #12]
 800a976:	f8c4 b01c 	str.w	fp, [r4, #28]
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_LAZYWRITE;
 800a97a:	f003 0312 	and.w	r3, r3, #18
    objp->obj_flags |= OC_FLAG_INLRU;
 800a97e:	f043 0301 	orr.w	r3, r3, #1
 800a982:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
 800a986:	e7c4      	b.n	800a912 <oslib_test_006_001_execute.lto_priv.0+0xc2>
  chtest.global_fail     = true;
 800a988:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800a98c:	4a18      	ldr	r2, [pc, #96]	; (800a9f0 <oslib_test_006_001_execute.lto_priv.0+0x1a0>)
  chtest.global_fail     = true;
 800a98e:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800a990:	60aa      	str	r2, [r5, #8]
    }

    test_assert_sequence("", "unexpected tokens");
  }
  test_end_step(6);
}
 800a992:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  chtest.global_fail     = true;
 800a996:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800a99a:	4a16      	ldr	r2, [pc, #88]	; (800a9f4 <oslib_test_006_001_execute.lto_priv.0+0x1a4>)
  chtest.global_fail     = true;
 800a99c:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800a99e:	60aa      	str	r2, [r5, #8]
 800a9a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LRU_INSERT_TAIL(ocp, objp);
 800a9a4:	6a22      	ldr	r2, [r4, #32]
 800a9a6:	e9cb 6202 	strd	r6, r2, [fp, #8]
 800a9aa:	f8c2 b008 	str.w	fp, [r2, #8]
 800a9ae:	f8c4 b020 	str.w	fp, [r4, #32]
 800a9b2:	e7e2      	b.n	800a97a <oslib_test_006_001_execute.lto_priv.0+0x12a>
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 800a9b4:	f003 031a 	and.w	r3, r3, #26
 800a9b8:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
    chSemSignalI(&objp->obj_sem);
 800a9bc:	f10b 0018 	add.w	r0, fp, #24
 800a9c0:	f7f9 ff8e 	bl	80048e0 <chSemSignalI>
    return;
 800a9c4:	e7ad      	b.n	800a922 <oslib_test_006_001_execute.lto_priv.0+0xd2>
 800a9c6:	bf00      	nop
 800a9c8:	20001d1c 	.word	0x20001d1c
 800a9cc:	20002404 	.word	0x20002404
 800a9d0:	0800a6c1 	.word	0x0800a6c1
 800a9d4:	08009391 	.word	0x08009391
 800a9d8:	200024dc 	.word	0x200024dc
 800a9dc:	20001d30 	.word	0x20001d30
 800a9e0:	20002590 	.word	0x20002590
 800a9e4:	200010f4 	.word	0x200010f4
 800a9e8:	20001d4c 	.word	0x20001d4c
 800a9ec:	20001050 	.word	0x20001050
 800a9f0:	08012c74 	.word	0x08012c74
 800a9f4:	08012c80 	.word	0x08012c80
    test_assert_sequence("", "unexpected tokens");
 800a9f8:	49b1      	ldr	r1, [pc, #708]	; (800acc0 <oslib_test_006_001_execute.lto_priv.0+0x470>)
 800a9fa:	48b2      	ldr	r0, [pc, #712]	; (800acc4 <oslib_test_006_001_execute.lto_priv.0+0x474>)
 800a9fc:	f7fc fa38 	bl	8006e70 <__test_assert_sequence>
 800aa00:	4681      	mov	r9, r0
 800aa02:	2800      	cmp	r0, #0
 800aa04:	d1c5      	bne.n	800a992 <oslib_test_006_001_execute.lto_priv.0+0x142>
  test_set_step(3);
 800aa06:	2303      	movs	r3, #3
  /* Marking it as OC_FLAG_NOTSYNC because the read operation is going
     to corrupt it in case of failure. It is responsibility of the read
     implementation to clear it if the operation succeeds.*/
  objp->obj_flags |= OC_FLAG_NOTSYNC;

  return ocp->readf(ocp, objp, async);
 800aa08:	f8df a2bc 	ldr.w	sl, [pc, #700]	; 800acc8 <oslib_test_006_001_execute.lto_priv.0+0x478>
 800aa0c:	602b      	str	r3, [r5, #0]
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 800aa0e:	4648      	mov	r0, r9
 800aa10:	f7ff fb3e 	bl	800a090 <chCacheGetObject.constprop.0>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800aa14:	6a43      	ldr	r3, [r0, #36]	; 0x24
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 800aa16:	4683      	mov	fp, r0
  if (!condition) {
 800aa18:	0799      	lsls	r1, r3, #30
 800aa1a:	d5b5      	bpl.n	800a988 <oslib_test_006_001_execute.lto_priv.0+0x138>
 800aa1c:	071a      	lsls	r2, r3, #28
 800aa1e:	f140 813d 	bpl.w	800ac9c <oslib_test_006_001_execute.lto_priv.0+0x44c>
  objp->obj_flags |= OC_FLAG_NOTSYNC;
 800aa22:	f043 0308 	orr.w	r3, r3, #8
 800aa26:	6243      	str	r3, [r0, #36]	; 0x24
  return ocp->readf(ocp, objp, async);
 800aa28:	4601      	mov	r1, r0
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	4650      	mov	r0, sl
 800aa2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800aa30:	4798      	blx	r3
 800aa32:	2800      	cmp	r0, #0
 800aa34:	f040 813e 	bne.w	800acb4 <oslib_test_006_001_execute.lto_priv.0+0x464>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800aa38:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 800aa3c:	0798      	lsls	r0, r3, #30
 800aa3e:	d5a3      	bpl.n	800a988 <oslib_test_006_001_execute.lto_priv.0+0x138>
 800aa40:	f013 0808 	ands.w	r8, r3, #8
 800aa44:	f040 8130 	bne.w	800aca8 <oslib_test_006_001_execute.lto_priv.0+0x458>
 800aa48:	2330      	movs	r3, #48	; 0x30
 800aa4a:	f383 8811 	msr	BASEPRI, r3
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 800aa4e:	f8db 3020 	ldr.w	r3, [fp, #32]
 800aa52:	2b00      	cmp	r3, #0
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 800aa54:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 800aa58:	f2c0 815a 	blt.w	800ad10 <oslib_test_006_001_execute.lto_priv.0+0x4c0>
  if ((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U) {
 800aa5c:	0719      	lsls	r1, r3, #28
 800aa5e:	f140 813f 	bpl.w	800ace0 <oslib_test_006_001_execute.lto_priv.0+0x490>
    HASH_REMOVE(objp);
 800aa62:	e9db 2100 	ldrd	r2, r1, [fp]
    objp->obj_flags = OC_FLAG_INLRU;
 800aa66:	2001      	movs	r0, #1
    LRU_INSERT_TAIL(ocp, objp);
 800aa68:	6a23      	ldr	r3, [r4, #32]
    HASH_REMOVE(objp);
 800aa6a:	600a      	str	r2, [r1, #0]
 800aa6c:	6051      	str	r1, [r2, #4]
    LRU_INSERT_TAIL(ocp, objp);
 800aa6e:	e9cb 6302 	strd	r6, r3, [fp, #8]
 800aa72:	f8c3 b008 	str.w	fp, [r3, #8]
 800aa76:	f8c4 b020 	str.w	fp, [r4, #32]
    objp->obj_key   = 0U;
 800aa7a:	e9cb 8804 	strd	r8, r8, [fp, #16]
    objp->obj_flags = OC_FLAG_INLRU;
 800aa7e:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
  chSemSignalI(&ocp->lru_sem);
 800aa82:	4892      	ldr	r0, [pc, #584]	; (800accc <oslib_test_006_001_execute.lto_priv.0+0x47c>)
 800aa84:	f7f9 ff2c 	bl	80048e0 <chSemSignalI>
 800aa88:	f8db 3020 	ldr.w	r3, [fp, #32]
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	f8cb 3020 	str.w	r3, [fp, #32]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	689a      	ldr	r2, [r3, #8]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	689b      	ldr	r3, [r3, #8]
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	d901      	bls.n	800aaa2 <oslib_test_006_001_execute.lto_priv.0+0x252>
    __sch_reschedule_ahead();
 800aa9e:	f7f9 f9df 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	f383 8811 	msr	BASEPRI, r3
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 800aaa8:	f109 0901 	add.w	r9, r9, #1
 800aaac:	f1b9 0f08 	cmp.w	r9, #8
 800aab0:	d1ad      	bne.n	800aa0e <oslib_test_006_001_execute.lto_priv.0+0x1be>
    test_assert_sequence("abcdefgh", "unexpected tokens");
 800aab2:	4983      	ldr	r1, [pc, #524]	; (800acc0 <oslib_test_006_001_execute.lto_priv.0+0x470>)
 800aab4:	4886      	ldr	r0, [pc, #536]	; (800acd0 <oslib_test_006_001_execute.lto_priv.0+0x480>)
 800aab6:	f7fc f9db 	bl	8006e70 <__test_assert_sequence>
 800aaba:	2800      	cmp	r0, #0
 800aabc:	f47f af69 	bne.w	800a992 <oslib_test_006_001_execute.lto_priv.0+0x142>
  test_set_step(4);
 800aac0:	2304      	movs	r3, #4
  return ocp->readf(ocp, objp, async);
 800aac2:	f04f 0b01 	mov.w	fp, #1
 800aac6:	f04f 0a30 	mov.w	sl, #48	; 0x30
 800aaca:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 800acc8 <oslib_test_006_001_execute.lto_priv.0+0x478>
 800aace:	602b      	str	r3, [r5, #0]
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 800aad0:	4640      	mov	r0, r8
 800aad2:	f7ff fadd 	bl	800a090 <chCacheGetObject.constprop.0>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800aad6:	6a43      	ldr	r3, [r0, #36]	; 0x24
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 800aad8:	4601      	mov	r1, r0
 800aada:	0798      	lsls	r0, r3, #30
 800aadc:	f57f af54 	bpl.w	800a988 <oslib_test_006_001_execute.lto_priv.0+0x138>
 800aae0:	071a      	lsls	r2, r3, #28
 800aae2:	f140 80db 	bpl.w	800ac9c <oslib_test_006_001_execute.lto_priv.0+0x44c>
  objp->obj_flags |= OC_FLAG_NOTSYNC;
 800aae6:	f043 0308 	orr.w	r3, r3, #8
 800aaea:	624b      	str	r3, [r1, #36]	; 0x24
  return ocp->readf(ocp, objp, async);
 800aaec:	2201      	movs	r2, #1
 800aaee:	4648      	mov	r0, r9
 800aaf0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800aaf2:	4798      	blx	r3
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	f040 80dd 	bne.w	800acb4 <oslib_test_006_001_execute.lto_priv.0+0x464>
      objp = chCacheGetObject(&cache1, 0U, i);
 800aafa:	4640      	mov	r0, r8
 800aafc:	f7ff fac8 	bl	800a090 <chCacheGetObject.constprop.0>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800ab00:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800ab02:	0793      	lsls	r3, r2, #30
 800ab04:	f57f af40 	bpl.w	800a988 <oslib_test_006_001_execute.lto_priv.0+0x138>
 800ab08:	f012 0208 	ands.w	r2, r2, #8
 800ab0c:	f040 80cc 	bne.w	800aca8 <oslib_test_006_001_execute.lto_priv.0+0x458>
 800ab10:	f38a 8811 	msr	BASEPRI, sl
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 800ab14:	6a03      	ldr	r3, [r0, #32]
 800ab16:	2b00      	cmp	r3, #0
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 800ab18:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 800ab1a:	f2c0 8132 	blt.w	800ad82 <oslib_test_006_001_execute.lto_priv.0+0x532>
  if ((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U) {
 800ab1e:	0719      	lsls	r1, r3, #28
 800ab20:	f140 80ff 	bpl.w	800ad22 <oslib_test_006_001_execute.lto_priv.0+0x4d2>
    HASH_REMOVE(objp);
 800ab24:	e9d0 1c00 	ldrd	r1, ip, [r0]
    LRU_INSERT_TAIL(ocp, objp);
 800ab28:	6a23      	ldr	r3, [r4, #32]
    HASH_REMOVE(objp);
 800ab2a:	f8cc 1000 	str.w	r1, [ip]
 800ab2e:	f8c1 c004 	str.w	ip, [r1, #4]
    LRU_INSERT_TAIL(ocp, objp);
 800ab32:	e9c0 6302 	strd	r6, r3, [r0, #8]
 800ab36:	6098      	str	r0, [r3, #8]
  if (++sp->cnt <= (cnt_t)0) {
 800ab38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ab3a:	6220      	str	r0, [r4, #32]
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	2b00      	cmp	r3, #0
    objp->obj_key   = 0U;
 800ab40:	e9c0 2204 	strd	r2, r2, [r0, #16]
    objp->obj_flags = OC_FLAG_INLRU;
 800ab44:	f8c0 b024 	str.w	fp, [r0, #36]	; 0x24
 800ab48:	63a3      	str	r3, [r4, #56]	; 0x38
 800ab4a:	f340 80fc 	ble.w	800ad46 <oslib_test_006_001_execute.lto_priv.0+0x4f6>
 800ab4e:	6a03      	ldr	r3, [r0, #32]
 800ab50:	3301      	adds	r3, #1
 800ab52:	6203      	str	r3, [r0, #32]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	689a      	ldr	r2, [r3, #8]
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	689b      	ldr	r3, [r3, #8]
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d901      	bls.n	800ab64 <oslib_test_006_001_execute.lto_priv.0+0x314>
    __sch_reschedule_ahead();
 800ab60:	f7f9 f97e 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 800ab64:	2300      	movs	r3, #0
 800ab66:	f383 8811 	msr	BASEPRI, r3
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 800ab6a:	f108 0801 	add.w	r8, r8, #1
 800ab6e:	f1b8 0f08 	cmp.w	r8, #8
 800ab72:	d1ad      	bne.n	800aad0 <oslib_test_006_001_execute.lto_priv.0+0x280>
    test_assert_sequence("abcdefgh", "unexpected tokens");
 800ab74:	4952      	ldr	r1, [pc, #328]	; (800acc0 <oslib_test_006_001_execute.lto_priv.0+0x470>)
 800ab76:	4856      	ldr	r0, [pc, #344]	; (800acd0 <oslib_test_006_001_execute.lto_priv.0+0x480>)
 800ab78:	f7fc f97a 	bl	8006e70 <__test_assert_sequence>
 800ab7c:	4681      	mov	r9, r0
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	f47f af07 	bne.w	800a992 <oslib_test_006_001_execute.lto_priv.0+0x142>
  test_set_step(5);
 800ab84:	2305      	movs	r3, #5
    for (i = NUM_OBJECTS; i < (NUM_OBJECTS * 2); i++) {
 800ab86:	f04f 0b04 	mov.w	fp, #4
 800ab8a:	f04f 0a30 	mov.w	sl, #48	; 0x30
  test_set_step(5);
 800ab8e:	602b      	str	r3, [r5, #0]
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 800ab90:	4658      	mov	r0, fp
 800ab92:	f7ff fa7d 	bl	800a090 <chCacheGetObject.constprop.0>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800ab96:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ab98:	0799      	lsls	r1, r3, #30
 800ab9a:	f57f aef5 	bpl.w	800a988 <oslib_test_006_001_execute.lto_priv.0+0x138>
 800ab9e:	f013 0808 	ands.w	r8, r3, #8
 800aba2:	f040 8081 	bne.w	800aca8 <oslib_test_006_001_execute.lto_priv.0+0x458>
 800aba6:	f38a 8811 	msr	BASEPRI, sl
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 800abaa:	6a03      	ldr	r3, [r0, #32]
 800abac:	2b00      	cmp	r3, #0
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 800abae:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 800abb0:	f2c0 8124 	blt.w	800adfc <oslib_test_006_001_execute.lto_priv.0+0x5ac>
  if ((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U) {
 800abb4:	071a      	lsls	r2, r3, #28
 800abb6:	f140 80eb 	bpl.w	800ad90 <oslib_test_006_001_execute.lto_priv.0+0x540>
    HASH_REMOVE(objp);
 800abba:	e9d0 2100 	ldrd	r2, r1, [r0]
    LRU_INSERT_TAIL(ocp, objp);
 800abbe:	6a23      	ldr	r3, [r4, #32]
    HASH_REMOVE(objp);
 800abc0:	600a      	str	r2, [r1, #0]
 800abc2:	6051      	str	r1, [r2, #4]
    LRU_INSERT_TAIL(ocp, objp);
 800abc4:	e9c0 6302 	strd	r6, r3, [r0, #8]
 800abc8:	6098      	str	r0, [r3, #8]
    objp->obj_flags = OC_FLAG_INLRU;
 800abca:	2301      	movs	r3, #1
    LRU_INSERT_TAIL(ocp, objp);
 800abcc:	6220      	str	r0, [r4, #32]
    objp->obj_key   = 0U;
 800abce:	e9c0 8804 	strd	r8, r8, [r0, #16]
    objp->obj_flags = OC_FLAG_INLRU;
 800abd2:	6243      	str	r3, [r0, #36]	; 0x24
 800abd4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800abd6:	3301      	adds	r3, #1
 800abd8:	2b00      	cmp	r3, #0
 800abda:	63a3      	str	r3, [r4, #56]	; 0x38
 800abdc:	f340 80f8 	ble.w	800add0 <oslib_test_006_001_execute.lto_priv.0+0x580>
 800abe0:	6a03      	ldr	r3, [r0, #32]
 800abe2:	3301      	adds	r3, #1
 800abe4:	6203      	str	r3, [r0, #32]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	689a      	ldr	r2, [r3, #8]
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	689b      	ldr	r3, [r3, #8]
 800abee:	429a      	cmp	r2, r3
 800abf0:	d901      	bls.n	800abf6 <oslib_test_006_001_execute.lto_priv.0+0x3a6>
    __sch_reschedule_ahead();
 800abf2:	f7f9 f935 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 800abf6:	f389 8811 	msr	BASEPRI, r9
    for (i = NUM_OBJECTS; i < (NUM_OBJECTS * 2); i++) {
 800abfa:	f10b 0b01 	add.w	fp, fp, #1
 800abfe:	f1bb 0f08 	cmp.w	fp, #8
 800ac02:	d1c5      	bne.n	800ab90 <oslib_test_006_001_execute.lto_priv.0+0x340>
    test_assert_sequence("", "unexpected tokens");
 800ac04:	492e      	ldr	r1, [pc, #184]	; (800acc0 <oslib_test_006_001_execute.lto_priv.0+0x470>)
 800ac06:	482f      	ldr	r0, [pc, #188]	; (800acc4 <oslib_test_006_001_execute.lto_priv.0+0x474>)
 800ac08:	f7fc f932 	bl	8006e70 <__test_assert_sequence>
 800ac0c:	4681      	mov	r9, r0
 800ac0e:	2800      	cmp	r0, #0
 800ac10:	f47f aebf 	bne.w	800a992 <oslib_test_006_001_execute.lto_priv.0+0x142>
  test_set_step(6);
 800ac14:	2306      	movs	r3, #6
 800ac16:	f04f 0a30 	mov.w	sl, #48	; 0x30
 800ac1a:	f04f 0b01 	mov.w	fp, #1
 800ac1e:	602b      	str	r3, [r5, #0]
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 800ac20:	4640      	mov	r0, r8
 800ac22:	f7ff fa35 	bl	800a090 <chCacheGetObject.constprop.0>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800ac26:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ac28:	079a      	lsls	r2, r3, #30
 800ac2a:	f57f aead 	bpl.w	800a988 <oslib_test_006_001_execute.lto_priv.0+0x138>
 800ac2e:	071b      	lsls	r3, r3, #28
 800ac30:	d534      	bpl.n	800ac9c <oslib_test_006_001_execute.lto_priv.0+0x44c>
 800ac32:	f38a 8811 	msr	BASEPRI, sl
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 800ac36:	6a03      	ldr	r3, [r0, #32]
 800ac38:	2b00      	cmp	r3, #0
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 800ac3a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 800ac3c:	f2c0 8101 	blt.w	800ae42 <oslib_test_006_001_execute.lto_priv.0+0x5f2>
  if ((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U) {
 800ac40:	0719      	lsls	r1, r3, #28
 800ac42:	f140 80b8 	bpl.w	800adb6 <oslib_test_006_001_execute.lto_priv.0+0x566>
    HASH_REMOVE(objp);
 800ac46:	e9d0 2100 	ldrd	r2, r1, [r0]
    LRU_INSERT_TAIL(ocp, objp);
 800ac4a:	6a23      	ldr	r3, [r4, #32]
    HASH_REMOVE(objp);
 800ac4c:	600a      	str	r2, [r1, #0]
 800ac4e:	6051      	str	r1, [r2, #4]
    LRU_INSERT_TAIL(ocp, objp);
 800ac50:	e9c0 6302 	strd	r6, r3, [r0, #8]
 800ac54:	6098      	str	r0, [r3, #8]
 800ac56:	6220      	str	r0, [r4, #32]
    objp->obj_key   = 0U;
 800ac58:	e9c0 9904 	strd	r9, r9, [r0, #16]
    objp->obj_flags = OC_FLAG_INLRU;
 800ac5c:	f8c0 b024 	str.w	fp, [r0, #36]	; 0x24
 800ac60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ac62:	3301      	adds	r3, #1
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	63a3      	str	r3, [r4, #56]	; 0x38
 800ac68:	f340 80cf 	ble.w	800ae0a <oslib_test_006_001_execute.lto_priv.0+0x5ba>
 800ac6c:	6a03      	ldr	r3, [r0, #32]
 800ac6e:	3301      	adds	r3, #1
 800ac70:	6203      	str	r3, [r0, #32]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	689a      	ldr	r2, [r3, #8]
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d901      	bls.n	800ac82 <oslib_test_006_001_execute.lto_priv.0+0x432>
    __sch_reschedule_ahead();
 800ac7e:	f7f9 f8ef 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 800ac82:	f389 8811 	msr	BASEPRI, r9
    for (i = 0; i < NUM_OBJECTS; i++) {
 800ac86:	f108 0801 	add.w	r8, r8, #1
 800ac8a:	f1b8 0f04 	cmp.w	r8, #4
 800ac8e:	d1c7      	bne.n	800ac20 <oslib_test_006_001_execute.lto_priv.0+0x3d0>
}
 800ac90:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_assert_sequence("", "unexpected tokens");
 800ac94:	490a      	ldr	r1, [pc, #40]	; (800acc0 <oslib_test_006_001_execute.lto_priv.0+0x470>)
 800ac96:	480b      	ldr	r0, [pc, #44]	; (800acc4 <oslib_test_006_001_execute.lto_priv.0+0x474>)
 800ac98:	f7fc b8ea 	b.w	8006e70 <__test_assert_sequence>
  chtest.global_fail     = true;
 800ac9c:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800aca0:	4a0c      	ldr	r2, [pc, #48]	; (800acd4 <oslib_test_006_001_execute.lto_priv.0+0x484>)
  chtest.global_fail     = true;
 800aca2:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800aca4:	60aa      	str	r2, [r5, #8]
 800aca6:	e674      	b.n	800a992 <oslib_test_006_001_execute.lto_priv.0+0x142>
  chtest.global_fail     = true;
 800aca8:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800acac:	4a0a      	ldr	r2, [pc, #40]	; (800acd8 <oslib_test_006_001_execute.lto_priv.0+0x488>)
  chtest.global_fail     = true;
 800acae:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800acb0:	60aa      	str	r2, [r5, #8]
 800acb2:	e66e      	b.n	800a992 <oslib_test_006_001_execute.lto_priv.0+0x142>
  chtest.global_fail     = true;
 800acb4:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800acb8:	4a08      	ldr	r2, [pc, #32]	; (800acdc <oslib_test_006_001_execute.lto_priv.0+0x48c>)
  chtest.global_fail     = true;
 800acba:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800acbc:	60aa      	str	r2, [r5, #8]
 800acbe:	e668      	b.n	800a992 <oslib_test_006_001_execute.lto_priv.0+0x142>
 800acc0:	08012c98 	.word	0x08012c98
 800acc4:	08010400 	.word	0x08010400
 800acc8:	20001d1c 	.word	0x20001d1c
 800accc:	20001d4c 	.word	0x20001d4c
 800acd0:	08012cc8 	.word	0x08012cc8
 800acd4:	08012cc0 	.word	0x08012cc0
 800acd8:	08012cbc 	.word	0x08012cbc
 800acdc:	08012cac 	.word	0x08012cac
    if ((objp->obj_flags & OC_FLAG_FORGET) == 0U) {
 800ace0:	069a      	lsls	r2, r3, #26
 800ace2:	d40d      	bmi.n	800ad00 <oslib_test_006_001_execute.lto_priv.0+0x4b0>
      LRU_INSERT_HEAD(ocp, objp);
 800ace4:	69e2      	ldr	r2, [r4, #28]
 800ace6:	e9cb 2602 	strd	r2, r6, [fp, #8]
 800acea:	f8c2 b00c 	str.w	fp, [r2, #12]
 800acee:	f8c4 b01c 	str.w	fp, [r4, #28]
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_LAZYWRITE;
 800acf2:	f003 0312 	and.w	r3, r3, #18
    objp->obj_flags |= OC_FLAG_INLRU;
 800acf6:	f043 0301 	orr.w	r3, r3, #1
 800acfa:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
 800acfe:	e6c0      	b.n	800aa82 <oslib_test_006_001_execute.lto_priv.0+0x232>
      LRU_INSERT_TAIL(ocp, objp);
 800ad00:	6a22      	ldr	r2, [r4, #32]
 800ad02:	e9cb 6202 	strd	r6, r2, [fp, #8]
 800ad06:	f8c2 b008 	str.w	fp, [r2, #8]
 800ad0a:	f8c4 b020 	str.w	fp, [r4, #32]
 800ad0e:	e7f0      	b.n	800acf2 <oslib_test_006_001_execute.lto_priv.0+0x4a2>
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 800ad10:	f003 031a 	and.w	r3, r3, #26
 800ad14:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
    chSemSignalI(&objp->obj_sem);
 800ad18:	f10b 0018 	add.w	r0, fp, #24
 800ad1c:	f7f9 fde0 	bl	80048e0 <chSemSignalI>
    return;
 800ad20:	e6b7      	b.n	800aa92 <oslib_test_006_001_execute.lto_priv.0+0x242>
    if ((objp->obj_flags & OC_FLAG_FORGET) == 0U) {
 800ad22:	069a      	lsls	r2, r3, #26
 800ad24:	d427      	bmi.n	800ad76 <oslib_test_006_001_execute.lto_priv.0+0x526>
      LRU_INSERT_HEAD(ocp, objp);
 800ad26:	69e2      	ldr	r2, [r4, #28]
 800ad28:	e9c0 2602 	strd	r2, r6, [r0, #8]
 800ad2c:	60d0      	str	r0, [r2, #12]
 800ad2e:	61e0      	str	r0, [r4, #28]
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_LAZYWRITE;
 800ad30:	f003 0312 	and.w	r3, r3, #18
    objp->obj_flags |= OC_FLAG_INLRU;
 800ad34:	f043 0301 	orr.w	r3, r3, #1
 800ad38:	6243      	str	r3, [r0, #36]	; 0x24
 800ad3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ad3c:	3301      	adds	r3, #1
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	63a3      	str	r3, [r4, #56]	; 0x38
 800ad42:	f73f af04 	bgt.w	800ab4e <oslib_test_006_001_execute.lto_priv.0+0x2fe>
    tp->u.rdymsg = MSG_OK;
 800ad46:	2100      	movs	r1, #0
  ch_queue_t *p = qp->next;
 800ad48:	6b23      	ldr	r3, [r4, #48]	; 0x30
  qp->next->prev = qp;
 800ad4a:	f8df c104 	ldr.w	ip, [pc, #260]	; 800ae50 <oslib_test_006_001_execute.lto_priv.0+0x600>
  qp->next       = p->next;
 800ad4e:	681a      	ldr	r2, [r3, #0]
 800ad50:	6322      	str	r2, [r4, #48]	; 0x30
  qp->next->prev = qp;
 800ad52:	f8c2 c004 	str.w	ip, [r2, #4]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800ad56:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800ad58:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800ad5c:	62d9      	str	r1, [r3, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 800ad5e:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    pqp = pqp->next;
 800ad62:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800ad64:	6891      	ldr	r1, [r2, #8]
 800ad66:	4561      	cmp	r1, ip
 800ad68:	d2fb      	bcs.n	800ad62 <oslib_test_006_001_execute.lto_priv.0+0x512>
  p->prev       = pqp->prev;
 800ad6a:	6851      	ldr	r1, [r2, #4]
  p->next       = pqp;
 800ad6c:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
 800ad6e:	6059      	str	r1, [r3, #4]
  p->prev->next = p;
 800ad70:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 800ad72:	6053      	str	r3, [r2, #4]
  return __sch_ready_behind(tp);
 800ad74:	e6eb      	b.n	800ab4e <oslib_test_006_001_execute.lto_priv.0+0x2fe>
      LRU_INSERT_TAIL(ocp, objp);
 800ad76:	6a22      	ldr	r2, [r4, #32]
 800ad78:	e9c0 6202 	strd	r6, r2, [r0, #8]
 800ad7c:	6090      	str	r0, [r2, #8]
 800ad7e:	6220      	str	r0, [r4, #32]
 800ad80:	e7d6      	b.n	800ad30 <oslib_test_006_001_execute.lto_priv.0+0x4e0>
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 800ad82:	f003 031a 	and.w	r3, r3, #26
 800ad86:	6243      	str	r3, [r0, #36]	; 0x24
    chSemSignalI(&objp->obj_sem);
 800ad88:	3018      	adds	r0, #24
 800ad8a:	f7f9 fda9 	bl	80048e0 <chSemSignalI>
    return;
 800ad8e:	e6e1      	b.n	800ab54 <oslib_test_006_001_execute.lto_priv.0+0x304>
    if ((objp->obj_flags & OC_FLAG_FORGET) == 0U) {
 800ad90:	0699      	lsls	r1, r3, #26
 800ad92:	d50a      	bpl.n	800adaa <oslib_test_006_001_execute.lto_priv.0+0x55a>
      LRU_INSERT_TAIL(ocp, objp);
 800ad94:	6a22      	ldr	r2, [r4, #32]
 800ad96:	e9c0 6202 	strd	r6, r2, [r0, #8]
 800ad9a:	6090      	str	r0, [r2, #8]
 800ad9c:	6220      	str	r0, [r4, #32]
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_LAZYWRITE;
 800ad9e:	f003 0312 	and.w	r3, r3, #18
    objp->obj_flags |= OC_FLAG_INLRU;
 800ada2:	f043 0301 	orr.w	r3, r3, #1
 800ada6:	6243      	str	r3, [r0, #36]	; 0x24
 800ada8:	e714      	b.n	800abd4 <oslib_test_006_001_execute.lto_priv.0+0x384>
      LRU_INSERT_HEAD(ocp, objp);
 800adaa:	69e2      	ldr	r2, [r4, #28]
 800adac:	e9c0 2602 	strd	r2, r6, [r0, #8]
 800adb0:	60d0      	str	r0, [r2, #12]
 800adb2:	61e0      	str	r0, [r4, #28]
 800adb4:	e7f3      	b.n	800ad9e <oslib_test_006_001_execute.lto_priv.0+0x54e>
    if ((objp->obj_flags & OC_FLAG_FORGET) == 0U) {
 800adb6:	069a      	lsls	r2, r3, #26
 800adb8:	d43d      	bmi.n	800ae36 <oslib_test_006_001_execute.lto_priv.0+0x5e6>
      LRU_INSERT_HEAD(ocp, objp);
 800adba:	69e2      	ldr	r2, [r4, #28]
 800adbc:	e9c0 2602 	strd	r2, r6, [r0, #8]
 800adc0:	60d0      	str	r0, [r2, #12]
 800adc2:	61e0      	str	r0, [r4, #28]
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_LAZYWRITE;
 800adc4:	f003 0312 	and.w	r3, r3, #18
    objp->obj_flags |= OC_FLAG_INLRU;
 800adc8:	f043 0301 	orr.w	r3, r3, #1
 800adcc:	6243      	str	r3, [r0, #36]	; 0x24
 800adce:	e747      	b.n	800ac60 <oslib_test_006_001_execute.lto_priv.0+0x410>
  ch_queue_t *p = qp->next;
 800add0:	6b22      	ldr	r2, [r4, #48]	; 0x30
  qp->next->prev = qp;
 800add2:	491f      	ldr	r1, [pc, #124]	; (800ae50 <oslib_test_006_001_execute.lto_priv.0+0x600>)
  qp->next       = p->next;
 800add4:	6813      	ldr	r3, [r2, #0]
 800add6:	6323      	str	r3, [r4, #48]	; 0x30
  qp->next->prev = qp;
 800add8:	6059      	str	r1, [r3, #4]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800adda:	6991      	ldr	r1, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800addc:	6893      	ldr	r3, [r2, #8]
 800adde:	f8c2 902c 	str.w	r9, [r2, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 800ade2:	f882 9028 	strb.w	r9, [r2, #40]	; 0x28
    pqp = pqp->next;
 800ade6:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800ade8:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800adec:	459c      	cmp	ip, r3
 800adee:	d2fa      	bcs.n	800ade6 <oslib_test_006_001_execute.lto_priv.0+0x596>
  p->prev       = pqp->prev;
 800adf0:	684b      	ldr	r3, [r1, #4]
  p->next       = pqp;
 800adf2:	6011      	str	r1, [r2, #0]
  p->prev       = pqp->prev;
 800adf4:	6053      	str	r3, [r2, #4]
  p->prev->next = p;
 800adf6:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
 800adf8:	604a      	str	r2, [r1, #4]
  return __sch_ready_behind(tp);
 800adfa:	e6f1      	b.n	800abe0 <oslib_test_006_001_execute.lto_priv.0+0x390>
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 800adfc:	f003 031a 	and.w	r3, r3, #26
 800ae00:	6243      	str	r3, [r0, #36]	; 0x24
    chSemSignalI(&objp->obj_sem);
 800ae02:	3018      	adds	r0, #24
 800ae04:	f7f9 fd6c 	bl	80048e0 <chSemSignalI>
    return;
 800ae08:	e6ed      	b.n	800abe6 <oslib_test_006_001_execute.lto_priv.0+0x396>
  ch_queue_t *p = qp->next;
 800ae0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  qp->next->prev = qp;
 800ae0c:	4910      	ldr	r1, [pc, #64]	; (800ae50 <oslib_test_006_001_execute.lto_priv.0+0x600>)
  qp->next       = p->next;
 800ae0e:	681a      	ldr	r2, [r3, #0]
 800ae10:	6322      	str	r2, [r4, #48]	; 0x30
  qp->next->prev = qp;
 800ae12:	6051      	str	r1, [r2, #4]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800ae14:	6999      	ldr	r1, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800ae16:	689a      	ldr	r2, [r3, #8]
 800ae18:	f8c3 902c 	str.w	r9, [r3, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 800ae1c:	f883 9028 	strb.w	r9, [r3, #40]	; 0x28
    pqp = pqp->next;
 800ae20:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800ae22:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800ae26:	4594      	cmp	ip, r2
 800ae28:	d2fa      	bcs.n	800ae20 <oslib_test_006_001_execute.lto_priv.0+0x5d0>
  p->prev       = pqp->prev;
 800ae2a:	684a      	ldr	r2, [r1, #4]
  p->next       = pqp;
 800ae2c:	6019      	str	r1, [r3, #0]
  p->prev       = pqp->prev;
 800ae2e:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
 800ae30:	6013      	str	r3, [r2, #0]
  pqp->prev     = p;
 800ae32:	604b      	str	r3, [r1, #4]
  return __sch_ready_behind(tp);
 800ae34:	e71a      	b.n	800ac6c <oslib_test_006_001_execute.lto_priv.0+0x41c>
      LRU_INSERT_TAIL(ocp, objp);
 800ae36:	6a22      	ldr	r2, [r4, #32]
 800ae38:	e9c0 6202 	strd	r6, r2, [r0, #8]
 800ae3c:	6090      	str	r0, [r2, #8]
 800ae3e:	6220      	str	r0, [r4, #32]
 800ae40:	e7c0      	b.n	800adc4 <oslib_test_006_001_execute.lto_priv.0+0x574>
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 800ae42:	f003 031a 	and.w	r3, r3, #26
 800ae46:	6243      	str	r3, [r0, #36]	; 0x24
    chSemSignalI(&objp->obj_sem);
 800ae48:	3018      	adds	r0, #24
 800ae4a:	f7f9 fd49 	bl	80048e0 <chSemSignalI>
    return;
 800ae4e:	e710      	b.n	800ac72 <oslib_test_006_001_execute.lto_priv.0+0x422>
 800ae50:	20001d4c 	.word	0x20001d4c
	...

0800ae60 <oslib_test_002_001_execute.lto_priv.0>:
  test_set_step(1);
 800ae60:	2101      	movs	r1, #1
static void oslib_test_002_001_execute(void) {
 800ae62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 800ae66:	4dba      	ldr	r5, [pc, #744]	; (800b150 <oslib_test_002_001_execute.lto_priv.0+0x2f0>)
 800ae68:	2030      	movs	r0, #48	; 0x30
static void oslib_test_002_001_execute(void) {
 800ae6a:	b083      	sub	sp, #12
  test_set_step(1);
 800ae6c:	6029      	str	r1, [r5, #0]
 800ae6e:	f380 8811 	msr	BASEPRI, r0
 800ae72:	4cb8      	ldr	r4, [pc, #736]	; (800b154 <oslib_test_002_001_execute.lto_priv.0+0x2f4>)
 800ae74:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ae78:	1a9a      	subs	r2, r3, r2
 */
static inline size_t chMBGetFreeCountI(const mailbox_t *mbp) {

  chDbgCheckClassI();

  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800ae7a:	6923      	ldr	r3, [r4, #16]
 800ae7c:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
  if (!condition) {
 800ae80:	2b04      	cmp	r3, #4
 800ae82:	f040 815a 	bne.w	800b13a <oslib_test_002_001_execute.lto_priv.0+0x2da>
 800ae86:	f04f 0c00 	mov.w	ip, #0
 800ae8a:	f38c 8811 	msr	BASEPRI, ip
  test_set_step(2);
 800ae8e:	2302      	movs	r3, #2
 800ae90:	602b      	str	r3, [r5, #0]
 800ae92:	f380 8811 	msr	BASEPRI, r0
  return (bool)(qp->next != qp);
 800ae96:	4626      	mov	r6, r4
  mbp->reset = true;
 800ae98:	7521      	strb	r1, [r4, #20]
 800ae9a:	f856 1f18 	ldr.w	r1, [r6, #24]!
  mbp->wrptr = mbp->buffer;
 800ae9e:	6823      	ldr	r3, [r4, #0]
  while (ch_queue_notempty(&tqp->queue)) {
 800aea0:	42b1      	cmp	r1, r6
  mbp->rdptr = mbp->buffer;
 800aea2:	e9c4 3302 	strd	r3, r3, [r4, #8]
  mbp->cnt   = (size_t)0;
 800aea6:	f8c4 c010 	str.w	ip, [r4, #16]
 800aeaa:	d016      	beq.n	800aeda <oslib_test_002_001_execute.lto_priv.0+0x7a>
 800aeac:	f06f 0e01 	mvn.w	lr, #1
 800aeb0:	460b      	mov	r3, r1
  qp->next       = p->next;
 800aeb2:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800aeb4:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800aeb6:	689f      	ldr	r7, [r3, #8]
  qp->next       = p->next;
 800aeb8:	61a1      	str	r1, [r4, #24]
  qp->next->prev = qp;
 800aeba:	604e      	str	r6, [r1, #4]
 800aebc:	f8c3 e02c 	str.w	lr, [r3, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 800aec0:	f883 c028 	strb.w	ip, [r3, #40]	; 0x28
    pqp = pqp->next;
 800aec4:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800aec6:	6890      	ldr	r0, [r2, #8]
 800aec8:	42b8      	cmp	r0, r7
 800aeca:	d2fb      	bcs.n	800aec4 <oslib_test_002_001_execute.lto_priv.0+0x64>
  p->prev       = pqp->prev;
 800aecc:	6850      	ldr	r0, [r2, #4]
 800aece:	42b1      	cmp	r1, r6
 800aed0:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 800aed4:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 800aed6:	6053      	str	r3, [r2, #4]
 800aed8:	d1ea      	bne.n	800aeb0 <oslib_test_002_001_execute.lto_priv.0+0x50>
  return (bool)(qp->next != qp);
 800aeda:	6a21      	ldr	r1, [r4, #32]
 800aedc:	4e9e      	ldr	r6, [pc, #632]	; (800b158 <oslib_test_002_001_execute.lto_priv.0+0x2f8>)
 800aede:	42b1      	cmp	r1, r6
 800aee0:	d018      	beq.n	800af14 <oslib_test_002_001_execute.lto_priv.0+0xb4>
 800aee2:	f06f 0e01 	mvn.w	lr, #1
 800aee6:	f04f 0c00 	mov.w	ip, #0
 800aeea:	460b      	mov	r3, r1
  qp->next       = p->next;
 800aeec:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800aeee:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800aef0:	689f      	ldr	r7, [r3, #8]
  qp->next       = p->next;
 800aef2:	6221      	str	r1, [r4, #32]
  qp->next->prev = qp;
 800aef4:	604e      	str	r6, [r1, #4]
 800aef6:	f8c3 e02c 	str.w	lr, [r3, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 800aefa:	f883 c028 	strb.w	ip, [r3, #40]	; 0x28
    pqp = pqp->next;
 800aefe:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800af00:	6890      	ldr	r0, [r2, #8]
 800af02:	42b8      	cmp	r0, r7
 800af04:	d2fb      	bcs.n	800aefe <oslib_test_002_001_execute.lto_priv.0+0x9e>
  p->prev       = pqp->prev;
 800af06:	6850      	ldr	r0, [r2, #4]
 800af08:	42b1      	cmp	r1, r6
 800af0a:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 800af0e:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 800af10:	6053      	str	r3, [r2, #4]
 800af12:	d1ea      	bne.n	800aeea <oslib_test_002_001_execute.lto_priv.0+0x8a>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800af14:	4b91      	ldr	r3, [pc, #580]	; (800b15c <oslib_test_002_001_execute.lto_priv.0+0x2fc>)
 800af16:	681a      	ldr	r2, [r3, #0]
 800af18:	68db      	ldr	r3, [r3, #12]
 800af1a:	6892      	ldr	r2, [r2, #8]
 800af1c:	689b      	ldr	r3, [r3, #8]
 800af1e:	429a      	cmp	r2, r3
 800af20:	d901      	bls.n	800af26 <oslib_test_002_001_execute.lto_priv.0+0xc6>
    __sch_reschedule_ahead();
 800af22:	f7f8 ff9d 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 800af26:	2300      	movs	r3, #0
 800af28:	f383 8811 	msr	BASEPRI, r3
 800af2c:	2730      	movs	r7, #48	; 0x30
 800af2e:	f387 8811 	msr	BASEPRI, r7
  return (size_t)(mbp->top - mbp->buffer);
 800af32:	e9d4 2600 	ldrd	r2, r6, [r4]
 800af36:	1ab6      	subs	r6, r6, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800af38:	6922      	ldr	r2, [r4, #16]
 800af3a:	ebc2 06a6 	rsb	r6, r2, r6, asr #2
 800af3e:	2e04      	cmp	r6, #4
 800af40:	f040 8122 	bne.w	800b188 <oslib_test_002_001_execute.lto_priv.0+0x328>
 800af44:	f383 8811 	msr	BASEPRI, r3
 800af48:	f387 8811 	msr	BASEPRI, r7
 800af4c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 800af50:	f1b8 0f00 	cmp.w	r8, #0
 800af54:	f040 812a 	bne.w	800b1ac <oslib_test_002_001_execute.lto_priv.0+0x34c>
 800af58:	f388 8811 	msr	BASEPRI, r8
 800af5c:	f387 8811 	msr	BASEPRI, r7
 800af60:	6822      	ldr	r2, [r4, #0]
 800af62:	68a3      	ldr	r3, [r4, #8]
 800af64:	429a      	cmp	r2, r3
 800af66:	f040 8119 	bne.w	800b19c <oslib_test_002_001_execute.lto_priv.0+0x33c>
 800af6a:	f388 8811 	msr	BASEPRI, r8
 800af6e:	f387 8811 	msr	BASEPRI, r7
 800af72:	6822      	ldr	r2, [r4, #0]
 800af74:	68e3      	ldr	r3, [r4, #12]
 800af76:	429a      	cmp	r2, r3
 800af78:	f040 8128 	bne.w	800b1cc <oslib_test_002_001_execute.lto_priv.0+0x36c>
 800af7c:	f388 8811 	msr	BASEPRI, r8
  test_set_step(3);
 800af80:	2303      	movs	r3, #3
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 800af82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af86:	4641      	mov	r1, r8
 800af88:	4872      	ldr	r0, [pc, #456]	; (800b154 <oslib_test_002_001_execute.lto_priv.0+0x2f4>)
  test_set_step(3);
 800af8a:	602b      	str	r3, [r5, #0]
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 800af8c:	f7fa fb78 	bl	8005680 <chMBPostTimeout>
 800af90:	3002      	adds	r0, #2
 800af92:	f040 8115 	bne.w	800b1c0 <oslib_test_002_001_execute.lto_priv.0+0x360>
    msg1 = chMBPostAheadTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 800af96:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800af9a:	4640      	mov	r0, r8
 800af9c:	f7ff fbf8 	bl	800a790 <chMBPostAheadTimeout.constprop.0>
 800afa0:	3002      	adds	r0, #2
 800afa2:	f040 810d 	bne.w	800b1c0 <oslib_test_002_001_execute.lto_priv.0+0x360>
 800afa6:	f387 8811 	msr	BASEPRI, r7
  rdymsg = chMBFetchTimeoutS(mbp, msgp, timeout);
 800afaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800afae:	a901      	add	r1, sp, #4
 800afb0:	4868      	ldr	r0, [pc, #416]	; (800b154 <oslib_test_002_001_execute.lto_priv.0+0x2f4>)
 800afb2:	f7fa fbcd 	bl	8005750 <chMBFetchTimeoutS>
 800afb6:	f388 8811 	msr	BASEPRI, r8
 800afba:	3002      	adds	r0, #2
 800afbc:	f040 8100 	bne.w	800b1c0 <oslib_test_002_001_execute.lto_priv.0+0x360>
  test_set_step(4);
 800afc0:	2742      	movs	r7, #66	; 0x42
 800afc2:	602e      	str	r6, [r5, #0]
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800afc4:	4e63      	ldr	r6, [pc, #396]	; (800b154 <oslib_test_002_001_execute.lto_priv.0+0x2f4>)
 *
 * @xclass
 */
static inline void chMBResumeX(mailbox_t *mbp) {

  mbp->reset = false;
 800afc6:	f884 8014 	strb.w	r8, [r4, #20]
 800afca:	4639      	mov	r1, r7
 800afcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800afd0:	4630      	mov	r0, r6
 800afd2:	f7fa fb55 	bl	8005680 <chMBPostTimeout>
    for (i = 0; i < MB_SIZE - 1; i++) {
 800afd6:	3701      	adds	r7, #1
 800afd8:	2800      	cmp	r0, #0
 800afda:	f040 80ff 	bne.w	800b1dc <oslib_test_002_001_execute.lto_priv.0+0x37c>
 800afde:	2f45      	cmp	r7, #69	; 0x45
 800afe0:	d1f3      	bne.n	800afca <oslib_test_002_001_execute.lto_priv.0+0x16a>
    msg1 = chMBPostAheadTimeout(&mb1, 'A', TIME_INFINITE);
 800afe2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800afe6:	2041      	movs	r0, #65	; 0x41
 800afe8:	f7ff fbd2 	bl	800a790 <chMBPostAheadTimeout.constprop.0>
 800afec:	4607      	mov	r7, r0
 800afee:	2800      	cmp	r0, #0
 800aff0:	f040 80f4 	bne.w	800b1dc <oslib_test_002_001_execute.lto_priv.0+0x37c>
  test_set_step(5);
 800aff4:	2305      	movs	r3, #5
 800aff6:	f04f 0830 	mov.w	r8, #48	; 0x30
 800affa:	602b      	str	r3, [r5, #0]
 800affc:	f388 8811 	msr	BASEPRI, r8
  return (size_t)(mbp->top - mbp->buffer);
 800b000:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b004:	1a9b      	subs	r3, r3, r2
 800b006:	6922      	ldr	r2, [r4, #16]
 800b008:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 800b00c:	f040 80ec 	bne.w	800b1e8 <oslib_test_002_001_execute.lto_priv.0+0x388>
 800b010:	f380 8811 	msr	BASEPRI, r0
 800b014:	f388 8811 	msr	BASEPRI, r8
  return mbp->cnt;
 800b018:	6926      	ldr	r6, [r4, #16]
 800b01a:	2e04      	cmp	r6, #4
 800b01c:	f040 80ec 	bne.w	800b1f8 <oslib_test_002_001_execute.lto_priv.0+0x398>
 800b020:	f380 8811 	msr	BASEPRI, r0
 800b024:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 800b028:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 800b02c:	eba0 0c03 	sub.w	ip, r0, r3
 800b030:	f1dc 0000 	rsbs	r0, ip, #0
 800b034:	eb40 000c 	adc.w	r0, r0, ip
 800b038:	4949      	ldr	r1, [pc, #292]	; (800b160 <oslib_test_002_001_execute.lto_priv.0+0x300>)
 800b03a:	f7fb ff09 	bl	8006e50 <__test_assert>
 800b03e:	2800      	cmp	r0, #0
 800b040:	f040 80e2 	bne.w	800b208 <oslib_test_002_001_execute.lto_priv.0+0x3a8>
 800b044:	f380 8811 	msr	BASEPRI, r0
  test_set_step(6);
 800b048:	2306      	movs	r3, #6
 800b04a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800b154 <oslib_test_002_001_execute.lto_priv.0+0x2f4>
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 800b04e:	4f45      	ldr	r7, [pc, #276]	; (800b164 <oslib_test_002_001_execute.lto_priv.0+0x304>)
 800b050:	602b      	str	r3, [r5, #0]
 800b052:	f388 8811 	msr	BASEPRI, r8
 800b056:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b05a:	4648      	mov	r0, r9
 800b05c:	a901      	add	r1, sp, #4
 800b05e:	f7fa fb77 	bl	8005750 <chMBFetchTimeoutS>
 800b062:	2200      	movs	r2, #0
 800b064:	f382 8811 	msr	BASEPRI, r2
  if (!condition) {
 800b068:	2800      	cmp	r0, #0
 800b06a:	f040 80b7 	bne.w	800b1dc <oslib_test_002_001_execute.lto_priv.0+0x37c>
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 800b06e:	68eb      	ldr	r3, [r5, #12]
 800b070:	42bb      	cmp	r3, r7
 800b072:	d203      	bcs.n	800b07c <oslib_test_002_001_execute.lto_priv.0+0x21c>
      test_emit_token(msg2);
 800b074:	9a01      	ldr	r2, [sp, #4]
    *chtest.tokp++ = token;
 800b076:	1c59      	adds	r1, r3, #1
 800b078:	60e9      	str	r1, [r5, #12]
 800b07a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < MB_SIZE; i++) {
 800b07c:	3e01      	subs	r6, #1
 800b07e:	d1e8      	bne.n	800b052 <oslib_test_002_001_execute.lto_priv.0+0x1f2>
    test_assert_sequence("ABCD", "wrong get sequence");
 800b080:	4939      	ldr	r1, [pc, #228]	; (800b168 <oslib_test_002_001_execute.lto_priv.0+0x308>)
 800b082:	483a      	ldr	r0, [pc, #232]	; (800b16c <oslib_test_002_001_execute.lto_priv.0+0x30c>)
 800b084:	f7fb fef4 	bl	8006e70 <__test_assert_sequence>
 800b088:	2800      	cmp	r0, #0
 800b08a:	d15e      	bne.n	800b14a <oslib_test_002_001_execute.lto_priv.0+0x2ea>
  test_set_step(7);
 800b08c:	2307      	movs	r3, #7
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800b08e:	2146      	movs	r1, #70	; 0x46
 800b090:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b094:	482f      	ldr	r0, [pc, #188]	; (800b154 <oslib_test_002_001_execute.lto_priv.0+0x2f4>)
  test_set_step(7);
 800b096:	602b      	str	r3, [r5, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800b098:	f7fa faf2 	bl	8005680 <chMBPostTimeout>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800b09c:	fab0 f080 	clz	r0, r0
 800b0a0:	4933      	ldr	r1, [pc, #204]	; (800b170 <oslib_test_002_001_execute.lto_priv.0+0x310>)
 800b0a2:	0940      	lsrs	r0, r0, #5
 800b0a4:	f7fb fed4 	bl	8006e50 <__test_assert>
 800b0a8:	2800      	cmp	r0, #0
 800b0aa:	d14e      	bne.n	800b14a <oslib_test_002_001_execute.lto_priv.0+0x2ea>
 800b0ac:	2730      	movs	r7, #48	; 0x30
 800b0ae:	f387 8811 	msr	BASEPRI, r7
 800b0b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b0b6:	a901      	add	r1, sp, #4
 800b0b8:	4826      	ldr	r0, [pc, #152]	; (800b154 <oslib_test_002_001_execute.lto_priv.0+0x2f4>)
 800b0ba:	f7fa fb49 	bl	8005750 <chMBFetchTimeoutS>
 800b0be:	f386 8811 	msr	BASEPRI, r6
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800b0c2:	fab0 f080 	clz	r0, r0
 800b0c6:	492a      	ldr	r1, [pc, #168]	; (800b170 <oslib_test_002_001_execute.lto_priv.0+0x310>)
 800b0c8:	0940      	lsrs	r0, r0, #5
 800b0ca:	f7fb fec1 	bl	8006e50 <__test_assert>
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	d13b      	bne.n	800b14a <oslib_test_002_001_execute.lto_priv.0+0x2ea>
  test_set_step(8);
 800b0d2:	2308      	movs	r3, #8
 800b0d4:	602b      	str	r3, [r5, #0]
 800b0d6:	f387 8811 	msr	BASEPRI, r7
  return (size_t)(mbp->top - mbp->buffer);
 800b0da:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b0de:	1a9a      	subs	r2, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800b0e0:	6923      	ldr	r3, [r4, #16]
 800b0e2:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 800b0e6:	1f19      	subs	r1, r3, #4
 800b0e8:	4248      	negs	r0, r1
 800b0ea:	4148      	adcs	r0, r1
 800b0ec:	4921      	ldr	r1, [pc, #132]	; (800b174 <oslib_test_002_001_execute.lto_priv.0+0x314>)
 800b0ee:	f7fb feaf 	bl	8006e50 <__test_assert>
 800b0f2:	2800      	cmp	r0, #0
 800b0f4:	f040 808b 	bne.w	800b20e <oslib_test_002_001_execute.lto_priv.0+0x3ae>
 800b0f8:	f386 8811 	msr	BASEPRI, r6
 800b0fc:	f387 8811 	msr	BASEPRI, r7
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 800b100:	6920      	ldr	r0, [r4, #16]
 800b102:	491d      	ldr	r1, [pc, #116]	; (800b178 <oslib_test_002_001_execute.lto_priv.0+0x318>)
 800b104:	fab0 f080 	clz	r0, r0
 800b108:	0940      	lsrs	r0, r0, #5
 800b10a:	f7fb fea1 	bl	8006e50 <__test_assert>
 800b10e:	2800      	cmp	r0, #0
 800b110:	d17d      	bne.n	800b20e <oslib_test_002_001_execute.lto_priv.0+0x3ae>
 800b112:	f386 8811 	msr	BASEPRI, r6
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 800b116:	6820      	ldr	r0, [r4, #0]
 800b118:	68a3      	ldr	r3, [r4, #8]
 800b11a:	4918      	ldr	r1, [pc, #96]	; (800b17c <oslib_test_002_001_execute.lto_priv.0+0x31c>)
 800b11c:	1ac2      	subs	r2, r0, r3
 800b11e:	4250      	negs	r0, r2
 800b120:	4150      	adcs	r0, r2
 800b122:	f7fb fe95 	bl	8006e50 <__test_assert>
 800b126:	b980      	cbnz	r0, 800b14a <oslib_test_002_001_execute.lto_priv.0+0x2ea>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 800b128:	6820      	ldr	r0, [r4, #0]
 800b12a:	68e3      	ldr	r3, [r4, #12]
 800b12c:	4914      	ldr	r1, [pc, #80]	; (800b180 <oslib_test_002_001_execute.lto_priv.0+0x320>)
 800b12e:	1ac3      	subs	r3, r0, r3
 800b130:	4258      	negs	r0, r3
 800b132:	4158      	adcs	r0, r3
 800b134:	f7fb fe8c 	bl	8006e50 <__test_assert>
 800b138:	e007      	b.n	800b14a <oslib_test_002_001_execute.lto_priv.0+0x2ea>
  chtest.global_fail     = true;
 800b13a:	f240 1201 	movw	r2, #257	; 0x101
  chtest.failure_message = msg;
 800b13e:	4911      	ldr	r1, [pc, #68]	; (800b184 <oslib_test_002_001_execute.lto_priv.0+0x324>)
 800b140:	2300      	movs	r3, #0
 800b142:	60a9      	str	r1, [r5, #8]
  chtest.global_fail     = true;
 800b144:	80aa      	strh	r2, [r5, #4]
 800b146:	f383 8811 	msr	BASEPRI, r3
}
 800b14a:	b003      	add	sp, #12
 800b14c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b150:	200010f4 	.word	0x200010f4
 800b154:	20000854 	.word	0x20000854
 800b158:	20000874 	.word	0x20000874
 800b15c:	20001050 	.word	0x20001050
 800b160:	08012d6c 	.word	0x08012d6c
 800b164:	20001114 	.word	0x20001114
 800b168:	08012d84 	.word	0x08012d84
 800b16c:	080106c4 	.word	0x080106c4
 800b170:	08010fa4 	.word	0x08010fa4
 800b174:	08012ce0 	.word	0x08012ce0
 800b178:	08012cec 	.word	0x08012cec
 800b17c:	08012cf8 	.word	0x08012cf8
 800b180:	08012d1c 	.word	0x08012d1c
 800b184:	08012cd4 	.word	0x08012cd4
 800b188:	f240 1201 	movw	r2, #257	; 0x101
  chtest.failure_message = msg;
 800b18c:	4921      	ldr	r1, [pc, #132]	; (800b214 <oslib_test_002_001_execute.lto_priv.0+0x3b4>)
  chtest.global_fail     = true;
 800b18e:	80aa      	strh	r2, [r5, #4]
  chtest.failure_message = msg;
 800b190:	60a9      	str	r1, [r5, #8]
 800b192:	f383 8811 	msr	BASEPRI, r3
 800b196:	b003      	add	sp, #12
 800b198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  chtest.global_fail     = true;
 800b19c:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800b1a0:	4a1d      	ldr	r2, [pc, #116]	; (800b218 <oslib_test_002_001_execute.lto_priv.0+0x3b8>)
  chtest.global_fail     = true;
 800b1a2:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800b1a4:	60aa      	str	r2, [r5, #8]
 800b1a6:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 800b1aa:	e7ce      	b.n	800b14a <oslib_test_002_001_execute.lto_priv.0+0x2ea>
  chtest.global_fail     = true;
 800b1ac:	f240 1201 	movw	r2, #257	; 0x101
  chtest.failure_message = msg;
 800b1b0:	491a      	ldr	r1, [pc, #104]	; (800b21c <oslib_test_002_001_execute.lto_priv.0+0x3bc>)
  chtest.global_fail     = true;
 800b1b2:	80aa      	strh	r2, [r5, #4]
  chtest.failure_message = msg;
 800b1b4:	60a9      	str	r1, [r5, #8]
 800b1b6:	f383 8811 	msr	BASEPRI, r3
}
 800b1ba:	b003      	add	sp, #12
 800b1bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  chtest.global_fail     = true;
 800b1c0:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800b1c4:	4a16      	ldr	r2, [pc, #88]	; (800b220 <oslib_test_002_001_execute.lto_priv.0+0x3c0>)
  chtest.global_fail     = true;
 800b1c6:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800b1c8:	60aa      	str	r2, [r5, #8]
 800b1ca:	e7be      	b.n	800b14a <oslib_test_002_001_execute.lto_priv.0+0x2ea>
  chtest.global_fail     = true;
 800b1cc:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800b1d0:	4a14      	ldr	r2, [pc, #80]	; (800b224 <oslib_test_002_001_execute.lto_priv.0+0x3c4>)
  chtest.global_fail     = true;
 800b1d2:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800b1d4:	60aa      	str	r2, [r5, #8]
 800b1d6:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 800b1da:	e7b6      	b.n	800b14a <oslib_test_002_001_execute.lto_priv.0+0x2ea>
  chtest.global_fail     = true;
 800b1dc:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800b1e0:	4a11      	ldr	r2, [pc, #68]	; (800b228 <oslib_test_002_001_execute.lto_priv.0+0x3c8>)
  chtest.global_fail     = true;
 800b1e2:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800b1e4:	60aa      	str	r2, [r5, #8]
 800b1e6:	e7b0      	b.n	800b14a <oslib_test_002_001_execute.lto_priv.0+0x2ea>
  chtest.global_fail     = true;
 800b1e8:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800b1ec:	4a0f      	ldr	r2, [pc, #60]	; (800b22c <oslib_test_002_001_execute.lto_priv.0+0x3cc>)
  chtest.global_fail     = true;
 800b1ee:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800b1f0:	60aa      	str	r2, [r5, #8]
 800b1f2:	f380 8811 	msr	BASEPRI, r0
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 800b1f6:	e7a8      	b.n	800b14a <oslib_test_002_001_execute.lto_priv.0+0x2ea>
  chtest.global_fail     = true;
 800b1f8:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800b1fc:	4a0c      	ldr	r2, [pc, #48]	; (800b230 <oslib_test_002_001_execute.lto_priv.0+0x3d0>)
  chtest.global_fail     = true;
 800b1fe:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800b200:	60aa      	str	r2, [r5, #8]
 800b202:	f380 8811 	msr	BASEPRI, r0
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 800b206:	e7a0      	b.n	800b14a <oslib_test_002_001_execute.lto_priv.0+0x2ea>
 800b208:	f387 8811 	msr	BASEPRI, r7
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 800b20c:	e79d      	b.n	800b14a <oslib_test_002_001_execute.lto_priv.0+0x2ea>
 800b20e:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 800b212:	e79a      	b.n	800b14a <oslib_test_002_001_execute.lto_priv.0+0x2ea>
 800b214:	08012ce0 	.word	0x08012ce0
 800b218:	08012cf8 	.word	0x08012cf8
 800b21c:	08012cec 	.word	0x08012cec
 800b220:	08012d40 	.word	0x08012d40
 800b224:	08012d1c 	.word	0x08012d1c
 800b228:	08010fa4 	.word	0x08010fa4
 800b22c:	08012d54 	.word	0x08012d54
 800b230:	08012d60 	.word	0x08012d60
	...

0800b240 <oslib_test_002_002_execute.lto_priv.0>:
  test_set_step(1);
 800b240:	2101      	movs	r1, #1
static void oslib_test_002_002_execute(void) {
 800b242:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 800b246:	4dba      	ldr	r5, [pc, #744]	; (800b530 <oslib_test_002_002_execute.lto_priv.0+0x2f0>)
 800b248:	2030      	movs	r0, #48	; 0x30
static void oslib_test_002_002_execute(void) {
 800b24a:	b083      	sub	sp, #12
  test_set_step(1);
 800b24c:	6029      	str	r1, [r5, #0]
 800b24e:	f380 8811 	msr	BASEPRI, r0
  return (size_t)(mbp->top - mbp->buffer);
 800b252:	4cb8      	ldr	r4, [pc, #736]	; (800b534 <oslib_test_002_002_execute.lto_priv.0+0x2f4>)
 800b254:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b258:	1a9a      	subs	r2, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800b25a:	6923      	ldr	r3, [r4, #16]
 800b25c:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
  if (!condition) {
 800b260:	2b04      	cmp	r3, #4
 800b262:	f040 818b 	bne.w	800b57c <oslib_test_002_002_execute.lto_priv.0+0x33c>
 800b266:	f04f 0c00 	mov.w	ip, #0
 800b26a:	f38c 8811 	msr	BASEPRI, ip
  test_set_step(2);
 800b26e:	2302      	movs	r3, #2
 800b270:	602b      	str	r3, [r5, #0]
 800b272:	f380 8811 	msr	BASEPRI, r0
  return (bool)(qp->next != qp);
 800b276:	4626      	mov	r6, r4
  mbp->reset = true;
 800b278:	7521      	strb	r1, [r4, #20]
 800b27a:	f856 1f18 	ldr.w	r1, [r6, #24]!
  mbp->wrptr = mbp->buffer;
 800b27e:	6823      	ldr	r3, [r4, #0]
 800b280:	42b1      	cmp	r1, r6
  mbp->rdptr = mbp->buffer;
 800b282:	e9c4 3302 	strd	r3, r3, [r4, #8]
  mbp->cnt   = (size_t)0;
 800b286:	f8c4 c010 	str.w	ip, [r4, #16]
 800b28a:	d016      	beq.n	800b2ba <oslib_test_002_002_execute.lto_priv.0+0x7a>
 800b28c:	f06f 0e01 	mvn.w	lr, #1
 800b290:	460b      	mov	r3, r1
  qp->next       = p->next;
 800b292:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800b294:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800b296:	689f      	ldr	r7, [r3, #8]
  qp->next       = p->next;
 800b298:	61a1      	str	r1, [r4, #24]
  qp->next->prev = qp;
 800b29a:	604e      	str	r6, [r1, #4]
 800b29c:	f8c3 e02c 	str.w	lr, [r3, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 800b2a0:	f883 c028 	strb.w	ip, [r3, #40]	; 0x28
    pqp = pqp->next;
 800b2a4:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800b2a6:	6890      	ldr	r0, [r2, #8]
 800b2a8:	42b8      	cmp	r0, r7
 800b2aa:	d2fb      	bcs.n	800b2a4 <oslib_test_002_002_execute.lto_priv.0+0x64>
  p->prev       = pqp->prev;
 800b2ac:	6850      	ldr	r0, [r2, #4]
 800b2ae:	42b1      	cmp	r1, r6
 800b2b0:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 800b2b4:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 800b2b6:	6053      	str	r3, [r2, #4]
 800b2b8:	d1ea      	bne.n	800b290 <oslib_test_002_002_execute.lto_priv.0+0x50>
  return (bool)(qp->next != qp);
 800b2ba:	6a21      	ldr	r1, [r4, #32]
 800b2bc:	4f9e      	ldr	r7, [pc, #632]	; (800b538 <oslib_test_002_002_execute.lto_priv.0+0x2f8>)
 800b2be:	42b9      	cmp	r1, r7
 800b2c0:	d019      	beq.n	800b2f6 <oslib_test_002_002_execute.lto_priv.0+0xb6>
 800b2c2:	f06f 0801 	mvn.w	r8, #1
 800b2c6:	f04f 0e00 	mov.w	lr, #0
 800b2ca:	460b      	mov	r3, r1
  qp->next       = p->next;
 800b2cc:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800b2ce:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800b2d0:	6898      	ldr	r0, [r3, #8]
  qp->next       = p->next;
 800b2d2:	6221      	str	r1, [r4, #32]
  qp->next->prev = qp;
 800b2d4:	604f      	str	r7, [r1, #4]
 800b2d6:	f8c3 802c 	str.w	r8, [r3, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 800b2da:	f883 e028 	strb.w	lr, [r3, #40]	; 0x28
    pqp = pqp->next;
 800b2de:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800b2e0:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800b2e4:	4584      	cmp	ip, r0
 800b2e6:	d2fa      	bcs.n	800b2de <oslib_test_002_002_execute.lto_priv.0+0x9e>
  p->prev       = pqp->prev;
 800b2e8:	6850      	ldr	r0, [r2, #4]
 800b2ea:	42b9      	cmp	r1, r7
 800b2ec:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 800b2f0:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 800b2f2:	6053      	str	r3, [r2, #4]
 800b2f4:	d1e9      	bne.n	800b2ca <oslib_test_002_002_execute.lto_priv.0+0x8a>
 800b2f6:	2100      	movs	r1, #0
 800b2f8:	f381 8811 	msr	BASEPRI, r1
 800b2fc:	2030      	movs	r0, #48	; 0x30
 800b2fe:	f380 8811 	msr	BASEPRI, r0
  return (size_t)(mbp->top - mbp->buffer);
 800b302:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b306:	1a9a      	subs	r2, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800b308:	6923      	ldr	r3, [r4, #16]
 800b30a:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 800b30e:	2b04      	cmp	r3, #4
 800b310:	f040 813f 	bne.w	800b592 <oslib_test_002_002_execute.lto_priv.0+0x352>
 800b314:	f381 8811 	msr	BASEPRI, r1
 800b318:	f380 8811 	msr	BASEPRI, r0
 800b31c:	6923      	ldr	r3, [r4, #16]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	f040 8149 	bne.w	800b5b6 <oslib_test_002_002_execute.lto_priv.0+0x376>
 800b324:	f383 8811 	msr	BASEPRI, r3
 800b328:	f380 8811 	msr	BASEPRI, r0
 800b32c:	6821      	ldr	r1, [r4, #0]
 800b32e:	68a2      	ldr	r2, [r4, #8]
 800b330:	4291      	cmp	r1, r2
 800b332:	f040 8138 	bne.w	800b5a6 <oslib_test_002_002_execute.lto_priv.0+0x366>
 800b336:	f383 8811 	msr	BASEPRI, r3
 800b33a:	f380 8811 	msr	BASEPRI, r0
 800b33e:	6821      	ldr	r1, [r4, #0]
 800b340:	68e2      	ldr	r2, [r4, #12]
 800b342:	4291      	cmp	r1, r2
 800b344:	f040 8149 	bne.w	800b5da <oslib_test_002_002_execute.lto_priv.0+0x39a>
 800b348:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 800b34c:	2203      	movs	r2, #3
 800b34e:	f04f 0c42 	mov.w	ip, #66	; 0x42
  mbp->reset = false;
 800b352:	7523      	strb	r3, [r4, #20]
 800b354:	602a      	str	r2, [r5, #0]
 800b356:	f380 8811 	msr	BASEPRI, r0
  if (mbp->reset) {
 800b35a:	7d21      	ldrb	r1, [r4, #20]
 800b35c:	2900      	cmp	r1, #0
 800b35e:	f040 815c 	bne.w	800b61a <oslib_test_002_002_execute.lto_priv.0+0x3da>
  return (size_t)(mbp->top - mbp->buffer);
 800b362:	e9d4 9e00 	ldrd	r9, lr, [r4]
  return mbp->cnt;
 800b366:	6922      	ldr	r2, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800b368:	ebae 0809 	sub.w	r8, lr, r9
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 800b36c:	ebb2 0fa8 	cmp.w	r2, r8, asr #2
 800b370:	f000 812b 	beq.w	800b5ca <oslib_test_002_002_execute.lto_priv.0+0x38a>
    *mbp->wrptr++ = msg;
 800b374:	f8d4 8008 	ldr.w	r8, [r4, #8]
    mbp->cnt++;
 800b378:	3201      	adds	r2, #1
    *mbp->wrptr++ = msg;
 800b37a:	f108 0104 	add.w	r1, r8, #4
 800b37e:	60a1      	str	r1, [r4, #8]
 800b380:	f8c8 c000 	str.w	ip, [r8]
    mbp->cnt++;
 800b384:	6122      	str	r2, [r4, #16]
  return (bool)(qp->next != qp);
 800b386:	6a22      	ldr	r2, [r4, #32]
    if (mbp->wrptr >= mbp->top) {
 800b388:	458e      	cmp	lr, r1
      mbp->wrptr = mbp->buffer;
 800b38a:	bf98      	it	ls
 800b38c:	f8c4 9008 	strls.w	r9, [r4, #8]
  if (ch_queue_notempty(&tqp->queue)) {
 800b390:	42ba      	cmp	r2, r7
 800b392:	d016      	beq.n	800b3c2 <oslib_test_002_002_execute.lto_priv.0+0x182>
  qp->next       = p->next;
 800b394:	6811      	ldr	r1, [r2, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800b396:	f8d2 e018 	ldr.w	lr, [r2, #24]
 800b39a:	6221      	str	r1, [r4, #32]
  qp->next->prev = qp;
 800b39c:	604f      	str	r7, [r1, #4]
  } while (unlikely(pqp->prio >= p->prio));
 800b39e:	6891      	ldr	r1, [r2, #8]
 800b3a0:	62d3      	str	r3, [r2, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 800b3a2:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    pqp = pqp->next;
 800b3a6:	f8de e000 	ldr.w	lr, [lr]
  } while (unlikely(pqp->prio >= p->prio));
 800b3aa:	f8de 8008 	ldr.w	r8, [lr, #8]
 800b3ae:	4588      	cmp	r8, r1
 800b3b0:	d2f9      	bcs.n	800b3a6 <oslib_test_002_002_execute.lto_priv.0+0x166>
  p->prev       = pqp->prev;
 800b3b2:	f8de 1004 	ldr.w	r1, [lr, #4]
  p->next       = pqp;
 800b3b6:	f8c2 e000 	str.w	lr, [r2]
  p->prev       = pqp->prev;
 800b3ba:	6051      	str	r1, [r2, #4]
  p->prev->next = p;
 800b3bc:	600a      	str	r2, [r1, #0]
  pqp->prev     = p;
 800b3be:	f8ce 2004 	str.w	r2, [lr, #4]
 800b3c2:	f383 8811 	msr	BASEPRI, r3
    for (i = 0; i < MB_SIZE - 1; i++) {
 800b3c6:	f10c 0c01 	add.w	ip, ip, #1
 800b3ca:	f1bc 0f45 	cmp.w	ip, #69	; 0x45
 800b3ce:	d1c2      	bne.n	800b356 <oslib_test_002_002_execute.lto_priv.0+0x116>
 800b3d0:	2730      	movs	r7, #48	; 0x30
 800b3d2:	f387 8811 	msr	BASEPRI, r7
    msg1 = chMBPostAheadI(&mb1, 'A');
 800b3d6:	2041      	movs	r0, #65	; 0x41
 800b3d8:	f7ff f832 	bl	800a440 <chMBPostAheadI.constprop.0>
 800b3dc:	2300      	movs	r3, #0
 800b3de:	f383 8811 	msr	BASEPRI, r3
 800b3e2:	2800      	cmp	r0, #0
 800b3e4:	f040 80f3 	bne.w	800b5ce <oslib_test_002_002_execute.lto_priv.0+0x38e>
  test_set_step(4);
 800b3e8:	2304      	movs	r3, #4
 800b3ea:	602b      	str	r3, [r5, #0]
 800b3ec:	f387 8811 	msr	BASEPRI, r7
 800b3f0:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b3f4:	1a9b      	subs	r3, r3, r2
 800b3f6:	6922      	ldr	r2, [r4, #16]
 800b3f8:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 800b3fc:	f040 80f5 	bne.w	800b5ea <oslib_test_002_002_execute.lto_priv.0+0x3aa>
 800b400:	f380 8811 	msr	BASEPRI, r0
 800b404:	f387 8811 	msr	BASEPRI, r7
  return mbp->cnt;
 800b408:	f8d4 8010 	ldr.w	r8, [r4, #16]
 800b40c:	f1b8 0f04 	cmp.w	r8, #4
 800b410:	f040 80f3 	bne.w	800b5fa <oslib_test_002_002_execute.lto_priv.0+0x3ba>
 800b414:	f380 8811 	msr	BASEPRI, r0
 800b418:	f387 8811 	msr	BASEPRI, r7
 800b41c:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800b420:	429a      	cmp	r2, r3
 800b422:	f040 80f2 	bne.w	800b60a <oslib_test_002_002_execute.lto_priv.0+0x3ca>
 800b426:	f380 8811 	msr	BASEPRI, r0
  test_set_step(5);
 800b42a:	2305      	movs	r3, #5
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 800b42c:	f8df c10c 	ldr.w	ip, [pc, #268]	; 800b53c <oslib_test_002_002_execute.lto_priv.0+0x2fc>
 800b430:	602b      	str	r3, [r5, #0]
 800b432:	f387 8811 	msr	BASEPRI, r7

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 800b436:	7d23      	ldrb	r3, [r4, #20]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	f040 80ee 	bne.w	800b61a <oslib_test_002_002_execute.lto_priv.0+0x3da>
 800b43e:	6921      	ldr	r1, [r4, #16]
    return MSG_RESET;
  }

  /* Is there a message in queue? if so then fetch.*/
  if (chMBGetUsedCountI(mbp) > (size_t)0) {
 800b440:	2900      	cmp	r1, #0
 800b442:	f000 80c2 	beq.w	800b5ca <oslib_test_002_002_execute.lto_priv.0+0x38a>
    *msgp = *mbp->rdptr++;
 800b446:	68e2      	ldr	r2, [r4, #12]
    if (mbp->rdptr >= mbp->top) {
 800b448:	6863      	ldr	r3, [r4, #4]
    *msgp = *mbp->rdptr++;
 800b44a:	f8d2 e000 	ldr.w	lr, [r2]
 800b44e:	3204      	adds	r2, #4
    if (mbp->rdptr >= mbp->top) {
 800b450:	429a      	cmp	r2, r3
      mbp->rdptr = mbp->buffer;
 800b452:	bf28      	it	cs
 800b454:	6823      	ldrcs	r3, [r4, #0]
    *msgp = *mbp->rdptr++;
 800b456:	60e2      	str	r2, [r4, #12]
      mbp->rdptr = mbp->buffer;
 800b458:	bf28      	it	cs
 800b45a:	60e3      	strcs	r3, [r4, #12]
  return (bool)(qp->next != qp);
 800b45c:	69a3      	ldr	r3, [r4, #24]
    }
    mbp->cnt--;
 800b45e:	3901      	subs	r1, #1
 800b460:	42b3      	cmp	r3, r6
    *msgp = *mbp->rdptr++;
 800b462:	f8cd e004 	str.w	lr, [sp, #4]
    mbp->cnt--;
 800b466:	6121      	str	r1, [r4, #16]
 800b468:	d011      	beq.n	800b48e <oslib_test_002_002_execute.lto_priv.0+0x24e>
  qp->next       = p->next;
 800b46a:	681a      	ldr	r2, [r3, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800b46c:	6999      	ldr	r1, [r3, #24]
 800b46e:	61a2      	str	r2, [r4, #24]
  qp->next->prev = qp;
 800b470:	6056      	str	r6, [r2, #4]
  } while (unlikely(pqp->prio >= p->prio));
 800b472:	689a      	ldr	r2, [r3, #8]
 800b474:	62d8      	str	r0, [r3, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 800b476:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    pqp = pqp->next;
 800b47a:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800b47c:	f8d1 e008 	ldr.w	lr, [r1, #8]
 800b480:	4596      	cmp	lr, r2
 800b482:	d2fa      	bcs.n	800b47a <oslib_test_002_002_execute.lto_priv.0+0x23a>
  p->prev       = pqp->prev;
 800b484:	684a      	ldr	r2, [r1, #4]
  p->next       = pqp;
 800b486:	6019      	str	r1, [r3, #0]
  p->prev       = pqp->prev;
 800b488:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
 800b48a:	6013      	str	r3, [r2, #0]
  pqp->prev     = p;
 800b48c:	604b      	str	r3, [r1, #4]
 800b48e:	f380 8811 	msr	BASEPRI, r0
 800b492:	68ea      	ldr	r2, [r5, #12]
 800b494:	4562      	cmp	r2, ip
 800b496:	d203      	bcs.n	800b4a0 <oslib_test_002_002_execute.lto_priv.0+0x260>
      test_emit_token(msg2);
 800b498:	9b01      	ldr	r3, [sp, #4]
    *chtest.tokp++ = token;
 800b49a:	1c51      	adds	r1, r2, #1
 800b49c:	60e9      	str	r1, [r5, #12]
 800b49e:	7013      	strb	r3, [r2, #0]
    for (i = 0; i < MB_SIZE; i++) {
 800b4a0:	f1b8 0801 	subs.w	r8, r8, #1
 800b4a4:	d1c5      	bne.n	800b432 <oslib_test_002_002_execute.lto_priv.0+0x1f2>
    test_assert_sequence("ABCD", "wrong get sequence");
 800b4a6:	4926      	ldr	r1, [pc, #152]	; (800b540 <oslib_test_002_002_execute.lto_priv.0+0x300>)
 800b4a8:	4826      	ldr	r0, [pc, #152]	; (800b544 <oslib_test_002_002_execute.lto_priv.0+0x304>)
 800b4aa:	f7fb fce1 	bl	8006e70 <__test_assert_sequence>
 800b4ae:	2800      	cmp	r0, #0
 800b4b0:	d16c      	bne.n	800b58c <oslib_test_002_002_execute.lto_priv.0+0x34c>
  test_set_step(6);
 800b4b2:	2306      	movs	r3, #6
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800b4b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4b8:	2146      	movs	r1, #70	; 0x46
 800b4ba:	481e      	ldr	r0, [pc, #120]	; (800b534 <oslib_test_002_002_execute.lto_priv.0+0x2f4>)
  test_set_step(6);
 800b4bc:	602b      	str	r3, [r5, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800b4be:	f7fa f8df 	bl	8005680 <chMBPostTimeout>
  if (!condition) {
 800b4c2:	2800      	cmp	r0, #0
 800b4c4:	f040 8083 	bne.w	800b5ce <oslib_test_002_002_execute.lto_priv.0+0x38e>
 800b4c8:	2630      	movs	r6, #48	; 0x30
 800b4ca:	f386 8811 	msr	BASEPRI, r6
  rdymsg = chMBFetchTimeoutS(mbp, msgp, timeout);
 800b4ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4d2:	a901      	add	r1, sp, #4
 800b4d4:	4817      	ldr	r0, [pc, #92]	; (800b534 <oslib_test_002_002_execute.lto_priv.0+0x2f4>)
 800b4d6:	f7fa f93b 	bl	8005750 <chMBFetchTimeoutS>
 800b4da:	f388 8811 	msr	BASEPRI, r8
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800b4de:	fab0 f080 	clz	r0, r0
 800b4e2:	4919      	ldr	r1, [pc, #100]	; (800b548 <oslib_test_002_002_execute.lto_priv.0+0x308>)
 800b4e4:	0940      	lsrs	r0, r0, #5
 800b4e6:	f7fb fcb3 	bl	8006e50 <__test_assert>
 800b4ea:	2800      	cmp	r0, #0
 800b4ec:	d14e      	bne.n	800b58c <oslib_test_002_002_execute.lto_priv.0+0x34c>
  test_set_step(7);
 800b4ee:	2307      	movs	r3, #7
 800b4f0:	602b      	str	r3, [r5, #0]
 800b4f2:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 800b4f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b4fa:	1a9a      	subs	r2, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800b4fc:	6923      	ldr	r3, [r4, #16]
 800b4fe:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 800b502:	1f19      	subs	r1, r3, #4
 800b504:	4248      	negs	r0, r1
 800b506:	4148      	adcs	r0, r1
 800b508:	4910      	ldr	r1, [pc, #64]	; (800b54c <oslib_test_002_002_execute.lto_priv.0+0x30c>)
 800b50a:	f7fb fca1 	bl	8006e50 <__test_assert>
 800b50e:	2800      	cmp	r0, #0
 800b510:	f040 8087 	bne.w	800b622 <oslib_test_002_002_execute.lto_priv.0+0x3e2>
 800b514:	f388 8811 	msr	BASEPRI, r8
 800b518:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 800b51c:	6920      	ldr	r0, [r4, #16]
 800b51e:	490c      	ldr	r1, [pc, #48]	; (800b550 <oslib_test_002_002_execute.lto_priv.0+0x310>)
 800b520:	fab0 f080 	clz	r0, r0
 800b524:	0940      	lsrs	r0, r0, #5
 800b526:	f7fb fc93 	bl	8006e50 <__test_assert>
 800b52a:	2800      	cmp	r0, #0
 800b52c:	d179      	bne.n	800b622 <oslib_test_002_002_execute.lto_priv.0+0x3e2>
 800b52e:	e011      	b.n	800b554 <oslib_test_002_002_execute.lto_priv.0+0x314>
 800b530:	200010f4 	.word	0x200010f4
 800b534:	20000854 	.word	0x20000854
 800b538:	20000874 	.word	0x20000874
 800b53c:	20001114 	.word	0x20001114
 800b540:	08012d84 	.word	0x08012d84
 800b544:	080106c4 	.word	0x080106c4
 800b548:	08010fa4 	.word	0x08010fa4
 800b54c:	08012ce0 	.word	0x08012ce0
 800b550:	08012cec 	.word	0x08012cec
 800b554:	f388 8811 	msr	BASEPRI, r8
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 800b558:	6820      	ldr	r0, [r4, #0]
 800b55a:	68a3      	ldr	r3, [r4, #8]
 800b55c:	4932      	ldr	r1, [pc, #200]	; (800b628 <oslib_test_002_002_execute.lto_priv.0+0x3e8>)
 800b55e:	1ac2      	subs	r2, r0, r3
 800b560:	4250      	negs	r0, r2
 800b562:	4150      	adcs	r0, r2
 800b564:	f7fb fc74 	bl	8006e50 <__test_assert>
 800b568:	b980      	cbnz	r0, 800b58c <oslib_test_002_002_execute.lto_priv.0+0x34c>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 800b56a:	6820      	ldr	r0, [r4, #0]
 800b56c:	68e3      	ldr	r3, [r4, #12]
 800b56e:	492f      	ldr	r1, [pc, #188]	; (800b62c <oslib_test_002_002_execute.lto_priv.0+0x3ec>)
 800b570:	1ac3      	subs	r3, r0, r3
 800b572:	4258      	negs	r0, r3
 800b574:	4158      	adcs	r0, r3
 800b576:	f7fb fc6b 	bl	8006e50 <__test_assert>
 800b57a:	e007      	b.n	800b58c <oslib_test_002_002_execute.lto_priv.0+0x34c>
  chtest.global_fail     = true;
 800b57c:	f240 1201 	movw	r2, #257	; 0x101
  chtest.failure_message = msg;
 800b580:	492b      	ldr	r1, [pc, #172]	; (800b630 <oslib_test_002_002_execute.lto_priv.0+0x3f0>)
 800b582:	2300      	movs	r3, #0
 800b584:	60a9      	str	r1, [r5, #8]
  chtest.global_fail     = true;
 800b586:	80aa      	strh	r2, [r5, #4]
 800b588:	f383 8811 	msr	BASEPRI, r3
}
 800b58c:	b003      	add	sp, #12
 800b58e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b592:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800b596:	4a27      	ldr	r2, [pc, #156]	; (800b634 <oslib_test_002_002_execute.lto_priv.0+0x3f4>)
  chtest.global_fail     = true;
 800b598:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800b59a:	60aa      	str	r2, [r5, #8]
 800b59c:	f381 8811 	msr	BASEPRI, r1
 800b5a0:	b003      	add	sp, #12
 800b5a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  chtest.global_fail     = true;
 800b5a6:	f240 1201 	movw	r2, #257	; 0x101
  chtest.failure_message = msg;
 800b5aa:	491f      	ldr	r1, [pc, #124]	; (800b628 <oslib_test_002_002_execute.lto_priv.0+0x3e8>)
  chtest.global_fail     = true;
 800b5ac:	80aa      	strh	r2, [r5, #4]
  chtest.failure_message = msg;
 800b5ae:	60a9      	str	r1, [r5, #8]
 800b5b0:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 800b5b4:	e7ea      	b.n	800b58c <oslib_test_002_002_execute.lto_priv.0+0x34c>
  chtest.global_fail     = true;
 800b5b6:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800b5ba:	4a1f      	ldr	r2, [pc, #124]	; (800b638 <oslib_test_002_002_execute.lto_priv.0+0x3f8>)
  chtest.global_fail     = true;
 800b5bc:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800b5be:	60aa      	str	r2, [r5, #8]
 800b5c0:	f381 8811 	msr	BASEPRI, r1
}
 800b5c4:	b003      	add	sp, #12
 800b5c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5ca:	f381 8811 	msr	BASEPRI, r1
  chtest.global_fail     = true;
 800b5ce:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800b5d2:	4a1a      	ldr	r2, [pc, #104]	; (800b63c <oslib_test_002_002_execute.lto_priv.0+0x3fc>)
  chtest.global_fail     = true;
 800b5d4:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800b5d6:	60aa      	str	r2, [r5, #8]
 800b5d8:	e7d8      	b.n	800b58c <oslib_test_002_002_execute.lto_priv.0+0x34c>
  chtest.global_fail     = true;
 800b5da:	f240 1201 	movw	r2, #257	; 0x101
  chtest.failure_message = msg;
 800b5de:	4913      	ldr	r1, [pc, #76]	; (800b62c <oslib_test_002_002_execute.lto_priv.0+0x3ec>)
  chtest.global_fail     = true;
 800b5e0:	80aa      	strh	r2, [r5, #4]
  chtest.failure_message = msg;
 800b5e2:	60a9      	str	r1, [r5, #8]
 800b5e4:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 800b5e8:	e7d0      	b.n	800b58c <oslib_test_002_002_execute.lto_priv.0+0x34c>
  chtest.global_fail     = true;
 800b5ea:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800b5ee:	4a14      	ldr	r2, [pc, #80]	; (800b640 <oslib_test_002_002_execute.lto_priv.0+0x400>)
  chtest.global_fail     = true;
 800b5f0:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800b5f2:	60aa      	str	r2, [r5, #8]
 800b5f4:	f380 8811 	msr	BASEPRI, r0
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 800b5f8:	e7c8      	b.n	800b58c <oslib_test_002_002_execute.lto_priv.0+0x34c>
  chtest.global_fail     = true;
 800b5fa:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800b5fe:	4a11      	ldr	r2, [pc, #68]	; (800b644 <oslib_test_002_002_execute.lto_priv.0+0x404>)
  chtest.global_fail     = true;
 800b600:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800b602:	60aa      	str	r2, [r5, #8]
 800b604:	f380 8811 	msr	BASEPRI, r0
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 800b608:	e7c0      	b.n	800b58c <oslib_test_002_002_execute.lto_priv.0+0x34c>
  chtest.global_fail     = true;
 800b60a:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800b60e:	4a0e      	ldr	r2, [pc, #56]	; (800b648 <oslib_test_002_002_execute.lto_priv.0+0x408>)
  chtest.global_fail     = true;
 800b610:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800b612:	60aa      	str	r2, [r5, #8]
 800b614:	f380 8811 	msr	BASEPRI, r0
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 800b618:	e7b8      	b.n	800b58c <oslib_test_002_002_execute.lto_priv.0+0x34c>
 800b61a:	2300      	movs	r3, #0
 800b61c:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 800b620:	e7d5      	b.n	800b5ce <oslib_test_002_002_execute.lto_priv.0+0x38e>
 800b622:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 800b626:	e7b1      	b.n	800b58c <oslib_test_002_002_execute.lto_priv.0+0x34c>
 800b628:	08012cf8 	.word	0x08012cf8
 800b62c:	08012d1c 	.word	0x08012d1c
 800b630:	08012cd4 	.word	0x08012cd4
 800b634:	08012ce0 	.word	0x08012ce0
 800b638:	08012cec 	.word	0x08012cec
 800b63c:	08010fa4 	.word	0x08010fa4
 800b640:	08012d54 	.word	0x08012d54
 800b644:	08012d60 	.word	0x08012d60
 800b648:	08012d6c 	.word	0x08012d6c
 800b64c:	00000000 	.word	0x00000000

0800b650 <oslib_test_002_003_execute.lto_priv.0>:
static void oslib_test_002_003_execute(void) {
  msg_t msg1, msg2;
  unsigned i;

  /* [2.3.1] Filling the mailbox.*/
  test_set_step(1);
 800b650:	2301      	movs	r3, #1
static void oslib_test_002_003_execute(void) {
 800b652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 800b656:	2442      	movs	r4, #66	; 0x42
 800b658:	4f7b      	ldr	r7, [pc, #492]	; (800b848 <oslib_test_002_003_execute.lto_priv.0+0x1f8>)
 800b65a:	4e7c      	ldr	r6, [pc, #496]	; (800b84c <oslib_test_002_003_execute.lto_priv.0+0x1fc>)
static void oslib_test_002_003_execute(void) {
 800b65c:	b082      	sub	sp, #8
  test_set_step(1);
 800b65e:	603b      	str	r3, [r7, #0]
  {
    for (i = 0; i < MB_SIZE; i++) {
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800b660:	4621      	mov	r1, r4
 800b662:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b666:	4630      	mov	r0, r6
 800b668:	f7fa f80a 	bl	8005680 <chMBPostTimeout>
    for (i = 0; i < MB_SIZE; i++) {
 800b66c:	3401      	adds	r4, #1
 800b66e:	4605      	mov	r5, r0
 800b670:	2800      	cmp	r0, #0
 800b672:	d13e      	bne.n	800b6f2 <oslib_test_002_003_execute.lto_priv.0+0xa2>
 800b674:	2c46      	cmp	r4, #70	; 0x46
 800b676:	d1f3      	bne.n	800b660 <oslib_test_002_003_execute.lto_priv.0+0x10>
  }
  test_end_step(1);

  /* [2.3.2] Testing chMBPostTimeout(), chMBPostI(),
     chMBPostAheadTimeout() and chMBPostAheadI() timeout.*/
  test_set_step(2);
 800b678:	2302      	movs	r3, #2
  {
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 800b67a:	2201      	movs	r2, #1
 800b67c:	2158      	movs	r1, #88	; 0x58
 800b67e:	4873      	ldr	r0, [pc, #460]	; (800b84c <oslib_test_002_003_execute.lto_priv.0+0x1fc>)
  test_set_step(2);
 800b680:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 800b682:	f7f9 fffd 	bl	8005680 <chMBPostTimeout>
 800b686:	3001      	adds	r0, #1
 800b688:	d133      	bne.n	800b6f2 <oslib_test_002_003_execute.lto_priv.0+0xa2>
 800b68a:	2430      	movs	r4, #48	; 0x30
 800b68c:	f384 8811 	msr	BASEPRI, r4
  if (mbp->reset) {
 800b690:	f896 8014 	ldrb.w	r8, [r6, #20]
 800b694:	f1b8 0f00 	cmp.w	r8, #0
 800b698:	f040 80cf 	bne.w	800b83a <oslib_test_002_003_execute.lto_priv.0+0x1ea>
  return (size_t)(mbp->top - mbp->buffer);
 800b69c:	e9d6 5300 	ldrd	r5, r3, [r6]
  return mbp->cnt;
 800b6a0:	6932      	ldr	r2, [r6, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800b6a2:	1b59      	subs	r1, r3, r5
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 800b6a4:	ebb2 0fa1 	cmp.w	r2, r1, asr #2
 800b6a8:	d02b      	beq.n	800b702 <oslib_test_002_003_execute.lto_priv.0+0xb2>
    *mbp->wrptr++ = msg;
 800b6aa:	2458      	movs	r4, #88	; 0x58
 800b6ac:	68b0      	ldr	r0, [r6, #8]
    mbp->cnt++;
 800b6ae:	3201      	adds	r2, #1
    *mbp->wrptr++ = msg;
 800b6b0:	1d01      	adds	r1, r0, #4
    if (mbp->wrptr >= mbp->top) {
 800b6b2:	428b      	cmp	r3, r1
    *mbp->wrptr++ = msg;
 800b6b4:	60b1      	str	r1, [r6, #8]
  return (bool)(qp->next != qp);
 800b6b6:	6a33      	ldr	r3, [r6, #32]
 800b6b8:	4965      	ldr	r1, [pc, #404]	; (800b850 <oslib_test_002_003_execute.lto_priv.0+0x200>)
 800b6ba:	6004      	str	r4, [r0, #0]
      mbp->wrptr = mbp->buffer;
 800b6bc:	bf98      	it	ls
 800b6be:	60b5      	strls	r5, [r6, #8]
 800b6c0:	428b      	cmp	r3, r1
    mbp->cnt++;
 800b6c2:	6132      	str	r2, [r6, #16]
 800b6c4:	f000 80b5 	beq.w	800b832 <oslib_test_002_003_execute.lto_priv.0+0x1e2>
 800b6c8:	2000      	movs	r0, #0
  qp->next       = p->next;
 800b6ca:	681a      	ldr	r2, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800b6cc:	689c      	ldr	r4, [r3, #8]
  qp->next       = p->next;
 800b6ce:	6232      	str	r2, [r6, #32]
  qp->next->prev = qp;
 800b6d0:	6051      	str	r1, [r2, #4]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800b6d2:	699a      	ldr	r2, [r3, #24]
 800b6d4:	62d8      	str	r0, [r3, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 800b6d6:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    pqp = pqp->next;
 800b6da:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800b6dc:	6891      	ldr	r1, [r2, #8]
 800b6de:	42a1      	cmp	r1, r4
 800b6e0:	d2fb      	bcs.n	800b6da <oslib_test_002_003_execute.lto_priv.0+0x8a>
  p->prev       = pqp->prev;
 800b6e2:	6851      	ldr	r1, [r2, #4]
 800b6e4:	2000      	movs	r0, #0
 800b6e6:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 800b6ea:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 800b6ec:	6053      	str	r3, [r2, #4]
 800b6ee:	f380 8811 	msr	BASEPRI, r0
  chtest.global_fail     = true;
 800b6f2:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800b6f6:	4a57      	ldr	r2, [pc, #348]	; (800b854 <oslib_test_002_003_execute.lto_priv.0+0x204>)
  chtest.global_fail     = true;
 800b6f8:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800b6fa:	60ba      	str	r2, [r7, #8]
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
  }
  test_end_step(4);
}
 800b6fc:	b002      	add	sp, #8
 800b6fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b702:	f388 8811 	msr	BASEPRI, r8
    msg1 = chMBPostAheadTimeout(&mb1, 'X', 1);
 800b706:	2101      	movs	r1, #1
 800b708:	2058      	movs	r0, #88	; 0x58
 800b70a:	f7ff f841 	bl	800a790 <chMBPostAheadTimeout.constprop.0>
  if (!condition) {
 800b70e:	3001      	adds	r0, #1
 800b710:	d1ef      	bne.n	800b6f2 <oslib_test_002_003_execute.lto_priv.0+0xa2>
 800b712:	f384 8811 	msr	BASEPRI, r4
    msg1 = chMBPostAheadI(&mb1, 'X');
 800b716:	2058      	movs	r0, #88	; 0x58
 800b718:	f7fe fe92 	bl	800a440 <chMBPostAheadI.constprop.0>
 800b71c:	f388 8811 	msr	BASEPRI, r8
 800b720:	3001      	adds	r0, #1
 800b722:	d1e6      	bne.n	800b6f2 <oslib_test_002_003_execute.lto_priv.0+0xa2>
  test_set_step(3);
 800b724:	2303      	movs	r3, #3
 800b726:	603b      	str	r3, [r7, #0]
 800b728:	f384 8811 	msr	BASEPRI, r4
  mbp->reset = true;
 800b72c:	2201      	movs	r2, #1
  return (bool)(qp->next != qp);
 800b72e:	69b1      	ldr	r1, [r6, #24]
  while (ch_queue_notempty(&tqp->queue)) {
 800b730:	4c49      	ldr	r4, [pc, #292]	; (800b858 <oslib_test_002_003_execute.lto_priv.0+0x208>)
  mbp->wrptr = mbp->buffer;
 800b732:	6833      	ldr	r3, [r6, #0]
 800b734:	42a1      	cmp	r1, r4
  mbp->rdptr = mbp->buffer;
 800b736:	e9c6 3302 	strd	r3, r3, [r6, #8]
  mbp->cnt   = (size_t)0;
 800b73a:	f8c6 8010 	str.w	r8, [r6, #16]
  mbp->reset = true;
 800b73e:	7532      	strb	r2, [r6, #20]
 800b740:	d016      	beq.n	800b770 <oslib_test_002_003_execute.lto_priv.0+0x120>
 800b742:	f06f 0c01 	mvn.w	ip, #1
 800b746:	460b      	mov	r3, r1
  qp->next       = p->next;
 800b748:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800b74a:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800b74c:	689d      	ldr	r5, [r3, #8]
  qp->next       = p->next;
 800b74e:	61b1      	str	r1, [r6, #24]
  qp->next->prev = qp;
 800b750:	604c      	str	r4, [r1, #4]
 800b752:	f8c3 c02c 	str.w	ip, [r3, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 800b756:	f883 8028 	strb.w	r8, [r3, #40]	; 0x28
    pqp = pqp->next;
 800b75a:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800b75c:	6890      	ldr	r0, [r2, #8]
 800b75e:	42a8      	cmp	r0, r5
 800b760:	d2fb      	bcs.n	800b75a <oslib_test_002_003_execute.lto_priv.0+0x10a>
  p->prev       = pqp->prev;
 800b762:	6850      	ldr	r0, [r2, #4]
 800b764:	42a1      	cmp	r1, r4
  p->next       = pqp;
 800b766:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
 800b768:	6058      	str	r0, [r3, #4]
  p->prev->next = p;
 800b76a:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 800b76c:	6053      	str	r3, [r2, #4]
 800b76e:	d1ea      	bne.n	800b746 <oslib_test_002_003_execute.lto_priv.0+0xf6>
  return (bool)(qp->next != qp);
 800b770:	6a31      	ldr	r1, [r6, #32]
 800b772:	4d37      	ldr	r5, [pc, #220]	; (800b850 <oslib_test_002_003_execute.lto_priv.0+0x200>)
 800b774:	42a9      	cmp	r1, r5
 800b776:	d019      	beq.n	800b7ac <oslib_test_002_003_execute.lto_priv.0+0x15c>
 800b778:	f06f 0801 	mvn.w	r8, #1
 800b77c:	f04f 0e00 	mov.w	lr, #0
 800b780:	460b      	mov	r3, r1
  qp->next       = p->next;
 800b782:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800b784:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800b786:	6898      	ldr	r0, [r3, #8]
  qp->next       = p->next;
 800b788:	6231      	str	r1, [r6, #32]
  qp->next->prev = qp;
 800b78a:	604d      	str	r5, [r1, #4]
 800b78c:	f8c3 802c 	str.w	r8, [r3, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 800b790:	f883 e028 	strb.w	lr, [r3, #40]	; 0x28
    pqp = pqp->next;
 800b794:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800b796:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800b79a:	4584      	cmp	ip, r0
 800b79c:	d2fa      	bcs.n	800b794 <oslib_test_002_003_execute.lto_priv.0+0x144>
  p->prev       = pqp->prev;
 800b79e:	6850      	ldr	r0, [r2, #4]
 800b7a0:	42a9      	cmp	r1, r5
  p->next       = pqp;
 800b7a2:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
 800b7a4:	6058      	str	r0, [r3, #4]
  p->prev->next = p;
 800b7a6:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 800b7a8:	6053      	str	r3, [r2, #4]
 800b7aa:	d1e9      	bne.n	800b780 <oslib_test_002_003_execute.lto_priv.0+0x130>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800b7ac:	4b2b      	ldr	r3, [pc, #172]	; (800b85c <oslib_test_002_003_execute.lto_priv.0+0x20c>)
 800b7ae:	681a      	ldr	r2, [r3, #0]
 800b7b0:	68db      	ldr	r3, [r3, #12]
 800b7b2:	6892      	ldr	r2, [r2, #8]
 800b7b4:	689b      	ldr	r3, [r3, #8]
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d901      	bls.n	800b7be <oslib_test_002_003_execute.lto_priv.0+0x16e>
    __sch_reschedule_ahead();
 800b7ba:	f7f8 fb51 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 800b7be:	2500      	movs	r5, #0
 800b7c0:	f385 8811 	msr	BASEPRI, r5
  test_set_step(4);
 800b7c4:	2304      	movs	r3, #4
 800b7c6:	f04f 0830 	mov.w	r8, #48	; 0x30
  mbp->reset = false;
 800b7ca:	7535      	strb	r5, [r6, #20]
 800b7cc:	603b      	str	r3, [r7, #0]
 800b7ce:	f388 8811 	msr	BASEPRI, r8
  rdymsg = chMBFetchTimeoutS(mbp, msgp, timeout);
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	eb0d 0103 	add.w	r1, sp, r3
 800b7d8:	481c      	ldr	r0, [pc, #112]	; (800b84c <oslib_test_002_003_execute.lto_priv.0+0x1fc>)
 800b7da:	f7f9 ffb9 	bl	8005750 <chMBFetchTimeoutS>
 800b7de:	f385 8811 	msr	BASEPRI, r5
 800b7e2:	3001      	adds	r0, #1
 800b7e4:	d185      	bne.n	800b6f2 <oslib_test_002_003_execute.lto_priv.0+0xa2>
 800b7e6:	f388 8811 	msr	BASEPRI, r8
  if (mbp->reset) {
 800b7ea:	7d33      	ldrb	r3, [r6, #20]
 800b7ec:	bb2b      	cbnz	r3, 800b83a <oslib_test_002_003_execute.lto_priv.0+0x1ea>
  return mbp->cnt;
 800b7ee:	6932      	ldr	r2, [r6, #16]
  if (chMBGetUsedCountI(mbp) > (size_t)0) {
 800b7f0:	b332      	cbz	r2, 800b840 <oslib_test_002_003_execute.lto_priv.0+0x1f0>
    *msgp = *mbp->rdptr++;
 800b7f2:	68f3      	ldr	r3, [r6, #12]
    if (mbp->rdptr >= mbp->top) {
 800b7f4:	6871      	ldr	r1, [r6, #4]
    *msgp = *mbp->rdptr++;
 800b7f6:	6818      	ldr	r0, [r3, #0]
 800b7f8:	3304      	adds	r3, #4
    if (mbp->rdptr >= mbp->top) {
 800b7fa:	428b      	cmp	r3, r1
    *msgp = *mbp->rdptr++;
 800b7fc:	60f3      	str	r3, [r6, #12]
      mbp->rdptr = mbp->buffer;
 800b7fe:	bf28      	it	cs
 800b800:	6833      	ldrcs	r3, [r6, #0]
    mbp->cnt--;
 800b802:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
      mbp->rdptr = mbp->buffer;
 800b806:	bf28      	it	cs
 800b808:	60f3      	strcs	r3, [r6, #12]
  return (bool)(qp->next != qp);
 800b80a:	69b3      	ldr	r3, [r6, #24]
    *msgp = *mbp->rdptr++;
 800b80c:	9001      	str	r0, [sp, #4]
  if (ch_queue_notempty(&tqp->queue)) {
 800b80e:	42a3      	cmp	r3, r4
    mbp->cnt--;
 800b810:	6132      	str	r2, [r6, #16]
 800b812:	d00e      	beq.n	800b832 <oslib_test_002_003_execute.lto_priv.0+0x1e2>
 800b814:	2100      	movs	r1, #0
  qp->next       = p->next;
 800b816:	681a      	ldr	r2, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800b818:	6898      	ldr	r0, [r3, #8]
  qp->next       = p->next;
 800b81a:	61b2      	str	r2, [r6, #24]
  qp->next->prev = qp;
 800b81c:	6054      	str	r4, [r2, #4]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800b81e:	699a      	ldr	r2, [r3, #24]
 800b820:	62d9      	str	r1, [r3, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 800b822:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    pqp = pqp->next;
 800b826:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800b828:	6891      	ldr	r1, [r2, #8]
 800b82a:	4281      	cmp	r1, r0
 800b82c:	f4ff af59 	bcc.w	800b6e2 <oslib_test_002_003_execute.lto_priv.0+0x92>
 800b830:	e7f9      	b.n	800b826 <oslib_test_002_003_execute.lto_priv.0+0x1d6>
 800b832:	2300      	movs	r3, #0
 800b834:	f383 8811 	msr	BASEPRI, r3
 800b838:	e75b      	b.n	800b6f2 <oslib_test_002_003_execute.lto_priv.0+0xa2>
 800b83a:	f385 8811 	msr	BASEPRI, r5
 800b83e:	e758      	b.n	800b6f2 <oslib_test_002_003_execute.lto_priv.0+0xa2>
 800b840:	f382 8811 	msr	BASEPRI, r2
 800b844:	e75a      	b.n	800b6fc <oslib_test_002_003_execute.lto_priv.0+0xac>
 800b846:	bf00      	nop
 800b848:	200010f4 	.word	0x200010f4
 800b84c:	20000854 	.word	0x20000854
 800b850:	20000874 	.word	0x20000874
 800b854:	08010fa4 	.word	0x08010fa4
 800b858:	2000086c 	.word	0x2000086c
 800b85c:	20001050 	.word	0x20001050

0800b860 <Thread1.lto_priv.0>:
  chThdSleepMilliseconds(10);
}

static THD_WORKING_AREA(wa1Thread1, 256);
static THD_WORKING_AREA(wa2Thread1, 256);
static THD_FUNCTION(Thread1, arg) {
 800b860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b864:	2730      	movs	r7, #48	; 0x30
 800b866:	4d23      	ldr	r5, [pc, #140]	; (800b8f4 <Thread1.lto_priv.0+0x94>)
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800b868:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800b8f8 <Thread1.lto_priv.0+0x98>
 800b86c:	b083      	sub	sp, #12
  rdymsg = chMBFetchTimeoutS(mbp, msgp, timeout);
 800b86e:	f105 081c 	add.w	r8, r5, #28
 800b872:	f387 8811 	msr	BASEPRI, r7
 800b876:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b87a:	4640      	mov	r0, r8
 800b87c:	a901      	add	r1, sp, #4
 800b87e:	f7f9 ff67 	bl	8005750 <chMBFetchTimeoutS>
 800b882:	2300      	movs	r3, #0
 800b884:	4604      	mov	r4, r0
 800b886:	f383 8811 	msr	BASEPRI, r3
static inline msg_t chJobDispatch(jobs_queue_t *jqp) {
  msg_t msg, jmsg;

  /* Waiting for a job.*/
  msg = chMBFetchTimeout(&jqp->mbx, &jmsg, TIME_INFINITE);
  if (msg == MSG_OK) {
 800b88a:	b110      	cbz	r0, 800b892 <Thread1.lto_priv.0+0x32>
  (void)arg;

  do {
    msg = chJobDispatch(&jq);
  } while (msg == MSG_OK);
}
 800b88c:	b003      	add	sp, #12
 800b88e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    job_descriptor_t *jp = (job_descriptor_t *)jmsg;
 800b892:	9e01      	ldr	r6, [sp, #4]

    chDbgAssert(jp != NULL, "is NULL");

    if (jp->jobfunc != NULL) {
 800b894:	6833      	ldr	r3, [r6, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d0f8      	beq.n	800b88c <Thread1.lto_priv.0+0x2c>

      /* Invoking the job function.*/
      jp->jobfunc(jp->jobarg);
 800b89a:	6870      	ldr	r0, [r6, #4]
 800b89c:	4798      	blx	r3
 800b89e:	f387 8811 	msr	BASEPRI, r7
 800b8a2:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
  if (++sp->cnt <= (cnt_t)0) {
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	6032      	str	r2, [r6, #0]
 800b8ac:	e9c5 3602 	strd	r3, r6, [r5, #8]
 800b8b0:	dd0d      	ble.n	800b8ce <Thread1.lto_priv.0+0x6e>
 800b8b2:	f8d9 2000 	ldr.w	r2, [r9]
 800b8b6:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800b8ba:	6892      	ldr	r2, [r2, #8]
 800b8bc:	689b      	ldr	r3, [r3, #8]
 800b8be:	429a      	cmp	r2, r3
 800b8c0:	d901      	bls.n	800b8c6 <Thread1.lto_priv.0+0x66>
    __sch_reschedule_ahead();
 800b8c2:	f7f8 facd 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	f383 8811 	msr	BASEPRI, r3
  } while (msg == MSG_OK);
 800b8cc:	e7d1      	b.n	800b872 <Thread1.lto_priv.0+0x12>
  ch_queue_t *p = qp->next;
 800b8ce:	682b      	ldr	r3, [r5, #0]
  qp->next       = p->next;
 800b8d0:	681a      	ldr	r2, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800b8d2:	6898      	ldr	r0, [r3, #8]
  qp->next->prev = qp;
 800b8d4:	6055      	str	r5, [r2, #4]
  qp->next       = p->next;
 800b8d6:	602a      	str	r2, [r5, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800b8d8:	699a      	ldr	r2, [r3, #24]
    tp->u.rdymsg = MSG_OK;
 800b8da:	62dc      	str	r4, [r3, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 800b8dc:	f883 4028 	strb.w	r4, [r3, #40]	; 0x28
    pqp = pqp->next;
 800b8e0:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800b8e2:	6891      	ldr	r1, [r2, #8]
 800b8e4:	4281      	cmp	r1, r0
 800b8e6:	d2fb      	bcs.n	800b8e0 <Thread1.lto_priv.0+0x80>
  p->prev       = pqp->prev;
 800b8e8:	6851      	ldr	r1, [r2, #4]
  p->next       = pqp;
 800b8ea:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
 800b8ec:	6059      	str	r1, [r3, #4]
  p->prev->next = p;
 800b8ee:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 800b8f0:	6053      	str	r3, [r2, #4]
  return __sch_ready_behind(tp);
 800b8f2:	e7de      	b.n	800b8b2 <Thread1.lto_priv.0+0x52>
 800b8f4:	20002468 	.word	0x20002468
 800b8f8:	20001050 	.word	0x20001050
 800b8fc:	00000000 	.word	0x00000000

0800b900 <oslib_test_007_002_execute.lto_priv.0>:
  test_set_step(1);
 800b900:	2301      	movs	r3, #1
static void oslib_test_007_002_execute(void) {
 800b902:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 800b906:	4f51      	ldr	r7, [pc, #324]	; (800ba4c <oslib_test_007_002_execute.lto_priv.0+0x14c>)
 800b908:	f04f 0a04 	mov.w	sl, #4
 800b90c:	f04f 0830 	mov.w	r8, #48	; 0x30
 800b910:	2600      	movs	r6, #0
 800b912:	4d4f      	ldr	r5, [pc, #316]	; (800ba50 <oslib_test_007_002_execute.lto_priv.0+0x150>)
 800b914:	4c4f      	ldr	r4, [pc, #316]	; (800ba54 <oslib_test_007_002_execute.lto_priv.0+0x154>)
 800b916:	f8df 9140 	ldr.w	r9, [pc, #320]	; 800ba58 <oslib_test_007_002_execute.lto_priv.0+0x158>
 800b91a:	603b      	str	r3, [r7, #0]
  while (n != 0U) {
 800b91c:	e010      	b.n	800b940 <oslib_test_007_002_execute.lto_priv.0+0x40>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800b91e:	f8d9 2000 	ldr.w	r2, [r9]
 800b922:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800b926:	6892      	ldr	r2, [r2, #8]
 800b928:	689b      	ldr	r3, [r3, #8]
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d901      	bls.n	800b932 <oslib_test_007_002_execute.lto_priv.0+0x32>
    __sch_reschedule_ahead();
 800b92e:	f7f8 fa97 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 800b932:	f386 8811 	msr	BASEPRI, r6
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 800b936:	6923      	ldr	r3, [r4, #16]
  while (n != 0U) {
 800b938:	f1ba 0a01 	subs.w	sl, sl, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 800b93c:	441d      	add	r5, r3
  while (n != 0U) {
 800b93e:	d01c      	beq.n	800b97a <oslib_test_007_002_execute.lto_priv.0+0x7a>
 800b940:	f388 8811 	msr	BASEPRI, r8
  php->next = mp->next;
 800b944:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
  if (++sp->cnt <= (cnt_t)0) {
 800b948:	3301      	adds	r3, #1
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	e9c4 3502 	strd	r3, r5, [r4, #8]
 800b950:	602a      	str	r2, [r5, #0]
 800b952:	dce4      	bgt.n	800b91e <oslib_test_007_002_execute.lto_priv.0+0x1e>
  ch_queue_t *p = qp->next;
 800b954:	6822      	ldr	r2, [r4, #0]
  qp->next       = p->next;
 800b956:	6813      	ldr	r3, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800b958:	6890      	ldr	r0, [r2, #8]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800b95a:	6991      	ldr	r1, [r2, #24]
  qp->next       = p->next;
 800b95c:	6023      	str	r3, [r4, #0]
  qp->next->prev = qp;
 800b95e:	605c      	str	r4, [r3, #4]
    tp->u.rdymsg = MSG_OK;
 800b960:	62d6      	str	r6, [r2, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 800b962:	f882 6028 	strb.w	r6, [r2, #40]	; 0x28
    pqp = pqp->next;
 800b966:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800b968:	688b      	ldr	r3, [r1, #8]
 800b96a:	4283      	cmp	r3, r0
 800b96c:	d2fb      	bcs.n	800b966 <oslib_test_007_002_execute.lto_priv.0+0x66>
  p->prev       = pqp->prev;
 800b96e:	684b      	ldr	r3, [r1, #4]
 800b970:	e9c2 1300 	strd	r1, r3, [r2]
  p->prev->next = p;
 800b974:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
 800b976:	604a      	str	r2, [r1, #4]
  return __sch_ready_behind(tp);
 800b978:	e7d1      	b.n	800b91e <oslib_test_007_002_execute.lto_priv.0+0x1e>
  test_set_step(2);
 800b97a:	2302      	movs	r3, #2
 800b97c:	2504      	movs	r5, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 800b97e:	4e35      	ldr	r6, [pc, #212]	; (800ba54 <oslib_test_007_002_execute.lto_priv.0+0x154>)
  test_set_step(2);
 800b980:	603b      	str	r3, [r7, #0]
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 800b982:	2100      	movs	r1, #0
 800b984:	4630      	mov	r0, r6
 800b986:	f7fa fa9b 	bl	8005ec0 <chGuardedPoolAllocTimeout>
 800b98a:	2800      	cmp	r0, #0
 800b98c:	d043      	beq.n	800ba16 <oslib_test_007_002_execute.lto_priv.0+0x116>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800b98e:	3d01      	subs	r5, #1
 800b990:	d1f7      	bne.n	800b982 <oslib_test_007_002_execute.lto_priv.0+0x82>
  test_set_step(3);
 800b992:	2303      	movs	r3, #3
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 800b994:	4629      	mov	r1, r5
 800b996:	482f      	ldr	r0, [pc, #188]	; (800ba54 <oslib_test_007_002_execute.lto_priv.0+0x154>)
  test_set_step(3);
 800b998:	603b      	str	r3, [r7, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 800b99a:	f7fa fa91 	bl	8005ec0 <chGuardedPoolAllocTimeout>
 800b99e:	bb98      	cbnz	r0, 800ba08 <oslib_test_007_002_execute.lto_priv.0+0x108>
  test_set_step(4);
 800b9a0:	2304      	movs	r3, #4
 800b9a2:	f04f 0830 	mov.w	r8, #48	; 0x30
 800b9a6:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800ba50 <oslib_test_007_002_execute.lto_priv.0+0x150>
 800b9aa:	603b      	str	r3, [r7, #0]
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800b9ac:	f10a 0610 	add.w	r6, sl, #16
      chGuardedPoolFree(&gmp1, &objects[i]);
 800b9b0:	4651      	mov	r1, sl
 800b9b2:	f388 8811 	msr	BASEPRI, r8
 800b9b6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
  if (++sp->cnt <= (cnt_t)0) {
 800b9ba:	3301      	adds	r3, #1
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	e9c4 3102 	strd	r3, r1, [r4, #8]
 800b9c2:	f84a 2b04 	str.w	r2, [sl], #4
 800b9c6:	dd2d      	ble.n	800ba24 <oslib_test_007_002_execute.lto_priv.0+0x124>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800b9c8:	f8d9 2000 	ldr.w	r2, [r9]
 800b9cc:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800b9d0:	6892      	ldr	r2, [r2, #8]
 800b9d2:	689b      	ldr	r3, [r3, #8]
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d901      	bls.n	800b9dc <oslib_test_007_002_execute.lto_priv.0+0xdc>
    __sch_reschedule_ahead();
 800b9d8:	f7f8 fa42 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 800b9dc:	f385 8811 	msr	BASEPRI, r5
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800b9e0:	4556      	cmp	r6, sl
 800b9e2:	d1e5      	bne.n	800b9b0 <oslib_test_007_002_execute.lto_priv.0+0xb0>
  test_set_step(5);
 800b9e4:	2305      	movs	r3, #5
 800b9e6:	2404      	movs	r4, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 800b9e8:	4d1a      	ldr	r5, [pc, #104]	; (800ba54 <oslib_test_007_002_execute.lto_priv.0+0x154>)
  test_set_step(5);
 800b9ea:	603b      	str	r3, [r7, #0]
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 800b9ec:	2100      	movs	r1, #0
 800b9ee:	4628      	mov	r0, r5
 800b9f0:	f7fa fa66 	bl	8005ec0 <chGuardedPoolAllocTimeout>
 800b9f4:	b178      	cbz	r0, 800ba16 <oslib_test_007_002_execute.lto_priv.0+0x116>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800b9f6:	3c01      	subs	r4, #1
 800b9f8:	d1f8      	bne.n	800b9ec <oslib_test_007_002_execute.lto_priv.0+0xec>
  test_set_step(6);
 800b9fa:	2306      	movs	r3, #6
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 800b9fc:	4621      	mov	r1, r4
 800b9fe:	4815      	ldr	r0, [pc, #84]	; (800ba54 <oslib_test_007_002_execute.lto_priv.0+0x154>)
  test_set_step(6);
 800ba00:	603b      	str	r3, [r7, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 800ba02:	f7fa fa5d 	bl	8005ec0 <chGuardedPoolAllocTimeout>
 800ba06:	b158      	cbz	r0, 800ba20 <oslib_test_007_002_execute.lto_priv.0+0x120>
  chtest.global_fail     = true;
 800ba08:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800ba0c:	4a13      	ldr	r2, [pc, #76]	; (800ba5c <oslib_test_007_002_execute.lto_priv.0+0x15c>)
  chtest.global_fail     = true;
 800ba0e:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800ba10:	60ba      	str	r2, [r7, #8]
}
 800ba12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  chtest.global_fail     = true;
 800ba16:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800ba1a:	4a11      	ldr	r2, [pc, #68]	; (800ba60 <oslib_test_007_002_execute.lto_priv.0+0x160>)
  chtest.global_fail     = true;
 800ba1c:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800ba1e:	60ba      	str	r2, [r7, #8]
 800ba20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  ch_queue_t *p = qp->next;
 800ba24:	6822      	ldr	r2, [r4, #0]
  qp->next       = p->next;
 800ba26:	6813      	ldr	r3, [r2, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800ba28:	6991      	ldr	r1, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800ba2a:	6890      	ldr	r0, [r2, #8]
  qp->next->prev = qp;
 800ba2c:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 800ba2e:	6023      	str	r3, [r4, #0]
    tp->u.rdymsg = MSG_OK;
 800ba30:	62d5      	str	r5, [r2, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 800ba32:	f882 5028 	strb.w	r5, [r2, #40]	; 0x28
    pqp = pqp->next;
 800ba36:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800ba38:	688b      	ldr	r3, [r1, #8]
 800ba3a:	4283      	cmp	r3, r0
 800ba3c:	d2fb      	bcs.n	800ba36 <oslib_test_007_002_execute.lto_priv.0+0x136>
  p->prev       = pqp->prev;
 800ba3e:	684b      	ldr	r3, [r1, #4]
  p->next       = pqp;
 800ba40:	6011      	str	r1, [r2, #0]
  p->prev       = pqp->prev;
 800ba42:	6053      	str	r3, [r2, #4]
  p->prev->next = p;
 800ba44:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
 800ba46:	604a      	str	r2, [r1, #4]
  return __sch_ready_behind(tp);
 800ba48:	e7be      	b.n	800b9c8 <oslib_test_007_002_execute.lto_priv.0+0xc8>
 800ba4a:	bf00      	nop
 800ba4c:	200010f4 	.word	0x200010f4
 800ba50:	200025cc 	.word	0x200025cc
 800ba54:	20000838 	.word	0x20000838
 800ba58:	20001050 	.word	0x20001050
 800ba5c:	08012880 	.word	0x08012880
 800ba60:	08012874 	.word	0x08012874
	...

0800ba70 <oslib_test_007_003_execute.lto_priv.0>:

static void oslib_test_007_003_execute(void) {

  /* [7.3.1] Trying to allocate with 100mS timeout, must fail because
     the pool is empty.*/
  test_set_step(1);
 800ba70:	2301      	movs	r3, #1
static void oslib_test_007_003_execute(void) {
 800ba72:	b510      	push	{r4, lr}
  test_set_step(1);
 800ba74:	4c06      	ldr	r4, [pc, #24]	; (800ba90 <oslib_test_007_003_execute.lto_priv.0+0x20>)
  {
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 800ba76:	21c8      	movs	r1, #200	; 0xc8
 800ba78:	4806      	ldr	r0, [pc, #24]	; (800ba94 <oslib_test_007_003_execute.lto_priv.0+0x24>)
  test_set_step(1);
 800ba7a:	6023      	str	r3, [r4, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 800ba7c:	f7fa fa20 	bl	8005ec0 <chGuardedPoolAllocTimeout>
  if (!condition) {
 800ba80:	b900      	cbnz	r0, 800ba84 <oslib_test_007_003_execute.lto_priv.0+0x14>
  }
  test_end_step(1);
}
 800ba82:	bd10      	pop	{r4, pc}
  chtest.global_fail     = true;
 800ba84:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800ba88:	4a03      	ldr	r2, [pc, #12]	; (800ba98 <oslib_test_007_003_execute.lto_priv.0+0x28>)
  chtest.global_fail     = true;
 800ba8a:	80a3      	strh	r3, [r4, #4]
  chtest.failure_message = msg;
 800ba8c:	60a2      	str	r2, [r4, #8]
 800ba8e:	bd10      	pop	{r4, pc}
 800ba90:	200010f4 	.word	0x200010f4
 800ba94:	20000838 	.word	0x20000838
 800ba98:	08012880 	.word	0x08012880
 800ba9c:	00000000 	.word	0x00000000

0800baa0 <oslib_test_004_001_execute.lto_priv.0>:
 * - [4.1.3] Sending jobs with various timings.
 * - [4.1.4] Sending two null jobs to make threads exit.
 * .
 */

static void oslib_test_004_001_execute(void) {
 800baa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  mp->align = align;
 800baa4:	2304      	movs	r3, #4
  mp->next = NULL;
 800baa6:	f04f 0900 	mov.w	r9, #0
  thread_t *tp1, *tp2;

  /* [4.1.1] Initializing the Jobs Queue object.*/
  test_set_step(1);
 800baaa:	2101      	movs	r1, #1
  mp->object_size = size;
 800baac:	2208      	movs	r2, #8
  mp->next = NULL;
 800baae:	4c63      	ldr	r4, [pc, #396]	; (800bc3c <oslib_test_004_001_execute.lto_priv.0+0x19c>)
 800bab0:	4f63      	ldr	r7, [pc, #396]	; (800bc40 <oslib_test_004_001_execute.lto_priv.0+0x1a0>)
  sp->cnt = n;
 800bab2:	461e      	mov	r6, r3
 800bab4:	f04f 0830 	mov.w	r8, #48	; 0x30
  qp->prev = qp;
 800bab8:	e9c4 4400 	strd	r4, r4, [r4]
  mp->object_size = size;
 800babc:	e9c4 9203 	strd	r9, r2, [r4, #12]
  mp->provider = provider;
 800bac0:	e9c4 3905 	strd	r3, r9, [r4, #20]
 800bac4:	4d5f      	ldr	r5, [pc, #380]	; (800bc44 <oslib_test_004_001_execute.lto_priv.0+0x1a4>)
 800bac6:	f8df a180 	ldr.w	sl, [pc, #384]	; 800bc48 <oslib_test_004_001_execute.lto_priv.0+0x1a8>
static void oslib_test_004_001_execute(void) {
 800baca:	b08d      	sub	sp, #52	; 0x34
  test_set_step(1);
 800bacc:	6039      	str	r1, [r7, #0]
 800bace:	f8c4 9008 	str.w	r9, [r4, #8]
  while (n != 0U) {
 800bad2:	e00f      	b.n	800baf4 <oslib_test_004_001_execute.lto_priv.0+0x54>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800bad4:	f8da 2000 	ldr.w	r2, [sl]
 800bad8:	f8da 300c 	ldr.w	r3, [sl, #12]
 800badc:	6892      	ldr	r2, [r2, #8]
 800bade:	689b      	ldr	r3, [r3, #8]
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d901      	bls.n	800bae8 <oslib_test_004_001_execute.lto_priv.0+0x48>
    __sch_reschedule_ahead();
 800bae4:	f7f8 f9bc 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 800bae8:	f389 8811 	msr	BASEPRI, r9
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 800baec:	6923      	ldr	r3, [r4, #16]
  while (n != 0U) {
 800baee:	3e01      	subs	r6, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 800baf0:	441d      	add	r5, r3
  while (n != 0U) {
 800baf2:	d01d      	beq.n	800bb30 <oslib_test_004_001_execute.lto_priv.0+0x90>
 800baf4:	f388 8811 	msr	BASEPRI, r8
  php->next = mp->next;
 800baf8:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
  if (++sp->cnt <= (cnt_t)0) {
 800bafc:	3301      	adds	r3, #1
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	e9c4 3502 	strd	r3, r5, [r4, #8]
 800bb04:	602a      	str	r2, [r5, #0]
 800bb06:	dce5      	bgt.n	800bad4 <oslib_test_004_001_execute.lto_priv.0+0x34>
  ch_queue_t *p = qp->next;
 800bb08:	6822      	ldr	r2, [r4, #0]
  qp->next       = p->next;
 800bb0a:	6813      	ldr	r3, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800bb0c:	6890      	ldr	r0, [r2, #8]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800bb0e:	6991      	ldr	r1, [r2, #24]
  qp->next       = p->next;
 800bb10:	6023      	str	r3, [r4, #0]
  qp->next->prev = qp;
 800bb12:	605c      	str	r4, [r3, #4]
    tp->u.rdymsg = MSG_OK;
 800bb14:	f8c2 902c 	str.w	r9, [r2, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 800bb18:	f882 9028 	strb.w	r9, [r2, #40]	; 0x28
    pqp = pqp->next;
 800bb1c:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800bb1e:	688b      	ldr	r3, [r1, #8]
 800bb20:	4283      	cmp	r3, r0
 800bb22:	d2fb      	bcs.n	800bb1c <oslib_test_004_001_execute.lto_priv.0+0x7c>
  p->prev       = pqp->prev;
 800bb24:	684b      	ldr	r3, [r1, #4]
 800bb26:	e9c2 1300 	strd	r1, r3, [r2]
  p->prev->next = p;
 800bb2a:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
 800bb2c:	604a      	str	r2, [r1, #4]
  return __sch_ready_behind(tp);
 800bb2e:	e7d1      	b.n	800bad4 <oslib_test_004_001_execute.lto_priv.0+0x34>
  mbp->buffer = buf;
 800bb30:	4b46      	ldr	r3, [pc, #280]	; (800bc4c <oslib_test_004_001_execute.lto_priv.0+0x1ac>)
  qp->next = qp;
 800bb32:	f8df b11c 	ldr.w	fp, [pc, #284]	; 800bc50 <oslib_test_004_001_execute.lto_priv.0+0x1b0>
  mbp->wrptr  = buf;
 800bb36:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
  mbp->buffer = buf;
 800bb3a:	61e3      	str	r3, [r4, #28]
  mbp->top    = &buf[n];
 800bb3c:	3310      	adds	r3, #16
 800bb3e:	6223      	str	r3, [r4, #32]
    chJobObjectInit(&jq, JOBS_QUEUE_SIZE, jobs, msg_queue);
  }
  test_end_step(1);

  /* [4.1.2] Starting the dispatcher threads.*/
  test_set_step(2);
 800bb40:	2302      	movs	r3, #2
 800bb42:	603b      	str	r3, [r7, #0]
  return chThdGetSelfX()->hdr.pqueue.prio;
 800bb44:	f8da 300c 	ldr.w	r3, [sl, #12]
  {
    thread_descriptor_t td1 = {
 800bb48:	4d42      	ldr	r5, [pc, #264]	; (800bc54 <oslib_test_004_001_execute.lto_priv.0+0x1b4>)
      .name  = "dispatcher1",
      .wbase = wa1Thread1,
      .wend  = THD_WORKING_AREA_END(wa1Thread1),
      .prio  = chThdGetPriorityX() - 1,
 800bb4a:	689b      	ldr	r3, [r3, #8]
  qp->prev = qp;
 800bb4c:	e9c4 bb0d 	strd	fp, fp, [r4, #52]	; 0x34
 800bb50:	3b01      	subs	r3, #1
    thread_descriptor_t td1 = {
 800bb52:	9309      	str	r3, [sp, #36]	; 0x24
 800bb54:	4b40      	ldr	r3, [pc, #256]	; (800bc58 <oslib_test_004_001_execute.lto_priv.0+0x1b8>)
  mbp->cnt    = (size_t)0;
 800bb56:	62e6      	str	r6, [r4, #44]	; 0x2c
 800bb58:	9307      	str	r3, [sp, #28]
 800bb5a:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 800bb5e:	9308      	str	r3, [sp, #32]
 800bb60:	4b3e      	ldr	r3, [pc, #248]	; (800bc5c <oslib_test_004_001_execute.lto_priv.0+0x1bc>)
  mbp->reset  = false;
 800bb62:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
 800bb66:	9306      	str	r3, [sp, #24]
  qp->next = qp;
 800bb68:	f10b 0308 	add.w	r3, fp, #8
  qp->prev = qp;
 800bb6c:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
 800bb70:	960b      	str	r6, [sp, #44]	; 0x2c
 800bb72:	950a      	str	r5, [sp, #40]	; 0x28
 800bb74:	2430      	movs	r4, #48	; 0x30
 800bb76:	f384 8811 	msr	BASEPRI, r4
  tp = chThdCreateSuspendedI(tdp);
 800bb7a:	a806      	add	r0, sp, #24
 800bb7c:	f7f8 fd20 	bl	80045c0 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 800bb80:	4631      	mov	r1, r6
  tp = chThdCreateSuspendedI(tdp);
 800bb82:	4681      	mov	r9, r0
  chSchWakeupS(tp, MSG_OK);
 800bb84:	f7f8 fbec 	bl	8004360 <chSchWakeupS>
 800bb88:	f386 8811 	msr	BASEPRI, r6
 800bb8c:	f8da 300c 	ldr.w	r3, [sl, #12]

    thread_descriptor_t td2 = {
      .name  = "dispatcher2",
      .wbase = wa2Thread1,
      .wend  = THD_WORKING_AREA_END(wa2Thread1),
      .prio  = chThdGetPriorityX() - 2,
 800bb90:	689b      	ldr	r3, [r3, #8]
    thread_descriptor_t td2 = {
 800bb92:	9504      	str	r5, [sp, #16]
      .prio  = chThdGetPriorityX() - 2,
 800bb94:	3b02      	subs	r3, #2
    thread_descriptor_t td2 = {
 800bb96:	9303      	str	r3, [sp, #12]
 800bb98:	4b31      	ldr	r3, [pc, #196]	; (800bc60 <oslib_test_004_001_execute.lto_priv.0+0x1c0>)
 800bb9a:	9605      	str	r6, [sp, #20]
 800bb9c:	9301      	str	r3, [sp, #4]
 800bb9e:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 800bba2:	9302      	str	r3, [sp, #8]
 800bba4:	4b2f      	ldr	r3, [pc, #188]	; (800bc64 <oslib_test_004_001_execute.lto_priv.0+0x1c4>)
 800bba6:	9300      	str	r3, [sp, #0]
 800bba8:	f384 8811 	msr	BASEPRI, r4
  tp = chThdCreateSuspendedI(tdp);
 800bbac:	4668      	mov	r0, sp
 800bbae:	f7f8 fd07 	bl	80045c0 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 800bbb2:	4631      	mov	r1, r6
  tp = chThdCreateSuspendedI(tdp);
 800bbb4:	4680      	mov	r8, r0
  chSchWakeupS(tp, MSG_OK);
 800bbb6:	f7f8 fbd3 	bl	8004360 <chSchWakeupS>
 800bbba:	f386 8811 	msr	BASEPRI, r6
    tp2 = chThdCreate(&td2);
  }
  test_end_step(2);

  /* [4.1.3] Sending jobs with various timings.*/
  test_set_step(3);
 800bbbe:	2303      	movs	r3, #3
 800bbc0:	2461      	movs	r4, #97	; 0x61
 800bbc2:	4e29      	ldr	r6, [pc, #164]	; (800bc68 <oslib_test_004_001_execute.lto_priv.0+0x1c8>)
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 800bbc4:	f1ab 0534 	sub.w	r5, fp, #52	; 0x34
 800bbc8:	603b      	str	r3, [r7, #0]
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 800bbca:	f1ab 0b18 	sub.w	fp, fp, #24
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 800bbce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800bbd2:	4628      	mov	r0, r5
 800bbd4:	f7fa f974 	bl	8005ec0 <chGuardedPoolAllocTimeout>
 800bbd8:	4601      	mov	r1, r0
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 800bbda:	2200      	movs	r2, #0
    unsigned i;
    job_descriptor_t *jdp;

    for (i = 0; i < 8; i++) {
      jdp = chJobGet(&jq);
      jdp->jobfunc = job_slow;
 800bbdc:	e9c1 6400 	strd	r6, r4, [r1]
 800bbe0:	4658      	mov	r0, fp
    for (i = 0; i < 8; i++) {
 800bbe2:	3401      	adds	r4, #1
 800bbe4:	f7f9 fd4c 	bl	8005680 <chMBPostTimeout>
 800bbe8:	2c69      	cmp	r4, #105	; 0x69
 800bbea:	d1f0      	bne.n	800bbce <oslib_test_004_001_execute.lto_priv.0+0x12e>
    }
  }
  test_end_step(3);

  /* [4.1.4] Sending two null jobs to make threads exit.*/
  test_set_step(4);
 800bbec:	2304      	movs	r3, #4
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 800bbee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800bbf2:	4812      	ldr	r0, [pc, #72]	; (800bc3c <oslib_test_004_001_execute.lto_priv.0+0x19c>)
 800bbf4:	603b      	str	r3, [r7, #0]
 800bbf6:	f7fa f963 	bl	8005ec0 <chGuardedPoolAllocTimeout>
  {
    job_descriptor_t *jdp;

    jdp = chJobGet(&jq);
    jdp->jobfunc = NULL;
 800bbfa:	2400      	movs	r4, #0
 800bbfc:	4601      	mov	r1, r0
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 800bbfe:	4622      	mov	r2, r4
    jdp->jobarg  = NULL;
 800bc00:	e9c1 4400 	strd	r4, r4, [r1]
 800bc04:	4819      	ldr	r0, [pc, #100]	; (800bc6c <oslib_test_004_001_execute.lto_priv.0+0x1cc>)
 800bc06:	f7f9 fd3b 	bl	8005680 <chMBPostTimeout>
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 800bc0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800bc0e:	480b      	ldr	r0, [pc, #44]	; (800bc3c <oslib_test_004_001_execute.lto_priv.0+0x19c>)
 800bc10:	f7fa f956 	bl	8005ec0 <chGuardedPoolAllocTimeout>
 800bc14:	4601      	mov	r1, r0
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 800bc16:	4622      	mov	r2, r4
    chJobPost(&jq, jdp);
    jdp = chJobGet(&jq);
    jdp->jobfunc = NULL;
    jdp->jobarg  = NULL;
 800bc18:	e9c1 4400 	strd	r4, r4, [r1]
 800bc1c:	4813      	ldr	r0, [pc, #76]	; (800bc6c <oslib_test_004_001_execute.lto_priv.0+0x1cc>)
 800bc1e:	f7f9 fd2f 	bl	8005680 <chMBPostTimeout>
    chJobPost(&jq, jdp);
    (void) chThdWait(tp1);
 800bc22:	4648      	mov	r0, r9
 800bc24:	f7f9 fefc 	bl	8005a20 <chThdWait>
    (void) chThdWait(tp2);
 800bc28:	4640      	mov	r0, r8
 800bc2a:	f7f9 fef9 	bl	8005a20 <chThdWait>
    test_assert_sequence("abcdefgh", "unexpected tokens");
 800bc2e:	4910      	ldr	r1, [pc, #64]	; (800bc70 <oslib_test_004_001_execute.lto_priv.0+0x1d0>)
 800bc30:	4810      	ldr	r0, [pc, #64]	; (800bc74 <oslib_test_004_001_execute.lto_priv.0+0x1d4>)
  }
  test_end_step(4);
}
 800bc32:	b00d      	add	sp, #52	; 0x34
 800bc34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_assert_sequence("abcdefgh", "unexpected tokens");
 800bc38:	f7fb b91a 	b.w	8006e70 <__test_assert_sequence>
 800bc3c:	20002468 	.word	0x20002468
 800bc40:	200010f4 	.word	0x200010f4
 800bc44:	20002448 	.word	0x20002448
 800bc48:	20001050 	.word	0x20001050
 800bc4c:	200024bc 	.word	0x200024bc
 800bc50:	2000249c 	.word	0x2000249c
 800bc54:	0800b861 	.word	0x0800b861
 800bc58:	200026d0 	.word	0x200026d0
 800bc5c:	08012d98 	.word	0x08012d98
 800bc60:	200028c0 	.word	0x200028c0
 800bc64:	08012da4 	.word	0x08012da4
 800bc68:	0800ecd1 	.word	0x0800ecd1
 800bc6c:	20002484 	.word	0x20002484
 800bc70:	08012c98 	.word	0x08012c98
 800bc74:	08012cc8 	.word	0x08012cc8
	...

0800bc80 <Thread1.lto_priv.1>:
static THD_WORKING_AREA(waThread1, 256);
static THD_FUNCTION(Thread1, arg) {

  (void)arg;

  exit_flag = false;
 800bc80:	2300      	movs	r3, #0
static THD_FUNCTION(Thread1, arg) {
 800bc82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  exit_flag = false;
 800bc86:	f8df 8088 	ldr.w	r8, [pc, #136]	; 800bd10 <Thread1.lto_priv.1+0x90>
 800bc8a:	2630      	movs	r6, #48	; 0x30
  otp->state = newstate;
 800bc8c:	f04f 0a0e 	mov.w	sl, #14
  ntp->state = CH_STATE_CURRENT;
 800bc90:	f04f 0901 	mov.w	r9, #1
 800bc94:	4f1f      	ldr	r7, [pc, #124]	; (800bd14 <Thread1.lto_priv.1+0x94>)
static THD_FUNCTION(Thread1, arg) {
 800bc96:	b083      	sub	sp, #12
  exit_flag = false;
 800bc98:	f888 3000 	strb.w	r3, [r8]
 800bc9c:	e016      	b.n	800bccc <Thread1.lto_priv.1+0x4c>
 800bc9e:	220d      	movs	r2, #13
  qp->next       = p->next;
 800bca0:	6823      	ldr	r3, [r4, #0]
 800bca2:	634b      	str	r3, [r1, #52]	; 0x34
  qp->next->prev = qp;
 800bca4:	605d      	str	r5, [r3, #4]
 800bca6:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
 800bcaa:	f38b 8811 	msr	BASEPRI, fp
  thread_t *tp;
  const call_message_t *cmp;
  msg_t ret;

  tp = chMsgWait();
  cmp = (const call_message_t *)chMsgGet(tp);
 800bcae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  ret = cmp->veneer(cmp->argsp);
 800bcb0:	e9d3 2000 	ldrd	r2, r0, [r3]
 800bcb4:	4790      	blx	r2
 800bcb6:	4601      	mov	r1, r0
 800bcb8:	f386 8811 	msr	BASEPRI, r6
 800bcbc:	4620      	mov	r0, r4
 800bcbe:	f7f8 fb4f 	bl	8004360 <chSchWakeupS>
 800bcc2:	f38b 8811 	msr	BASEPRI, fp
  do {
    chDelegateDispatch();
  } while (!exit_flag);
 800bcc6:	f898 3000 	ldrb.w	r3, [r8]
 800bcca:	b9c3      	cbnz	r3, 800bcfe <Thread1.lto_priv.1+0x7e>
 800bccc:	f386 8811 	msr	BASEPRI, r6
  return __sch_get_currthread();
 800bcd0:	68f9      	ldr	r1, [r7, #12]
 800bcd2:	f04f 0b00 	mov.w	fp, #0
  return (bool)(tp->msgqueue.next != &tp->msgqueue);
 800bcd6:	460d      	mov	r5, r1
 800bcd8:	f855 4f34 	ldr.w	r4, [r5, #52]!
  if (!chMsgIsPendingI(currtp)) {
 800bcdc:	42ac      	cmp	r4, r5
 800bcde:	d1de      	bne.n	800bc9e <Thread1.lto_priv.1+0x1e>
  ch_priority_queue_t *p = pqp->next;
 800bce0:	6838      	ldr	r0, [r7, #0]
  otp->state = newstate;
 800bce2:	f881 a028 	strb.w	sl, [r1, #40]	; 0x28
  pqp->next       = p->next;
 800bce6:	6803      	ldr	r3, [r0, #0]
  chSysSwitch(ntp, otp);
 800bce8:	9101      	str	r1, [sp, #4]
  pqp->next->prev = pqp;
 800bcea:	605f      	str	r7, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 800bcec:	f880 9028 	strb.w	r9, [r0, #40]	; 0x28
  pqp->next       = p->next;
 800bcf0:	603b      	str	r3, [r7, #0]
  __instance_set_currthread(oip, ntp);
 800bcf2:	60f8      	str	r0, [r7, #12]
  chSysSwitch(ntp, otp);
 800bcf4:	f7f4 faa4 	bl	8000240 <__port_switch>
  ch_queue_t *p = qp->next;
 800bcf8:	9901      	ldr	r1, [sp, #4]
 800bcfa:	6b4c      	ldr	r4, [r1, #52]	; 0x34
}
 800bcfc:	e7cf      	b.n	800bc9e <Thread1.lto_priv.1+0x1e>
 800bcfe:	f386 8811 	msr	BASEPRI, r6
  chThdExitS(msg);
 800bd02:	f640 70a5 	movw	r0, #4005	; 0xfa5

  chThdExit(0x0FA5);
}
 800bd06:	b003      	add	sp, #12
 800bd08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd0c:	f7f8 bd78 	b.w	8004800 <chThdExitS>
 800bd10:	20001edc 	.word	0x20001edc
 800bd14:	20001050 	.word	0x20001050
	...

0800bd20 <oslib_test_005_001_execute.lto_priv.0>:

static void oslib_test_005_001_execute(void) {
  thread_t *tp;

  /* [5.1.1] Starting the dispatcher thread.*/
  test_set_step(1);
 800bd20:	2101      	movs	r1, #1
static void oslib_test_005_001_execute(void) {
 800bd22:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    thread_descriptor_t td = {
 800bd24:	2600      	movs	r6, #0
 800bd26:	4a3d      	ldr	r2, [pc, #244]	; (800be1c <oslib_test_005_001_execute.lto_priv.0+0xfc>)
 800bd28:	4b3d      	ldr	r3, [pc, #244]	; (800be20 <oslib_test_005_001_execute.lto_priv.0+0x100>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 800bd2a:	68d2      	ldr	r2, [r2, #12]
static void oslib_test_005_001_execute(void) {
 800bd2c:	b08b      	sub	sp, #44	; 0x2c
      .name  = "dispatcher",
      .wbase = waThread1,
      .wend  = THD_WORKING_AREA_END(waThread1),
      .prio  = chThdGetPriorityX() + 1,
 800bd2e:	6892      	ldr	r2, [r2, #8]
    thread_descriptor_t td = {
 800bd30:	9305      	str	r3, [sp, #20]
      .prio  = chThdGetPriorityX() + 1,
 800bd32:	440a      	add	r2, r1
    thread_descriptor_t td = {
 800bd34:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 800bd38:	e9cd 3206 	strd	r3, r2, [sp, #24]
 800bd3c:	4a39      	ldr	r2, [pc, #228]	; (800be24 <oslib_test_005_001_execute.lto_priv.0+0x104>)
  test_set_step(1);
 800bd3e:	4d3a      	ldr	r5, [pc, #232]	; (800be28 <oslib_test_005_001_execute.lto_priv.0+0x108>)
    thread_descriptor_t td = {
 800bd40:	9208      	str	r2, [sp, #32]
 800bd42:	4a3a      	ldr	r2, [pc, #232]	; (800be2c <oslib_test_005_001_execute.lto_priv.0+0x10c>)
 800bd44:	2330      	movs	r3, #48	; 0x30
  test_set_step(1);
 800bd46:	6029      	str	r1, [r5, #0]
    thread_descriptor_t td = {
 800bd48:	9609      	str	r6, [sp, #36]	; 0x24
 800bd4a:	9204      	str	r2, [sp, #16]
 800bd4c:	f383 8811 	msr	BASEPRI, r3
  tp = chThdCreateSuspendedI(tdp);
 800bd50:	a804      	add	r0, sp, #16
 800bd52:	f7f8 fc35 	bl	80045c0 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 800bd56:	4631      	mov	r1, r6
  tp = chThdCreateSuspendedI(tdp);
 800bd58:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 800bd5a:	f7f8 fb01 	bl	8004360 <chSchWakeupS>
 800bd5e:	f386 8811 	msr	BASEPRI, r6
  }
  test_end_step(1);

  /* [5.1.2] Calling the default veneers, checking the result and the
     emitted tokens.*/
  test_set_step(2);
 800bd62:	2302      	movs	r3, #2
 * @param[in] func      pointer to the function to be called
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect0(thread_t *tp, delegate_fn0_t func) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn0, func);
 800bd64:	4620      	mov	r0, r4
 800bd66:	4a32      	ldr	r2, [pc, #200]	; (800be30 <oslib_test_005_001_execute.lto_priv.0+0x110>)
 800bd68:	4932      	ldr	r1, [pc, #200]	; (800be34 <oslib_test_005_001_execute.lto_priv.0+0x114>)
 800bd6a:	602b      	str	r3, [r5, #0]
 800bd6c:	f7fa f8e0 	bl	8005f30 <chDelegateCallVeneer>
  if (!condition) {
 800bd70:	f245 53aa 	movw	r3, #21930	; 0x55aa
 800bd74:	4298      	cmp	r0, r3
 800bd76:	d149      	bne.n	800be0c <oslib_test_005_001_execute.lto_priv.0+0xec>
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect1(thread_t *tp, delegate_fn1_t func,
                                          msg_t p1) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn1, func, p1);
 800bd78:	2341      	movs	r3, #65	; 0x41
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	4a2e      	ldr	r2, [pc, #184]	; (800be38 <oslib_test_005_001_execute.lto_priv.0+0x118>)
 800bd7e:	492f      	ldr	r1, [pc, #188]	; (800be3c <oslib_test_005_001_execute.lto_priv.0+0x11c>)
 800bd80:	f7fa f8d6 	bl	8005f30 <chDelegateCallVeneer>
 800bd84:	2841      	cmp	r0, #65	; 0x41
 800bd86:	d141      	bne.n	800be0c <oslib_test_005_001_execute.lto_priv.0+0xec>
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect2(thread_t *tp, delegate_fn2_t func,
                                          msg_t p1, msg_t p2) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn2, func, p1, p2);
 800bd88:	2643      	movs	r6, #67	; 0x43
 800bd8a:	2342      	movs	r3, #66	; 0x42
 800bd8c:	4620      	mov	r0, r4
 800bd8e:	4a2c      	ldr	r2, [pc, #176]	; (800be40 <oslib_test_005_001_execute.lto_priv.0+0x120>)
 800bd90:	492c      	ldr	r1, [pc, #176]	; (800be44 <oslib_test_005_001_execute.lto_priv.0+0x124>)
 800bd92:	9600      	str	r6, [sp, #0]
 800bd94:	f7fa f8cc 	bl	8005f30 <chDelegateCallVeneer>
 800bd98:	2842      	cmp	r0, #66	; 0x42
 800bd9a:	d137      	bne.n	800be0c <oslib_test_005_001_execute.lto_priv.0+0xec>
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect3(thread_t *tp, delegate_fn3_t func,
                                          msg_t p1, msg_t p2, msg_t p3) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn3, func, p1, p2, p3);
 800bd9c:	2746      	movs	r7, #70	; 0x46
 800bd9e:	2645      	movs	r6, #69	; 0x45
 800bda0:	2344      	movs	r3, #68	; 0x44
 800bda2:	4620      	mov	r0, r4
 800bda4:	e9cd 6700 	strd	r6, r7, [sp]
 800bda8:	4a27      	ldr	r2, [pc, #156]	; (800be48 <oslib_test_005_001_execute.lto_priv.0+0x128>)
 800bdaa:	4928      	ldr	r1, [pc, #160]	; (800be4c <oslib_test_005_001_execute.lto_priv.0+0x12c>)
 800bdac:	f7fa f8c0 	bl	8005f30 <chDelegateCallVeneer>
 800bdb0:	2844      	cmp	r0, #68	; 0x44
 800bdb2:	d12b      	bne.n	800be0c <oslib_test_005_001_execute.lto_priv.0+0xec>
 */
static inline msg_t chDelegateCallDirect4(thread_t *tp, delegate_fn4_t func,
                                          msg_t p1, msg_t p2, msg_t p3,
                                          msg_t p4) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn4, func, p1, p2, p3, p4);
 800bdb4:	f04f 0c4a 	mov.w	ip, #74	; 0x4a
 800bdb8:	2749      	movs	r7, #73	; 0x49
 800bdba:	2648      	movs	r6, #72	; 0x48
 800bdbc:	2347      	movs	r3, #71	; 0x47
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	e9cd 7c01 	strd	r7, ip, [sp, #4]
 800bdc4:	4a22      	ldr	r2, [pc, #136]	; (800be50 <oslib_test_005_001_execute.lto_priv.0+0x130>)
 800bdc6:	4923      	ldr	r1, [pc, #140]	; (800be54 <oslib_test_005_001_execute.lto_priv.0+0x134>)
 800bdc8:	9600      	str	r6, [sp, #0]
 800bdca:	f7fa f8b1 	bl	8005f30 <chDelegateCallVeneer>
 800bdce:	2847      	cmp	r0, #71	; 0x47
 800bdd0:	d11c      	bne.n	800be0c <oslib_test_005_001_execute.lto_priv.0+0xec>
  return chDelegateCallVeneer(tp, __ch_delegate_fn0, func);
 800bdd2:	4620      	mov	r0, r4
 800bdd4:	4a20      	ldr	r2, [pc, #128]	; (800be58 <oslib_test_005_001_execute.lto_priv.0+0x138>)
 800bdd6:	4917      	ldr	r1, [pc, #92]	; (800be34 <oslib_test_005_001_execute.lto_priv.0+0x114>)
 800bdd8:	f7fa f8aa 	bl	8005f30 <chDelegateCallVeneer>
 800bddc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bde0:	4298      	cmp	r0, r3
 800bde2:	d113      	bne.n	800be0c <oslib_test_005_001_execute.lto_priv.0+0xec>
    test_assert(retval == (int)'G', "invalid return value");

    retval = chDelegateCallDirect0(tp, (delegate_fn0_t)dis_func_end);
    test_assert(retval == 0xAA55, "invalid return value");

    test_assert_sequence("0ABCDEFGHIJZ", "unexpected tokens");
 800bde4:	491d      	ldr	r1, [pc, #116]	; (800be5c <oslib_test_005_001_execute.lto_priv.0+0x13c>)
 800bde6:	481e      	ldr	r0, [pc, #120]	; (800be60 <oslib_test_005_001_execute.lto_priv.0+0x140>)
 800bde8:	f7fb f842 	bl	8006e70 <__test_assert_sequence>
 800bdec:	b998      	cbnz	r0, 800be16 <oslib_test_005_001_execute.lto_priv.0+0xf6>
  }
  test_end_step(2);

  /* [5.1.3] Waiting for the thread to terminate-.*/
  test_set_step(3);
 800bdee:	2303      	movs	r3, #3
  {
    msg_t msg = chThdWait(tp);
 800bdf0:	4620      	mov	r0, r4
  test_set_step(3);
 800bdf2:	602b      	str	r3, [r5, #0]
    msg_t msg = chThdWait(tp);
 800bdf4:	f7f9 fe14 	bl	8005a20 <chThdWait>
 800bdf8:	f640 73a5 	movw	r3, #4005	; 0xfa5
 800bdfc:	4298      	cmp	r0, r3
 800bdfe:	d00a      	beq.n	800be16 <oslib_test_005_001_execute.lto_priv.0+0xf6>
  chtest.global_fail     = true;
 800be00:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800be04:	4a17      	ldr	r2, [pc, #92]	; (800be64 <oslib_test_005_001_execute.lto_priv.0+0x144>)
  chtest.global_fail     = true;
 800be06:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800be08:	60aa      	str	r2, [r5, #8]
    return __test_fail(msg);
 800be0a:	e004      	b.n	800be16 <oslib_test_005_001_execute.lto_priv.0+0xf6>
  chtest.global_fail     = true;
 800be0c:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800be10:	4a15      	ldr	r2, [pc, #84]	; (800be68 <oslib_test_005_001_execute.lto_priv.0+0x148>)
  chtest.global_fail     = true;
 800be12:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800be14:	60aa      	str	r2, [r5, #8]
    test_assert(msg == 0x0FA5, "invalid exit code");
  }
  test_end_step(3);
}
 800be16:	b00b      	add	sp, #44	; 0x2c
 800be18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be1a:	bf00      	nop
 800be1c:	20001050 	.word	0x20001050
 800be20:	20002ab0 	.word	0x20002ab0
 800be24:	0800bc81 	.word	0x0800bc81
 800be28:	200010f4 	.word	0x200010f4
 800be2c:	08012db0 	.word	0x08012db0
 800be30:	08009261 	.word	0x08009261
 800be34:	08000cc1 	.word	0x08000cc1
 800be38:	08009281 	.word	0x08009281
 800be3c:	08000cd1 	.word	0x08000cd1
 800be40:	080092a1 	.word	0x080092a1
 800be44:	08000cf1 	.word	0x08000cf1
 800be48:	080092d1 	.word	0x080092d1
 800be4c:	08000d11 	.word	0x08000d11
 800be50:	08009311 	.word	0x08009311
 800be54:	08000d31 	.word	0x08000d31
 800be58:	08009361 	.word	0x08009361
 800be5c:	08012c98 	.word	0x08012c98
 800be60:	08012dd4 	.word	0x08012dd4
 800be64:	08012de4 	.word	0x08012de4
 800be68:	08012dbc 	.word	0x08012dbc
 800be6c:	00000000 	.word	0x00000000

0800be70 <chFactoryReleaseObjectsFIFO.isra.0>:
 *                      release.
 * @retval 0            if the object has been released.
 *
 * @api
 */
ucnt_t chFactoryReleaseObjectsFIFO(dyn_objects_fifo_t *dofp) {
 800be70:	b510      	push	{r4, lr}
 800be72:	2330      	movs	r3, #48	; 0x30
 800be74:	4604      	mov	r4, r0
 800be76:	f383 8811 	msr	BASEPRI, r3
 800be7a:	480f      	ldr	r0, [pc, #60]	; (800beb8 <chFactoryReleaseObjectsFIFO.isra.0+0x48>)
 800be7c:	f7f8 fe80 	bl	8004b80 <chMtxLockS>
 800be80:	2300      	movs	r3, #0
 800be82:	f383 8811 	msr	BASEPRI, r3
  refs = --dep->refs;
 800be86:	6863      	ldr	r3, [r4, #4]
 800be88:	3b01      	subs	r3, #1
 800be8a:	6063      	str	r3, [r4, #4]
  if (refs == (ucnt_t)0) {
 800be8c:	b95b      	cbnz	r3, 800bea6 <chFactoryReleaseObjectsFIFO.isra.0+0x36>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 800be8e:	4b0b      	ldr	r3, [pc, #44]	; (800bebc <chFactoryReleaseObjectsFIFO.isra.0+0x4c>)
 800be90:	4618      	mov	r0, r3
 800be92:	e001      	b.n	800be98 <chFactoryReleaseObjectsFIFO.isra.0+0x28>
    if (prev->next == element) {
 800be94:	4284      	cmp	r4, r0
 800be96:	d00b      	beq.n	800beb0 <chFactoryReleaseObjectsFIFO.isra.0+0x40>
 800be98:	4602      	mov	r2, r0
  while (prev->next != (dyn_element_t *)dlp) {
 800be9a:	6800      	ldr	r0, [r0, #0]
 800be9c:	4298      	cmp	r0, r3
 800be9e:	d1f9      	bne.n	800be94 <chFactoryReleaseObjectsFIFO.isra.0+0x24>
  return NULL;
 800bea0:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 800bea2:	f7f9 fd4d 	bl	8005940 <chHeapFree>
  refs = dyn_release_object_heap(&dofp->element, &ch_factory.fifo_list);

  FACTORY_UNLOCK();

  return refs;
}
 800bea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  FACTORY_UNLOCK();
 800beaa:	4803      	ldr	r0, [pc, #12]	; (800beb8 <chFactoryReleaseObjectsFIFO.isra.0+0x48>)
 800beac:	f7f8 bf00 	b.w	8004cb0 <chMtxUnlock>
      prev->next = element->next;
 800beb0:	6803      	ldr	r3, [r0, #0]
 800beb2:	6013      	str	r3, [r2, #0]
      return element;
 800beb4:	e7f5      	b.n	800bea2 <chFactoryReleaseObjectsFIFO.isra.0+0x32>
 800beb6:	bf00      	nop
 800beb8:	20001e90 	.word	0x20001e90
 800bebc:	20001ed0 	.word	0x20001ed0

0800bec0 <chFactoryReleasePipe.isra.0>:
 *                      release.
 * @retval 0            if the object has been released.
 *
 * @api
 */
ucnt_t chFactoryReleasePipe(dyn_pipe_t *dpp) {
 800bec0:	b510      	push	{r4, lr}
 800bec2:	2330      	movs	r3, #48	; 0x30
 800bec4:	4604      	mov	r4, r0
 800bec6:	f383 8811 	msr	BASEPRI, r3
 800beca:	480f      	ldr	r0, [pc, #60]	; (800bf08 <chFactoryReleasePipe.isra.0+0x48>)
 800becc:	f7f8 fe58 	bl	8004b80 <chMtxLockS>
 800bed0:	2300      	movs	r3, #0
 800bed2:	f383 8811 	msr	BASEPRI, r3
  refs = --dep->refs;
 800bed6:	6863      	ldr	r3, [r4, #4]
 800bed8:	3b01      	subs	r3, #1
 800beda:	6063      	str	r3, [r4, #4]
  if (refs == (ucnt_t)0) {
 800bedc:	b95b      	cbnz	r3, 800bef6 <chFactoryReleasePipe.isra.0+0x36>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 800bede:	4b0b      	ldr	r3, [pc, #44]	; (800bf0c <chFactoryReleasePipe.isra.0+0x4c>)
 800bee0:	4618      	mov	r0, r3
 800bee2:	e001      	b.n	800bee8 <chFactoryReleasePipe.isra.0+0x28>
    if (prev->next == element) {
 800bee4:	4284      	cmp	r4, r0
 800bee6:	d00b      	beq.n	800bf00 <chFactoryReleasePipe.isra.0+0x40>
 800bee8:	4602      	mov	r2, r0
  while (prev->next != (dyn_element_t *)dlp) {
 800beea:	6800      	ldr	r0, [r0, #0]
 800beec:	4298      	cmp	r0, r3
 800beee:	d1f9      	bne.n	800bee4 <chFactoryReleasePipe.isra.0+0x24>
  return NULL;
 800bef0:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 800bef2:	f7f9 fd25 	bl	8005940 <chHeapFree>
  refs = dyn_release_object_heap(&dpp->element, &ch_factory.pipe_list);

  FACTORY_UNLOCK();

  return refs;
}
 800bef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  FACTORY_UNLOCK();
 800befa:	4803      	ldr	r0, [pc, #12]	; (800bf08 <chFactoryReleasePipe.isra.0+0x48>)
 800befc:	f7f8 bed8 	b.w	8004cb0 <chMtxUnlock>
      prev->next = element->next;
 800bf00:	6803      	ldr	r3, [r0, #0]
 800bf02:	6013      	str	r3, [r2, #0]
      return element;
 800bf04:	e7f5      	b.n	800bef2 <chFactoryReleasePipe.isra.0+0x32>
 800bf06:	bf00      	nop
 800bf08:	20001e90 	.word	0x20001e90
 800bf0c:	20001ed4 	.word	0x20001ed4

0800bf10 <chFactoryReleaseMailbox.isra.0>:
ucnt_t chFactoryReleaseMailbox(dyn_mailbox_t *dmp) {
 800bf10:	b510      	push	{r4, lr}
 800bf12:	2330      	movs	r3, #48	; 0x30
 800bf14:	4604      	mov	r4, r0
 800bf16:	f383 8811 	msr	BASEPRI, r3
 800bf1a:	480f      	ldr	r0, [pc, #60]	; (800bf58 <chFactoryReleaseMailbox.isra.0+0x48>)
 800bf1c:	f7f8 fe30 	bl	8004b80 <chMtxLockS>
 800bf20:	2300      	movs	r3, #0
 800bf22:	f383 8811 	msr	BASEPRI, r3
  refs = --dep->refs;
 800bf26:	6863      	ldr	r3, [r4, #4]
 800bf28:	3b01      	subs	r3, #1
 800bf2a:	6063      	str	r3, [r4, #4]
  if (refs == (ucnt_t)0) {
 800bf2c:	b95b      	cbnz	r3, 800bf46 <chFactoryReleaseMailbox.isra.0+0x36>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 800bf2e:	4b0b      	ldr	r3, [pc, #44]	; (800bf5c <chFactoryReleaseMailbox.isra.0+0x4c>)
 800bf30:	4618      	mov	r0, r3
 800bf32:	e001      	b.n	800bf38 <chFactoryReleaseMailbox.isra.0+0x28>
    if (prev->next == element) {
 800bf34:	4284      	cmp	r4, r0
 800bf36:	d00b      	beq.n	800bf50 <chFactoryReleaseMailbox.isra.0+0x40>
 800bf38:	4602      	mov	r2, r0
  while (prev->next != (dyn_element_t *)dlp) {
 800bf3a:	6800      	ldr	r0, [r0, #0]
 800bf3c:	4298      	cmp	r0, r3
 800bf3e:	d1f9      	bne.n	800bf34 <chFactoryReleaseMailbox.isra.0+0x24>
  return NULL;
 800bf40:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 800bf42:	f7f9 fcfd 	bl	8005940 <chHeapFree>
}
 800bf46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  FACTORY_UNLOCK();
 800bf4a:	4803      	ldr	r0, [pc, #12]	; (800bf58 <chFactoryReleaseMailbox.isra.0+0x48>)
 800bf4c:	f7f8 beb0 	b.w	8004cb0 <chMtxUnlock>
      prev->next = element->next;
 800bf50:	6803      	ldr	r3, [r0, #0]
 800bf52:	6013      	str	r3, [r2, #0]
      return element;
 800bf54:	e7f5      	b.n	800bf42 <chFactoryReleaseMailbox.isra.0+0x32>
 800bf56:	bf00      	nop
 800bf58:	20001e90 	.word	0x20001e90
 800bf5c:	20001ecc 	.word	0x20001ecc

0800bf60 <chFactoryReleaseBuffer.isra.0>:
ucnt_t chFactoryReleaseBuffer(dyn_buffer_t *dbp) {
 800bf60:	b510      	push	{r4, lr}
 800bf62:	2330      	movs	r3, #48	; 0x30
 800bf64:	4604      	mov	r4, r0
 800bf66:	f383 8811 	msr	BASEPRI, r3
 800bf6a:	480f      	ldr	r0, [pc, #60]	; (800bfa8 <chFactoryReleaseBuffer.isra.0+0x48>)
 800bf6c:	f7f8 fe08 	bl	8004b80 <chMtxLockS>
 800bf70:	2300      	movs	r3, #0
 800bf72:	f383 8811 	msr	BASEPRI, r3
  refs = --dep->refs;
 800bf76:	6863      	ldr	r3, [r4, #4]
 800bf78:	3b01      	subs	r3, #1
 800bf7a:	6063      	str	r3, [r4, #4]
  if (refs == (ucnt_t)0) {
 800bf7c:	b95b      	cbnz	r3, 800bf96 <chFactoryReleaseBuffer.isra.0+0x36>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 800bf7e:	4b0b      	ldr	r3, [pc, #44]	; (800bfac <chFactoryReleaseBuffer.isra.0+0x4c>)
 800bf80:	4618      	mov	r0, r3
 800bf82:	e001      	b.n	800bf88 <chFactoryReleaseBuffer.isra.0+0x28>
    if (prev->next == element) {
 800bf84:	4284      	cmp	r4, r0
 800bf86:	d00b      	beq.n	800bfa0 <chFactoryReleaseBuffer.isra.0+0x40>
 800bf88:	4602      	mov	r2, r0
  while (prev->next != (dyn_element_t *)dlp) {
 800bf8a:	6800      	ldr	r0, [r0, #0]
 800bf8c:	4298      	cmp	r0, r3
 800bf8e:	d1f9      	bne.n	800bf84 <chFactoryReleaseBuffer.isra.0+0x24>
  return NULL;
 800bf90:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 800bf92:	f7f9 fcd5 	bl	8005940 <chHeapFree>
}
 800bf96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  FACTORY_UNLOCK();
 800bf9a:	4803      	ldr	r0, [pc, #12]	; (800bfa8 <chFactoryReleaseBuffer.isra.0+0x48>)
 800bf9c:	f7f8 be88 	b.w	8004cb0 <chMtxUnlock>
      prev->next = element->next;
 800bfa0:	6803      	ldr	r3, [r0, #0]
 800bfa2:	6013      	str	r3, [r2, #0]
      return element;
 800bfa4:	e7f5      	b.n	800bf92 <chFactoryReleaseBuffer.isra.0+0x32>
 800bfa6:	bf00      	nop
 800bfa8:	20001e90 	.word	0x20001e90
 800bfac:	20001eb4 	.word	0x20001eb4

0800bfb0 <oslib_test_008_001_execute.lto_priv.0>:
  size_t n, sz;

  /* [8.1.1] Testing initial conditions, the heap must not be
     fragmented and one free block present, finally, integrity is
     checked.*/
  test_set_step(1);
 800bfb0:	2201      	movs	r2, #1
static void oslib_test_008_001_execute(void) {
 800bfb2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 800bfb6:	4fcc      	ldr	r7, [pc, #816]	; (800c2e8 <oslib_test_008_001_execute.lto_priv.0+0x338>)
 800bfb8:	2330      	movs	r3, #48	; 0x30
static void oslib_test_008_001_execute(void) {
 800bfba:	b083      	sub	sp, #12
  test_set_step(1);
 800bfbc:	603a      	str	r2, [r7, #0]
 800bfbe:	f383 8811 	msr	BASEPRI, r3
 800bfc2:	f8df 8328 	ldr.w	r8, [pc, #808]	; 800c2ec <oslib_test_008_001_execute.lto_priv.0+0x33c>
 800bfc6:	2500      	movs	r5, #0
 800bfc8:	f108 0014 	add.w	r0, r8, #20
 800bfcc:	f7f8 fdd8 	bl	8004b80 <chMtxLockS>
 800bfd0:	f385 8811 	msr	BASEPRI, r5
  while (H_FREE_NEXT(qp) != NULL) {
 800bfd4:	f8d8 400c 	ldr.w	r4, [r8, #12]
 800bfd8:	2c00      	cmp	r4, #0
 800bfda:	f000 81df 	beq.w	800c39c <oslib_test_008_001_execute.lto_priv.0+0x3ec>
  n = 0U;
 800bfde:	462e      	mov	r6, r5
    tpages += pages;
 800bfe0:	6863      	ldr	r3, [r4, #4]
  while (H_FREE_NEXT(qp) != NULL) {
 800bfe2:	6824      	ldr	r4, [r4, #0]
    n++;
 800bfe4:	3601      	adds	r6, #1
    tpages += pages;
 800bfe6:	441d      	add	r5, r3
  while (H_FREE_NEXT(qp) != NULL) {
 800bfe8:	2c00      	cmp	r4, #0
 800bfea:	d1f9      	bne.n	800bfe0 <oslib_test_008_001_execute.lto_priv.0+0x30>
  H_UNLOCK(heapp);
 800bfec:	48c0      	ldr	r0, [pc, #768]	; (800c2f0 <oslib_test_008_001_execute.lto_priv.0+0x340>)
 800bfee:	f7f8 fe5f 	bl	8004cb0 <chMtxUnlock>
  if (!condition) {
 800bff2:	2e01      	cmp	r6, #1
 800bff4:	f040 81d6 	bne.w	800c3a4 <oslib_test_008_001_execute.lto_priv.0+0x3f4>
  {
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
    test_assert(!chHeapIntegrityCheck(&test_heap), "integrity failure");
 800bff8:	f7fe f972 	bl	800a2e0 <chHeapIntegrityCheck.constprop.0>
 800bffc:	2800      	cmp	r0, #0
 800bffe:	f040 81c5 	bne.w	800c38c <oslib_test_008_001_execute.lto_priv.0+0x3dc>
  }
  test_end_step(1);

  /* [8.1.2] Trying to allocate an block bigger than available space,
     an error is expected, finally, integrity is checked.*/
  test_set_step(2);
 800c002:	2302      	movs	r3, #2
 *
 * @api
 */
static inline void *chHeapAlloc(memory_heap_t *heapp, size_t size) {

  return chHeapAllocAligned(heapp, size, CH_HEAP_ALIGNMENT);
 800c004:	2208      	movs	r2, #8
 800c006:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c00a:	48b8      	ldr	r0, [pc, #736]	; (800c2ec <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 800c00c:	603b      	str	r3, [r7, #0]
 800c00e:	f7f9 fbf7 	bl	8005800 <chHeapAllocAligned>
 800c012:	2800      	cmp	r0, #0
 800c014:	f040 81ce 	bne.w	800c3b4 <oslib_test_008_001_execute.lto_priv.0+0x404>
  {
    p1 = chHeapAlloc(&test_heap, sizeof test_heap_buffer * 2);
    test_assert(p1 == NULL, "allocation not failed");
    test_assert(!chHeapIntegrityCheck(&test_heap), "integrity failure");
 800c018:	f7fe f962 	bl	800a2e0 <chHeapIntegrityCheck.constprop.0>
 800c01c:	2800      	cmp	r0, #0
 800c01e:	f040 81b5 	bne.w	800c38c <oslib_test_008_001_execute.lto_priv.0+0x3dc>
  test_end_step(2);

  /* [8.1.3] Single block allocation using chHeapAlloc() then the block
     is freed using chHeapFree(), must not fail, finally, integrity is
     checked.*/
  test_set_step(3);
 800c022:	2303      	movs	r3, #3
 800c024:	2208      	movs	r2, #8
 800c026:	2110      	movs	r1, #16
 800c028:	48b0      	ldr	r0, [pc, #704]	; (800c2ec <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 800c02a:	603b      	str	r3, [r7, #0]
 800c02c:	f7f9 fbe8 	bl	8005800 <chHeapAllocAligned>
 800c030:	2800      	cmp	r0, #0
 800c032:	f000 81c5 	beq.w	800c3c0 <oslib_test_008_001_execute.lto_priv.0+0x410>
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    test_assert(p1 != NULL, "allocation failed");
    chHeapFree(p1);
 800c036:	f7f9 fc83 	bl	8005940 <chHeapFree>
    test_assert(!chHeapIntegrityCheck(&test_heap), "integrity failure");
 800c03a:	f7fe f951 	bl	800a2e0 <chHeapIntegrityCheck.constprop.0>
 800c03e:	2800      	cmp	r0, #0
 800c040:	f040 81a4 	bne.w	800c38c <oslib_test_008_001_execute.lto_priv.0+0x3dc>
  test_end_step(3);

  /* [8.1.4] Using chHeapStatus() to assess the heap state. There must
     be at least one free block of sufficient size, finally, integrity
     is checked.*/
  test_set_step(4);
 800c044:	2204      	movs	r2, #4
 800c046:	2330      	movs	r3, #48	; 0x30
 800c048:	603a      	str	r2, [r7, #0]
 800c04a:	f383 8811 	msr	BASEPRI, r3
 800c04e:	48a8      	ldr	r0, [pc, #672]	; (800c2f0 <oslib_test_008_001_execute.lto_priv.0+0x340>)
 800c050:	f7f8 fd96 	bl	8004b80 <chMtxLockS>
 800c054:	f384 8811 	msr	BASEPRI, r4
  while (H_FREE_NEXT(qp) != NULL) {
 800c058:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800c05c:	2e00      	cmp	r6, #0
 800c05e:	f000 81b5 	beq.w	800c3cc <oslib_test_008_001_execute.lto_priv.0+0x41c>
  tpages = 0U;
 800c062:	4622      	mov	r2, r4
  n = 0U;
 800c064:	46a1      	mov	r9, r4
    size_t pages = H_FREE_PAGES(H_FREE_NEXT(qp));
 800c066:	6873      	ldr	r3, [r6, #4]
  while (H_FREE_NEXT(qp) != NULL) {
 800c068:	6836      	ldr	r6, [r6, #0]
 800c06a:	429c      	cmp	r4, r3
 800c06c:	bf38      	it	cc
 800c06e:	461c      	movcc	r4, r3
    n++;
 800c070:	f109 0901 	add.w	r9, r9, #1
    tpages += pages;
 800c074:	441a      	add	r2, r3
  while (H_FREE_NEXT(qp) != NULL) {
 800c076:	2e00      	cmp	r6, #0
 800c078:	d1f5      	bne.n	800c066 <oslib_test_008_001_execute.lto_priv.0+0xb6>
  H_UNLOCK(heapp);
 800c07a:	489d      	ldr	r0, [pc, #628]	; (800c2f0 <oslib_test_008_001_execute.lto_priv.0+0x340>)
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 800c07c:	ea4f 08c2 	mov.w	r8, r2, lsl #3
  H_UNLOCK(heapp);
 800c080:	f7f8 fe16 	bl	8004cb0 <chMtxUnlock>
 800c084:	f1b9 0f01 	cmp.w	r9, #1
  {
    size_t total_size, largest_size;

    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 800c088:	f8cd 9004 	str.w	r9, [sp, #4]
 800c08c:	f040 81a1 	bne.w	800c3d2 <oslib_test_008_001_execute.lto_priv.0+0x422>
 800c090:	f1b8 0f0f 	cmp.w	r8, #15
 800c094:	f240 81a3 	bls.w	800c3de <oslib_test_008_001_execute.lto_priv.0+0x42e>
 800c098:	ebb8 0fc4 	cmp.w	r8, r4, lsl #3
 800c09c:	f040 819f 	bne.w	800c3de <oslib_test_008_001_execute.lto_priv.0+0x42e>
    test_assert(n == 1, "missing free block");
    test_assert(total_size >= ALLOC_SIZE, "unexpected heap state");
    test_assert(total_size == largest_size, "unexpected heap state");
    test_assert(!chHeapIntegrityCheck(&test_heap), "integrity failure");
 800c0a0:	f7fe f91e 	bl	800a2e0 <chHeapIntegrityCheck.constprop.0>
 800c0a4:	2800      	cmp	r0, #0
 800c0a6:	f040 8171 	bne.w	800c38c <oslib_test_008_001_execute.lto_priv.0+0x3dc>
  }
  test_end_step(4);

  /* [8.1.5] Allocating then freeing in the same order, finally,
     integrity is checked.*/
  test_set_step(5);
 800c0aa:	2305      	movs	r3, #5
 800c0ac:	2208      	movs	r2, #8
 800c0ae:	2110      	movs	r1, #16
 800c0b0:	488e      	ldr	r0, [pc, #568]	; (800c2ec <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 800c0b2:	603b      	str	r3, [r7, #0]
 800c0b4:	f7f9 fba4 	bl	8005800 <chHeapAllocAligned>
 800c0b8:	2208      	movs	r2, #8
 800c0ba:	4681      	mov	r9, r0
 800c0bc:	2110      	movs	r1, #16
 800c0be:	488b      	ldr	r0, [pc, #556]	; (800c2ec <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 800c0c0:	f7f9 fb9e 	bl	8005800 <chHeapAllocAligned>
 800c0c4:	2208      	movs	r2, #8
 800c0c6:	2110      	movs	r1, #16
 800c0c8:	4680      	mov	r8, r0
 800c0ca:	4888      	ldr	r0, [pc, #544]	; (800c2ec <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 800c0cc:	f7f9 fb98 	bl	8005800 <chHeapAllocAligned>
 800c0d0:	4604      	mov	r4, r0
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    p2 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    p3 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    chHeapFree(p1);                                 /* Does not merge.*/
 800c0d2:	4648      	mov	r0, r9
 800c0d4:	f7f9 fc34 	bl	8005940 <chHeapFree>
    chHeapFree(p2);                                 /* Merges backward.*/
 800c0d8:	4640      	mov	r0, r8
 800c0da:	f7f9 fc31 	bl	8005940 <chHeapFree>
    chHeapFree(p3);                                 /* Merges both sides.*/
 800c0de:	4620      	mov	r0, r4
 800c0e0:	f7f9 fc2e 	bl	8005940 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 800c0e4:	a901      	add	r1, sp, #4
 800c0e6:	4632      	mov	r2, r6
 800c0e8:	4880      	ldr	r0, [pc, #512]	; (800c2ec <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 800c0ea:	f7f9 feb1 	bl	8005e50 <chHeapStatus>
 800c0ee:	f1a0 0001 	sub.w	r0, r0, #1
 800c0f2:	fab0 f080 	clz	r0, r0
 800c0f6:	497f      	ldr	r1, [pc, #508]	; (800c2f4 <oslib_test_008_001_execute.lto_priv.0+0x344>)
 800c0f8:	0940      	lsrs	r0, r0, #5
 800c0fa:	f7fa fea9 	bl	8006e50 <__test_assert>
 800c0fe:	2800      	cmp	r0, #0
 800c100:	f040 8149 	bne.w	800c396 <oslib_test_008_001_execute.lto_priv.0+0x3e6>
    test_assert(!chHeapIntegrityCheck(&test_heap), "integrity failure");
 800c104:	f7fe f8ec 	bl	800a2e0 <chHeapIntegrityCheck.constprop.0>
 800c108:	f080 0001 	eor.w	r0, r0, #1
 800c10c:	497a      	ldr	r1, [pc, #488]	; (800c2f8 <oslib_test_008_001_execute.lto_priv.0+0x348>)
 800c10e:	b2c0      	uxtb	r0, r0
 800c110:	f7fa fe9e 	bl	8006e50 <__test_assert>
 800c114:	2800      	cmp	r0, #0
 800c116:	f040 813e 	bne.w	800c396 <oslib_test_008_001_execute.lto_priv.0+0x3e6>
  }
  test_end_step(5);

  /* [8.1.6] Allocating then freeing in reverse order, finally,
     integrity is checked.*/
  test_set_step(6);
 800c11a:	2306      	movs	r3, #6
 800c11c:	2208      	movs	r2, #8
 800c11e:	2110      	movs	r1, #16
 800c120:	4872      	ldr	r0, [pc, #456]	; (800c2ec <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 800c122:	603b      	str	r3, [r7, #0]
 800c124:	f7f9 fb6c 	bl	8005800 <chHeapAllocAligned>
 800c128:	2208      	movs	r2, #8
 800c12a:	4604      	mov	r4, r0
 800c12c:	2110      	movs	r1, #16
 800c12e:	486f      	ldr	r0, [pc, #444]	; (800c2ec <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 800c130:	f7f9 fb66 	bl	8005800 <chHeapAllocAligned>
 800c134:	4680      	mov	r8, r0
 800c136:	2208      	movs	r2, #8
 800c138:	2110      	movs	r1, #16
 800c13a:	486c      	ldr	r0, [pc, #432]	; (800c2ec <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 800c13c:	f7f9 fb60 	bl	8005800 <chHeapAllocAligned>
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    p2 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    p3 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    chHeapFree(p3);                                 /* Merges forward.*/
 800c140:	f7f9 fbfe 	bl	8005940 <chHeapFree>
    chHeapFree(p2);                                 /* Merges forward.*/
 800c144:	4640      	mov	r0, r8
 800c146:	f7f9 fbfb 	bl	8005940 <chHeapFree>
    chHeapFree(p1);                                 /* Merges forward.*/
 800c14a:	4620      	mov	r0, r4
 800c14c:	f7f9 fbf8 	bl	8005940 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 800c150:	a901      	add	r1, sp, #4
 800c152:	4632      	mov	r2, r6
 800c154:	4865      	ldr	r0, [pc, #404]	; (800c2ec <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 800c156:	f7f9 fe7b 	bl	8005e50 <chHeapStatus>
 800c15a:	f100 39ff 	add.w	r9, r0, #4294967295	; 0xffffffff
 800c15e:	f1d9 0000 	rsbs	r0, r9, #0
 800c162:	eb40 0009 	adc.w	r0, r0, r9
 800c166:	4963      	ldr	r1, [pc, #396]	; (800c2f4 <oslib_test_008_001_execute.lto_priv.0+0x344>)
 800c168:	f7fa fe72 	bl	8006e50 <__test_assert>
 800c16c:	2800      	cmp	r0, #0
 800c16e:	f040 8112 	bne.w	800c396 <oslib_test_008_001_execute.lto_priv.0+0x3e6>
    test_assert(!chHeapIntegrityCheck(&test_heap), "integrity failure");
 800c172:	f7fe f8b5 	bl	800a2e0 <chHeapIntegrityCheck.constprop.0>
 800c176:	f080 0001 	eor.w	r0, r0, #1
 800c17a:	495f      	ldr	r1, [pc, #380]	; (800c2f8 <oslib_test_008_001_execute.lto_priv.0+0x348>)
 800c17c:	b2c0      	uxtb	r0, r0
 800c17e:	f7fa fe67 	bl	8006e50 <__test_assert>
 800c182:	2800      	cmp	r0, #0
 800c184:	f040 8107 	bne.w	800c396 <oslib_test_008_001_execute.lto_priv.0+0x3e6>
  test_end_step(6);

  /* [8.1.7] Small fragments handling. Checking the behavior when
     allocating blocks with size not multiple of alignment unit,
     finally, integrity is checked.*/
  test_set_step(7);
 800c188:	2307      	movs	r3, #7
 800c18a:	2208      	movs	r2, #8
 800c18c:	2111      	movs	r1, #17
 800c18e:	4857      	ldr	r0, [pc, #348]	; (800c2ec <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 800c190:	603b      	str	r3, [r7, #0]
 800c192:	f7f9 fb35 	bl	8005800 <chHeapAllocAligned>
 800c196:	2208      	movs	r2, #8
 800c198:	4680      	mov	r8, r0
 800c19a:	2110      	movs	r1, #16
 800c19c:	4853      	ldr	r0, [pc, #332]	; (800c2ec <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 800c19e:	f7f9 fb2f 	bl	8005800 <chHeapAllocAligned>
 800c1a2:	4604      	mov	r4, r0
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE + 1);
    p2 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    chHeapFree(p1);
 800c1a4:	4640      	mov	r0, r8
 800c1a6:	f7f9 fbcb 	bl	8005940 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 800c1aa:	a901      	add	r1, sp, #4
 800c1ac:	4632      	mov	r2, r6
 800c1ae:	484f      	ldr	r0, [pc, #316]	; (800c2ec <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 800c1b0:	f7f9 fe4e 	bl	8005e50 <chHeapStatus>
 800c1b4:	f1a0 0802 	sub.w	r8, r0, #2
 800c1b8:	f1d8 0000 	rsbs	r0, r8, #0
 800c1bc:	eb40 0008 	adc.w	r0, r0, r8
 800c1c0:	494e      	ldr	r1, [pc, #312]	; (800c2fc <oslib_test_008_001_execute.lto_priv.0+0x34c>)
 800c1c2:	f7fa fe45 	bl	8006e50 <__test_assert>
 800c1c6:	2800      	cmp	r0, #0
 800c1c8:	f040 80e5 	bne.w	800c396 <oslib_test_008_001_execute.lto_priv.0+0x3e6>
 800c1cc:	2208      	movs	r2, #8
 800c1ce:	2110      	movs	r1, #16
 800c1d0:	4846      	ldr	r0, [pc, #280]	; (800c2ec <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 800c1d2:	f7f9 fb15 	bl	8005800 <chHeapAllocAligned>
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    /* Note, the first situation happens when the alignment size is smaller
       than the header size, the second in the other cases.*/
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	4606      	mov	r6, r0
 800c1da:	a901      	add	r1, sp, #4
 800c1dc:	4843      	ldr	r0, [pc, #268]	; (800c2ec <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 800c1de:	f7f9 fe37 	bl	8005e50 <chHeapStatus>
 800c1e2:	2801      	cmp	r0, #1
 800c1e4:	d00a      	beq.n	800c1fc <oslib_test_008_001_execute.lto_priv.0+0x24c>
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	4840      	ldr	r0, [pc, #256]	; (800c2ec <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 800c1ea:	a901      	add	r1, sp, #4
 800c1ec:	f7f9 fe30 	bl	8005e50 <chHeapStatus>
 800c1f0:	f1a0 0e02 	sub.w	lr, r0, #2
 800c1f4:	f1de 0000 	rsbs	r0, lr, #0
 800c1f8:	eb40 000e 	adc.w	r0, r0, lr
 800c1fc:	493d      	ldr	r1, [pc, #244]	; (800c2f4 <oslib_test_008_001_execute.lto_priv.0+0x344>)
 800c1fe:	f7fa fe27 	bl	8006e50 <__test_assert>
 800c202:	4680      	mov	r8, r0
 800c204:	2800      	cmp	r0, #0
 800c206:	f040 80c6 	bne.w	800c396 <oslib_test_008_001_execute.lto_priv.0+0x3e6>
                (chHeapStatus(&test_heap, &n, NULL) == 2), "heap fragmented");
    chHeapFree(p2);
 800c20a:	4620      	mov	r0, r4
 800c20c:	f7f9 fb98 	bl	8005940 <chHeapFree>
    chHeapFree(p1);
 800c210:	4630      	mov	r0, r6
 800c212:	f7f9 fb95 	bl	8005940 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 800c216:	a901      	add	r1, sp, #4
 800c218:	4642      	mov	r2, r8
 800c21a:	4834      	ldr	r0, [pc, #208]	; (800c2ec <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 800c21c:	f7f9 fe18 	bl	8005e50 <chHeapStatus>
 800c220:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800c224:	f1dc 0000 	rsbs	r0, ip, #0
 800c228:	eb40 000c 	adc.w	r0, r0, ip
 800c22c:	4931      	ldr	r1, [pc, #196]	; (800c2f4 <oslib_test_008_001_execute.lto_priv.0+0x344>)
 800c22e:	f7fa fe0f 	bl	8006e50 <__test_assert>
 800c232:	2800      	cmp	r0, #0
 800c234:	f040 80af 	bne.w	800c396 <oslib_test_008_001_execute.lto_priv.0+0x3e6>
    test_assert(!chHeapIntegrityCheck(&test_heap), "integrity failure");
 800c238:	f7fe f852 	bl	800a2e0 <chHeapIntegrityCheck.constprop.0>
 800c23c:	f080 0001 	eor.w	r0, r0, #1
 800c240:	492d      	ldr	r1, [pc, #180]	; (800c2f8 <oslib_test_008_001_execute.lto_priv.0+0x348>)
 800c242:	b2c0      	uxtb	r0, r0
 800c244:	f7fa fe04 	bl	8006e50 <__test_assert>
 800c248:	4606      	mov	r6, r0
 800c24a:	2800      	cmp	r0, #0
 800c24c:	f040 80a3 	bne.w	800c396 <oslib_test_008_001_execute.lto_priv.0+0x3e6>
  test_end_step(7);

  /* [8.1.8] Skipping a fragment, the first fragment in the list is too
     small so the allocator must pick the second one, finally,
     integrity is checked.*/
  test_set_step(8);
 800c250:	2408      	movs	r4, #8
 800c252:	2110      	movs	r1, #16
 800c254:	4622      	mov	r2, r4
 800c256:	4825      	ldr	r0, [pc, #148]	; (800c2ec <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 800c258:	603c      	str	r4, [r7, #0]
 800c25a:	f7f9 fad1 	bl	8005800 <chHeapAllocAligned>
 800c25e:	4622      	mov	r2, r4
 800c260:	2110      	movs	r1, #16
 800c262:	4681      	mov	r9, r0
 800c264:	4821      	ldr	r0, [pc, #132]	; (800c2ec <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 800c266:	f7f9 facb 	bl	8005800 <chHeapAllocAligned>
 800c26a:	4680      	mov	r8, r0
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    p2 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    chHeapFree(p1);
 800c26c:	4648      	mov	r0, r9
 800c26e:	f7f9 fb67 	bl	8005940 <chHeapFree>
    test_assert( chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 800c272:	4632      	mov	r2, r6
 800c274:	a901      	add	r1, sp, #4
 800c276:	481d      	ldr	r0, [pc, #116]	; (800c2ec <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 800c278:	f7f9 fdea 	bl	8005e50 <chHeapStatus>
 800c27c:	1e86      	subs	r6, r0, #2
 800c27e:	4270      	negs	r0, r6
 800c280:	4170      	adcs	r0, r6
 800c282:	491e      	ldr	r1, [pc, #120]	; (800c2fc <oslib_test_008_001_execute.lto_priv.0+0x34c>)
 800c284:	f7fa fde4 	bl	8006e50 <__test_assert>
 800c288:	4606      	mov	r6, r0
 800c28a:	2800      	cmp	r0, #0
 800c28c:	f040 8083 	bne.w	800c396 <oslib_test_008_001_execute.lto_priv.0+0x3e6>
 800c290:	4622      	mov	r2, r4
 800c292:	2120      	movs	r1, #32
 800c294:	4815      	ldr	r0, [pc, #84]	; (800c2ec <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 800c296:	f7f9 fab3 	bl	8005800 <chHeapAllocAligned>
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE * 2); /* Skips first fragment.*/
    chHeapFree(p1);
 800c29a:	f7f9 fb51 	bl	8005940 <chHeapFree>
    chHeapFree(p2);
 800c29e:	4640      	mov	r0, r8
 800c2a0:	f7f9 fb4e 	bl	8005940 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 800c2a4:	4632      	mov	r2, r6
 800c2a6:	a901      	add	r1, sp, #4
 800c2a8:	4810      	ldr	r0, [pc, #64]	; (800c2ec <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 800c2aa:	f7f9 fdd1 	bl	8005e50 <chHeapStatus>
 800c2ae:	1e42      	subs	r2, r0, #1
 800c2b0:	4250      	negs	r0, r2
 800c2b2:	4150      	adcs	r0, r2
 800c2b4:	490f      	ldr	r1, [pc, #60]	; (800c2f4 <oslib_test_008_001_execute.lto_priv.0+0x344>)
 800c2b6:	f7fa fdcb 	bl	8006e50 <__test_assert>
 800c2ba:	2800      	cmp	r0, #0
 800c2bc:	d16b      	bne.n	800c396 <oslib_test_008_001_execute.lto_priv.0+0x3e6>
    test_assert(!chHeapIntegrityCheck(&test_heap), "integrity failure");
 800c2be:	f7fe f80f 	bl	800a2e0 <chHeapIntegrityCheck.constprop.0>
 800c2c2:	f080 0001 	eor.w	r0, r0, #1
 800c2c6:	490c      	ldr	r1, [pc, #48]	; (800c2f8 <oslib_test_008_001_execute.lto_priv.0+0x348>)
 800c2c8:	b2c0      	uxtb	r0, r0
 800c2ca:	f7fa fdc1 	bl	8006e50 <__test_assert>
 800c2ce:	4602      	mov	r2, r0
 800c2d0:	2800      	cmp	r0, #0
 800c2d2:	d160      	bne.n	800c396 <oslib_test_008_001_execute.lto_priv.0+0x3e6>
  }
  test_end_step(8);

  /* [8.1.9] Allocating the whole available space, finally, integrity
     is checked.*/
  test_set_step(9);
 800c2d4:	2309      	movs	r3, #9
  {
    (void)chHeapStatus(&test_heap, &n, NULL);
 800c2d6:	a901      	add	r1, sp, #4
 800c2d8:	4804      	ldr	r0, [pc, #16]	; (800c2ec <oslib_test_008_001_execute.lto_priv.0+0x33c>)
  test_set_step(9);
 800c2da:	603b      	str	r3, [r7, #0]
    (void)chHeapStatus(&test_heap, &n, NULL);
 800c2dc:	f7f9 fdb8 	bl	8005e50 <chHeapStatus>
 800c2e0:	4622      	mov	r2, r4
 800c2e2:	9901      	ldr	r1, [sp, #4]
 800c2e4:	e00c      	b.n	800c300 <oslib_test_008_001_execute.lto_priv.0+0x350>
 800c2e6:	bf00      	nop
 800c2e8:	200010f4 	.word	0x200010f4
 800c2ec:	200025e4 	.word	0x200025e4
 800c2f0:	200025f8 	.word	0x200025f8
 800c2f4:	080106d4 	.word	0x080106d4
 800c2f8:	08012df8 	.word	0x08012df8
 800c2fc:	08012e64 	.word	0x08012e64
 800c300:	483a      	ldr	r0, [pc, #232]	; (800c3ec <oslib_test_008_001_execute.lto_priv.0+0x43c>)
 800c302:	f7f9 fa7d 	bl	8005800 <chHeapAllocAligned>
    p1 = chHeapAlloc(&test_heap, n);
    test_assert(p1 != NULL, "allocation failed");
 800c306:	4604      	mov	r4, r0
 800c308:	3800      	subs	r0, #0
 800c30a:	bf18      	it	ne
 800c30c:	2001      	movne	r0, #1
 800c30e:	4938      	ldr	r1, [pc, #224]	; (800c3f0 <oslib_test_008_001_execute.lto_priv.0+0x440>)
 800c310:	f7fa fd9e 	bl	8006e50 <__test_assert>
 800c314:	4602      	mov	r2, r0
 800c316:	2800      	cmp	r0, #0
 800c318:	d13d      	bne.n	800c396 <oslib_test_008_001_execute.lto_priv.0+0x3e6>
    test_assert(chHeapStatus(&test_heap, NULL, NULL) == 0, "not empty");
 800c31a:	4601      	mov	r1, r0
 800c31c:	4833      	ldr	r0, [pc, #204]	; (800c3ec <oslib_test_008_001_execute.lto_priv.0+0x43c>)
 800c31e:	f7f9 fd97 	bl	8005e50 <chHeapStatus>
 800c322:	fab0 f080 	clz	r0, r0
 800c326:	4933      	ldr	r1, [pc, #204]	; (800c3f4 <oslib_test_008_001_execute.lto_priv.0+0x444>)
 800c328:	0940      	lsrs	r0, r0, #5
 800c32a:	f7fa fd91 	bl	8006e50 <__test_assert>
 800c32e:	2800      	cmp	r0, #0
 800c330:	d131      	bne.n	800c396 <oslib_test_008_001_execute.lto_priv.0+0x3e6>
    chHeapFree(p1);
 800c332:	4620      	mov	r0, r4
 800c334:	f7f9 fb04 	bl	8005940 <chHeapFree>
    test_assert(!chHeapIntegrityCheck(&test_heap), "integrity failure");
 800c338:	f7fd ffd2 	bl	800a2e0 <chHeapIntegrityCheck.constprop.0>
 800c33c:	f080 0001 	eor.w	r0, r0, #1
 800c340:	492d      	ldr	r1, [pc, #180]	; (800c3f8 <oslib_test_008_001_execute.lto_priv.0+0x448>)
 800c342:	b2c0      	uxtb	r0, r0
 800c344:	f7fa fd84 	bl	8006e50 <__test_assert>
 800c348:	4602      	mov	r2, r0
 800c34a:	bb20      	cbnz	r0, 800c396 <oslib_test_008_001_execute.lto_priv.0+0x3e6>
  test_end_step(9);

  /* [8.1.10] Testing final conditions. The heap geometry must be the
     same than the one registered at beginning, finally, integrity is
     checked.*/
  test_set_step(10);
 800c34c:	230a      	movs	r3, #10
  {
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 800c34e:	a901      	add	r1, sp, #4
 800c350:	4826      	ldr	r0, [pc, #152]	; (800c3ec <oslib_test_008_001_execute.lto_priv.0+0x43c>)
  test_set_step(10);
 800c352:	603b      	str	r3, [r7, #0]
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 800c354:	f7f9 fd7c 	bl	8005e50 <chHeapStatus>
 800c358:	1e43      	subs	r3, r0, #1
 800c35a:	4258      	negs	r0, r3
 800c35c:	4158      	adcs	r0, r3
 800c35e:	4927      	ldr	r1, [pc, #156]	; (800c3fc <oslib_test_008_001_execute.lto_priv.0+0x44c>)
 800c360:	f7fa fd76 	bl	8006e50 <__test_assert>
 800c364:	b9b8      	cbnz	r0, 800c396 <oslib_test_008_001_execute.lto_priv.0+0x3e6>
    test_assert(n == sz, "size changed");
 800c366:	9b01      	ldr	r3, [sp, #4]
 800c368:	4925      	ldr	r1, [pc, #148]	; (800c400 <oslib_test_008_001_execute.lto_priv.0+0x450>)
 800c36a:	ebb3 0fc5 	cmp.w	r3, r5, lsl #3
 800c36e:	bf0c      	ite	eq
 800c370:	2001      	moveq	r0, #1
 800c372:	2000      	movne	r0, #0
 800c374:	f7fa fd6c 	bl	8006e50 <__test_assert>
 800c378:	b968      	cbnz	r0, 800c396 <oslib_test_008_001_execute.lto_priv.0+0x3e6>
    test_assert(!chHeapIntegrityCheck(&test_heap), "integrity failure");
 800c37a:	f7fd ffb1 	bl	800a2e0 <chHeapIntegrityCheck.constprop.0>
 800c37e:	f080 0001 	eor.w	r0, r0, #1
 800c382:	491d      	ldr	r1, [pc, #116]	; (800c3f8 <oslib_test_008_001_execute.lto_priv.0+0x448>)
 800c384:	b2c0      	uxtb	r0, r0
 800c386:	f7fa fd63 	bl	8006e50 <__test_assert>
 800c38a:	e004      	b.n	800c396 <oslib_test_008_001_execute.lto_priv.0+0x3e6>
  chtest.global_fail     = true;
 800c38c:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c390:	4a19      	ldr	r2, [pc, #100]	; (800c3f8 <oslib_test_008_001_execute.lto_priv.0+0x448>)
  chtest.global_fail     = true;
 800c392:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c394:	60ba      	str	r2, [r7, #8]
  }
  test_end_step(10);
}
 800c396:	b003      	add	sp, #12
 800c398:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c39c:	f108 0014 	add.w	r0, r8, #20
 800c3a0:	f7f8 fc86 	bl	8004cb0 <chMtxUnlock>
  chtest.global_fail     = true;
 800c3a4:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c3a8:	4a14      	ldr	r2, [pc, #80]	; (800c3fc <oslib_test_008_001_execute.lto_priv.0+0x44c>)
  chtest.global_fail     = true;
 800c3aa:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c3ac:	60ba      	str	r2, [r7, #8]
 800c3ae:	b003      	add	sp, #12
 800c3b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  chtest.global_fail     = true;
 800c3b4:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c3b8:	4a12      	ldr	r2, [pc, #72]	; (800c404 <oslib_test_008_001_execute.lto_priv.0+0x454>)
  chtest.global_fail     = true;
 800c3ba:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c3bc:	60ba      	str	r2, [r7, #8]
 800c3be:	e7ea      	b.n	800c396 <oslib_test_008_001_execute.lto_priv.0+0x3e6>
  chtest.global_fail     = true;
 800c3c0:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c3c4:	4a0a      	ldr	r2, [pc, #40]	; (800c3f0 <oslib_test_008_001_execute.lto_priv.0+0x440>)
  chtest.global_fail     = true;
 800c3c6:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c3c8:	60ba      	str	r2, [r7, #8]
 800c3ca:	e7e4      	b.n	800c396 <oslib_test_008_001_execute.lto_priv.0+0x3e6>
 800c3cc:	480e      	ldr	r0, [pc, #56]	; (800c408 <oslib_test_008_001_execute.lto_priv.0+0x458>)
 800c3ce:	f7f8 fc6f 	bl	8004cb0 <chMtxUnlock>
  chtest.global_fail     = true;
 800c3d2:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c3d6:	4a0d      	ldr	r2, [pc, #52]	; (800c40c <oslib_test_008_001_execute.lto_priv.0+0x45c>)
  chtest.global_fail     = true;
 800c3d8:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c3da:	60ba      	str	r2, [r7, #8]
 800c3dc:	e7db      	b.n	800c396 <oslib_test_008_001_execute.lto_priv.0+0x3e6>
  chtest.global_fail     = true;
 800c3de:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c3e2:	4a0b      	ldr	r2, [pc, #44]	; (800c410 <oslib_test_008_001_execute.lto_priv.0+0x460>)
  chtest.global_fail     = true;
 800c3e4:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c3e6:	60ba      	str	r2, [r7, #8]
 800c3e8:	e7d5      	b.n	800c396 <oslib_test_008_001_execute.lto_priv.0+0x3e6>
 800c3ea:	bf00      	nop
 800c3ec:	200025e4 	.word	0x200025e4
 800c3f0:	08012e24 	.word	0x08012e24
 800c3f4:	08012ce0 	.word	0x08012ce0
 800c3f8:	08012df8 	.word	0x08012df8
 800c3fc:	080106d4 	.word	0x080106d4
 800c400:	08012e74 	.word	0x08012e74
 800c404:	08012e0c 	.word	0x08012e0c
 800c408:	200025f8 	.word	0x200025f8
 800c40c:	08012e38 	.word	0x08012e38
 800c410:	08012e4c 	.word	0x08012e4c
	...

0800c420 <oslib_test_008_002_execute.lto_priv.0>:
  void *p1;
  size_t total_size, largest_size;

  /* [8.2.1] Single block allocation using chHeapAlloc() then the block
     is freed using chHeapFree(), must not fail.*/
  test_set_step(1);
 800c420:	2201      	movs	r2, #1
static void oslib_test_008_002_execute(void) {
 800c422:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 800c424:	4d17      	ldr	r5, [pc, #92]	; (800c484 <oslib_test_008_002_execute.lto_priv.0+0x64>)
 800c426:	2330      	movs	r3, #48	; 0x30
 800c428:	602a      	str	r2, [r5, #0]
 800c42a:	f383 8811 	msr	BASEPRI, r3
 800c42e:	4816      	ldr	r0, [pc, #88]	; (800c488 <oslib_test_008_002_execute.lto_priv.0+0x68>)
 800c430:	f7f8 fba6 	bl	8004b80 <chMtxLockS>
 800c434:	2300      	movs	r3, #0
 800c436:	f383 8811 	msr	BASEPRI, r3
  qp = &heapp->header;
 800c43a:	4c14      	ldr	r4, [pc, #80]	; (800c48c <oslib_test_008_002_execute.lto_priv.0+0x6c>)
  while (H_FREE_NEXT(qp) != NULL) {
 800c43c:	6824      	ldr	r4, [r4, #0]
 800c43e:	2c00      	cmp	r4, #0
 800c440:	d1fc      	bne.n	800c43c <oslib_test_008_002_execute.lto_priv.0+0x1c>
  H_UNLOCK(heapp);
 800c442:	4811      	ldr	r0, [pc, #68]	; (800c488 <oslib_test_008_002_execute.lto_priv.0+0x68>)
 800c444:	f7f8 fc34 	bl	8004cb0 <chMtxUnlock>
 800c448:	2208      	movs	r2, #8
 800c44a:	2110      	movs	r1, #16
 800c44c:	4810      	ldr	r0, [pc, #64]	; (800c490 <oslib_test_008_002_execute.lto_priv.0+0x70>)
 800c44e:	f7f9 f9d7 	bl	8005800 <chHeapAllocAligned>
  if (!condition) {
 800c452:	b158      	cbz	r0, 800c46c <oslib_test_008_002_execute.lto_priv.0+0x4c>
  {
    (void)chHeapStatus(NULL, &total_size, &largest_size);
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    test_assert(p1 != NULL, "allocation failed");
    chHeapFree(p1);
 800c454:	f7f9 fa74 	bl	8005940 <chHeapFree>
  }
  test_end_step(1);

  /* [8.2.2] Testing allocation failure.*/
  test_set_step(2);
 800c458:	2302      	movs	r3, #2
 800c45a:	2208      	movs	r2, #8
 800c45c:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 800c460:	4620      	mov	r0, r4
 800c462:	602b      	str	r3, [r5, #0]
 800c464:	f7f9 f9cc 	bl	8005800 <chHeapAllocAligned>
 800c468:	b930      	cbnz	r0, 800c478 <oslib_test_008_002_execute.lto_priv.0+0x58>
  {
    p1 = chHeapAlloc(NULL, (size_t)-256);
    test_assert(p1 == NULL, "allocation not failed");
  }
  test_end_step(2);
}
 800c46a:	bd38      	pop	{r3, r4, r5, pc}
  chtest.global_fail     = true;
 800c46c:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c470:	4a08      	ldr	r2, [pc, #32]	; (800c494 <oslib_test_008_002_execute.lto_priv.0+0x74>)
  chtest.global_fail     = true;
 800c472:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800c474:	60aa      	str	r2, [r5, #8]
 800c476:	bd38      	pop	{r3, r4, r5, pc}
  chtest.global_fail     = true;
 800c478:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c47c:	4a06      	ldr	r2, [pc, #24]	; (800c498 <oslib_test_008_002_execute.lto_priv.0+0x78>)
  chtest.global_fail     = true;
 800c47e:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800c480:	60aa      	str	r2, [r5, #8]
 800c482:	bd38      	pop	{r3, r4, r5, pc}
 800c484:	200010f4 	.word	0x200010f4
 800c488:	20001130 	.word	0x20001130
 800c48c:	20001128 	.word	0x20001128
 800c490:	200025e4 	.word	0x200025e4
 800c494:	08012e24 	.word	0x08012e24
 800c498:	08012e0c 	.word	0x08012e0c
 800c49c:	00000000 	.word	0x00000000

0800c4a0 <chFactoryCreateSemaphore.constprop.0>:
dyn_semaphore_t *chFactoryCreateSemaphore(const char *name, cnt_t n) {
 800c4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4a2:	2330      	movs	r3, #48	; 0x30
 800c4a4:	f383 8811 	msr	BASEPRI, r3
 800c4a8:	4f2a      	ldr	r7, [pc, #168]	; (800c554 <chFactoryCreateSemaphore.constprop.0+0xb4>)
 800c4aa:	4638      	mov	r0, r7
 800c4ac:	f7f8 fb68 	bl	8004b80 <chMtxLockS>
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800c4b6:	463d      	mov	r5, r7
 800c4b8:	f855 4f28 	ldr.w	r4, [r5, #40]!
  while (p != (dyn_element_t *)dlp) {
 800c4bc:	42ac      	cmp	r4, r5
 800c4be:	d012      	beq.n	800c4e6 <chFactoryCreateSemaphore.constprop.0+0x46>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c4c0:	4e25      	ldr	r6, [pc, #148]	; (800c558 <chFactoryCreateSemaphore.constprop.0+0xb8>)
 800c4c2:	e002      	b.n	800c4ca <chFactoryCreateSemaphore.constprop.0+0x2a>
    p = p->next;
 800c4c4:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800c4c6:	42ac      	cmp	r4, r5
 800c4c8:	d00d      	beq.n	800c4e6 <chFactoryCreateSemaphore.constprop.0+0x46>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c4ca:	4631      	mov	r1, r6
 800c4cc:	f104 0008 	add.w	r0, r4, #8
 800c4d0:	f7f4 f82e 	bl	8000530 <strcmp>
 800c4d4:	2800      	cmp	r0, #0
 800c4d6:	d1f5      	bne.n	800c4c4 <chFactoryCreateSemaphore.constprop.0+0x24>
  if (dep != NULL) {
 800c4d8:	b12c      	cbz	r4, 800c4e6 <chFactoryCreateSemaphore.constprop.0+0x46>
    return NULL;
 800c4da:	2400      	movs	r4, #0
  FACTORY_UNLOCK();
 800c4dc:	481d      	ldr	r0, [pc, #116]	; (800c554 <chFactoryCreateSemaphore.constprop.0+0xb4>)
 800c4de:	f7f8 fbe7 	bl	8004cb0 <chMtxUnlock>
}
 800c4e2:	4620      	mov	r0, r4
 800c4e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4e6:	2330      	movs	r3, #48	; 0x30
 800c4e8:	f383 8811 	msr	BASEPRI, r3
  objp = mp->next;
 800c4ec:	6afc      	ldr	r4, [r7, #44]	; 0x2c
  if (objp != NULL) {
 800c4ee:	b33c      	cbz	r4, 800c540 <chFactoryCreateSemaphore.constprop.0+0xa0>
    mp->next = mp->next->next;
 800c4f0:	6823      	ldr	r3, [r4, #0]
 800c4f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	f383 8811 	msr	BASEPRI, r3
  if (dep == NULL) {
 800c4fa:	2c00      	cmp	r4, #0
 800c4fc:	d0ed      	beq.n	800c4da <chFactoryCreateSemaphore.constprop.0+0x3a>
    *dp++ = c;
 800c4fe:	206d      	movs	r0, #109	; 0x6d
 800c500:	2279      	movs	r2, #121	; 0x79
 800c502:	f104 0309 	add.w	r3, r4, #9
 800c506:	7220      	strb	r0, [r4, #8]
 800c508:	4914      	ldr	r1, [pc, #80]	; (800c55c <chFactoryCreateSemaphore.constprop.0+0xbc>)
 800c50a:	f104 0010 	add.w	r0, r4, #16
 800c50e:	f803 2b01 	strb.w	r2, [r3], #1
  } while ((c != (char)0) && (i > 0U));
 800c512:	b13a      	cbz	r2, 800c524 <chFactoryCreateSemaphore.constprop.0+0x84>
 800c514:	4298      	cmp	r0, r3
 800c516:	d005      	beq.n	800c524 <chFactoryCreateSemaphore.constprop.0+0x84>
    c = *sp++;
 800c518:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    *dp++ = c;
 800c51c:	f803 2b01 	strb.w	r2, [r3], #1
  } while ((c != (char)0) && (i > 0U));
 800c520:	2a00      	cmp	r2, #0
 800c522:	d1f7      	bne.n	800c514 <chFactoryCreateSemaphore.constprop.0+0x74>
  dep->refs = (ucnt_t)1;
 800c524:	2201      	movs	r2, #1
  sp->cnt = n;
 800c526:	2300      	movs	r3, #0
  dep->next = dlp->next;
 800c528:	6ab9      	ldr	r1, [r7, #40]	; 0x28
  dep->refs = (ucnt_t)1;
 800c52a:	e9c4 1200 	strd	r1, r2, [r4]
  dlp->next = (dyn_element_t *)dep;
 800c52e:	62bc      	str	r4, [r7, #40]	; 0x28
  qp->prev = qp;
 800c530:	e9c4 0004 	strd	r0, r0, [r4, #16]
 800c534:	61a3      	str	r3, [r4, #24]
  FACTORY_UNLOCK();
 800c536:	4807      	ldr	r0, [pc, #28]	; (800c554 <chFactoryCreateSemaphore.constprop.0+0xb4>)
 800c538:	f7f8 fbba 	bl	8004cb0 <chMtxUnlock>
}
 800c53c:	4620      	mov	r0, r4
 800c53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (mp->provider != NULL) {
 800c540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c542:	b123      	cbz	r3, 800c54e <chFactoryCreateSemaphore.constprop.0+0xae>
    objp = mp->provider(mp->object_size, mp->align);
 800c544:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800c548:	4798      	blx	r3
 800c54a:	4604      	mov	r4, r0
 800c54c:	e7d2      	b.n	800c4f4 <chFactoryCreateSemaphore.constprop.0+0x54>
 800c54e:	f384 8811 	msr	BASEPRI, r4
 800c552:	e7c3      	b.n	800c4dc <chFactoryCreateSemaphore.constprop.0+0x3c>
 800c554:	20001e90 	.word	0x20001e90
 800c558:	08012e84 	.word	0x08012e84
 800c55c:	08012e85 	.word	0x08012e85

0800c560 <oslib_test_009_001_teardown.lto_priv.0>:
 800c560:	2330      	movs	r3, #48	; 0x30
 * - [9.1.6] Retrieving the registered object by name again, must not
 *   exist.
 * .
 */

static void oslib_test_009_001_teardown(void) {
 800c562:	b570      	push	{r4, r5, r6, lr}
 800c564:	f383 8811 	msr	BASEPRI, r3
 800c568:	4d15      	ldr	r5, [pc, #84]	; (800c5c0 <oslib_test_009_001_teardown.lto_priv.0+0x60>)
 800c56a:	4628      	mov	r0, r5
 800c56c:	f7f8 fb08 	bl	8004b80 <chMtxLockS>
 800c570:	2300      	movs	r3, #0
 800c572:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800c576:	f855 4f10 	ldr.w	r4, [r5, #16]!
  while (p != (dyn_element_t *)dlp) {
 800c57a:	42ac      	cmp	r4, r5
 800c57c:	d01b      	beq.n	800c5b6 <oslib_test_009_001_teardown.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c57e:	4e11      	ldr	r6, [pc, #68]	; (800c5c4 <oslib_test_009_001_teardown.lto_priv.0+0x64>)
 800c580:	e002      	b.n	800c588 <oslib_test_009_001_teardown.lto_priv.0+0x28>
    p = p->next;
 800c582:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800c584:	42ac      	cmp	r4, r5
 800c586:	d016      	beq.n	800c5b6 <oslib_test_009_001_teardown.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c588:	4631      	mov	r1, r6
 800c58a:	f104 0008 	add.w	r0, r4, #8
 800c58e:	f7f3 ffcf 	bl	8000530 <strcmp>
 800c592:	2800      	cmp	r0, #0
 800c594:	d1f5      	bne.n	800c582 <oslib_test_009_001_teardown.lto_priv.0+0x22>
  if (dep != NULL) {
 800c596:	b174      	cbz	r4, 800c5b6 <oslib_test_009_001_teardown.lto_priv.0+0x56>
    dep->refs++;
 800c598:	6863      	ldr	r3, [r4, #4]
  FACTORY_UNLOCK();
 800c59a:	4809      	ldr	r0, [pc, #36]	; (800c5c0 <oslib_test_009_001_teardown.lto_priv.0+0x60>)
    dep->refs++;
 800c59c:	3301      	adds	r3, #1
 800c59e:	6063      	str	r3, [r4, #4]
  FACTORY_UNLOCK();
 800c5a0:	f7f8 fb86 	bl	8004cb0 <chMtxUnlock>
  registered_object_t *rop;

  rop = chFactoryFindObject("myobj");
  if (rop != NULL) {
    while (rop->element.refs > 0U) {
 800c5a4:	6863      	ldr	r3, [r4, #4]
 800c5a6:	b12b      	cbz	r3, 800c5b4 <oslib_test_009_001_teardown.lto_priv.0+0x54>
      chFactoryReleaseObject(rop);
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	f7fd ff09 	bl	800a3c0 <chFactoryReleaseObject.isra.0>
    while (rop->element.refs > 0U) {
 800c5ae:	6863      	ldr	r3, [r4, #4]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d1f9      	bne.n	800c5a8 <oslib_test_009_001_teardown.lto_priv.0+0x48>
    }
  }
}
 800c5b4:	bd70      	pop	{r4, r5, r6, pc}
 800c5b6:	4802      	ldr	r0, [pc, #8]	; (800c5c0 <oslib_test_009_001_teardown.lto_priv.0+0x60>)
 800c5b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c5bc:	f7f8 bb78 	b.w	8004cb0 <chMtxUnlock>
 800c5c0:	20001e90 	.word	0x20001e90
 800c5c4:	08012e8c 	.word	0x08012e8c
	...

0800c5d0 <oslib_test_009_002_teardown.lto_priv.0>:
 800c5d0:	2330      	movs	r3, #48	; 0x30
 * - [9.2.6] Retrieving the dynamic buffer by name again, must not
 *   exist.
 * .
 */

static void oslib_test_009_002_teardown(void) {
 800c5d2:	b570      	push	{r4, r5, r6, lr}
 800c5d4:	f383 8811 	msr	BASEPRI, r3
 800c5d8:	4d15      	ldr	r5, [pc, #84]	; (800c630 <oslib_test_009_002_teardown.lto_priv.0+0x60>)
 800c5da:	4628      	mov	r0, r5
 800c5dc:	f7f8 fad0 	bl	8004b80 <chMtxLockS>
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800c5e6:	f855 4f24 	ldr.w	r4, [r5, #36]!
  while (p != (dyn_element_t *)dlp) {
 800c5ea:	42ac      	cmp	r4, r5
 800c5ec:	d01b      	beq.n	800c626 <oslib_test_009_002_teardown.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c5ee:	4e11      	ldr	r6, [pc, #68]	; (800c634 <oslib_test_009_002_teardown.lto_priv.0+0x64>)
 800c5f0:	e002      	b.n	800c5f8 <oslib_test_009_002_teardown.lto_priv.0+0x28>
    p = p->next;
 800c5f2:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800c5f4:	42ac      	cmp	r4, r5
 800c5f6:	d016      	beq.n	800c626 <oslib_test_009_002_teardown.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c5f8:	4631      	mov	r1, r6
 800c5fa:	f104 0008 	add.w	r0, r4, #8
 800c5fe:	f7f3 ff97 	bl	8000530 <strcmp>
 800c602:	2800      	cmp	r0, #0
 800c604:	d1f5      	bne.n	800c5f2 <oslib_test_009_002_teardown.lto_priv.0+0x22>
  if (dep != NULL) {
 800c606:	b174      	cbz	r4, 800c626 <oslib_test_009_002_teardown.lto_priv.0+0x56>
    dep->refs++;
 800c608:	6863      	ldr	r3, [r4, #4]
  FACTORY_UNLOCK();
 800c60a:	4809      	ldr	r0, [pc, #36]	; (800c630 <oslib_test_009_002_teardown.lto_priv.0+0x60>)
    dep->refs++;
 800c60c:	3301      	adds	r3, #1
 800c60e:	6063      	str	r3, [r4, #4]
  FACTORY_UNLOCK();
 800c610:	f7f8 fb4e 	bl	8004cb0 <chMtxUnlock>
  dyn_buffer_t *dbp;

  dbp = chFactoryFindBuffer("mybuf");
  if (dbp != NULL) {
    while (dbp->element.refs > 0U) {
 800c614:	6863      	ldr	r3, [r4, #4]
 800c616:	b12b      	cbz	r3, 800c624 <oslib_test_009_002_teardown.lto_priv.0+0x54>
      chFactoryReleaseBuffer(dbp);
 800c618:	4620      	mov	r0, r4
 800c61a:	f7ff fca1 	bl	800bf60 <chFactoryReleaseBuffer.isra.0>
    while (dbp->element.refs > 0U) {
 800c61e:	6863      	ldr	r3, [r4, #4]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d1f9      	bne.n	800c618 <oslib_test_009_002_teardown.lto_priv.0+0x48>
    }
  }
}
 800c624:	bd70      	pop	{r4, r5, r6, pc}
 800c626:	4802      	ldr	r0, [pc, #8]	; (800c630 <oslib_test_009_002_teardown.lto_priv.0+0x60>)
 800c628:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c62c:	f7f8 bb40 	b.w	8004cb0 <chMtxUnlock>
 800c630:	20001e90 	.word	0x20001e90
 800c634:	08012e94 	.word	0x08012e94
	...

0800c640 <oslib_test_009_003_teardown.lto_priv.0>:
 800c640:	2330      	movs	r3, #48	; 0x30
 * - [9.3.6] Retrieving the dynamic semaphore by name again, must not
 *   exist.
 * .
 */

static void oslib_test_009_003_teardown(void) {
 800c642:	b570      	push	{r4, r5, r6, lr}
 800c644:	f383 8811 	msr	BASEPRI, r3
 800c648:	4d15      	ldr	r5, [pc, #84]	; (800c6a0 <oslib_test_009_003_teardown.lto_priv.0+0x60>)
 800c64a:	4628      	mov	r0, r5
 800c64c:	f7f8 fa98 	bl	8004b80 <chMtxLockS>
 800c650:	2300      	movs	r3, #0
 800c652:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800c656:	f855 4f28 	ldr.w	r4, [r5, #40]!
  while (p != (dyn_element_t *)dlp) {
 800c65a:	42ac      	cmp	r4, r5
 800c65c:	d01b      	beq.n	800c696 <oslib_test_009_003_teardown.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c65e:	4e11      	ldr	r6, [pc, #68]	; (800c6a4 <oslib_test_009_003_teardown.lto_priv.0+0x64>)
 800c660:	e002      	b.n	800c668 <oslib_test_009_003_teardown.lto_priv.0+0x28>
    p = p->next;
 800c662:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800c664:	42ac      	cmp	r4, r5
 800c666:	d016      	beq.n	800c696 <oslib_test_009_003_teardown.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c668:	4631      	mov	r1, r6
 800c66a:	f104 0008 	add.w	r0, r4, #8
 800c66e:	f7f3 ff5f 	bl	8000530 <strcmp>
 800c672:	2800      	cmp	r0, #0
 800c674:	d1f5      	bne.n	800c662 <oslib_test_009_003_teardown.lto_priv.0+0x22>
  if (dep != NULL) {
 800c676:	b174      	cbz	r4, 800c696 <oslib_test_009_003_teardown.lto_priv.0+0x56>
    dep->refs++;
 800c678:	6863      	ldr	r3, [r4, #4]
  FACTORY_UNLOCK();
 800c67a:	4809      	ldr	r0, [pc, #36]	; (800c6a0 <oslib_test_009_003_teardown.lto_priv.0+0x60>)
    dep->refs++;
 800c67c:	3301      	adds	r3, #1
 800c67e:	6063      	str	r3, [r4, #4]
  FACTORY_UNLOCK();
 800c680:	f7f8 fb16 	bl	8004cb0 <chMtxUnlock>
  dyn_semaphore_t *dsp;

  dsp = chFactoryFindSemaphore("mysem");
  if (dsp != NULL) {
    while (dsp->element.refs > 0U) {
 800c684:	6863      	ldr	r3, [r4, #4]
 800c686:	b12b      	cbz	r3, 800c694 <oslib_test_009_003_teardown.lto_priv.0+0x54>
      chFactoryReleaseSemaphore(dsp);
 800c688:	4620      	mov	r0, r4
 800c68a:	f7fd fe61 	bl	800a350 <chFactoryReleaseSemaphore.isra.0>
    while (dsp->element.refs > 0U) {
 800c68e:	6863      	ldr	r3, [r4, #4]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d1f9      	bne.n	800c688 <oslib_test_009_003_teardown.lto_priv.0+0x48>
    }
  }
}
 800c694:	bd70      	pop	{r4, r5, r6, pc}
 800c696:	4802      	ldr	r0, [pc, #8]	; (800c6a0 <oslib_test_009_003_teardown.lto_priv.0+0x60>)
 800c698:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c69c:	f7f8 bb08 	b.w	8004cb0 <chMtxUnlock>
 800c6a0:	20001e90 	.word	0x20001e90
 800c6a4:	08012e84 	.word	0x08012e84
	...

0800c6b0 <oslib_test_009_004_teardown.lto_priv.0>:
 800c6b0:	2330      	movs	r3, #48	; 0x30
 * - [9.4.6] Retrieving the dynamic mailbox by name again, must not
 *   exist.
 * .
 */

static void oslib_test_009_004_teardown(void) {
 800c6b2:	b570      	push	{r4, r5, r6, lr}
 800c6b4:	f383 8811 	msr	BASEPRI, r3
 800c6b8:	4d15      	ldr	r5, [pc, #84]	; (800c710 <oslib_test_009_004_teardown.lto_priv.0+0x60>)
 800c6ba:	4628      	mov	r0, r5
 800c6bc:	f7f8 fa60 	bl	8004b80 <chMtxLockS>
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800c6c6:	f855 4f3c 	ldr.w	r4, [r5, #60]!
  while (p != (dyn_element_t *)dlp) {
 800c6ca:	42ac      	cmp	r4, r5
 800c6cc:	d01b      	beq.n	800c706 <oslib_test_009_004_teardown.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c6ce:	4e11      	ldr	r6, [pc, #68]	; (800c714 <oslib_test_009_004_teardown.lto_priv.0+0x64>)
 800c6d0:	e002      	b.n	800c6d8 <oslib_test_009_004_teardown.lto_priv.0+0x28>
    p = p->next;
 800c6d2:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800c6d4:	42ac      	cmp	r4, r5
 800c6d6:	d016      	beq.n	800c706 <oslib_test_009_004_teardown.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c6d8:	4631      	mov	r1, r6
 800c6da:	f104 0008 	add.w	r0, r4, #8
 800c6de:	f7f3 ff27 	bl	8000530 <strcmp>
 800c6e2:	2800      	cmp	r0, #0
 800c6e4:	d1f5      	bne.n	800c6d2 <oslib_test_009_004_teardown.lto_priv.0+0x22>
  if (dep != NULL) {
 800c6e6:	b174      	cbz	r4, 800c706 <oslib_test_009_004_teardown.lto_priv.0+0x56>
    dep->refs++;
 800c6e8:	6863      	ldr	r3, [r4, #4]
  FACTORY_UNLOCK();
 800c6ea:	4809      	ldr	r0, [pc, #36]	; (800c710 <oslib_test_009_004_teardown.lto_priv.0+0x60>)
    dep->refs++;
 800c6ec:	3301      	adds	r3, #1
 800c6ee:	6063      	str	r3, [r4, #4]
  FACTORY_UNLOCK();
 800c6f0:	f7f8 fade 	bl	8004cb0 <chMtxUnlock>
  dyn_mailbox_t *dmp;

  dmp = chFactoryFindMailbox("mymbx");
  if (dmp != NULL) {
    while (dmp->element.refs > 0U) {
 800c6f4:	6863      	ldr	r3, [r4, #4]
 800c6f6:	b12b      	cbz	r3, 800c704 <oslib_test_009_004_teardown.lto_priv.0+0x54>
      chFactoryReleaseMailbox(dmp);
 800c6f8:	4620      	mov	r0, r4
 800c6fa:	f7ff fc09 	bl	800bf10 <chFactoryReleaseMailbox.isra.0>
    while (dmp->element.refs > 0U) {
 800c6fe:	6863      	ldr	r3, [r4, #4]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d1f9      	bne.n	800c6f8 <oslib_test_009_004_teardown.lto_priv.0+0x48>
    }
  }
}
 800c704:	bd70      	pop	{r4, r5, r6, pc}
 800c706:	4802      	ldr	r0, [pc, #8]	; (800c710 <oslib_test_009_004_teardown.lto_priv.0+0x60>)
 800c708:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c70c:	f7f8 bad0 	b.w	8004cb0 <chMtxUnlock>
 800c710:	20001e90 	.word	0x20001e90
 800c714:	08012e9c 	.word	0x08012e9c
	...

0800c720 <oslib_test_009_005_teardown.lto_priv.0>:
 800c720:	2330      	movs	r3, #48	; 0x30
 * - [9.5.6] Retrieving the dynamic objects FIFO by name again, must
 *   not exist.
 * .
 */

static void oslib_test_009_005_teardown(void) {
 800c722:	b570      	push	{r4, r5, r6, lr}
 800c724:	f383 8811 	msr	BASEPRI, r3
 800c728:	4d15      	ldr	r5, [pc, #84]	; (800c780 <oslib_test_009_005_teardown.lto_priv.0+0x60>)
 800c72a:	4628      	mov	r0, r5
 800c72c:	f7f8 fa28 	bl	8004b80 <chMtxLockS>
 800c730:	2300      	movs	r3, #0
 800c732:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800c736:	f855 4f40 	ldr.w	r4, [r5, #64]!
  while (p != (dyn_element_t *)dlp) {
 800c73a:	42ac      	cmp	r4, r5
 800c73c:	d01b      	beq.n	800c776 <oslib_test_009_005_teardown.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c73e:	4e11      	ldr	r6, [pc, #68]	; (800c784 <oslib_test_009_005_teardown.lto_priv.0+0x64>)
 800c740:	e002      	b.n	800c748 <oslib_test_009_005_teardown.lto_priv.0+0x28>
    p = p->next;
 800c742:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800c744:	42ac      	cmp	r4, r5
 800c746:	d016      	beq.n	800c776 <oslib_test_009_005_teardown.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c748:	4631      	mov	r1, r6
 800c74a:	f104 0008 	add.w	r0, r4, #8
 800c74e:	f7f3 feef 	bl	8000530 <strcmp>
 800c752:	2800      	cmp	r0, #0
 800c754:	d1f5      	bne.n	800c742 <oslib_test_009_005_teardown.lto_priv.0+0x22>
  if (dep != NULL) {
 800c756:	b174      	cbz	r4, 800c776 <oslib_test_009_005_teardown.lto_priv.0+0x56>
    dep->refs++;
 800c758:	6863      	ldr	r3, [r4, #4]
  FACTORY_UNLOCK();
 800c75a:	4809      	ldr	r0, [pc, #36]	; (800c780 <oslib_test_009_005_teardown.lto_priv.0+0x60>)
    dep->refs++;
 800c75c:	3301      	adds	r3, #1
 800c75e:	6063      	str	r3, [r4, #4]
  FACTORY_UNLOCK();
 800c760:	f7f8 faa6 	bl	8004cb0 <chMtxUnlock>
  dyn_objects_fifo_t *dofp;

  dofp = chFactoryFindObjectsFIFO("myfifo");
  if (dofp != NULL) {
    while (dofp->element.refs > 0U) {
 800c764:	6863      	ldr	r3, [r4, #4]
 800c766:	b12b      	cbz	r3, 800c774 <oslib_test_009_005_teardown.lto_priv.0+0x54>
      chFactoryReleaseObjectsFIFO(dofp);
 800c768:	4620      	mov	r0, r4
 800c76a:	f7ff fb81 	bl	800be70 <chFactoryReleaseObjectsFIFO.isra.0>
    while (dofp->element.refs > 0U) {
 800c76e:	6863      	ldr	r3, [r4, #4]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d1f9      	bne.n	800c768 <oslib_test_009_005_teardown.lto_priv.0+0x48>
    }
  }
}
 800c774:	bd70      	pop	{r4, r5, r6, pc}
 800c776:	4802      	ldr	r0, [pc, #8]	; (800c780 <oslib_test_009_005_teardown.lto_priv.0+0x60>)
 800c778:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c77c:	f7f8 ba98 	b.w	8004cb0 <chMtxUnlock>
 800c780:	20001e90 	.word	0x20001e90
 800c784:	08012ea4 	.word	0x08012ea4
	...

0800c790 <oslib_test_009_006_teardown.lto_priv.0>:
 800c790:	2330      	movs	r3, #48	; 0x30
 *   trigger an assertion.
 * - [9.6.6] Retrieving the dynamic pipe by name again, must not exist.
 * .
 */

static void oslib_test_009_006_teardown(void) {
 800c792:	b570      	push	{r4, r5, r6, lr}
 800c794:	f383 8811 	msr	BASEPRI, r3
 800c798:	4d15      	ldr	r5, [pc, #84]	; (800c7f0 <oslib_test_009_006_teardown.lto_priv.0+0x60>)
 800c79a:	4628      	mov	r0, r5
 800c79c:	f7f8 f9f0 	bl	8004b80 <chMtxLockS>
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800c7a6:	f855 4f44 	ldr.w	r4, [r5, #68]!
  while (p != (dyn_element_t *)dlp) {
 800c7aa:	42ac      	cmp	r4, r5
 800c7ac:	d01b      	beq.n	800c7e6 <oslib_test_009_006_teardown.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c7ae:	4e11      	ldr	r6, [pc, #68]	; (800c7f4 <oslib_test_009_006_teardown.lto_priv.0+0x64>)
 800c7b0:	e002      	b.n	800c7b8 <oslib_test_009_006_teardown.lto_priv.0+0x28>
    p = p->next;
 800c7b2:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800c7b4:	42ac      	cmp	r4, r5
 800c7b6:	d016      	beq.n	800c7e6 <oslib_test_009_006_teardown.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c7b8:	4631      	mov	r1, r6
 800c7ba:	f104 0008 	add.w	r0, r4, #8
 800c7be:	f7f3 feb7 	bl	8000530 <strcmp>
 800c7c2:	2800      	cmp	r0, #0
 800c7c4:	d1f5      	bne.n	800c7b2 <oslib_test_009_006_teardown.lto_priv.0+0x22>
  if (dep != NULL) {
 800c7c6:	b174      	cbz	r4, 800c7e6 <oslib_test_009_006_teardown.lto_priv.0+0x56>
    dep->refs++;
 800c7c8:	6863      	ldr	r3, [r4, #4]
  FACTORY_UNLOCK();
 800c7ca:	4809      	ldr	r0, [pc, #36]	; (800c7f0 <oslib_test_009_006_teardown.lto_priv.0+0x60>)
    dep->refs++;
 800c7cc:	3301      	adds	r3, #1
 800c7ce:	6063      	str	r3, [r4, #4]
  FACTORY_UNLOCK();
 800c7d0:	f7f8 fa6e 	bl	8004cb0 <chMtxUnlock>
  dyn_pipe_t *dpp;

  dpp = chFactoryFindPipe("mypipe");
  if (dpp != NULL) {
    while (dpp->element.refs > 0U) {
 800c7d4:	6863      	ldr	r3, [r4, #4]
 800c7d6:	b12b      	cbz	r3, 800c7e4 <oslib_test_009_006_teardown.lto_priv.0+0x54>
      chFactoryReleasePipe(dpp);
 800c7d8:	4620      	mov	r0, r4
 800c7da:	f7ff fb71 	bl	800bec0 <chFactoryReleasePipe.isra.0>
    while (dpp->element.refs > 0U) {
 800c7de:	6863      	ldr	r3, [r4, #4]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d1f9      	bne.n	800c7d8 <oslib_test_009_006_teardown.lto_priv.0+0x48>
    }
  }
}
 800c7e4:	bd70      	pop	{r4, r5, r6, pc}
 800c7e6:	4802      	ldr	r0, [pc, #8]	; (800c7f0 <oslib_test_009_006_teardown.lto_priv.0+0x60>)
 800c7e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c7ec:	f7f8 ba60 	b.w	8004cb0 <chMtxUnlock>
 800c7f0:	20001e90 	.word	0x20001e90
 800c7f4:	08012eac 	.word	0x08012eac
	...

0800c800 <chFactoryFindPipe.constprop.0>:
 800c800:	2330      	movs	r3, #48	; 0x30
dyn_pipe_t *chFactoryFindPipe(const char *name) {
 800c802:	b570      	push	{r4, r5, r6, lr}
 800c804:	f383 8811 	msr	BASEPRI, r3
 800c808:	4d13      	ldr	r5, [pc, #76]	; (800c858 <chFactoryFindPipe.constprop.0+0x58>)
 800c80a:	4628      	mov	r0, r5
 800c80c:	f7f8 f9b8 	bl	8004b80 <chMtxLockS>
 800c810:	2300      	movs	r3, #0
 800c812:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800c816:	f855 4f44 	ldr.w	r4, [r5, #68]!
  while (p != (dyn_element_t *)dlp) {
 800c81a:	42ac      	cmp	r4, r5
 800c81c:	d01a      	beq.n	800c854 <chFactoryFindPipe.constprop.0+0x54>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c81e:	4e0f      	ldr	r6, [pc, #60]	; (800c85c <chFactoryFindPipe.constprop.0+0x5c>)
 800c820:	e002      	b.n	800c828 <chFactoryFindPipe.constprop.0+0x28>
    p = p->next;
 800c822:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800c824:	42ac      	cmp	r4, r5
 800c826:	d00f      	beq.n	800c848 <chFactoryFindPipe.constprop.0+0x48>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c828:	4631      	mov	r1, r6
 800c82a:	f104 0008 	add.w	r0, r4, #8
 800c82e:	f7f3 fe7f 	bl	8000530 <strcmp>
 800c832:	2800      	cmp	r0, #0
 800c834:	d1f5      	bne.n	800c822 <chFactoryFindPipe.constprop.0+0x22>
  if (dep != NULL) {
 800c836:	b114      	cbz	r4, 800c83e <chFactoryFindPipe.constprop.0+0x3e>
    dep->refs++;
 800c838:	6863      	ldr	r3, [r4, #4]
 800c83a:	3301      	adds	r3, #1
 800c83c:	6063      	str	r3, [r4, #4]
  FACTORY_UNLOCK();
 800c83e:	4806      	ldr	r0, [pc, #24]	; (800c858 <chFactoryFindPipe.constprop.0+0x58>)
 800c840:	f7f8 fa36 	bl	8004cb0 <chMtxUnlock>
}
 800c844:	4620      	mov	r0, r4
 800c846:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 800c848:	2400      	movs	r4, #0
  FACTORY_UNLOCK();
 800c84a:	4803      	ldr	r0, [pc, #12]	; (800c858 <chFactoryFindPipe.constprop.0+0x58>)
 800c84c:	f7f8 fa30 	bl	8004cb0 <chMtxUnlock>
}
 800c850:	4620      	mov	r0, r4
 800c852:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 800c854:	461c      	mov	r4, r3
 800c856:	e7f2      	b.n	800c83e <chFactoryFindPipe.constprop.0+0x3e>
 800c858:	20001e90 	.word	0x20001e90
 800c85c:	08012eac 	.word	0x08012eac

0800c860 <chFactoryFindObjectsFIFO.constprop.0>:
 800c860:	2330      	movs	r3, #48	; 0x30
dyn_objects_fifo_t *chFactoryFindObjectsFIFO(const char *name) {
 800c862:	b570      	push	{r4, r5, r6, lr}
 800c864:	f383 8811 	msr	BASEPRI, r3
 800c868:	4d13      	ldr	r5, [pc, #76]	; (800c8b8 <chFactoryFindObjectsFIFO.constprop.0+0x58>)
 800c86a:	4628      	mov	r0, r5
 800c86c:	f7f8 f988 	bl	8004b80 <chMtxLockS>
 800c870:	2300      	movs	r3, #0
 800c872:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800c876:	f855 4f40 	ldr.w	r4, [r5, #64]!
  while (p != (dyn_element_t *)dlp) {
 800c87a:	42ac      	cmp	r4, r5
 800c87c:	d01a      	beq.n	800c8b4 <chFactoryFindObjectsFIFO.constprop.0+0x54>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c87e:	4e0f      	ldr	r6, [pc, #60]	; (800c8bc <chFactoryFindObjectsFIFO.constprop.0+0x5c>)
 800c880:	e002      	b.n	800c888 <chFactoryFindObjectsFIFO.constprop.0+0x28>
    p = p->next;
 800c882:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800c884:	42ac      	cmp	r4, r5
 800c886:	d00f      	beq.n	800c8a8 <chFactoryFindObjectsFIFO.constprop.0+0x48>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c888:	4631      	mov	r1, r6
 800c88a:	f104 0008 	add.w	r0, r4, #8
 800c88e:	f7f3 fe4f 	bl	8000530 <strcmp>
 800c892:	2800      	cmp	r0, #0
 800c894:	d1f5      	bne.n	800c882 <chFactoryFindObjectsFIFO.constprop.0+0x22>
  if (dep != NULL) {
 800c896:	b114      	cbz	r4, 800c89e <chFactoryFindObjectsFIFO.constprop.0+0x3e>
    dep->refs++;
 800c898:	6863      	ldr	r3, [r4, #4]
 800c89a:	3301      	adds	r3, #1
 800c89c:	6063      	str	r3, [r4, #4]
  FACTORY_UNLOCK();
 800c89e:	4806      	ldr	r0, [pc, #24]	; (800c8b8 <chFactoryFindObjectsFIFO.constprop.0+0x58>)
 800c8a0:	f7f8 fa06 	bl	8004cb0 <chMtxUnlock>
}
 800c8a4:	4620      	mov	r0, r4
 800c8a6:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 800c8a8:	2400      	movs	r4, #0
  FACTORY_UNLOCK();
 800c8aa:	4803      	ldr	r0, [pc, #12]	; (800c8b8 <chFactoryFindObjectsFIFO.constprop.0+0x58>)
 800c8ac:	f7f8 fa00 	bl	8004cb0 <chMtxUnlock>
}
 800c8b0:	4620      	mov	r0, r4
 800c8b2:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 800c8b4:	461c      	mov	r4, r3
 800c8b6:	e7f2      	b.n	800c89e <chFactoryFindObjectsFIFO.constprop.0+0x3e>
 800c8b8:	20001e90 	.word	0x20001e90
 800c8bc:	08012ea4 	.word	0x08012ea4

0800c8c0 <chFactoryFindMailbox.constprop.0>:
 800c8c0:	2330      	movs	r3, #48	; 0x30
dyn_mailbox_t *chFactoryFindMailbox(const char *name) {
 800c8c2:	b570      	push	{r4, r5, r6, lr}
 800c8c4:	f383 8811 	msr	BASEPRI, r3
 800c8c8:	4d13      	ldr	r5, [pc, #76]	; (800c918 <chFactoryFindMailbox.constprop.0+0x58>)
 800c8ca:	4628      	mov	r0, r5
 800c8cc:	f7f8 f958 	bl	8004b80 <chMtxLockS>
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800c8d6:	f855 4f3c 	ldr.w	r4, [r5, #60]!
  while (p != (dyn_element_t *)dlp) {
 800c8da:	42ac      	cmp	r4, r5
 800c8dc:	d01a      	beq.n	800c914 <chFactoryFindMailbox.constprop.0+0x54>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c8de:	4e0f      	ldr	r6, [pc, #60]	; (800c91c <chFactoryFindMailbox.constprop.0+0x5c>)
 800c8e0:	e002      	b.n	800c8e8 <chFactoryFindMailbox.constprop.0+0x28>
    p = p->next;
 800c8e2:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800c8e4:	42ac      	cmp	r4, r5
 800c8e6:	d00f      	beq.n	800c908 <chFactoryFindMailbox.constprop.0+0x48>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c8e8:	4631      	mov	r1, r6
 800c8ea:	f104 0008 	add.w	r0, r4, #8
 800c8ee:	f7f3 fe1f 	bl	8000530 <strcmp>
 800c8f2:	2800      	cmp	r0, #0
 800c8f4:	d1f5      	bne.n	800c8e2 <chFactoryFindMailbox.constprop.0+0x22>
  if (dep != NULL) {
 800c8f6:	b114      	cbz	r4, 800c8fe <chFactoryFindMailbox.constprop.0+0x3e>
    dep->refs++;
 800c8f8:	6863      	ldr	r3, [r4, #4]
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	6063      	str	r3, [r4, #4]
  FACTORY_UNLOCK();
 800c8fe:	4806      	ldr	r0, [pc, #24]	; (800c918 <chFactoryFindMailbox.constprop.0+0x58>)
 800c900:	f7f8 f9d6 	bl	8004cb0 <chMtxUnlock>
}
 800c904:	4620      	mov	r0, r4
 800c906:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 800c908:	2400      	movs	r4, #0
  FACTORY_UNLOCK();
 800c90a:	4803      	ldr	r0, [pc, #12]	; (800c918 <chFactoryFindMailbox.constprop.0+0x58>)
 800c90c:	f7f8 f9d0 	bl	8004cb0 <chMtxUnlock>
}
 800c910:	4620      	mov	r0, r4
 800c912:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 800c914:	461c      	mov	r4, r3
 800c916:	e7f2      	b.n	800c8fe <chFactoryFindMailbox.constprop.0+0x3e>
 800c918:	20001e90 	.word	0x20001e90
 800c91c:	08012e9c 	.word	0x08012e9c

0800c920 <chFactoryFindSemaphore.constprop.0>:
 800c920:	2330      	movs	r3, #48	; 0x30
dyn_semaphore_t *chFactoryFindSemaphore(const char *name) {
 800c922:	b570      	push	{r4, r5, r6, lr}
 800c924:	f383 8811 	msr	BASEPRI, r3
 800c928:	4d13      	ldr	r5, [pc, #76]	; (800c978 <chFactoryFindSemaphore.constprop.0+0x58>)
 800c92a:	4628      	mov	r0, r5
 800c92c:	f7f8 f928 	bl	8004b80 <chMtxLockS>
 800c930:	2300      	movs	r3, #0
 800c932:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800c936:	f855 4f28 	ldr.w	r4, [r5, #40]!
  while (p != (dyn_element_t *)dlp) {
 800c93a:	42ac      	cmp	r4, r5
 800c93c:	d01a      	beq.n	800c974 <chFactoryFindSemaphore.constprop.0+0x54>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c93e:	4e0f      	ldr	r6, [pc, #60]	; (800c97c <chFactoryFindSemaphore.constprop.0+0x5c>)
 800c940:	e002      	b.n	800c948 <chFactoryFindSemaphore.constprop.0+0x28>
    p = p->next;
 800c942:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800c944:	42ac      	cmp	r4, r5
 800c946:	d00f      	beq.n	800c968 <chFactoryFindSemaphore.constprop.0+0x48>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c948:	4631      	mov	r1, r6
 800c94a:	f104 0008 	add.w	r0, r4, #8
 800c94e:	f7f3 fdef 	bl	8000530 <strcmp>
 800c952:	2800      	cmp	r0, #0
 800c954:	d1f5      	bne.n	800c942 <chFactoryFindSemaphore.constprop.0+0x22>
  if (dep != NULL) {
 800c956:	b114      	cbz	r4, 800c95e <chFactoryFindSemaphore.constprop.0+0x3e>
    dep->refs++;
 800c958:	6863      	ldr	r3, [r4, #4]
 800c95a:	3301      	adds	r3, #1
 800c95c:	6063      	str	r3, [r4, #4]
  FACTORY_UNLOCK();
 800c95e:	4806      	ldr	r0, [pc, #24]	; (800c978 <chFactoryFindSemaphore.constprop.0+0x58>)
 800c960:	f7f8 f9a6 	bl	8004cb0 <chMtxUnlock>
}
 800c964:	4620      	mov	r0, r4
 800c966:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 800c968:	2400      	movs	r4, #0
  FACTORY_UNLOCK();
 800c96a:	4803      	ldr	r0, [pc, #12]	; (800c978 <chFactoryFindSemaphore.constprop.0+0x58>)
 800c96c:	f7f8 f9a0 	bl	8004cb0 <chMtxUnlock>
}
 800c970:	4620      	mov	r0, r4
 800c972:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 800c974:	461c      	mov	r4, r3
 800c976:	e7f2      	b.n	800c95e <chFactoryFindSemaphore.constprop.0+0x3e>
 800c978:	20001e90 	.word	0x20001e90
 800c97c:	08012e84 	.word	0x08012e84

0800c980 <oslib_test_009_003_execute.lto_priv.0>:
  test_set_step(1);
 800c980:	2201      	movs	r2, #1
static void oslib_test_009_003_execute(void) {
 800c982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 800c984:	4f3d      	ldr	r7, [pc, #244]	; (800ca7c <oslib_test_009_003_execute.lto_priv.0+0xfc>)
 800c986:	2330      	movs	r3, #48	; 0x30
 800c988:	603a      	str	r2, [r7, #0]
 800c98a:	f383 8811 	msr	BASEPRI, r3
 800c98e:	4d3c      	ldr	r5, [pc, #240]	; (800ca80 <oslib_test_009_003_execute.lto_priv.0+0x100>)
 800c990:	4628      	mov	r0, r5
 800c992:	f7f8 f8f5 	bl	8004b80 <chMtxLockS>
 800c996:	2300      	movs	r3, #0
 800c998:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800c99c:	f855 4f28 	ldr.w	r4, [r5, #40]!
  while (p != (dyn_element_t *)dlp) {
 800c9a0:	42ac      	cmp	r4, r5
 800c9a2:	d018      	beq.n	800c9d6 <oslib_test_009_003_execute.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c9a4:	4e37      	ldr	r6, [pc, #220]	; (800ca84 <oslib_test_009_003_execute.lto_priv.0+0x104>)
 800c9a6:	e002      	b.n	800c9ae <oslib_test_009_003_execute.lto_priv.0+0x2e>
    p = p->next;
 800c9a8:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800c9aa:	42ac      	cmp	r4, r5
 800c9ac:	d013      	beq.n	800c9d6 <oslib_test_009_003_execute.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800c9ae:	4631      	mov	r1, r6
 800c9b0:	f104 0008 	add.w	r0, r4, #8
 800c9b4:	f7f3 fdbc 	bl	8000530 <strcmp>
 800c9b8:	2800      	cmp	r0, #0
 800c9ba:	d1f5      	bne.n	800c9a8 <oslib_test_009_003_execute.lto_priv.0+0x28>
  if (dep != NULL) {
 800c9bc:	b15c      	cbz	r4, 800c9d6 <oslib_test_009_003_execute.lto_priv.0+0x56>
    dep->refs++;
 800c9be:	6863      	ldr	r3, [r4, #4]
  FACTORY_UNLOCK();
 800c9c0:	482f      	ldr	r0, [pc, #188]	; (800ca80 <oslib_test_009_003_execute.lto_priv.0+0x100>)
    dep->refs++;
 800c9c2:	3301      	adds	r3, #1
 800c9c4:	6063      	str	r3, [r4, #4]
  FACTORY_UNLOCK();
 800c9c6:	f7f8 f973 	bl	8004cb0 <chMtxUnlock>
  chtest.global_fail     = true;
 800c9ca:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800c9ce:	4a2e      	ldr	r2, [pc, #184]	; (800ca88 <oslib_test_009_003_execute.lto_priv.0+0x108>)
  chtest.global_fail     = true;
 800c9d0:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800c9d2:	60ba      	str	r2, [r7, #8]
}
 800c9d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9d6:	482a      	ldr	r0, [pc, #168]	; (800ca80 <oslib_test_009_003_execute.lto_priv.0+0x100>)
 800c9d8:	f7f8 f96a 	bl	8004cb0 <chMtxUnlock>
  test_set_step(2);
 800c9dc:	2302      	movs	r3, #2
 800c9de:	603b      	str	r3, [r7, #0]
    dsp = chFactoryCreateSemaphore("mysem", 0);
 800c9e0:	f7ff fd5e 	bl	800c4a0 <chFactoryCreateSemaphore.constprop.0>
  if (!condition) {
 800c9e4:	4604      	mov	r4, r0
 800c9e6:	b358      	cbz	r0, 800ca40 <oslib_test_009_003_execute.lto_priv.0+0xc0>
  test_set_step(3);
 800c9e8:	2503      	movs	r5, #3
 800c9ea:	603d      	str	r5, [r7, #0]
    dsp1 = chFactoryCreateSemaphore("mysem", 0);
 800c9ec:	f7ff fd58 	bl	800c4a0 <chFactoryCreateSemaphore.constprop.0>
 800c9f0:	bb60      	cbnz	r0, 800ca4c <oslib_test_009_003_execute.lto_priv.0+0xcc>
  test_set_step(4);
 800c9f2:	2304      	movs	r3, #4
 800c9f4:	603b      	str	r3, [r7, #0]
    dsp1 = chFactoryFindSemaphore("mysem");
 800c9f6:	f7ff ff93 	bl	800c920 <chFactoryFindSemaphore.constprop.0>
 800c9fa:	b368      	cbz	r0, 800ca58 <oslib_test_009_003_execute.lto_priv.0+0xd8>
 800c9fc:	4284      	cmp	r4, r0
 800c9fe:	d131      	bne.n	800ca64 <oslib_test_009_003_execute.lto_priv.0+0xe4>
 800ca00:	6863      	ldr	r3, [r4, #4]
 800ca02:	2b02      	cmp	r3, #2
 800ca04:	d12e      	bne.n	800ca64 <oslib_test_009_003_execute.lto_priv.0+0xe4>
 *
 * @api
 */
static inline dyn_element_t *chFactoryDuplicateReference(dyn_element_t *dep) {

  dep->refs++;
 800ca06:	6065      	str	r5, [r4, #4]
    chFactoryReleaseSemaphore(dsp2);
 800ca08:	f7fd fca2 	bl	800a350 <chFactoryReleaseSemaphore.isra.0>
 800ca0c:	6863      	ldr	r3, [r4, #4]
 800ca0e:	2b02      	cmp	r3, #2
 800ca10:	d12e      	bne.n	800ca70 <oslib_test_009_003_execute.lto_priv.0+0xf0>
    chFactoryReleaseSemaphore(dsp1);
 800ca12:	4620      	mov	r0, r4
 800ca14:	f7fd fc9c 	bl	800a350 <chFactoryReleaseSemaphore.isra.0>
 800ca18:	6863      	ldr	r3, [r4, #4]
 800ca1a:	2b01      	cmp	r3, #1
 800ca1c:	d128      	bne.n	800ca70 <oslib_test_009_003_execute.lto_priv.0+0xf0>
  test_set_step(5);
 800ca1e:	2305      	movs	r3, #5
    chFactoryReleaseSemaphore(dsp);
 800ca20:	4620      	mov	r0, r4
  test_set_step(5);
 800ca22:	603b      	str	r3, [r7, #0]
    chFactoryReleaseSemaphore(dsp);
 800ca24:	f7fd fc94 	bl	800a350 <chFactoryReleaseSemaphore.isra.0>
  test_set_step(6);
 800ca28:	2306      	movs	r3, #6
 800ca2a:	603b      	str	r3, [r7, #0]
    dsp = chFactoryFindSemaphore("mysem");
 800ca2c:	f7ff ff78 	bl	800c920 <chFactoryFindSemaphore.constprop.0>
 800ca30:	2800      	cmp	r0, #0
 800ca32:	d0cf      	beq.n	800c9d4 <oslib_test_009_003_execute.lto_priv.0+0x54>
  chtest.global_fail     = true;
 800ca34:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800ca38:	4a13      	ldr	r2, [pc, #76]	; (800ca88 <oslib_test_009_003_execute.lto_priv.0+0x108>)
  chtest.global_fail     = true;
 800ca3a:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800ca3c:	60ba      	str	r2, [r7, #8]
}
 800ca3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800ca40:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800ca44:	4a11      	ldr	r2, [pc, #68]	; (800ca8c <oslib_test_009_003_execute.lto_priv.0+0x10c>)
  chtest.global_fail     = true;
 800ca46:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800ca48:	60ba      	str	r2, [r7, #8]
 800ca4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800ca4c:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800ca50:	4a0f      	ldr	r2, [pc, #60]	; (800ca90 <oslib_test_009_003_execute.lto_priv.0+0x110>)
  chtest.global_fail     = true;
 800ca52:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800ca54:	60ba      	str	r2, [r7, #8]
 800ca56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800ca58:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800ca5c:	4a0d      	ldr	r2, [pc, #52]	; (800ca94 <oslib_test_009_003_execute.lto_priv.0+0x114>)
  chtest.global_fail     = true;
 800ca5e:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800ca60:	60ba      	str	r2, [r7, #8]
 800ca62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800ca64:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800ca68:	4a0b      	ldr	r2, [pc, #44]	; (800ca98 <oslib_test_009_003_execute.lto_priv.0+0x118>)
  chtest.global_fail     = true;
 800ca6a:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800ca6c:	60ba      	str	r2, [r7, #8]
 800ca6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800ca70:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800ca74:	4a09      	ldr	r2, [pc, #36]	; (800ca9c <oslib_test_009_003_execute.lto_priv.0+0x11c>)
  chtest.global_fail     = true;
 800ca76:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800ca78:	60ba      	str	r2, [r7, #8]
 800ca7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca7c:	200010f4 	.word	0x200010f4
 800ca80:	20001e90 	.word	0x20001e90
 800ca84:	08012e84 	.word	0x08012e84
 800ca88:	08012ed4 	.word	0x08012ed4
 800ca8c:	08012eb4 	.word	0x08012eb4
 800ca90:	08012ec4 	.word	0x08012ec4
 800ca94:	08012ed0 	.word	0x08012ed0
 800ca98:	08012edc 	.word	0x08012edc
 800ca9c:	08012ef8 	.word	0x08012ef8

0800caa0 <chFactoryFindBuffer.constprop.0>:
 800caa0:	2330      	movs	r3, #48	; 0x30
dyn_buffer_t *chFactoryFindBuffer(const char *name) {
 800caa2:	b570      	push	{r4, r5, r6, lr}
 800caa4:	f383 8811 	msr	BASEPRI, r3
 800caa8:	4d13      	ldr	r5, [pc, #76]	; (800caf8 <chFactoryFindBuffer.constprop.0+0x58>)
 800caaa:	4628      	mov	r0, r5
 800caac:	f7f8 f868 	bl	8004b80 <chMtxLockS>
 800cab0:	2300      	movs	r3, #0
 800cab2:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800cab6:	f855 4f24 	ldr.w	r4, [r5, #36]!
  while (p != (dyn_element_t *)dlp) {
 800caba:	42ac      	cmp	r4, r5
 800cabc:	d01a      	beq.n	800caf4 <chFactoryFindBuffer.constprop.0+0x54>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800cabe:	4e0f      	ldr	r6, [pc, #60]	; (800cafc <chFactoryFindBuffer.constprop.0+0x5c>)
 800cac0:	e002      	b.n	800cac8 <chFactoryFindBuffer.constprop.0+0x28>
    p = p->next;
 800cac2:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800cac4:	42ac      	cmp	r4, r5
 800cac6:	d00f      	beq.n	800cae8 <chFactoryFindBuffer.constprop.0+0x48>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800cac8:	4631      	mov	r1, r6
 800caca:	f104 0008 	add.w	r0, r4, #8
 800cace:	f7f3 fd2f 	bl	8000530 <strcmp>
 800cad2:	2800      	cmp	r0, #0
 800cad4:	d1f5      	bne.n	800cac2 <chFactoryFindBuffer.constprop.0+0x22>
  if (dep != NULL) {
 800cad6:	b114      	cbz	r4, 800cade <chFactoryFindBuffer.constprop.0+0x3e>
    dep->refs++;
 800cad8:	6863      	ldr	r3, [r4, #4]
 800cada:	3301      	adds	r3, #1
 800cadc:	6063      	str	r3, [r4, #4]
  FACTORY_UNLOCK();
 800cade:	4806      	ldr	r0, [pc, #24]	; (800caf8 <chFactoryFindBuffer.constprop.0+0x58>)
 800cae0:	f7f8 f8e6 	bl	8004cb0 <chMtxUnlock>
}
 800cae4:	4620      	mov	r0, r4
 800cae6:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 800cae8:	2400      	movs	r4, #0
  FACTORY_UNLOCK();
 800caea:	4803      	ldr	r0, [pc, #12]	; (800caf8 <chFactoryFindBuffer.constprop.0+0x58>)
 800caec:	f7f8 f8e0 	bl	8004cb0 <chMtxUnlock>
}
 800caf0:	4620      	mov	r0, r4
 800caf2:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 800caf4:	461c      	mov	r4, r3
 800caf6:	e7f2      	b.n	800cade <chFactoryFindBuffer.constprop.0+0x3e>
 800caf8:	20001e90 	.word	0x20001e90
 800cafc:	08012e94 	.word	0x08012e94

0800cb00 <chFactoryFindObject.constprop.0>:
 800cb00:	2330      	movs	r3, #48	; 0x30
registered_object_t *chFactoryFindObject(const char *name) {
 800cb02:	b570      	push	{r4, r5, r6, lr}
 800cb04:	f383 8811 	msr	BASEPRI, r3
 800cb08:	4d13      	ldr	r5, [pc, #76]	; (800cb58 <chFactoryFindObject.constprop.0+0x58>)
 800cb0a:	4628      	mov	r0, r5
 800cb0c:	f7f8 f838 	bl	8004b80 <chMtxLockS>
 800cb10:	2300      	movs	r3, #0
 800cb12:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800cb16:	f855 4f10 	ldr.w	r4, [r5, #16]!
  while (p != (dyn_element_t *)dlp) {
 800cb1a:	42ac      	cmp	r4, r5
 800cb1c:	d01a      	beq.n	800cb54 <chFactoryFindObject.constprop.0+0x54>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800cb1e:	4e0f      	ldr	r6, [pc, #60]	; (800cb5c <chFactoryFindObject.constprop.0+0x5c>)
 800cb20:	e002      	b.n	800cb28 <chFactoryFindObject.constprop.0+0x28>
    p = p->next;
 800cb22:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800cb24:	42ac      	cmp	r4, r5
 800cb26:	d00f      	beq.n	800cb48 <chFactoryFindObject.constprop.0+0x48>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800cb28:	4631      	mov	r1, r6
 800cb2a:	f104 0008 	add.w	r0, r4, #8
 800cb2e:	f7f3 fcff 	bl	8000530 <strcmp>
 800cb32:	2800      	cmp	r0, #0
 800cb34:	d1f5      	bne.n	800cb22 <chFactoryFindObject.constprop.0+0x22>
  if (dep != NULL) {
 800cb36:	b114      	cbz	r4, 800cb3e <chFactoryFindObject.constprop.0+0x3e>
    dep->refs++;
 800cb38:	6863      	ldr	r3, [r4, #4]
 800cb3a:	3301      	adds	r3, #1
 800cb3c:	6063      	str	r3, [r4, #4]
  FACTORY_UNLOCK();
 800cb3e:	4806      	ldr	r0, [pc, #24]	; (800cb58 <chFactoryFindObject.constprop.0+0x58>)
 800cb40:	f7f8 f8b6 	bl	8004cb0 <chMtxUnlock>
}
 800cb44:	4620      	mov	r0, r4
 800cb46:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 800cb48:	2400      	movs	r4, #0
  FACTORY_UNLOCK();
 800cb4a:	4803      	ldr	r0, [pc, #12]	; (800cb58 <chFactoryFindObject.constprop.0+0x58>)
 800cb4c:	f7f8 f8b0 	bl	8004cb0 <chMtxUnlock>
}
 800cb50:	4620      	mov	r0, r4
 800cb52:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 800cb54:	461c      	mov	r4, r3
 800cb56:	e7f2      	b.n	800cb3e <chFactoryFindObject.constprop.0+0x3e>
 800cb58:	20001e90 	.word	0x20001e90
 800cb5c:	08012e8c 	.word	0x08012e8c

0800cb60 <chFactoryRegisterObject.constprop.0>:
registered_object_t *chFactoryRegisterObject(const char *name,
 800cb60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb64:	2330      	movs	r3, #48	; 0x30
 800cb66:	4680      	mov	r8, r0
 800cb68:	f383 8811 	msr	BASEPRI, r3
 800cb6c:	4f2a      	ldr	r7, [pc, #168]	; (800cc18 <chFactoryRegisterObject.constprop.0+0xb8>)
 800cb6e:	4638      	mov	r0, r7
 800cb70:	f7f8 f806 	bl	8004b80 <chMtxLockS>
 800cb74:	2300      	movs	r3, #0
 800cb76:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800cb7a:	463d      	mov	r5, r7
 800cb7c:	f855 4f10 	ldr.w	r4, [r5, #16]!
  while (p != (dyn_element_t *)dlp) {
 800cb80:	42ac      	cmp	r4, r5
 800cb82:	d013      	beq.n	800cbac <chFactoryRegisterObject.constprop.0+0x4c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800cb84:	4e25      	ldr	r6, [pc, #148]	; (800cc1c <chFactoryRegisterObject.constprop.0+0xbc>)
 800cb86:	e002      	b.n	800cb8e <chFactoryRegisterObject.constprop.0+0x2e>
    p = p->next;
 800cb88:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800cb8a:	42ac      	cmp	r4, r5
 800cb8c:	d00e      	beq.n	800cbac <chFactoryRegisterObject.constprop.0+0x4c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800cb8e:	4631      	mov	r1, r6
 800cb90:	f104 0008 	add.w	r0, r4, #8
 800cb94:	f7f3 fccc 	bl	8000530 <strcmp>
 800cb98:	2800      	cmp	r0, #0
 800cb9a:	d1f5      	bne.n	800cb88 <chFactoryRegisterObject.constprop.0+0x28>
  if (dep != NULL) {
 800cb9c:	b134      	cbz	r4, 800cbac <chFactoryRegisterObject.constprop.0+0x4c>
    return NULL;
 800cb9e:	2400      	movs	r4, #0
  FACTORY_UNLOCK();
 800cba0:	481d      	ldr	r0, [pc, #116]	; (800cc18 <chFactoryRegisterObject.constprop.0+0xb8>)
 800cba2:	f7f8 f885 	bl	8004cb0 <chMtxUnlock>
}
 800cba6:	4620      	mov	r0, r4
 800cba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbac:	2330      	movs	r3, #48	; 0x30
 800cbae:	f383 8811 	msr	BASEPRI, r3
  objp = mp->next;
 800cbb2:	697c      	ldr	r4, [r7, #20]
  if (objp != NULL) {
 800cbb4:	b334      	cbz	r4, 800cc04 <chFactoryRegisterObject.constprop.0+0xa4>
    mp->next = mp->next->next;
 800cbb6:	6823      	ldr	r3, [r4, #0]
 800cbb8:	617b      	str	r3, [r7, #20]
 800cbba:	2300      	movs	r3, #0
 800cbbc:	f383 8811 	msr	BASEPRI, r3
  if (dep == NULL) {
 800cbc0:	2c00      	cmp	r4, #0
 800cbc2:	d0ec      	beq.n	800cb9e <chFactoryRegisterObject.constprop.0+0x3e>
    *dp++ = c;
 800cbc4:	226d      	movs	r2, #109	; 0x6d
 800cbc6:	7222      	strb	r2, [r4, #8]
 800cbc8:	2279      	movs	r2, #121	; 0x79
 800cbca:	f104 0309 	add.w	r3, r4, #9
 800cbce:	4914      	ldr	r1, [pc, #80]	; (800cc20 <chFactoryRegisterObject.constprop.0+0xc0>)
 800cbd0:	f104 0010 	add.w	r0, r4, #16
 800cbd4:	f803 2b01 	strb.w	r2, [r3], #1
  } while ((c != (char)0) && (i > 0U));
 800cbd8:	b13a      	cbz	r2, 800cbea <chFactoryRegisterObject.constprop.0+0x8a>
 800cbda:	4298      	cmp	r0, r3
 800cbdc:	d005      	beq.n	800cbea <chFactoryRegisterObject.constprop.0+0x8a>
    c = *sp++;
 800cbde:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    *dp++ = c;
 800cbe2:	f803 2b01 	strb.w	r2, [r3], #1
  } while ((c != (char)0) && (i > 0U));
 800cbe6:	2a00      	cmp	r2, #0
 800cbe8:	d1f7      	bne.n	800cbda <chFactoryRegisterObject.constprop.0+0x7a>
  dep->refs = (ucnt_t)1;
 800cbea:	2301      	movs	r3, #1
  dep->next = dlp->next;
 800cbec:	693a      	ldr	r2, [r7, #16]
  FACTORY_UNLOCK();
 800cbee:	480a      	ldr	r0, [pc, #40]	; (800cc18 <chFactoryRegisterObject.constprop.0+0xb8>)
  dep->refs = (ucnt_t)1;
 800cbf0:	e9c4 2300 	strd	r2, r3, [r4]
  dlp->next = (dyn_element_t *)dep;
 800cbf4:	613c      	str	r4, [r7, #16]
    rop->objp = objp;
 800cbf6:	f8c4 8010 	str.w	r8, [r4, #16]
  FACTORY_UNLOCK();
 800cbfa:	f7f8 f859 	bl	8004cb0 <chMtxUnlock>
}
 800cbfe:	4620      	mov	r0, r4
 800cc00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (mp->provider != NULL) {
 800cc04:	6a3b      	ldr	r3, [r7, #32]
 800cc06:	b123      	cbz	r3, 800cc12 <chFactoryRegisterObject.constprop.0+0xb2>
    objp = mp->provider(mp->object_size, mp->align);
 800cc08:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800cc0c:	4798      	blx	r3
 800cc0e:	4604      	mov	r4, r0
 800cc10:	e7d3      	b.n	800cbba <chFactoryRegisterObject.constprop.0+0x5a>
 800cc12:	f384 8811 	msr	BASEPRI, r4
 800cc16:	e7c3      	b.n	800cba0 <chFactoryRegisterObject.constprop.0+0x40>
 800cc18:	20001e90 	.word	0x20001e90
 800cc1c:	08012e8c 	.word	0x08012e8c
 800cc20:	08012e8d 	.word	0x08012e8d
	...

0800cc30 <oslib_test_009_001_execute.lto_priv.0>:
  test_set_step(1);
 800cc30:	2201      	movs	r2, #1
static void oslib_test_009_001_execute(void) {
 800cc32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 800cc34:	4f4a      	ldr	r7, [pc, #296]	; (800cd60 <oslib_test_009_001_execute.lto_priv.0+0x130>)
 800cc36:	2330      	movs	r3, #48	; 0x30
 800cc38:	603a      	str	r2, [r7, #0]
 800cc3a:	f383 8811 	msr	BASEPRI, r3
 800cc3e:	4d49      	ldr	r5, [pc, #292]	; (800cd64 <oslib_test_009_001_execute.lto_priv.0+0x134>)
 800cc40:	4628      	mov	r0, r5
 800cc42:	f7f7 ff9d 	bl	8004b80 <chMtxLockS>
 800cc46:	2300      	movs	r3, #0
 800cc48:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800cc4c:	f855 4f10 	ldr.w	r4, [r5, #16]!
  while (p != (dyn_element_t *)dlp) {
 800cc50:	42ac      	cmp	r4, r5
 800cc52:	d018      	beq.n	800cc86 <oslib_test_009_001_execute.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800cc54:	4e44      	ldr	r6, [pc, #272]	; (800cd68 <oslib_test_009_001_execute.lto_priv.0+0x138>)
 800cc56:	e002      	b.n	800cc5e <oslib_test_009_001_execute.lto_priv.0+0x2e>
    p = p->next;
 800cc58:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800cc5a:	42ac      	cmp	r4, r5
 800cc5c:	d013      	beq.n	800cc86 <oslib_test_009_001_execute.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800cc5e:	4631      	mov	r1, r6
 800cc60:	f104 0008 	add.w	r0, r4, #8
 800cc64:	f7f3 fc64 	bl	8000530 <strcmp>
 800cc68:	2800      	cmp	r0, #0
 800cc6a:	d1f5      	bne.n	800cc58 <oslib_test_009_001_execute.lto_priv.0+0x28>
  if (dep != NULL) {
 800cc6c:	b15c      	cbz	r4, 800cc86 <oslib_test_009_001_execute.lto_priv.0+0x56>
    dep->refs++;
 800cc6e:	6863      	ldr	r3, [r4, #4]
  FACTORY_UNLOCK();
 800cc70:	483c      	ldr	r0, [pc, #240]	; (800cd64 <oslib_test_009_001_execute.lto_priv.0+0x134>)
    dep->refs++;
 800cc72:	3301      	adds	r3, #1
 800cc74:	6063      	str	r3, [r4, #4]
  FACTORY_UNLOCK();
 800cc76:	f7f8 f81b 	bl	8004cb0 <chMtxUnlock>
  chtest.global_fail     = true;
 800cc7a:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800cc7e:	4a3b      	ldr	r2, [pc, #236]	; (800cd6c <oslib_test_009_001_execute.lto_priv.0+0x13c>)
  chtest.global_fail     = true;
 800cc80:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800cc82:	60ba      	str	r2, [r7, #8]
}
 800cc84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc86:	4837      	ldr	r0, [pc, #220]	; (800cd64 <oslib_test_009_001_execute.lto_priv.0+0x134>)
 800cc88:	f7f8 f812 	bl	8004cb0 <chMtxUnlock>
  test_set_step(2);
 800cc8c:	2302      	movs	r3, #2
    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
 800cc8e:	4838      	ldr	r0, [pc, #224]	; (800cd70 <oslib_test_009_001_execute.lto_priv.0+0x140>)
  test_set_step(2);
 800cc90:	603b      	str	r3, [r7, #0]
    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
 800cc92:	f7ff ff65 	bl	800cb60 <chFactoryRegisterObject.constprop.0>
  if (!condition) {
 800cc96:	4604      	mov	r4, r0
 800cc98:	2800      	cmp	r0, #0
 800cc9a:	d03d      	beq.n	800cd18 <oslib_test_009_001_execute.lto_priv.0+0xe8>
  test_set_step(3);
 800cc9c:	2503      	movs	r5, #3
    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
 800cc9e:	4835      	ldr	r0, [pc, #212]	; (800cd74 <oslib_test_009_001_execute.lto_priv.0+0x144>)
  test_set_step(3);
 800cca0:	603d      	str	r5, [r7, #0]
    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
 800cca2:	f7ff ff5d 	bl	800cb60 <chFactoryRegisterObject.constprop.0>
 800cca6:	2800      	cmp	r0, #0
 800cca8:	d13c      	bne.n	800cd24 <oslib_test_009_001_execute.lto_priv.0+0xf4>
  test_set_step(4);
 800ccaa:	2304      	movs	r3, #4
 800ccac:	603b      	str	r3, [r7, #0]
    rop1 = chFactoryFindObject("myobj");
 800ccae:	f7ff ff27 	bl	800cb00 <chFactoryFindObject.constprop.0>
 800ccb2:	2800      	cmp	r0, #0
 800ccb4:	d03c      	beq.n	800cd30 <oslib_test_009_001_execute.lto_priv.0+0x100>
 800ccb6:	f245 56aa 	movw	r6, #21930	; 0x55aa
    test_assert(*(uint32_t *)(rop1->objp) == 0x55aa, "object mismatch");
 800ccba:	6901      	ldr	r1, [r0, #16]
 800ccbc:	680a      	ldr	r2, [r1, #0]
 800ccbe:	42b2      	cmp	r2, r6
 800ccc0:	d142      	bne.n	800cd48 <oslib_test_009_001_execute.lto_priv.0+0x118>
 800ccc2:	4284      	cmp	r4, r0
 800ccc4:	d13a      	bne.n	800cd3c <oslib_test_009_001_execute.lto_priv.0+0x10c>
 800ccc6:	6863      	ldr	r3, [r4, #4]
 800ccc8:	2b02      	cmp	r3, #2
 800ccca:	d137      	bne.n	800cd3c <oslib_test_009_001_execute.lto_priv.0+0x10c>
 800cccc:	6065      	str	r5, [r4, #4]
 800ccce:	680b      	ldr	r3, [r1, #0]
 800ccd0:	4293      	cmp	r3, r2
 800ccd2:	d139      	bne.n	800cd48 <oslib_test_009_001_execute.lto_priv.0+0x118>
    chFactoryReleaseObject(rop2);
 800ccd4:	f7fd fb74 	bl	800a3c0 <chFactoryReleaseObject.isra.0>
 800ccd8:	6863      	ldr	r3, [r4, #4]
 800ccda:	2b02      	cmp	r3, #2
 800ccdc:	d13a      	bne.n	800cd54 <oslib_test_009_001_execute.lto_priv.0+0x124>
    chFactoryReleaseObject(rop1);
 800ccde:	4620      	mov	r0, r4
 800cce0:	f7fd fb6e 	bl	800a3c0 <chFactoryReleaseObject.isra.0>
    test_assert(rop->element.refs == 1, "references mismatch");
 800cce4:	6860      	ldr	r0, [r4, #4]
 800cce6:	4924      	ldr	r1, [pc, #144]	; (800cd78 <oslib_test_009_001_execute.lto_priv.0+0x148>)
 800cce8:	1e43      	subs	r3, r0, #1
 800ccea:	4258      	negs	r0, r3
 800ccec:	4158      	adcs	r0, r3
 800ccee:	f7fa f8af 	bl	8006e50 <__test_assert>
 800ccf2:	2800      	cmp	r0, #0
 800ccf4:	d1c6      	bne.n	800cc84 <oslib_test_009_001_execute.lto_priv.0+0x54>
  test_set_step(5);
 800ccf6:	2305      	movs	r3, #5
    chFactoryReleaseObject(rop);
 800ccf8:	4620      	mov	r0, r4
  test_set_step(5);
 800ccfa:	603b      	str	r3, [r7, #0]
    chFactoryReleaseObject(rop);
 800ccfc:	f7fd fb60 	bl	800a3c0 <chFactoryReleaseObject.isra.0>
  test_set_step(6);
 800cd00:	2306      	movs	r3, #6
 800cd02:	603b      	str	r3, [r7, #0]
    rop = chFactoryFindObject("myobj");
 800cd04:	f7ff fefc 	bl	800cb00 <chFactoryFindObject.constprop.0>
}
 800cd08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(rop == NULL, "found");
 800cd0c:	fab0 f080 	clz	r0, r0
 800cd10:	4916      	ldr	r1, [pc, #88]	; (800cd6c <oslib_test_009_001_execute.lto_priv.0+0x13c>)
 800cd12:	0940      	lsrs	r0, r0, #5
 800cd14:	f7fa b89c 	b.w	8006e50 <__test_assert>
  chtest.global_fail     = true;
 800cd18:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800cd1c:	4a17      	ldr	r2, [pc, #92]	; (800cd7c <oslib_test_009_001_execute.lto_priv.0+0x14c>)
  chtest.global_fail     = true;
 800cd1e:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800cd20:	60ba      	str	r2, [r7, #8]
}
 800cd22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800cd24:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800cd28:	4a15      	ldr	r2, [pc, #84]	; (800cd80 <oslib_test_009_001_execute.lto_priv.0+0x150>)
  chtest.global_fail     = true;
 800cd2a:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800cd2c:	60ba      	str	r2, [r7, #8]
 800cd2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800cd30:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800cd34:	4a13      	ldr	r2, [pc, #76]	; (800cd84 <oslib_test_009_001_execute.lto_priv.0+0x154>)
  chtest.global_fail     = true;
 800cd36:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800cd38:	60ba      	str	r2, [r7, #8]
 800cd3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800cd3c:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800cd40:	4a11      	ldr	r2, [pc, #68]	; (800cd88 <oslib_test_009_001_execute.lto_priv.0+0x158>)
  chtest.global_fail     = true;
 800cd42:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800cd44:	60ba      	str	r2, [r7, #8]
 800cd46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800cd48:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800cd4c:	4a0f      	ldr	r2, [pc, #60]	; (800cd8c <oslib_test_009_001_execute.lto_priv.0+0x15c>)
  chtest.global_fail     = true;
 800cd4e:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800cd50:	60ba      	str	r2, [r7, #8]
 800cd52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800cd54:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800cd58:	4a07      	ldr	r2, [pc, #28]	; (800cd78 <oslib_test_009_001_execute.lto_priv.0+0x148>)
  chtest.global_fail     = true;
 800cd5a:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800cd5c:	60ba      	str	r2, [r7, #8]
 800cd5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd60:	200010f4 	.word	0x200010f4
 800cd64:	20001e90 	.word	0x20001e90
 800cd68:	08012e8c 	.word	0x08012e8c
 800cd6c:	08012ed4 	.word	0x08012ed4
 800cd70:	20000890 	.word	0x20000890
 800cd74:	2000088c 	.word	0x2000088c
 800cd78:	08012ef8 	.word	0x08012ef8
 800cd7c:	08012f0c 	.word	0x08012f0c
 800cd80:	08012f1c 	.word	0x08012f1c
 800cd84:	08012ed0 	.word	0x08012ed0
 800cd88:	08012edc 	.word	0x08012edc
 800cd8c:	08012f2c 	.word	0x08012f2c

0800cd90 <chFactoryCreatePipe.constprop.0>:
dyn_pipe_t *chFactoryCreatePipe(const char *name, size_t size) {
 800cd90:	b538      	push	{r3, r4, r5, lr}
 800cd92:	2330      	movs	r3, #48	; 0x30
 800cd94:	f383 8811 	msr	BASEPRI, r3
 800cd98:	4816      	ldr	r0, [pc, #88]	; (800cdf4 <chFactoryCreatePipe.constprop.0+0x64>)
 800cd9a:	f7f7 fef1 	bl	8004b80 <chMtxLockS>
 800cd9e:	2500      	movs	r5, #0
 800cda0:	f385 8811 	msr	BASEPRI, r5
  dpp = (dyn_pipe_t *)dyn_create_object_heap(name,
 800cda4:	2308      	movs	r3, #8
 800cda6:	2270      	movs	r2, #112	; 0x70
 800cda8:	4913      	ldr	r1, [pc, #76]	; (800cdf8 <chFactoryCreatePipe.constprop.0+0x68>)
 800cdaa:	4814      	ldr	r0, [pc, #80]	; (800cdfc <chFactoryCreatePipe.constprop.0+0x6c>)
 800cdac:	f7f9 f8d8 	bl	8005f60 <dyn_create_object_heap.lto_priv.0>
  if (dpp != NULL) {
 800cdb0:	4604      	mov	r4, r0
 800cdb2:	b1d0      	cbz	r0, 800cdea <chFactoryCreatePipe.constprop.0+0x5a>
    chPipeObjectInit(&dpp->pipe, (uint8_t *)(dpp + 1), size);
 800cdb4:	f100 0360 	add.w	r3, r0, #96	; 0x60
  PC_INIT(pp);
 800cdb8:	f100 0130 	add.w	r1, r0, #48	; 0x30
  PW_INIT(pp);
 800cdbc:	f100 0240 	add.w	r2, r0, #64	; 0x40
  pp->top    = &buf[n];
 800cdc0:	3070      	adds	r0, #112	; 0x70
  pp->buffer = buf;
 800cdc2:	e9c4 3004 	strd	r3, r0, [r4, #16]
  pp->wrptr  = buf;
 800cdc6:	e9c4 3306 	strd	r3, r3, [r4, #24]
  PR_INIT(pp);
 800cdca:	f104 0350 	add.w	r3, r4, #80	; 0x50
  pp->rtr    = NULL;
 800cdce:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
 800cdd2:	e9c4 110c 	strd	r1, r1, [r4, #48]	; 0x30
 800cdd6:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
 800cdda:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
  pp->cnt    = (size_t)0;
 800cdde:	6225      	str	r5, [r4, #32]
  pp->reset  = false;
 800cde0:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  mp->owner = NULL;
 800cde4:	63a5      	str	r5, [r4, #56]	; 0x38
 800cde6:	64a5      	str	r5, [r4, #72]	; 0x48
 800cde8:	65a5      	str	r5, [r4, #88]	; 0x58
  FACTORY_UNLOCK();
 800cdea:	4802      	ldr	r0, [pc, #8]	; (800cdf4 <chFactoryCreatePipe.constprop.0+0x64>)
 800cdec:	f7f7 ff60 	bl	8004cb0 <chMtxUnlock>
}
 800cdf0:	4620      	mov	r0, r4
 800cdf2:	bd38      	pop	{r3, r4, r5, pc}
 800cdf4:	20001e90 	.word	0x20001e90
 800cdf8:	20001ed4 	.word	0x20001ed4
 800cdfc:	08012eac 	.word	0x08012eac

0800ce00 <oslib_test_009_006_execute.lto_priv.0>:

static void oslib_test_009_006_execute(void) {
  dyn_pipe_t *dpp;

  /* [9.6.1] Retrieving a dynamic pipe by name, must not exist.*/
  test_set_step(1);
 800ce00:	2201      	movs	r2, #1
static void oslib_test_009_006_execute(void) {
 800ce02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 800ce04:	4f3d      	ldr	r7, [pc, #244]	; (800cefc <oslib_test_009_006_execute.lto_priv.0+0xfc>)
 800ce06:	2330      	movs	r3, #48	; 0x30
 800ce08:	603a      	str	r2, [r7, #0]
 800ce0a:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(mp);
 800ce0e:	4d3c      	ldr	r5, [pc, #240]	; (800cf00 <oslib_test_009_006_execute.lto_priv.0+0x100>)
 800ce10:	4628      	mov	r0, r5
 800ce12:	f7f7 feb5 	bl	8004b80 <chMtxLockS>
 800ce16:	2300      	movs	r3, #0
 800ce18:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800ce1c:	f855 4f44 	ldr.w	r4, [r5, #68]!
  while (p != (dyn_element_t *)dlp) {
 800ce20:	42ac      	cmp	r4, r5
 800ce22:	d018      	beq.n	800ce56 <oslib_test_009_006_execute.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800ce24:	4e37      	ldr	r6, [pc, #220]	; (800cf04 <oslib_test_009_006_execute.lto_priv.0+0x104>)
 800ce26:	e002      	b.n	800ce2e <oslib_test_009_006_execute.lto_priv.0+0x2e>
    p = p->next;
 800ce28:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800ce2a:	42ac      	cmp	r4, r5
 800ce2c:	d013      	beq.n	800ce56 <oslib_test_009_006_execute.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800ce2e:	4631      	mov	r1, r6
 800ce30:	f104 0008 	add.w	r0, r4, #8
 800ce34:	f7f3 fb7c 	bl	8000530 <strcmp>
 800ce38:	2800      	cmp	r0, #0
 800ce3a:	d1f5      	bne.n	800ce28 <oslib_test_009_006_execute.lto_priv.0+0x28>
  if (dep != NULL) {
 800ce3c:	b15c      	cbz	r4, 800ce56 <oslib_test_009_006_execute.lto_priv.0+0x56>
    dep->refs++;
 800ce3e:	6863      	ldr	r3, [r4, #4]
  FACTORY_UNLOCK();
 800ce40:	482f      	ldr	r0, [pc, #188]	; (800cf00 <oslib_test_009_006_execute.lto_priv.0+0x100>)
    dep->refs++;
 800ce42:	3301      	adds	r3, #1
 800ce44:	6063      	str	r3, [r4, #4]
  FACTORY_UNLOCK();
 800ce46:	f7f7 ff33 	bl	8004cb0 <chMtxUnlock>
  chtest.global_fail     = true;
 800ce4a:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800ce4e:	4a2e      	ldr	r2, [pc, #184]	; (800cf08 <oslib_test_009_006_execute.lto_priv.0+0x108>)
  chtest.global_fail     = true;
 800ce50:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800ce52:	60ba      	str	r2, [r7, #8]
  {
    dpp = chFactoryFindPipe("mypipe");
    test_assert(dpp == NULL, "found");
  }
  test_end_step(6);
}
 800ce54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce56:	482a      	ldr	r0, [pc, #168]	; (800cf00 <oslib_test_009_006_execute.lto_priv.0+0x100>)
 800ce58:	f7f7 ff2a 	bl	8004cb0 <chMtxUnlock>
  test_set_step(2);
 800ce5c:	2302      	movs	r3, #2
 800ce5e:	603b      	str	r3, [r7, #0]
    dpp = chFactoryCreatePipe("mypipe", 16U);
 800ce60:	f7ff ff96 	bl	800cd90 <chFactoryCreatePipe.constprop.0>
  if (!condition) {
 800ce64:	4604      	mov	r4, r0
 800ce66:	b358      	cbz	r0, 800cec0 <oslib_test_009_006_execute.lto_priv.0+0xc0>
  test_set_step(3);
 800ce68:	2503      	movs	r5, #3
 800ce6a:	603d      	str	r5, [r7, #0]
    dpp1 = chFactoryCreatePipe("mypipe", 16U);
 800ce6c:	f7ff ff90 	bl	800cd90 <chFactoryCreatePipe.constprop.0>
 800ce70:	bb60      	cbnz	r0, 800cecc <oslib_test_009_006_execute.lto_priv.0+0xcc>
  test_set_step(4);
 800ce72:	2304      	movs	r3, #4
 800ce74:	603b      	str	r3, [r7, #0]
    dpp1 = chFactoryFindPipe("mypipe");
 800ce76:	f7ff fcc3 	bl	800c800 <chFactoryFindPipe.constprop.0>
 800ce7a:	b368      	cbz	r0, 800ced8 <oslib_test_009_006_execute.lto_priv.0+0xd8>
 800ce7c:	4284      	cmp	r4, r0
 800ce7e:	d131      	bne.n	800cee4 <oslib_test_009_006_execute.lto_priv.0+0xe4>
 800ce80:	6863      	ldr	r3, [r4, #4]
 800ce82:	2b02      	cmp	r3, #2
 800ce84:	d12e      	bne.n	800cee4 <oslib_test_009_006_execute.lto_priv.0+0xe4>
 800ce86:	6065      	str	r5, [r4, #4]
    chFactoryReleasePipe(dpp2);
 800ce88:	f7ff f81a 	bl	800bec0 <chFactoryReleasePipe.isra.0>
 800ce8c:	6863      	ldr	r3, [r4, #4]
 800ce8e:	2b02      	cmp	r3, #2
 800ce90:	d12e      	bne.n	800cef0 <oslib_test_009_006_execute.lto_priv.0+0xf0>
    chFactoryReleasePipe(dpp1);
 800ce92:	4620      	mov	r0, r4
 800ce94:	f7ff f814 	bl	800bec0 <chFactoryReleasePipe.isra.0>
 800ce98:	6863      	ldr	r3, [r4, #4]
 800ce9a:	2b01      	cmp	r3, #1
 800ce9c:	d128      	bne.n	800cef0 <oslib_test_009_006_execute.lto_priv.0+0xf0>
  test_set_step(5);
 800ce9e:	2305      	movs	r3, #5
    chFactoryReleasePipe(dpp);
 800cea0:	4620      	mov	r0, r4
  test_set_step(5);
 800cea2:	603b      	str	r3, [r7, #0]
    chFactoryReleasePipe(dpp);
 800cea4:	f7ff f80c 	bl	800bec0 <chFactoryReleasePipe.isra.0>
  test_set_step(6);
 800cea8:	2306      	movs	r3, #6
 800ceaa:	603b      	str	r3, [r7, #0]
    dpp = chFactoryFindPipe("mypipe");
 800ceac:	f7ff fca8 	bl	800c800 <chFactoryFindPipe.constprop.0>
 800ceb0:	2800      	cmp	r0, #0
 800ceb2:	d0cf      	beq.n	800ce54 <oslib_test_009_006_execute.lto_priv.0+0x54>
  chtest.global_fail     = true;
 800ceb4:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800ceb8:	4a13      	ldr	r2, [pc, #76]	; (800cf08 <oslib_test_009_006_execute.lto_priv.0+0x108>)
  chtest.global_fail     = true;
 800ceba:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800cebc:	60ba      	str	r2, [r7, #8]
}
 800cebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800cec0:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800cec4:	4a11      	ldr	r2, [pc, #68]	; (800cf0c <oslib_test_009_006_execute.lto_priv.0+0x10c>)
  chtest.global_fail     = true;
 800cec6:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800cec8:	60ba      	str	r2, [r7, #8]
 800ceca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800cecc:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800ced0:	4a0f      	ldr	r2, [pc, #60]	; (800cf10 <oslib_test_009_006_execute.lto_priv.0+0x110>)
  chtest.global_fail     = true;
 800ced2:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800ced4:	60ba      	str	r2, [r7, #8]
 800ced6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800ced8:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800cedc:	4a0d      	ldr	r2, [pc, #52]	; (800cf14 <oslib_test_009_006_execute.lto_priv.0+0x114>)
  chtest.global_fail     = true;
 800cede:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800cee0:	60ba      	str	r2, [r7, #8]
 800cee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800cee4:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800cee8:	4a0b      	ldr	r2, [pc, #44]	; (800cf18 <oslib_test_009_006_execute.lto_priv.0+0x118>)
  chtest.global_fail     = true;
 800ceea:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800ceec:	60ba      	str	r2, [r7, #8]
 800ceee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800cef0:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800cef4:	4a09      	ldr	r2, [pc, #36]	; (800cf1c <oslib_test_009_006_execute.lto_priv.0+0x11c>)
  chtest.global_fail     = true;
 800cef6:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800cef8:	60ba      	str	r2, [r7, #8]
 800cefa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cefc:	200010f4 	.word	0x200010f4
 800cf00:	20001e90 	.word	0x20001e90
 800cf04:	08012eac 	.word	0x08012eac
 800cf08:	08012ed4 	.word	0x08012ed4
 800cf0c:	08012eb4 	.word	0x08012eb4
 800cf10:	08012ec4 	.word	0x08012ec4
 800cf14:	08012ed0 	.word	0x08012ed0
 800cf18:	08012edc 	.word	0x08012edc
 800cf1c:	08012ef8 	.word	0x08012ef8

0800cf20 <chFactoryCreateObjectsFIFO.constprop.0>:
dyn_objects_fifo_t *chFactoryCreateObjectsFIFO(const char *name,
 800cf20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf24:	f04f 0830 	mov.w	r8, #48	; 0x30
 800cf28:	b083      	sub	sp, #12
 800cf2a:	f388 8811 	msr	BASEPRI, r8
 800cf2e:	4835      	ldr	r0, [pc, #212]	; (800d004 <chFactoryCreateObjectsFIFO.constprop.0+0xe4>)
 800cf30:	f7f7 fe26 	bl	8004b80 <chMtxLockS>
 800cf34:	2700      	movs	r7, #0
 800cf36:	f387 8811 	msr	BASEPRI, r7
  dofp = (dyn_objects_fifo_t *)dyn_create_object_heap(name,
 800cf3a:	2304      	movs	r3, #4
 800cf3c:	f44f 72ca 	mov.w	r2, #404	; 0x194
 800cf40:	4931      	ldr	r1, [pc, #196]	; (800d008 <chFactoryCreateObjectsFIFO.constprop.0+0xe8>)
 800cf42:	4832      	ldr	r0, [pc, #200]	; (800d00c <chFactoryCreateObjectsFIFO.constprop.0+0xec>)
 800cf44:	f7f9 f80c 	bl	8005f60 <dyn_create_object_heap.lto_priv.0>
  if (dofp != NULL) {
 800cf48:	4604      	mov	r4, r0
 800cf4a:	2800      	cmp	r0, #0
 800cf4c:	d052      	beq.n	800cff4 <chFactoryCreateObjectsFIFO.constprop.0+0xd4>
    uint8_t *objbuf = (uint8_t *)dofp + size1;
 800cf4e:	f100 0394 	add.w	r3, r0, #148	; 0x94
  mp->object_size = size;
 800cf52:	2610      	movs	r6, #16
 800cf54:	461d      	mov	r5, r3
 800cf56:	9301      	str	r3, [sp, #4]
  mp->align = align;
 800cf58:	2304      	movs	r3, #4
                                           size_t objn, unsigned objalign,
                                           void *objbuf, msg_t *msgbuf) {

  chDbgCheck((objsize >= objalign) && ((objsize % objalign) == 0U));

  chGuardedPoolObjectInitAligned(&ofp->free, objsize, objalign);
 800cf5a:	eb00 0906 	add.w	r9, r0, r6
  mp->object_size = size;
 800cf5e:	e9c0 6308 	strd	r6, r3, [r0, #32]
 800cf62:	e9c0 9904 	strd	r9, r9, [r0, #16]
 800cf66:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800d010 <chFactoryCreateObjectsFIFO.constprop.0+0xf0>
    msg_t *msgbuf = (msg_t *)(dofp + 1);
 800cf6a:	f100 0b54 	add.w	fp, r0, #84	; 0x54
  mp->next = NULL;
 800cf6e:	61c7      	str	r7, [r0, #28]
  mp->provider = provider;
 800cf70:	6287      	str	r7, [r0, #40]	; 0x28
 800cf72:	6187      	str	r7, [r0, #24]
 800cf74:	e00f      	b.n	800cf96 <chFactoryCreateObjectsFIFO.constprop.0+0x76>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800cf76:	f8da 2000 	ldr.w	r2, [sl]
 800cf7a:	f8da 300c 	ldr.w	r3, [sl, #12]
 800cf7e:	6892      	ldr	r2, [r2, #8]
 800cf80:	689b      	ldr	r3, [r3, #8]
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d901      	bls.n	800cf8a <chFactoryCreateObjectsFIFO.constprop.0+0x6a>
    __sch_reschedule_ahead();
 800cf86:	f7f6 ff6b 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 800cf8a:	f387 8811 	msr	BASEPRI, r7
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 800cf8e:	6a23      	ldr	r3, [r4, #32]
  while (n != 0U) {
 800cf90:	3e01      	subs	r6, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 800cf92:	441d      	add	r5, r3
  while (n != 0U) {
 800cf94:	d01d      	beq.n	800cfd2 <chFactoryCreateObjectsFIFO.constprop.0+0xb2>
 800cf96:	f388 8811 	msr	BASEPRI, r8
  php->next = mp->next;
 800cf9a:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
  if (++sp->cnt <= (cnt_t)0) {
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	602a      	str	r2, [r5, #0]
 800cfa4:	e9c4 3506 	strd	r3, r5, [r4, #24]
 800cfa8:	dce5      	bgt.n	800cf76 <chFactoryCreateObjectsFIFO.constprop.0+0x56>
  ch_queue_t *p = qp->next;
 800cfaa:	6922      	ldr	r2, [r4, #16]
  qp->next       = p->next;
 800cfac:	6813      	ldr	r3, [r2, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800cfae:	6991      	ldr	r1, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800cfb0:	6890      	ldr	r0, [r2, #8]
  qp->next       = p->next;
 800cfb2:	6123      	str	r3, [r4, #16]
  qp->next->prev = qp;
 800cfb4:	f8c3 9004 	str.w	r9, [r3, #4]
    tp->u.rdymsg = MSG_OK;
 800cfb8:	62d7      	str	r7, [r2, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 800cfba:	f882 7028 	strb.w	r7, [r2, #40]	; 0x28
    pqp = pqp->next;
 800cfbe:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800cfc0:	688b      	ldr	r3, [r1, #8]
 800cfc2:	4283      	cmp	r3, r0
 800cfc4:	d2fb      	bcs.n	800cfbe <chFactoryCreateObjectsFIFO.constprop.0+0x9e>
  p->prev       = pqp->prev;
 800cfc6:	684b      	ldr	r3, [r1, #4]
  p->next       = pqp;
 800cfc8:	6011      	str	r1, [r2, #0]
  p->prev       = pqp->prev;
 800cfca:	6053      	str	r3, [r2, #4]
  p->prev->next = p;
 800cfcc:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
 800cfce:	604a      	str	r2, [r1, #4]
  return __sch_ready_behind(tp);
 800cfd0:	e7d1      	b.n	800cf76 <chFactoryCreateObjectsFIFO.constprop.0+0x56>
  mbp->top    = &buf[n];
 800cfd2:	9b01      	ldr	r3, [sp, #4]
  chThdQueueObjectInit(&mbp->qw);
 800cfd4:	f104 0244 	add.w	r2, r4, #68	; 0x44
  mbp->top    = &buf[n];
 800cfd8:	6323      	str	r3, [r4, #48]	; 0x30
  chThdQueueObjectInit(&mbp->qr);
 800cfda:	f104 034c 	add.w	r3, r4, #76	; 0x4c
  mbp->wrptr  = buf;
 800cfde:	e9c4 bb0d 	strd	fp, fp, [r4, #52]	; 0x34
  qp->prev = qp;
 800cfe2:	e9c4 2211 	strd	r2, r2, [r4, #68]	; 0x44
 800cfe6:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  mbp->buffer = buf;
 800cfea:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
  mbp->cnt    = (size_t)0;
 800cfee:	63e6      	str	r6, [r4, #60]	; 0x3c
  mbp->reset  = false;
 800cff0:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  FACTORY_UNLOCK();
 800cff4:	4803      	ldr	r0, [pc, #12]	; (800d004 <chFactoryCreateObjectsFIFO.constprop.0+0xe4>)
 800cff6:	f7f7 fe5b 	bl	8004cb0 <chMtxUnlock>
}
 800cffa:	4620      	mov	r0, r4
 800cffc:	b003      	add	sp, #12
 800cffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d002:	bf00      	nop
 800d004:	20001e90 	.word	0x20001e90
 800d008:	20001ed0 	.word	0x20001ed0
 800d00c:	08012ea4 	.word	0x08012ea4
 800d010:	20001050 	.word	0x20001050
	...

0800d020 <oslib_test_009_005_execute.lto_priv.0>:
  test_set_step(1);
 800d020:	2201      	movs	r2, #1
static void oslib_test_009_005_execute(void) {
 800d022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 800d024:	4f3d      	ldr	r7, [pc, #244]	; (800d11c <oslib_test_009_005_execute.lto_priv.0+0xfc>)
 800d026:	2330      	movs	r3, #48	; 0x30
 800d028:	603a      	str	r2, [r7, #0]
 800d02a:	f383 8811 	msr	BASEPRI, r3
 800d02e:	4d3c      	ldr	r5, [pc, #240]	; (800d120 <oslib_test_009_005_execute.lto_priv.0+0x100>)
 800d030:	4628      	mov	r0, r5
 800d032:	f7f7 fda5 	bl	8004b80 <chMtxLockS>
 800d036:	2300      	movs	r3, #0
 800d038:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800d03c:	f855 4f40 	ldr.w	r4, [r5, #64]!
  while (p != (dyn_element_t *)dlp) {
 800d040:	42ac      	cmp	r4, r5
 800d042:	d018      	beq.n	800d076 <oslib_test_009_005_execute.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800d044:	4e37      	ldr	r6, [pc, #220]	; (800d124 <oslib_test_009_005_execute.lto_priv.0+0x104>)
 800d046:	e002      	b.n	800d04e <oslib_test_009_005_execute.lto_priv.0+0x2e>
    p = p->next;
 800d048:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800d04a:	42ac      	cmp	r4, r5
 800d04c:	d013      	beq.n	800d076 <oslib_test_009_005_execute.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800d04e:	4631      	mov	r1, r6
 800d050:	f104 0008 	add.w	r0, r4, #8
 800d054:	f7f3 fa6c 	bl	8000530 <strcmp>
 800d058:	2800      	cmp	r0, #0
 800d05a:	d1f5      	bne.n	800d048 <oslib_test_009_005_execute.lto_priv.0+0x28>
  if (dep != NULL) {
 800d05c:	b15c      	cbz	r4, 800d076 <oslib_test_009_005_execute.lto_priv.0+0x56>
    dep->refs++;
 800d05e:	6863      	ldr	r3, [r4, #4]
  FACTORY_UNLOCK();
 800d060:	482f      	ldr	r0, [pc, #188]	; (800d120 <oslib_test_009_005_execute.lto_priv.0+0x100>)
    dep->refs++;
 800d062:	3301      	adds	r3, #1
 800d064:	6063      	str	r3, [r4, #4]
  FACTORY_UNLOCK();
 800d066:	f7f7 fe23 	bl	8004cb0 <chMtxUnlock>
  chtest.global_fail     = true;
 800d06a:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800d06e:	4a2e      	ldr	r2, [pc, #184]	; (800d128 <oslib_test_009_005_execute.lto_priv.0+0x108>)
  chtest.global_fail     = true;
 800d070:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800d072:	60ba      	str	r2, [r7, #8]
}
 800d074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d076:	482a      	ldr	r0, [pc, #168]	; (800d120 <oslib_test_009_005_execute.lto_priv.0+0x100>)
 800d078:	f7f7 fe1a 	bl	8004cb0 <chMtxUnlock>
  test_set_step(2);
 800d07c:	2302      	movs	r3, #2
 800d07e:	603b      	str	r3, [r7, #0]
    dofp = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 800d080:	f7ff ff4e 	bl	800cf20 <chFactoryCreateObjectsFIFO.constprop.0>
  if (!condition) {
 800d084:	4604      	mov	r4, r0
 800d086:	b358      	cbz	r0, 800d0e0 <oslib_test_009_005_execute.lto_priv.0+0xc0>
  test_set_step(3);
 800d088:	2503      	movs	r5, #3
 800d08a:	603d      	str	r5, [r7, #0]
    dofp1 = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 800d08c:	f7ff ff48 	bl	800cf20 <chFactoryCreateObjectsFIFO.constprop.0>
 800d090:	bb60      	cbnz	r0, 800d0ec <oslib_test_009_005_execute.lto_priv.0+0xcc>
  test_set_step(4);
 800d092:	2304      	movs	r3, #4
 800d094:	603b      	str	r3, [r7, #0]
    dofp1 = chFactoryFindObjectsFIFO("myfifo");
 800d096:	f7ff fbe3 	bl	800c860 <chFactoryFindObjectsFIFO.constprop.0>
 800d09a:	b368      	cbz	r0, 800d0f8 <oslib_test_009_005_execute.lto_priv.0+0xd8>
 800d09c:	4284      	cmp	r4, r0
 800d09e:	d131      	bne.n	800d104 <oslib_test_009_005_execute.lto_priv.0+0xe4>
 800d0a0:	6863      	ldr	r3, [r4, #4]
 800d0a2:	2b02      	cmp	r3, #2
 800d0a4:	d12e      	bne.n	800d104 <oslib_test_009_005_execute.lto_priv.0+0xe4>
 800d0a6:	6065      	str	r5, [r4, #4]
    chFactoryReleaseObjectsFIFO(dofp2);
 800d0a8:	f7fe fee2 	bl	800be70 <chFactoryReleaseObjectsFIFO.isra.0>
 800d0ac:	6863      	ldr	r3, [r4, #4]
 800d0ae:	2b02      	cmp	r3, #2
 800d0b0:	d12e      	bne.n	800d110 <oslib_test_009_005_execute.lto_priv.0+0xf0>
    chFactoryReleaseObjectsFIFO(dofp1);
 800d0b2:	4620      	mov	r0, r4
 800d0b4:	f7fe fedc 	bl	800be70 <chFactoryReleaseObjectsFIFO.isra.0>
 800d0b8:	6863      	ldr	r3, [r4, #4]
 800d0ba:	2b01      	cmp	r3, #1
 800d0bc:	d128      	bne.n	800d110 <oslib_test_009_005_execute.lto_priv.0+0xf0>
  test_set_step(5);
 800d0be:	2305      	movs	r3, #5
    chFactoryReleaseObjectsFIFO(dofp);
 800d0c0:	4620      	mov	r0, r4
  test_set_step(5);
 800d0c2:	603b      	str	r3, [r7, #0]
    chFactoryReleaseObjectsFIFO(dofp);
 800d0c4:	f7fe fed4 	bl	800be70 <chFactoryReleaseObjectsFIFO.isra.0>
  test_set_step(6);
 800d0c8:	2306      	movs	r3, #6
 800d0ca:	603b      	str	r3, [r7, #0]
    dofp = chFactoryFindObjectsFIFO("myfifo");
 800d0cc:	f7ff fbc8 	bl	800c860 <chFactoryFindObjectsFIFO.constprop.0>
 800d0d0:	2800      	cmp	r0, #0
 800d0d2:	d0cf      	beq.n	800d074 <oslib_test_009_005_execute.lto_priv.0+0x54>
  chtest.global_fail     = true;
 800d0d4:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800d0d8:	4a13      	ldr	r2, [pc, #76]	; (800d128 <oslib_test_009_005_execute.lto_priv.0+0x108>)
  chtest.global_fail     = true;
 800d0da:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800d0dc:	60ba      	str	r2, [r7, #8]
}
 800d0de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800d0e0:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800d0e4:	4a11      	ldr	r2, [pc, #68]	; (800d12c <oslib_test_009_005_execute.lto_priv.0+0x10c>)
  chtest.global_fail     = true;
 800d0e6:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800d0e8:	60ba      	str	r2, [r7, #8]
 800d0ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800d0ec:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800d0f0:	4a0f      	ldr	r2, [pc, #60]	; (800d130 <oslib_test_009_005_execute.lto_priv.0+0x110>)
  chtest.global_fail     = true;
 800d0f2:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800d0f4:	60ba      	str	r2, [r7, #8]
 800d0f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800d0f8:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800d0fc:	4a0d      	ldr	r2, [pc, #52]	; (800d134 <oslib_test_009_005_execute.lto_priv.0+0x114>)
  chtest.global_fail     = true;
 800d0fe:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800d100:	60ba      	str	r2, [r7, #8]
 800d102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800d104:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800d108:	4a0b      	ldr	r2, [pc, #44]	; (800d138 <oslib_test_009_005_execute.lto_priv.0+0x118>)
  chtest.global_fail     = true;
 800d10a:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800d10c:	60ba      	str	r2, [r7, #8]
 800d10e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800d110:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800d114:	4a09      	ldr	r2, [pc, #36]	; (800d13c <oslib_test_009_005_execute.lto_priv.0+0x11c>)
  chtest.global_fail     = true;
 800d116:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800d118:	60ba      	str	r2, [r7, #8]
 800d11a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d11c:	200010f4 	.word	0x200010f4
 800d120:	20001e90 	.word	0x20001e90
 800d124:	08012ea4 	.word	0x08012ea4
 800d128:	08012ed4 	.word	0x08012ed4
 800d12c:	08012eb4 	.word	0x08012eb4
 800d130:	08012ec4 	.word	0x08012ec4
 800d134:	08012ed0 	.word	0x08012ed0
 800d138:	08012edc 	.word	0x08012edc
 800d13c:	08012ef8 	.word	0x08012ef8

0800d140 <chFactoryCreateMailbox.constprop.0>:
dyn_mailbox_t *chFactoryCreateMailbox(const char *name, size_t n) {
 800d140:	b538      	push	{r3, r4, r5, lr}
 800d142:	2330      	movs	r3, #48	; 0x30
 800d144:	f383 8811 	msr	BASEPRI, r3
 800d148:	4812      	ldr	r0, [pc, #72]	; (800d194 <chFactoryCreateMailbox.constprop.0+0x54>)
 800d14a:	f7f7 fd19 	bl	8004b80 <chMtxLockS>
 800d14e:	2500      	movs	r5, #0
 800d150:	f385 8811 	msr	BASEPRI, r5
  dmp = (dyn_mailbox_t *)dyn_create_object_heap(name,
 800d154:	2308      	movs	r3, #8
 800d156:	2278      	movs	r2, #120	; 0x78
 800d158:	490f      	ldr	r1, [pc, #60]	; (800d198 <chFactoryCreateMailbox.constprop.0+0x58>)
 800d15a:	4810      	ldr	r0, [pc, #64]	; (800d19c <chFactoryCreateMailbox.constprop.0+0x5c>)
 800d15c:	f7f8 ff00 	bl	8005f60 <dyn_create_object_heap.lto_priv.0>
  if (dmp != NULL) {
 800d160:	4604      	mov	r4, r0
 800d162:	b188      	cbz	r0, 800d188 <chFactoryCreateMailbox.constprop.0+0x48>
    chMBObjectInit(&dmp->mbx, (msg_t *)(dmp + 1), n);
 800d164:	f100 0338 	add.w	r3, r0, #56	; 0x38
  chThdQueueObjectInit(&mbp->qw);
 800d168:	f100 0128 	add.w	r1, r0, #40	; 0x28
  chThdQueueObjectInit(&mbp->qr);
 800d16c:	f100 0230 	add.w	r2, r0, #48	; 0x30
  mbp->top    = &buf[n];
 800d170:	3078      	adds	r0, #120	; 0x78
  mbp->buffer = buf;
 800d172:	e9c4 3004 	strd	r3, r0, [r4, #16]
  mbp->wrptr  = buf;
 800d176:	e9c4 3306 	strd	r3, r3, [r4, #24]
 800d17a:	e9c4 110a 	strd	r1, r1, [r4, #40]	; 0x28
 800d17e:	e9c4 220c 	strd	r2, r2, [r4, #48]	; 0x30
  mbp->cnt    = (size_t)0;
 800d182:	6225      	str	r5, [r4, #32]
  mbp->reset  = false;
 800d184:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  FACTORY_UNLOCK();
 800d188:	4802      	ldr	r0, [pc, #8]	; (800d194 <chFactoryCreateMailbox.constprop.0+0x54>)
 800d18a:	f7f7 fd91 	bl	8004cb0 <chMtxUnlock>
}
 800d18e:	4620      	mov	r0, r4
 800d190:	bd38      	pop	{r3, r4, r5, pc}
 800d192:	bf00      	nop
 800d194:	20001e90 	.word	0x20001e90
 800d198:	20001ecc 	.word	0x20001ecc
 800d19c:	08012e9c 	.word	0x08012e9c

0800d1a0 <oslib_test_009_004_execute.lto_priv.0>:
  test_set_step(1);
 800d1a0:	2201      	movs	r2, #1
static void oslib_test_009_004_execute(void) {
 800d1a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 800d1a4:	4f3d      	ldr	r7, [pc, #244]	; (800d29c <oslib_test_009_004_execute.lto_priv.0+0xfc>)
 800d1a6:	2330      	movs	r3, #48	; 0x30
 800d1a8:	603a      	str	r2, [r7, #0]
 800d1aa:	f383 8811 	msr	BASEPRI, r3
 800d1ae:	4d3c      	ldr	r5, [pc, #240]	; (800d2a0 <oslib_test_009_004_execute.lto_priv.0+0x100>)
 800d1b0:	4628      	mov	r0, r5
 800d1b2:	f7f7 fce5 	bl	8004b80 <chMtxLockS>
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800d1bc:	f855 4f3c 	ldr.w	r4, [r5, #60]!
  while (p != (dyn_element_t *)dlp) {
 800d1c0:	42ac      	cmp	r4, r5
 800d1c2:	d018      	beq.n	800d1f6 <oslib_test_009_004_execute.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800d1c4:	4e37      	ldr	r6, [pc, #220]	; (800d2a4 <oslib_test_009_004_execute.lto_priv.0+0x104>)
 800d1c6:	e002      	b.n	800d1ce <oslib_test_009_004_execute.lto_priv.0+0x2e>
    p = p->next;
 800d1c8:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800d1ca:	42ac      	cmp	r4, r5
 800d1cc:	d013      	beq.n	800d1f6 <oslib_test_009_004_execute.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800d1ce:	4631      	mov	r1, r6
 800d1d0:	f104 0008 	add.w	r0, r4, #8
 800d1d4:	f7f3 f9ac 	bl	8000530 <strcmp>
 800d1d8:	2800      	cmp	r0, #0
 800d1da:	d1f5      	bne.n	800d1c8 <oslib_test_009_004_execute.lto_priv.0+0x28>
  if (dep != NULL) {
 800d1dc:	b15c      	cbz	r4, 800d1f6 <oslib_test_009_004_execute.lto_priv.0+0x56>
    dep->refs++;
 800d1de:	6863      	ldr	r3, [r4, #4]
  FACTORY_UNLOCK();
 800d1e0:	482f      	ldr	r0, [pc, #188]	; (800d2a0 <oslib_test_009_004_execute.lto_priv.0+0x100>)
    dep->refs++;
 800d1e2:	3301      	adds	r3, #1
 800d1e4:	6063      	str	r3, [r4, #4]
  FACTORY_UNLOCK();
 800d1e6:	f7f7 fd63 	bl	8004cb0 <chMtxUnlock>
  chtest.global_fail     = true;
 800d1ea:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800d1ee:	4a2e      	ldr	r2, [pc, #184]	; (800d2a8 <oslib_test_009_004_execute.lto_priv.0+0x108>)
  chtest.global_fail     = true;
 800d1f0:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800d1f2:	60ba      	str	r2, [r7, #8]
}
 800d1f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1f6:	482a      	ldr	r0, [pc, #168]	; (800d2a0 <oslib_test_009_004_execute.lto_priv.0+0x100>)
 800d1f8:	f7f7 fd5a 	bl	8004cb0 <chMtxUnlock>
  test_set_step(2);
 800d1fc:	2302      	movs	r3, #2
 800d1fe:	603b      	str	r3, [r7, #0]
    dmp = chFactoryCreateMailbox("mymbx", 16U);
 800d200:	f7ff ff9e 	bl	800d140 <chFactoryCreateMailbox.constprop.0>
  if (!condition) {
 800d204:	4604      	mov	r4, r0
 800d206:	b358      	cbz	r0, 800d260 <oslib_test_009_004_execute.lto_priv.0+0xc0>
  test_set_step(3);
 800d208:	2503      	movs	r5, #3
 800d20a:	603d      	str	r5, [r7, #0]
    dmp1 = chFactoryCreateMailbox("mymbx", 16U);
 800d20c:	f7ff ff98 	bl	800d140 <chFactoryCreateMailbox.constprop.0>
 800d210:	bb60      	cbnz	r0, 800d26c <oslib_test_009_004_execute.lto_priv.0+0xcc>
  test_set_step(4);
 800d212:	2304      	movs	r3, #4
 800d214:	603b      	str	r3, [r7, #0]
    dmp1 = chFactoryFindMailbox("mymbx");
 800d216:	f7ff fb53 	bl	800c8c0 <chFactoryFindMailbox.constprop.0>
 800d21a:	b368      	cbz	r0, 800d278 <oslib_test_009_004_execute.lto_priv.0+0xd8>
 800d21c:	4284      	cmp	r4, r0
 800d21e:	d131      	bne.n	800d284 <oslib_test_009_004_execute.lto_priv.0+0xe4>
 800d220:	6863      	ldr	r3, [r4, #4]
 800d222:	2b02      	cmp	r3, #2
 800d224:	d12e      	bne.n	800d284 <oslib_test_009_004_execute.lto_priv.0+0xe4>
 800d226:	6065      	str	r5, [r4, #4]
    chFactoryReleaseMailbox(dmp2);
 800d228:	f7fe fe72 	bl	800bf10 <chFactoryReleaseMailbox.isra.0>
 800d22c:	6863      	ldr	r3, [r4, #4]
 800d22e:	2b02      	cmp	r3, #2
 800d230:	d12e      	bne.n	800d290 <oslib_test_009_004_execute.lto_priv.0+0xf0>
    chFactoryReleaseMailbox(dmp1);
 800d232:	4620      	mov	r0, r4
 800d234:	f7fe fe6c 	bl	800bf10 <chFactoryReleaseMailbox.isra.0>
 800d238:	6863      	ldr	r3, [r4, #4]
 800d23a:	2b01      	cmp	r3, #1
 800d23c:	d128      	bne.n	800d290 <oslib_test_009_004_execute.lto_priv.0+0xf0>
  test_set_step(5);
 800d23e:	2305      	movs	r3, #5
    chFactoryReleaseMailbox(dmp);
 800d240:	4620      	mov	r0, r4
  test_set_step(5);
 800d242:	603b      	str	r3, [r7, #0]
    chFactoryReleaseMailbox(dmp);
 800d244:	f7fe fe64 	bl	800bf10 <chFactoryReleaseMailbox.isra.0>
  test_set_step(6);
 800d248:	2306      	movs	r3, #6
 800d24a:	603b      	str	r3, [r7, #0]
    dmp = chFactoryFindMailbox("mymbx");
 800d24c:	f7ff fb38 	bl	800c8c0 <chFactoryFindMailbox.constprop.0>
 800d250:	2800      	cmp	r0, #0
 800d252:	d0cf      	beq.n	800d1f4 <oslib_test_009_004_execute.lto_priv.0+0x54>
  chtest.global_fail     = true;
 800d254:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800d258:	4a13      	ldr	r2, [pc, #76]	; (800d2a8 <oslib_test_009_004_execute.lto_priv.0+0x108>)
  chtest.global_fail     = true;
 800d25a:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800d25c:	60ba      	str	r2, [r7, #8]
}
 800d25e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800d260:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800d264:	4a11      	ldr	r2, [pc, #68]	; (800d2ac <oslib_test_009_004_execute.lto_priv.0+0x10c>)
  chtest.global_fail     = true;
 800d266:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800d268:	60ba      	str	r2, [r7, #8]
 800d26a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800d26c:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800d270:	4a0f      	ldr	r2, [pc, #60]	; (800d2b0 <oslib_test_009_004_execute.lto_priv.0+0x110>)
  chtest.global_fail     = true;
 800d272:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800d274:	60ba      	str	r2, [r7, #8]
 800d276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800d278:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800d27c:	4a0d      	ldr	r2, [pc, #52]	; (800d2b4 <oslib_test_009_004_execute.lto_priv.0+0x114>)
  chtest.global_fail     = true;
 800d27e:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800d280:	60ba      	str	r2, [r7, #8]
 800d282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800d284:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800d288:	4a0b      	ldr	r2, [pc, #44]	; (800d2b8 <oslib_test_009_004_execute.lto_priv.0+0x118>)
  chtest.global_fail     = true;
 800d28a:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800d28c:	60ba      	str	r2, [r7, #8]
 800d28e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.global_fail     = true;
 800d290:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800d294:	4a09      	ldr	r2, [pc, #36]	; (800d2bc <oslib_test_009_004_execute.lto_priv.0+0x11c>)
  chtest.global_fail     = true;
 800d296:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800d298:	60ba      	str	r2, [r7, #8]
 800d29a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d29c:	200010f4 	.word	0x200010f4
 800d2a0:	20001e90 	.word	0x20001e90
 800d2a4:	08012e9c 	.word	0x08012e9c
 800d2a8:	08012ed4 	.word	0x08012ed4
 800d2ac:	08012eb4 	.word	0x08012eb4
 800d2b0:	08012ec4 	.word	0x08012ec4
 800d2b4:	08012ed0 	.word	0x08012ed0
 800d2b8:	08012edc 	.word	0x08012edc
 800d2bc:	08012ef8 	.word	0x08012ef8

0800d2c0 <oslib_test_009_002_execute.lto_priv.0>:
  test_set_step(1);
 800d2c0:	2201      	movs	r2, #1
static void oslib_test_009_002_execute(void) {
 800d2c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 800d2c6:	4f59      	ldr	r7, [pc, #356]	; (800d42c <oslib_test_009_002_execute.lto_priv.0+0x16c>)
 800d2c8:	2330      	movs	r3, #48	; 0x30
 800d2ca:	603a      	str	r2, [r7, #0]
 800d2cc:	f383 8811 	msr	BASEPRI, r3
 800d2d0:	4d57      	ldr	r5, [pc, #348]	; (800d430 <oslib_test_009_002_execute.lto_priv.0+0x170>)
 800d2d2:	4628      	mov	r0, r5
 800d2d4:	f7f7 fc54 	bl	8004b80 <chMtxLockS>
 800d2d8:	2300      	movs	r3, #0
 800d2da:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800d2de:	f855 4f24 	ldr.w	r4, [r5, #36]!
  while (p != (dyn_element_t *)dlp) {
 800d2e2:	42ac      	cmp	r4, r5
 800d2e4:	d019      	beq.n	800d31a <oslib_test_009_002_execute.lto_priv.0+0x5a>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800d2e6:	4e53      	ldr	r6, [pc, #332]	; (800d434 <oslib_test_009_002_execute.lto_priv.0+0x174>)
 800d2e8:	e002      	b.n	800d2f0 <oslib_test_009_002_execute.lto_priv.0+0x30>
    p = p->next;
 800d2ea:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800d2ec:	42ac      	cmp	r4, r5
 800d2ee:	d014      	beq.n	800d31a <oslib_test_009_002_execute.lto_priv.0+0x5a>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800d2f0:	4631      	mov	r1, r6
 800d2f2:	f104 0008 	add.w	r0, r4, #8
 800d2f6:	f7f3 f91b 	bl	8000530 <strcmp>
 800d2fa:	2800      	cmp	r0, #0
 800d2fc:	d1f5      	bne.n	800d2ea <oslib_test_009_002_execute.lto_priv.0+0x2a>
  if (dep != NULL) {
 800d2fe:	b164      	cbz	r4, 800d31a <oslib_test_009_002_execute.lto_priv.0+0x5a>
    dep->refs++;
 800d300:	6863      	ldr	r3, [r4, #4]
  FACTORY_UNLOCK();
 800d302:	484b      	ldr	r0, [pc, #300]	; (800d430 <oslib_test_009_002_execute.lto_priv.0+0x170>)
    dep->refs++;
 800d304:	3301      	adds	r3, #1
 800d306:	6063      	str	r3, [r4, #4]
  FACTORY_UNLOCK();
 800d308:	f7f7 fcd2 	bl	8004cb0 <chMtxUnlock>
  chtest.global_fail     = true;
 800d30c:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800d310:	4a49      	ldr	r2, [pc, #292]	; (800d438 <oslib_test_009_002_execute.lto_priv.0+0x178>)
  chtest.global_fail     = true;
 800d312:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800d314:	60ba      	str	r2, [r7, #8]
}
 800d316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d31a:	4845      	ldr	r0, [pc, #276]	; (800d430 <oslib_test_009_002_execute.lto_priv.0+0x170>)
 800d31c:	f7f7 fcc8 	bl	8004cb0 <chMtxUnlock>
  test_set_step(2);
 800d320:	2302      	movs	r3, #2
 800d322:	2630      	movs	r6, #48	; 0x30
 800d324:	603b      	str	r3, [r7, #0]
 800d326:	f386 8811 	msr	BASEPRI, r6
 800d32a:	4841      	ldr	r0, [pc, #260]	; (800d430 <oslib_test_009_002_execute.lto_priv.0+0x170>)
 800d32c:	f7f7 fc28 	bl	8004b80 <chMtxLockS>
 800d330:	2500      	movs	r5, #0
 800d332:	f385 8811 	msr	BASEPRI, r5
  dbp = (dyn_buffer_t *)dyn_create_object_heap(name,
 800d336:	2308      	movs	r3, #8
 800d338:	2290      	movs	r2, #144	; 0x90
 800d33a:	4940      	ldr	r1, [pc, #256]	; (800d43c <oslib_test_009_002_execute.lto_priv.0+0x17c>)
 800d33c:	483d      	ldr	r0, [pc, #244]	; (800d434 <oslib_test_009_002_execute.lto_priv.0+0x174>)
 800d33e:	f7f8 fe0f 	bl	8005f60 <dyn_create_object_heap.lto_priv.0>
  if (dbp != NULL) {
 800d342:	4604      	mov	r4, r0
 800d344:	b348      	cbz	r0, 800d39a <oslib_test_009_002_execute.lto_priv.0+0xda>
  test_set_step(3);
 800d346:	f04f 0803 	mov.w	r8, #3
    memset((void *)(dbp + 1), 0, size);
 800d34a:	2280      	movs	r2, #128	; 0x80
 800d34c:	4629      	mov	r1, r5
 800d34e:	f104 0010 	add.w	r0, r4, #16
 800d352:	f7f3 f835 	bl	80003c0 <memset>
  FACTORY_UNLOCK();
 800d356:	4836      	ldr	r0, [pc, #216]	; (800d430 <oslib_test_009_002_execute.lto_priv.0+0x170>)
 800d358:	f7f7 fcaa 	bl	8004cb0 <chMtxUnlock>
 800d35c:	f8c7 8000 	str.w	r8, [r7]
 800d360:	f386 8811 	msr	BASEPRI, r6
 800d364:	4832      	ldr	r0, [pc, #200]	; (800d430 <oslib_test_009_002_execute.lto_priv.0+0x170>)
 800d366:	f7f7 fc0b 	bl	8004b80 <chMtxLockS>
 800d36a:	f385 8811 	msr	BASEPRI, r5
  dbp = (dyn_buffer_t *)dyn_create_object_heap(name,
 800d36e:	2308      	movs	r3, #8
 800d370:	2290      	movs	r2, #144	; 0x90
 800d372:	4932      	ldr	r1, [pc, #200]	; (800d43c <oslib_test_009_002_execute.lto_priv.0+0x17c>)
 800d374:	482f      	ldr	r0, [pc, #188]	; (800d434 <oslib_test_009_002_execute.lto_priv.0+0x174>)
 800d376:	f7f8 fdf3 	bl	8005f60 <dyn_create_object_heap.lto_priv.0>
  if (dbp != NULL) {
 800d37a:	b1c0      	cbz	r0, 800d3ae <oslib_test_009_002_execute.lto_priv.0+0xee>
    memset((void *)(dbp + 1), 0, size);
 800d37c:	2280      	movs	r2, #128	; 0x80
 800d37e:	4629      	mov	r1, r5
 800d380:	3010      	adds	r0, #16
 800d382:	f7f3 f81d 	bl	80003c0 <memset>
  FACTORY_UNLOCK();
 800d386:	482a      	ldr	r0, [pc, #168]	; (800d430 <oslib_test_009_002_execute.lto_priv.0+0x170>)
 800d388:	f7f7 fc92 	bl	8004cb0 <chMtxUnlock>
  chtest.global_fail     = true;
 800d38c:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800d390:	4a2b      	ldr	r2, [pc, #172]	; (800d440 <oslib_test_009_002_execute.lto_priv.0+0x180>)
  chtest.global_fail     = true;
 800d392:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800d394:	60ba      	str	r2, [r7, #8]
}
 800d396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d39a:	4825      	ldr	r0, [pc, #148]	; (800d430 <oslib_test_009_002_execute.lto_priv.0+0x170>)
 800d39c:	f7f7 fc88 	bl	8004cb0 <chMtxUnlock>
  chtest.global_fail     = true;
 800d3a0:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800d3a4:	4a27      	ldr	r2, [pc, #156]	; (800d444 <oslib_test_009_002_execute.lto_priv.0+0x184>)
  chtest.global_fail     = true;
 800d3a6:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800d3a8:	60ba      	str	r2, [r7, #8]
 800d3aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3ae:	4820      	ldr	r0, [pc, #128]	; (800d430 <oslib_test_009_002_execute.lto_priv.0+0x170>)
 800d3b0:	f7f7 fc7e 	bl	8004cb0 <chMtxUnlock>
  test_set_step(4);
 800d3b4:	2304      	movs	r3, #4
 800d3b6:	603b      	str	r3, [r7, #0]
    dbp1 = chFactoryFindBuffer("mybuf");
 800d3b8:	f7ff fb72 	bl	800caa0 <chFactoryFindBuffer.constprop.0>
  if (!condition) {
 800d3bc:	4605      	mov	r5, r0
 800d3be:	b340      	cbz	r0, 800d412 <oslib_test_009_002_execute.lto_priv.0+0x152>
 800d3c0:	42a5      	cmp	r5, r4
 800d3c2:	d120      	bne.n	800d406 <oslib_test_009_002_execute.lto_priv.0+0x146>
 800d3c4:	686b      	ldr	r3, [r5, #4]
 800d3c6:	2b02      	cmp	r3, #2
 800d3c8:	d11d      	bne.n	800d406 <oslib_test_009_002_execute.lto_priv.0+0x146>
 800d3ca:	f8c5 8004 	str.w	r8, [r5, #4]
    chFactoryReleaseBuffer(dbp2);
 800d3ce:	f7fe fdc7 	bl	800bf60 <chFactoryReleaseBuffer.isra.0>
 800d3d2:	686b      	ldr	r3, [r5, #4]
 800d3d4:	2b02      	cmp	r3, #2
 800d3d6:	d122      	bne.n	800d41e <oslib_test_009_002_execute.lto_priv.0+0x15e>
    chFactoryReleaseBuffer(dbp1);
 800d3d8:	4628      	mov	r0, r5
 800d3da:	f7fe fdc1 	bl	800bf60 <chFactoryReleaseBuffer.isra.0>
 800d3de:	686b      	ldr	r3, [r5, #4]
 800d3e0:	2b01      	cmp	r3, #1
 800d3e2:	d11c      	bne.n	800d41e <oslib_test_009_002_execute.lto_priv.0+0x15e>
  test_set_step(5);
 800d3e4:	2305      	movs	r3, #5
    chFactoryReleaseBuffer(dbp);
 800d3e6:	4628      	mov	r0, r5
  test_set_step(5);
 800d3e8:	603b      	str	r3, [r7, #0]
    chFactoryReleaseBuffer(dbp);
 800d3ea:	f7fe fdb9 	bl	800bf60 <chFactoryReleaseBuffer.isra.0>
  test_set_step(6);
 800d3ee:	2306      	movs	r3, #6
 800d3f0:	603b      	str	r3, [r7, #0]
    dbp = chFactoryFindBuffer("mybuf");
 800d3f2:	f7ff fb55 	bl	800caa0 <chFactoryFindBuffer.constprop.0>
 800d3f6:	2800      	cmp	r0, #0
 800d3f8:	d08d      	beq.n	800d316 <oslib_test_009_002_execute.lto_priv.0+0x56>
  chtest.global_fail     = true;
 800d3fa:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800d3fe:	4a0e      	ldr	r2, [pc, #56]	; (800d438 <oslib_test_009_002_execute.lto_priv.0+0x178>)
  chtest.global_fail     = true;
 800d400:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800d402:	60ba      	str	r2, [r7, #8]
    return __test_fail(msg);
 800d404:	e787      	b.n	800d316 <oslib_test_009_002_execute.lto_priv.0+0x56>
  chtest.global_fail     = true;
 800d406:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800d40a:	4a0f      	ldr	r2, [pc, #60]	; (800d448 <oslib_test_009_002_execute.lto_priv.0+0x188>)
  chtest.global_fail     = true;
 800d40c:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800d40e:	60ba      	str	r2, [r7, #8]
 800d410:	e781      	b.n	800d316 <oslib_test_009_002_execute.lto_priv.0+0x56>
  chtest.global_fail     = true;
 800d412:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800d416:	4a0d      	ldr	r2, [pc, #52]	; (800d44c <oslib_test_009_002_execute.lto_priv.0+0x18c>)
  chtest.global_fail     = true;
 800d418:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800d41a:	60ba      	str	r2, [r7, #8]
 800d41c:	e77b      	b.n	800d316 <oslib_test_009_002_execute.lto_priv.0+0x56>
  chtest.global_fail     = true;
 800d41e:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800d422:	4a0b      	ldr	r2, [pc, #44]	; (800d450 <oslib_test_009_002_execute.lto_priv.0+0x190>)
  chtest.global_fail     = true;
 800d424:	80bb      	strh	r3, [r7, #4]
  chtest.failure_message = msg;
 800d426:	60ba      	str	r2, [r7, #8]
 800d428:	e775      	b.n	800d316 <oslib_test_009_002_execute.lto_priv.0+0x56>
 800d42a:	bf00      	nop
 800d42c:	200010f4 	.word	0x200010f4
 800d430:	20001e90 	.word	0x20001e90
 800d434:	08012e94 	.word	0x08012e94
 800d438:	08012ed4 	.word	0x08012ed4
 800d43c:	20001eb4 	.word	0x20001eb4
 800d440:	08012ec4 	.word	0x08012ec4
 800d444:	08012eb4 	.word	0x08012eb4
 800d448:	08012edc 	.word	0x08012edc
 800d44c:	08012ed0 	.word	0x08012ed0
 800d450:	08012ef8 	.word	0x08012ef8
	...

0800d460 <dir_next.constprop.0>:
static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 800d460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 800d464:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d466:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800d468:	7833      	ldrb	r3, [r6, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d46a:	3520      	adds	r5, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800d46c:	2b04      	cmp	r3, #4
 800d46e:	bf0c      	ite	eq
 800d470:	f04f 5380 	moveq.w	r3, #268435456	; 0x10000000
 800d474:	f44f 1300 	movne.w	r3, #2097152	; 0x200000
 800d478:	429d      	cmp	r5, r3
static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 800d47a:	4604      	mov	r4, r0
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800d47c:	d304      	bcc.n	800d488 <dir_next.constprop.0+0x28>
 800d47e:	2300      	movs	r3, #0
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800d480:	2004      	movs	r0, #4
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800d482:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800d484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800d488:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d48a:	b383      	cbz	r3, 800d4ee <dir_next.constprop.0+0x8e>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d48c:	f3c5 0708 	ubfx	r7, r5, #0, #9
 800d490:	b9ef      	cbnz	r7, 800d4ce <dir_next.constprop.0+0x6e>
		if (dp->clust == 0) {	/* Static table */
 800d492:	6b41      	ldr	r1, [r0, #52]	; 0x34
		dp->sect++;				/* Next sector */
 800d494:	3301      	adds	r3, #1
 800d496:	6383      	str	r3, [r0, #56]	; 0x38
		if (dp->clust == 0) {	/* Static table */
 800d498:	b301      	cbz	r1, 800d4dc <dir_next.constprop.0+0x7c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 800d49a:	8973      	ldrh	r3, [r6, #10]
 800d49c:	3b01      	subs	r3, #1
 800d49e:	ea13 2855 	ands.w	r8, r3, r5, lsr #9
 800d4a2:	d114      	bne.n	800d4ce <dir_next.constprop.0+0x6e>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800d4a4:	f7f9 fb54 	bl	8006b50 <get_fat.lto_priv.0>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800d4a8:	2801      	cmp	r0, #1
 800d4aa:	d91e      	bls.n	800d4ea <dir_next.constprop.0+0x8a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d4ac:	1c43      	adds	r3, r0, #1
 800d4ae:	d01a      	beq.n	800d4e6 <dir_next.constprop.0+0x86>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 800d4b0:	69f3      	ldr	r3, [r6, #28]
 800d4b2:	4298      	cmp	r0, r3
 800d4b4:	d2e3      	bcs.n	800d47e <dir_next.constprop.0+0x1e>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800d4b6:	3b02      	subs	r3, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 800d4b8:	6360      	str	r0, [r4, #52]	; 0x34
	clst -= 2;		/* Cluster number is origin from 2 */
 800d4ba:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800d4bc:	4298      	cmp	r0, r3
 800d4be:	d204      	bcs.n	800d4ca <dir_next.constprop.0+0x6a>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800d4c0:	f8b6 800a 	ldrh.w	r8, [r6, #10]
 800d4c4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800d4c6:	fb00 3808 	mla	r8, r0, r8, r3
				dp->sect = clst2sect(fs, clst);
 800d4ca:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d4ce:	363c      	adds	r6, #60	; 0x3c
 800d4d0:	443e      	add	r6, r7
	return FR_OK;
 800d4d2:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 800d4d4:	6325      	str	r5, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d4d6:	63e6      	str	r6, [r4, #60]	; 0x3c
}
 800d4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d4dc:	8933      	ldrh	r3, [r6, #8]
 800d4de:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800d4e2:	d8f4      	bhi.n	800d4ce <dir_next.constprop.0+0x6e>
 800d4e4:	e7cb      	b.n	800d47e <dir_next.constprop.0+0x1e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d4e6:	2001      	movs	r0, #1
 800d4e8:	e7cc      	b.n	800d484 <dir_next.constprop.0+0x24>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800d4ea:	2002      	movs	r0, #2
 800d4ec:	e7ca      	b.n	800d484 <dir_next.constprop.0+0x24>
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800d4ee:	2004      	movs	r0, #4
 800d4f0:	e7c8      	b.n	800d484 <dir_next.constprop.0+0x24>
 800d4f2:	bf00      	nop
	...

0800d500 <dir_sdi.constprop.0>:
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800d500:	b538      	push	{r3, r4, r5, lr}
	dp->dptr = ofs;				/* Set current offset */
 800d502:	2300      	movs	r3, #0
	FATFS *fs = dp->obj.fs;
 800d504:	6805      	ldr	r5, [r0, #0]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d506:	6881      	ldr	r1, [r0, #8]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d508:	782a      	ldrb	r2, [r5, #0]
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800d50a:	4604      	mov	r4, r0
	dp->dptr = ofs;				/* Set current offset */
 800d50c:	6303      	str	r3, [r0, #48]	; 0x30
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d50e:	b981      	cbnz	r1, 800d532 <dir_sdi.constprop.0+0x32>
 800d510:	2a02      	cmp	r2, #2
 800d512:	d809      	bhi.n	800d528 <dir_sdi.constprop.0+0x28>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 800d514:	892b      	ldrh	r3, [r5, #8]
 800d516:	b1fb      	cbz	r3, 800d558 <dir_sdi.constprop.0+0x58>
		dp->sect = fs->dirbase;
 800d518:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d51a:	63a3      	str	r3, [r4, #56]	; 0x38
	dp->clust = clst;					/* Current cluster# */
 800d51c:	6361      	str	r1, [r4, #52]	; 0x34
	if (dp->sect == 0) return FR_INT_ERR;
 800d51e:	b1db      	cbz	r3, 800d558 <dir_sdi.constprop.0+0x58>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d520:	353c      	adds	r5, #60	; 0x3c
	return FR_OK;
 800d522:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d524:	63e5      	str	r5, [r4, #60]	; 0x3c
}
 800d526:	bd38      	pop	{r3, r4, r5, pc}
		clst = (DWORD)fs->dirbase;
 800d528:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800d52a:	71c1      	strb	r1, [r0, #7]
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d0f1      	beq.n	800d514 <dir_sdi.constprop.0+0x14>
 800d530:	4619      	mov	r1, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d532:	896a      	ldrh	r2, [r5, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d534:	b12a      	cbz	r2, 800d542 <dir_sdi.constprop.0+0x42>
 800d536:	e011      	b.n	800d55c <dir_sdi.constprop.0+0x5c>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d538:	2801      	cmp	r0, #1
 800d53a:	d90d      	bls.n	800d558 <dir_sdi.constprop.0+0x58>
 800d53c:	69eb      	ldr	r3, [r5, #28]
 800d53e:	4298      	cmp	r0, r3
 800d540:	d20a      	bcs.n	800d558 <dir_sdi.constprop.0+0x58>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d542:	4620      	mov	r0, r4
 800d544:	f7f9 fb04 	bl	8006b50 <get_fat.lto_priv.0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d548:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d54a:	4601      	mov	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d54c:	d1f4      	bne.n	800d538 <dir_sdi.constprop.0+0x38>
 800d54e:	2001      	movs	r0, #1
}
 800d550:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = clst2sect(fs, clst);
 800d552:	2300      	movs	r3, #0
 800d554:	e9c4 130d 	strd	r1, r3, [r4, #52]	; 0x34
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 800d558:	2002      	movs	r0, #2
}
 800d55a:	bd38      	pop	{r3, r4, r5, pc}
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800d55c:	69e8      	ldr	r0, [r5, #28]
	clst -= 2;		/* Cluster number is origin from 2 */
 800d55e:	f1a1 0c02 	sub.w	ip, r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800d562:	3802      	subs	r0, #2
 800d564:	4584      	cmp	ip, r0
 800d566:	d2f4      	bcs.n	800d552 <dir_sdi.constprop.0+0x52>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800d568:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800d56a:	fb0c 3302 	mla	r3, ip, r2, r3
		dp->sect = clst2sect(fs, clst);
 800d56e:	63a3      	str	r3, [r4, #56]	; 0x38
 800d570:	e7d4      	b.n	800d51c <dir_sdi.constprop.0+0x1c>
 800d572:	bf00      	nop
	...

0800d580 <RemoveHandler>:
static void RemoveHandler(eventid_t id) {
 800d580:	b538      	push	{r3, r4, r5, lr}
 800d582:	2330      	movs	r3, #48	; 0x30
 800d584:	f383 8811 	msr	BASEPRI, r3
  if (sdcp->state == BLK_ACTIVE) {
 800d588:	4c11      	ldr	r4, [pc, #68]	; (800d5d0 <RemoveHandler+0x50>)
 800d58a:	7923      	ldrb	r3, [r4, #4]
 800d58c:	2b02      	cmp	r3, #2
 800d58e:	d018      	beq.n	800d5c2 <RemoveHandler+0x42>
  sdcp->state = BLK_DISCONNECTING;
 800d590:	2304      	movs	r3, #4
 800d592:	2500      	movs	r5, #0
 800d594:	7123      	strb	r3, [r4, #4]
 800d596:	f385 8811 	msr	BASEPRI, r5
  if (_sdc_wait_for_transfer_state(sdcp)) {
 800d59a:	4620      	mov	r0, r4
 800d59c:	f7f5 fdf0 	bl	8003180 <_sdc_wait_for_transfer_state>
    sdcp->state = BLK_ACTIVE;
 800d5a0:	2202      	movs	r2, #2
 800d5a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  if (_sdc_wait_for_transfer_state(sdcp)) {
 800d5a4:	b930      	cbnz	r0, 800d5b4 <RemoveHandler+0x34>
  sdcp->sdio->CLKCR = 0U;
 800d5a6:	6058      	str	r0, [r3, #4]
  sdcp->sdio->POWER = 0U;
 800d5a8:	6018      	str	r0, [r3, #0]
  sdcp->state = BLK_ACTIVE;
 800d5aa:	7122      	strb	r2, [r4, #4]
  fs_ready = FALSE;
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	4b09      	ldr	r3, [pc, #36]	; (800d5d4 <RemoveHandler+0x54>)
 800d5b0:	701a      	strb	r2, [r3, #0]
}
 800d5b2:	bd38      	pop	{r3, r4, r5, pc}
  sdcp->sdio->CLKCR = 0U;
 800d5b4:	605d      	str	r5, [r3, #4]
  sdcp->sdio->POWER = 0U;
 800d5b6:	601d      	str	r5, [r3, #0]
    sdcp->state = BLK_ACTIVE;
 800d5b8:	7122      	strb	r2, [r4, #4]
  fs_ready = FALSE;
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	4b05      	ldr	r3, [pc, #20]	; (800d5d4 <RemoveHandler+0x54>)
 800d5be:	701a      	strb	r2, [r3, #0]
}
 800d5c0:	bd38      	pop	{r3, r4, r5, pc}
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	f383 8811 	msr	BASEPRI, r3
  fs_ready = FALSE;
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	4b02      	ldr	r3, [pc, #8]	; (800d5d4 <RemoveHandler+0x54>)
 800d5cc:	701a      	strb	r2, [r3, #0]
}
 800d5ce:	bd38      	pop	{r3, r4, r5, pc}
 800d5d0:	200008e8 	.word	0x200008e8
 800d5d4:	20002400 	.word	0x20002400
	...

0800d5e0 <dir_read.constprop.0>:
static FRESULT dir_read (
 800d5e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	BYTE ord = 0xFF, sum = 0xFF;
 800d5e4:	27ff      	movs	r7, #255	; 0xff
	FRESULT res = FR_NO_FILE;
 800d5e6:	2404      	movs	r4, #4
static FRESULT dir_read (
 800d5e8:	4605      	mov	r5, r0
	BYTE ord = 0xFF, sum = 0xFF;
 800d5ea:	463e      	mov	r6, r7
	FATFS *fs = dp->obj.fs;
 800d5ec:	f8d0 8000 	ldr.w	r8, [r0]
	while (dp->sect) {
 800d5f0:	e011      	b.n	800d616 <dir_read.constprop.0+0x36>
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d5f2:	7ae2      	ldrb	r2, [r4, #11]
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800d5f4:	2be5      	cmp	r3, #229	; 0xe5
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d5f6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800d5fa:	71aa      	strb	r2, [r5, #6]
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800d5fc:	d005      	beq.n	800d60a <dir_read.constprop.0+0x2a>
 800d5fe:	2b2e      	cmp	r3, #46	; 0x2e
 800d600:	d003      	beq.n	800d60a <dir_read.constprop.0+0x2a>
 800d602:	f022 0120 	bic.w	r1, r2, #32
 800d606:	2908      	cmp	r1, #8
 800d608:	d131      	bne.n	800d66e <dir_read.constprop.0+0x8e>
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d60a:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dp, 0);		/* Next entry */
 800d60c:	4628      	mov	r0, r5
 800d60e:	f7ff ff27 	bl	800d460 <dir_next.constprop.0>
		if (res != FR_OK) break;
 800d612:	4604      	mov	r4, r0
 800d614:	bb30      	cbnz	r0, 800d664 <dir_read.constprop.0+0x84>
	while (dp->sect) {
 800d616:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800d618:	2900      	cmp	r1, #0
 800d61a:	d05f      	beq.n	800d6dc <dir_read.constprop.0+0xfc>
	if (sect != fs->winsect) {	/* Window offset changed? */
 800d61c:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 800d620:	428b      	cmp	r3, r1
 800d622:	d004      	beq.n	800d62e <dir_read.constprop.0+0x4e>
 800d624:	4640      	mov	r0, r8
 800d626:	f7f9 fa43 	bl	8006ab0 <move_window.part.0.lto_priv.0>
		if (res != FR_OK) break;
 800d62a:	4604      	mov	r4, r0
 800d62c:	b9d0      	cbnz	r0, 800d664 <dir_read.constprop.0+0x84>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 800d62e:	6bec      	ldr	r4, [r5, #60]	; 0x3c
 800d630:	7823      	ldrb	r3, [r4, #0]
		if (b == 0) {
 800d632:	2b00      	cmp	r3, #0
 800d634:	d058      	beq.n	800d6e8 <dir_read.constprop.0+0x108>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800d636:	f898 2000 	ldrb.w	r2, [r8]
 800d63a:	2a04      	cmp	r2, #4
 800d63c:	d1d9      	bne.n	800d5f2 <dir_read.constprop.0+0x12>
				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
 800d63e:	2b85      	cmp	r3, #133	; 0x85
 800d640:	d1e4      	bne.n	800d60c <dir_read.constprop.0+0x2c>
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800d642:	6828      	ldr	r0, [r5, #0]
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800d644:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	res = move_window(dp->obj.fs, dp->sect);
 800d646:	6ba9      	ldr	r1, [r5, #56]	; 0x38
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800d648:	64eb      	str	r3, [r5, #76]	; 0x4c
	if (sect != fs->winsect) {	/* Window offset changed? */
 800d64a:	6b83      	ldr	r3, [r0, #56]	; 0x38
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800d64c:	6906      	ldr	r6, [r0, #16]
	if (sect != fs->winsect) {	/* Window offset changed? */
 800d64e:	4299      	cmp	r1, r3
 800d650:	d004      	beq.n	800d65c <dir_read.constprop.0+0x7c>
 800d652:	f7f9 fa2d 	bl	8006ab0 <move_window.part.0.lto_priv.0>
	if (res != FR_OK) return res;
 800d656:	4604      	mov	r4, r0
 800d658:	b920      	cbnz	r0, 800d664 <dir_read.constprop.0+0x84>
	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order */
 800d65a:	6bec      	ldr	r4, [r5, #60]	; 0x3c
 800d65c:	7823      	ldrb	r3, [r4, #0]
 800d65e:	2b85      	cmp	r3, #133	; 0x85
 800d660:	d044      	beq.n	800d6ec <dir_read.constprop.0+0x10c>
 800d662:	2402      	movs	r4, #2
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d664:	2300      	movs	r3, #0
 800d666:	63ab      	str	r3, [r5, #56]	; 0x38
}
 800d668:	4620      	mov	r0, r4
 800d66a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (attr == AM_LFN) {	/* An LFN entry is found */
 800d66e:	2a0f      	cmp	r2, #15
 800d670:	f040 80d3 	bne.w	800d81a <dir_read.constprop.0+0x23a>
					if (b & LLEF) {		/* Is it start of an LFN sequence? */
 800d674:	0659      	lsls	r1, r3, #25
 800d676:	d52e      	bpl.n	800d6d6 <dir_read.constprop.0+0xf6>
						b &= (BYTE)~LLEF; ord = b;
 800d678:	f003 06bf 	and.w	r6, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
 800d67c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
						sum = dp->dir[LDIR_Chksum];
 800d67e:	7b67      	ldrb	r7, [r4, #13]
						dp->blk_ofs = dp->dptr;
 800d680:	64eb      	str	r3, [r5, #76]	; 0x4c
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d682:	7b63      	ldrb	r3, [r4, #13]
 800d684:	42bb      	cmp	r3, r7
 800d686:	d1c0      	bne.n	800d60a <dir_read.constprop.0+0x2a>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800d688:	8b63      	ldrh	r3, [r4, #26]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d1bd      	bne.n	800d60a <dir_read.constprop.0+0x2a>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800d68e:	2201      	movs	r2, #1
 800d690:	7823      	ldrb	r3, [r4, #0]
 800d692:	f8df c210 	ldr.w	ip, [pc, #528]	; 800d8a4 <dir_read.constprop.0+0x2c4>
 800d696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d69a:	3b01      	subs	r3, #1
 800d69c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d6a0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d6a4:	f64f 7eff 	movw	lr, #65535	; 0xffff
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d6a8:	4611      	mov	r1, r2
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d6aa:	f8d8 900c 	ldr.w	r9, [r8, #12]
 800d6ae:	f10c 000c 	add.w	r0, ip, #12
 800d6b2:	e00a      	b.n	800d6ca <dir_read.constprop.0+0xea>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800d6b4:	2bff      	cmp	r3, #255	; 0xff
 800d6b6:	d8a8      	bhi.n	800d60a <dir_read.constprop.0+0x2a>
 800d6b8:	4611      	mov	r1, r2
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d6ba:	f829 2013 	strh.w	r2, [r9, r3, lsl #1]
 800d6be:	3301      	adds	r3, #1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d6c0:	4584      	cmp	ip, r0
 800d6c2:	f000 809d 	beq.w	800d800 <dir_read.constprop.0+0x220>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d6c6:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 800d6ca:	5aa2      	ldrh	r2, [r4, r2]
		if (wc != 0) {
 800d6cc:	2900      	cmp	r1, #0
 800d6ce:	d1f1      	bne.n	800d6b4 <dir_read.constprop.0+0xd4>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d6d0:	4572      	cmp	r2, lr
 800d6d2:	d0f5      	beq.n	800d6c0 <dir_read.constprop.0+0xe0>
 800d6d4:	e799      	b.n	800d60a <dir_read.constprop.0+0x2a>
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d6d6:	42b3      	cmp	r3, r6
 800d6d8:	d197      	bne.n	800d60a <dir_read.constprop.0+0x2a>
 800d6da:	e7d2      	b.n	800d682 <dir_read.constprop.0+0xa2>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d6dc:	2c00      	cmp	r4, #0
 800d6de:	d1c1      	bne.n	800d664 <dir_read.constprop.0+0x84>
						dp->blk_ofs = 0xFFFFFFFF;	/* It has no LFN. */
 800d6e0:	2400      	movs	r4, #0
}
 800d6e2:	4620      	mov	r0, r4
 800d6e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800d6e8:	2404      	movs	r4, #4
 800d6ea:	e7bb      	b.n	800d664 <dir_read.constprop.0+0x84>
	memcpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 800d6ec:	6820      	ldr	r0, [r4, #0]
 800d6ee:	6861      	ldr	r1, [r4, #4]
 800d6f0:	68a2      	ldr	r2, [r4, #8]
 800d6f2:	68e3      	ldr	r3, [r4, #12]
 800d6f4:	6030      	str	r0, [r6, #0]
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800d6f6:	7877      	ldrb	r7, [r6, #1]
	memcpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 800d6f8:	6071      	str	r1, [r6, #4]
 800d6fa:	60b2      	str	r2, [r6, #8]
 800d6fc:	60f3      	str	r3, [r6, #12]
 800d6fe:	69e3      	ldr	r3, [r4, #28]
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800d700:	3701      	adds	r7, #1
 800d702:	017f      	lsls	r7, r7, #5
	memcpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 800d704:	6920      	ldr	r0, [r4, #16]
 800d706:	6961      	ldr	r1, [r4, #20]
 800d708:	69a2      	ldr	r2, [r4, #24]
 800d70a:	61f3      	str	r3, [r6, #28]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800d70c:	f1a7 0360 	sub.w	r3, r7, #96	; 0x60
 800d710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
	memcpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 800d714:	6130      	str	r0, [r6, #16]
 800d716:	6171      	str	r1, [r6, #20]
 800d718:	61b2      	str	r2, [r6, #24]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800d71a:	d8a2      	bhi.n	800d662 <dir_read.constprop.0+0x82>
	res = dir_next(dp, 0);
 800d71c:	4628      	mov	r0, r5
 800d71e:	f7ff fe9f 	bl	800d460 <dir_next.constprop.0>
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 800d722:	2804      	cmp	r0, #4
	res = dir_next(dp, 0);
 800d724:	4604      	mov	r4, r0
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 800d726:	d09c      	beq.n	800d662 <dir_read.constprop.0+0x82>
	if (res != FR_OK) return res;
 800d728:	2800      	cmp	r0, #0
 800d72a:	d19b      	bne.n	800d664 <dir_read.constprop.0+0x84>
	res = move_window(dp->obj.fs, dp->sect);
 800d72c:	6828      	ldr	r0, [r5, #0]
 800d72e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
	if (sect != fs->winsect) {	/* Window offset changed? */
 800d730:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d732:	4299      	cmp	r1, r3
 800d734:	d004      	beq.n	800d740 <dir_read.constprop.0+0x160>
 800d736:	f7f9 f9bb 	bl	8006ab0 <move_window.part.0.lto_priv.0>
	if (res != FR_OK) return res;
 800d73a:	4604      	mov	r4, r0
 800d73c:	2800      	cmp	r0, #0
 800d73e:	d191      	bne.n	800d664 <dir_read.constprop.0+0x84>
	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order */
 800d740:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800d742:	781a      	ldrb	r2, [r3, #0]
 800d744:	2ac0      	cmp	r2, #192	; 0xc0
 800d746:	d18c      	bne.n	800d662 <dir_read.constprop.0+0x82>
	memcpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 800d748:	f8d3 c000 	ldr.w	ip, [r3]
 800d74c:	685c      	ldr	r4, [r3, #4]
 800d74e:	6898      	ldr	r0, [r3, #8]
 800d750:	68d9      	ldr	r1, [r3, #12]
 800d752:	f8c6 c020 	str.w	ip, [r6, #32]
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800d756:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
	memcpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 800d75a:	62f1      	str	r1, [r6, #44]	; 0x2c
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800d75c:	4952      	ldr	r1, [pc, #328]	; (800d8a8 <dir_read.constprop.0+0x2c8>)
 800d75e:	322c      	adds	r2, #44	; 0x2c
 800d760:	fba1 1202 	umull	r1, r2, r1, r2
	memcpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 800d764:	6274      	str	r4, [r6, #36]	; 0x24
 800d766:	62b0      	str	r0, [r6, #40]	; 0x28
 800d768:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800d76c:	695c      	ldr	r4, [r3, #20]
 800d76e:	6998      	ldr	r0, [r3, #24]
 800d770:	69d9      	ldr	r1, [r3, #28]
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800d772:	08d2      	lsrs	r2, r2, #3
 800d774:	ebb7 1f42 	cmp.w	r7, r2, lsl #5
	memcpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 800d778:	f8c6 c030 	str.w	ip, [r6, #48]	; 0x30
 800d77c:	6374      	str	r4, [r6, #52]	; 0x34
 800d77e:	63b0      	str	r0, [r6, #56]	; 0x38
 800d780:	63f1      	str	r1, [r6, #60]	; 0x3c
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800d782:	f4ff af6e 	bcc.w	800d662 <dir_read.constprop.0+0x82>
	i = 2 * SZDIRE;	/* Name offset to load */
 800d786:	f04f 0940 	mov.w	r9, #64	; 0x40
 800d78a:	e003      	b.n	800d794 <dir_read.constprop.0+0x1b4>
	} while ((i += SZDIRE) < sz_ent);
 800d78c:	f109 0920 	add.w	r9, r9, #32
 800d790:	454f      	cmp	r7, r9
 800d792:	d959      	bls.n	800d848 <dir_read.constprop.0+0x268>
		res = dir_next(dp, 0);
 800d794:	4628      	mov	r0, r5
 800d796:	f7ff fe63 	bl	800d460 <dir_next.constprop.0>
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 800d79a:	2804      	cmp	r0, #4
		res = dir_next(dp, 0);
 800d79c:	4604      	mov	r4, r0
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 800d79e:	f43f af60 	beq.w	800d662 <dir_read.constprop.0+0x82>
		if (res != FR_OK) return res;
 800d7a2:	2800      	cmp	r0, #0
 800d7a4:	f47f af5e 	bne.w	800d664 <dir_read.constprop.0+0x84>
		res = move_window(dp->obj.fs, dp->sect);
 800d7a8:	6828      	ldr	r0, [r5, #0]
 800d7aa:	6ba9      	ldr	r1, [r5, #56]	; 0x38
	if (sect != fs->winsect) {	/* Window offset changed? */
 800d7ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d7ae:	4299      	cmp	r1, r3
 800d7b0:	d003      	beq.n	800d7ba <dir_read.constprop.0+0x1da>
 800d7b2:	f7f9 f97d 	bl	8006ab0 <move_window.part.0.lto_priv.0>
		if (res != FR_OK) return res;
 800d7b6:	2800      	cmp	r0, #0
 800d7b8:	d144      	bne.n	800d844 <dir_read.constprop.0+0x264>
		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order */
 800d7ba:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800d7bc:	781a      	ldrb	r2, [r3, #0]
 800d7be:	2ac1      	cmp	r2, #193	; 0xc1
 800d7c0:	f47f af4f 	bne.w	800d662 <dir_read.constprop.0+0x82>
		if (i < MAXDIRB(FF_MAX_LFN)) memcpy(dirb + i, dp->dir, SZDIRE);
 800d7c4:	f5b9 7f18 	cmp.w	r9, #608	; 0x260
 800d7c8:	d2e0      	bcs.n	800d78c <dir_read.constprop.0+0x1ac>
 800d7ca:	f8d3 e000 	ldr.w	lr, [r3]
 800d7ce:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800d7d2:	6898      	ldr	r0, [r3, #8]
 800d7d4:	68d9      	ldr	r1, [r3, #12]
 800d7d6:	eb06 0209 	add.w	r2, r6, r9
 800d7da:	f846 e009 	str.w	lr, [r6, r9]
 800d7de:	f8c2 c004 	str.w	ip, [r2, #4]
 800d7e2:	6090      	str	r0, [r2, #8]
 800d7e4:	60d1      	str	r1, [r2, #12]
 800d7e6:	f8d3 e010 	ldr.w	lr, [r3, #16]
 800d7ea:	f8d3 c014 	ldr.w	ip, [r3, #20]
 800d7ee:	6998      	ldr	r0, [r3, #24]
 800d7f0:	69d9      	ldr	r1, [r3, #28]
 800d7f2:	f8c2 e010 	str.w	lr, [r2, #16]
 800d7f6:	f8c2 c014 	str.w	ip, [r2, #20]
 800d7fa:	6190      	str	r0, [r2, #24]
 800d7fc:	61d1      	str	r1, [r2, #28]
 800d7fe:	e7c5      	b.n	800d78c <dir_read.constprop.0+0x1ac>
	if (dir[LDIR_Ord] & LLEF && wc != 0) {	/* Put terminator if it is the last LFN part and not terminated */
 800d800:	7822      	ldrb	r2, [r4, #0]
 800d802:	0652      	lsls	r2, r2, #25
 800d804:	d506      	bpl.n	800d814 <dir_read.constprop.0+0x234>
 800d806:	b129      	cbz	r1, 800d814 <dir_read.constprop.0+0x234>
		if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800d808:	2bff      	cmp	r3, #255	; 0xff
 800d80a:	f63f aefe 	bhi.w	800d60a <dir_read.constprop.0+0x2a>
		lfnbuf[i] = 0;
 800d80e:	2200      	movs	r2, #0
 800d810:	f829 2013 	strh.w	r2, [r9, r3, lsl #1]
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d814:	3e01      	subs	r6, #1
 800d816:	b2f6      	uxtb	r6, r6
 800d818:	e6f8      	b.n	800d60c <dir_read.constprop.0+0x2c>
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800d81a:	b976      	cbnz	r6, 800d83a <dir_read.constprop.0+0x25a>
 800d81c:	f104 020b 	add.w	r2, r4, #11
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d820:	01f3      	lsls	r3, r6, #7
 800d822:	ea43 0656 	orr.w	r6, r3, r6, lsr #1
 800d826:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d82a:	441e      	add	r6, r3
	} while (--n);
 800d82c:	4294      	cmp	r4, r2
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d82e:	f006 06ff 	and.w	r6, r6, #255	; 0xff
	} while (--n);
 800d832:	d1f5      	bne.n	800d820 <dir_read.constprop.0+0x240>
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800d834:	42be      	cmp	r6, r7
 800d836:	f43f af53 	beq.w	800d6e0 <dir_read.constprop.0+0x100>
						dp->blk_ofs = 0xFFFFFFFF;	/* It has no LFN. */
 800d83a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d83e:	2400      	movs	r4, #0
 800d840:	64eb      	str	r3, [r5, #76]	; 0x4c
 800d842:	e711      	b.n	800d668 <dir_read.constprop.0+0x88>
 800d844:	4604      	mov	r4, r0
 800d846:	e70d      	b.n	800d664 <dir_read.constprop.0+0x84>
	if (i <= MAXDIRB(FF_MAX_LFN)) {
 800d848:	f5b9 7f18 	cmp.w	r9, #608	; 0x260
 800d84c:	d906      	bls.n	800d85c <dir_read.constprop.0+0x27c>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800d84e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d852:	791b      	ldrb	r3, [r3, #4]
 800d854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d858:	71ab      	strb	r3, [r5, #6]
 800d85a:	e705      	b.n	800d668 <dir_read.constprop.0+0x88>
	for (i = sum = 0; i < szblk; i++) {
 800d85c:	2300      	movs	r3, #0
 800d85e:	4619      	mov	r1, r3
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 800d860:	7870      	ldrb	r0, [r6, #1]
 800d862:	3001      	adds	r0, #1
 800d864:	0140      	lsls	r0, r0, #5
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
 800d866:	2902      	cmp	r1, #2
 800d868:	d10d      	bne.n	800d886 <dir_read.constprop.0+0x2a6>
	for (i = sum = 0; i < szblk; i++) {
 800d86a:	2106      	movs	r1, #6
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800d86c:	7932      	ldrb	r2, [r6, #4]
 800d86e:	eb02 32c3 	add.w	r2, r2, r3, lsl #15
 800d872:	b292      	uxth	r2, r2
 800d874:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 800d878:	7973      	ldrb	r3, [r6, #5]
 800d87a:	f3c2 074e 	ubfx	r7, r2, #1, #15
 800d87e:	eb03 33c2 	add.w	r3, r3, r2, lsl #15
 800d882:	443b      	add	r3, r7
 800d884:	b29b      	uxth	r3, r3
 800d886:	5c72      	ldrb	r2, [r6, r1]
	for (i = sum = 0; i < szblk; i++) {
 800d888:	3101      	adds	r1, #1
 800d88a:	eb02 32c3 	add.w	r2, r2, r3, lsl #15
 800d88e:	b292      	uxth	r2, r2
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800d890:	eb02 0353 	add.w	r3, r2, r3, lsr #1
	for (i = sum = 0; i < szblk; i++) {
 800d894:	4288      	cmp	r0, r1
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800d896:	b29b      	uxth	r3, r3
	for (i = sum = 0; i < szblk; i++) {
 800d898:	d8e5      	bhi.n	800d866 <dir_read.constprop.0+0x286>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800d89a:	8872      	ldrh	r2, [r6, #2]
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d0d6      	beq.n	800d84e <dir_read.constprop.0+0x26e>
 800d8a0:	e6df      	b.n	800d662 <dir_read.constprop.0+0x82>
 800d8a2:	bf00      	nop
 800d8a4:	0801329c 	.word	0x0801329c
 800d8a8:	88888889 	.word	0x88888889
 800d8ac:	00000000 	.word	0x00000000

0800d8b0 <mount_volume.constprop.0>:
	FATFS *fs;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 800d8b0:	2300      	movs	r3, #0
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
 800d8b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*rfs = 0;
 800d8b6:	600b      	str	r3, [r1, #0]
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
 800d8b8:	b084      	sub	sp, #16
 800d8ba:	460e      	mov	r6, r1
	vol = get_ldnumber(path);
 800d8bc:	f7f9 f8d8 	bl	8006a70 <get_ldnumber.lto_priv.0>
	if (vol < 0) return FR_INVALID_DRIVE;
 800d8c0:	1e05      	subs	r5, r0, #0
 800d8c2:	f2c0 80b4 	blt.w	800da2e <mount_volume.constprop.0+0x17e>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 800d8c6:	4ba1      	ldr	r3, [pc, #644]	; (800db4c <mount_volume.constprop.0+0x29c>)
 800d8c8:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800d8cc:	2c00      	cmp	r4, #0
 800d8ce:	f000 80cf 	beq.w	800da70 <mount_volume.constprop.0+0x1c0>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 800d8d2:	6034      	str	r4, [r6, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 800d8d4:	7823      	ldrb	r3, [r4, #0]
 800d8d6:	b14b      	cbz	r3, 800d8ec <mount_volume.constprop.0+0x3c>
		stat = disk_status(fs->pdrv);
 800d8d8:	7866      	ldrb	r6, [r4, #1]
  switch (pdrv) {
 800d8da:	b93e      	cbnz	r6, 800d8ec <mount_volume.constprop.0+0x3c>
    if (blkGetDriverState(&FATFS_HAL_DEVICE) != BLK_READY)
 800d8dc:	489c      	ldr	r0, [pc, #624]	; (800db50 <mount_volume.constprop.0+0x2a0>)
 800d8de:	7903      	ldrb	r3, [r0, #4]
 800d8e0:	2b05      	cmp	r3, #5
    if (blkIsWriteProtected(&FATFS_HAL_DEVICE))
 800d8e2:	6803      	ldr	r3, [r0, #0]
 800d8e4:	689b      	ldr	r3, [r3, #8]
    if (blkGetDriverState(&FATFS_HAL_DEVICE) != BLK_READY)
 800d8e6:	f000 80c5 	beq.w	800da74 <mount_volume.constprop.0+0x1c4>
    if (blkIsWriteProtected(&FATFS_HAL_DEVICE))
 800d8ea:	4798      	blx	r3
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
 800d8ec:	2300      	movs	r3, #0
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
 800d8ee:	b2ee      	uxtb	r6, r5
 800d8f0:	7066      	strb	r6, [r4, #1]
	fs->fs_type = 0;					/* Clear the filesystem object */
 800d8f2:	7023      	strb	r3, [r4, #0]
  switch (pdrv) {
 800d8f4:	b126      	cbz	r6, 800d900 <mount_volume.constprop.0+0x50>
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d8f6:	2603      	movs	r6, #3
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 800d8f8:	4630      	mov	r0, r6
 800d8fa:	b004      	add	sp, #16
 800d8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (blkGetDriverState(&FATFS_HAL_DEVICE) != BLK_READY)
 800d900:	4893      	ldr	r0, [pc, #588]	; (800db50 <mount_volume.constprop.0+0x2a0>)
 800d902:	7903      	ldrb	r3, [r0, #4]
 800d904:	2b05      	cmp	r3, #5
 800d906:	d003      	beq.n	800d910 <mount_volume.constprop.0+0x60>
    if (blkIsWriteProtected(&FATFS_HAL_DEVICE))
 800d908:	6803      	ldr	r3, [r0, #0]
 800d90a:	689b      	ldr	r3, [r3, #8]
 800d90c:	4798      	blx	r3
 800d90e:	e7f2      	b.n	800d8f6 <mount_volume.constprop.0+0x46>
 800d910:	6803      	ldr	r3, [r0, #0]
 800d912:	689b      	ldr	r3, [r3, #8]
 800d914:	4798      	blx	r3
	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 800d916:	4631      	mov	r1, r6
 800d918:	4620      	mov	r0, r4
 800d91a:	f7f9 f9b9 	bl	8006c90 <check_fs.lto_priv.0>
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 800d91e:	2802      	cmp	r0, #2
 800d920:	f000 808a 	beq.w	800da38 <mount_volume.constprop.0+0x188>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d924:	2804      	cmp	r0, #4
 800d926:	d070      	beq.n	800da0a <mount_volume.constprop.0+0x15a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d928:	2801      	cmp	r0, #1
 800d92a:	d87b      	bhi.n	800da24 <mount_volume.constprop.0+0x174>
	if (fmt == 1) {
 800d92c:	2801      	cmp	r0, #1
	bsect = fs->winsect;					/* Volume offset */
 800d92e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	if (fmt == 1) {
 800d930:	d06d      	beq.n	800da0e <mount_volume.constprop.0+0x15e>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d932:	f8b4 3047 	ldrh.w	r3, [r4, #71]	; 0x47
 800d936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d93a:	d173      	bne.n	800da24 <mount_volume.constprop.0+0x174>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d93c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d940:	2b00      	cmp	r3, #0
 800d942:	f000 8099 	beq.w	800da78 <mount_volume.constprop.0+0x1c8>
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d946:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
		fs->fsize = fasize;
 800d94a:	6223      	str	r3, [r4, #32]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d94c:	1e50      	subs	r0, r2, #1
 800d94e:	2801      	cmp	r0, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d950:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d952:	d867      	bhi.n	800da24 <mount_volume.constprop.0+0x174>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d954:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
 800d958:	b285      	uxth	r5, r0
 800d95a:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d95c:	2d00      	cmp	r5, #0
 800d95e:	d061      	beq.n	800da24 <mount_volume.constprop.0+0x174>
 800d960:	1e45      	subs	r5, r0, #1
 800d962:	4205      	tst	r5, r0
 800d964:	d15e      	bne.n	800da24 <mount_volume.constprop.0+0x174>
 800d966:	f8b4 704d 	ldrh.w	r7, [r4, #77]	; 0x4d
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d96a:	073d      	lsls	r5, r7, #28
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d96c:	8127      	strh	r7, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d96e:	d159      	bne.n	800da24 <mount_volume.constprop.0+0x174>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d970:	f8b4 504f 	ldrh.w	r5, [r4, #79]	; 0x4f
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d974:	b905      	cbnz	r5, 800d978 <mount_volume.constprop.0+0xc8>
	rv = rv << 8 | ptr[0];
 800d976:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 800d978:	f8b4 e04a 	ldrh.w	lr, [r4, #74]	; 0x4a
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d97c:	f1be 0f00 	cmp.w	lr, #0
 800d980:	d050      	beq.n	800da24 <mount_volume.constprop.0+0x174>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d982:	fb03 f202 	mul.w	r2, r3, r2
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d986:	eb0e 1c17 	add.w	ip, lr, r7, lsr #4
 800d98a:	4494      	add	ip, r2
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d98c:	45ac      	cmp	ip, r5
 800d98e:	d849      	bhi.n	800da24 <mount_volume.constprop.0+0x174>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d990:	eba5 050c 	sub.w	r5, r5, ip
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d994:	4285      	cmp	r5, r0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d996:	fbb5 f8f0 	udiv	r8, r5, r0
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d99a:	d343      	bcc.n	800da24 <mount_volume.constprop.0+0x174>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800d99c:	486d      	ldr	r0, [pc, #436]	; (800db54 <mount_volume.constprop.0+0x2a4>)
 800d99e:	4580      	cmp	r8, r0
 800d9a0:	d840      	bhi.n	800da24 <mount_volume.constprop.0+0x174>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d9a2:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 800d9a6:	4580      	cmp	r8, r0
 800d9a8:	f200 80da 	bhi.w	800db60 <mount_volume.constprop.0+0x2b0>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d9ac:	f640 70f5 	movw	r0, #4085	; 0xff5
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d9b0:	eb01 050e 	add.w	r5, r1, lr
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d9b4:	4580      	cmp	r8, r0
		fs->database = bsect + sysect;					/* Data start sector */
 800d9b6:	448c      	add	ip, r1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d9b8:	f108 0002 	add.w	r0, r8, #2
		fs->volbase = bsect;							/* Volume start sector */
 800d9bc:	6261      	str	r1, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800d9be:	f8c4 c030 	str.w	ip, [r4, #48]	; 0x30
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d9c2:	61e0      	str	r0, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d9c4:	62a5      	str	r5, [r4, #40]	; 0x28
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d9c6:	f200 811b 	bhi.w	800dc00 <mount_volume.constprop.0+0x350>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800d9ca:	b35f      	cbz	r7, 800da24 <mount_volume.constprop.0+0x174>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d9cc:	442a      	add	r2, r5
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d9ce:	eb00 0140 	add.w	r1, r0, r0, lsl #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d9d2:	62e2      	str	r2, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d9d4:	f000 0201 	and.w	r2, r0, #1
 800d9d8:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 800d9dc:	2101      	movs	r1, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d9de:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 800d9e2:	ebb3 2f52 	cmp.w	r3, r2, lsr #9
 800d9e6:	d31d      	bcc.n	800da24 <mount_volume.constprop.0+0x174>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d9e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
 800d9ec:	2080      	movs	r0, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d9ee:	e9c4 3305 	strd	r3, r3, [r4, #20]
	fs->fs_type = (BYTE)fmt;/* FAT sub-type */
 800d9f2:	b2ca      	uxtb	r2, r1
		fs->fsi_flag = 0x80;
 800d9f4:	7120      	strb	r0, [r4, #4]
	fs->id = ++Fsid;		/* Volume mount ID */
 800d9f6:	4958      	ldr	r1, [pc, #352]	; (800db58 <mount_volume.constprop.0+0x2a8>)
	fs->fs_type = (BYTE)fmt;/* FAT sub-type */
 800d9f8:	7022      	strb	r2, [r4, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 800d9fa:	880b      	ldrh	r3, [r1, #0]
 800d9fc:	3301      	adds	r3, #1
 800d9fe:	b29b      	uxth	r3, r3
 800da00:	800b      	strh	r3, [r1, #0]
 800da02:	80e3      	strh	r3, [r4, #6]
	return FR_OK;
 800da04:	e778      	b.n	800d8f8 <mount_volume.constprop.0+0x48>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800da06:	2804      	cmp	r0, #4
 800da08:	d10c      	bne.n	800da24 <mount_volume.constprop.0+0x174>
 800da0a:	2601      	movs	r6, #1
 800da0c:	e774      	b.n	800d8f8 <mount_volume.constprop.0+0x48>
 800da0e:	f104 0346 	add.w	r3, r4, #70	; 0x46
 800da12:	f104 007b 	add.w	r0, r4, #123	; 0x7b
 800da16:	e001      	b.n	800da1c <mount_volume.constprop.0+0x16c>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800da18:	4298      	cmp	r0, r3
 800da1a:	d02f      	beq.n	800da7c <mount_volume.constprop.0+0x1cc>
 800da1c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800da20:	2a00      	cmp	r2, #0
 800da22:	d0f9      	beq.n	800da18 <mount_volume.constprop.0+0x168>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800da24:	260d      	movs	r6, #13
}
 800da26:	4630      	mov	r0, r6
 800da28:	b004      	add	sp, #16
 800da2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 800da2e:	260b      	movs	r6, #11
}
 800da30:	4630      	mov	r0, r6
 800da32:	b004      	add	sp, #16
 800da34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rv = rv << 8 | ptr[0];
 800da38:	f8d4 2202 	ldr.w	r2, [r4, #514]	; 0x202
 800da3c:	f8d4 3212 	ldr.w	r3, [r4, #530]	; 0x212
 800da40:	466d      	mov	r5, sp
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 800da42:	e9cd 2300 	strd	r2, r3, [sp]
	rv = rv << 8 | ptr[0];
 800da46:	f8d4 2222 	ldr.w	r2, [r4, #546]	; 0x222
 800da4a:	f8d4 3232 	ldr.w	r3, [r4, #562]	; 0x232
 800da4e:	af04      	add	r7, sp, #16
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 800da50:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800da54:	e002      	b.n	800da5c <mount_volume.constprop.0+0x1ac>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800da56:	2003      	movs	r0, #3
	} while (part == 0 && fmt >= 2 && ++i < 4);
 800da58:	42bd      	cmp	r5, r7
 800da5a:	d0d4      	beq.n	800da06 <mount_volume.constprop.0+0x156>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800da5c:	f855 1b04 	ldr.w	r1, [r5], #4
 800da60:	2900      	cmp	r1, #0
 800da62:	d0f8      	beq.n	800da56 <mount_volume.constprop.0+0x1a6>
 800da64:	4620      	mov	r0, r4
 800da66:	f7f9 f913 	bl	8006c90 <check_fs.lto_priv.0>
	} while (part == 0 && fmt >= 2 && ++i < 4);
 800da6a:	2801      	cmp	r0, #1
 800da6c:	d8f4      	bhi.n	800da58 <mount_volume.constprop.0+0x1a8>
 800da6e:	e75d      	b.n	800d92c <mount_volume.constprop.0+0x7c>
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800da70:	260c      	movs	r6, #12
 800da72:	e741      	b.n	800d8f8 <mount_volume.constprop.0+0x48>
 800da74:	4798      	blx	r3
 800da76:	e73f      	b.n	800d8f8 <mount_volume.constprop.0+0x48>
	rv = rv << 8 | ptr[0];
 800da78:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800da7a:	e764      	b.n	800d946 <mount_volume.constprop.0+0x96>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
 800da7c:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 800da80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da84:	d1ce      	bne.n	800da24 <mount_volume.constprop.0+0x174>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800da86:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 800da8a:	2b09      	cmp	r3, #9
 800da8c:	d1ca      	bne.n	800da24 <mount_volume.constprop.0+0x174>
	rv = rv << 8 | ptr[0];
 800da8e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800da92:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA of the volume + 1 */
 800da96:	185d      	adds	r5, r3, r1
		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be accessed in 32-bit LBA) */
 800da98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA of the volume + 1 */
 800da9c:	f140 0000 	adc.w	r0, r0, #0
		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be accessed in 32-bit LBA) */
 800daa0:	42ab      	cmp	r3, r5
 800daa2:	eb72 0300 	sbcs.w	r3, r2, r0
 800daa6:	d3bd      	bcc.n	800da24 <mount_volume.constprop.0+0x174>
	rv = rv << 8 | ptr[0];
 800daa8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800daac:	6223      	str	r3, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800daae:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800dab2:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800dab4:	70a3      	strb	r3, [r4, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800dab6:	d1b5      	bne.n	800da24 <mount_volume.constprop.0+0x174>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800dab8:	f894 70a9 	ldrb.w	r7, [r4, #169]	; 0xa9
 800dabc:	40bb      	lsls	r3, r7
 800dabe:	b29f      	uxth	r7, r3
 800dac0:	8167      	strh	r7, [r4, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768 sectors) */
 800dac2:	2f00      	cmp	r7, #0
 800dac4:	d0ae      	beq.n	800da24 <mount_volume.constprop.0+0x174>
	rv = rv << 8 | ptr[0];
 800dac6:	f8d4 7098 	ldr.w	r7, [r4, #152]	; 0x98
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800daca:	f8df c090 	ldr.w	ip, [pc, #144]	; 800db5c <mount_volume.constprop.0+0x2ac>
 800dace:	4567      	cmp	r7, ip
 800dad0:	d8a8      	bhi.n	800da24 <mount_volume.constprop.0+0x174>
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800dad2:	b29b      	uxth	r3, r3
 800dad4:	fb07 f303 	mul.w	r3, r7, r3
		fs->n_fatent = nclst + 2;
 800dad8:	3702      	adds	r7, #2
 800dada:	61e7      	str	r7, [r4, #28]
	rv = rv << 8 | ptr[0];
 800dadc:	f8d4 7094 	ldr.w	r7, [r4, #148]	; 0x94
		fs->volbase = bsect;
 800dae0:	6261      	str	r1, [r4, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800dae2:	440f      	add	r7, r1
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800dae4:	19db      	adds	r3, r3, r7
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800dae6:	6327      	str	r7, [r4, #48]	; 0x30
	rv = rv << 8 | ptr[0];
 800dae8:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800daec:	4439      	add	r1, r7
 800daee:	62a1      	str	r1, [r4, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800daf0:	eb42 0102 	adc.w	r1, r2, r2
 800daf4:	429d      	cmp	r5, r3
 800daf6:	eb70 0301 	sbcs.w	r3, r0, r1
 800dafa:	d393      	bcc.n	800da24 <mount_volume.constprop.0+0x174>
		so = i = 0;
 800dafc:	4615      	mov	r5, r2
 800dafe:	4617      	mov	r7, r2
	rv = rv << 8 | ptr[0];
 800db00:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800db04:	62e3      	str	r3, [r4, #44]	; 0x2c
			if (i == 0) {
 800db06:	b9bd      	cbnz	r5, 800db38 <mount_volume.constprop.0+0x288>
				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
 800db08:	8960      	ldrh	r0, [r4, #10]
 800db0a:	42b8      	cmp	r0, r7
 800db0c:	d98a      	bls.n	800da24 <mount_volume.constprop.0+0x174>
	clst -= 2;		/* Cluster number is origin from 2 */
 800db0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800db10:	69e2      	ldr	r2, [r4, #28]
	clst -= 2;		/* Cluster number is origin from 2 */
 800db12:	1e99      	subs	r1, r3, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800db14:	3a02      	subs	r2, #2
 800db16:	4291      	cmp	r1, r2
 800db18:	bf2f      	iteee	cs
 800db1a:	4639      	movcs	r1, r7
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800db1c:	6b23      	ldrcc	r3, [r4, #48]	; 0x30
 800db1e:	fb01 3300 	mlacc	r3, r1, r0, r3
				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
 800db22:	19d9      	addcc	r1, r3, r7
	if (sect != fs->winsect) {	/* Window offset changed? */
 800db24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
				so++;
 800db26:	3701      	adds	r7, #1
	if (sect != fs->winsect) {	/* Window offset changed? */
 800db28:	428b      	cmp	r3, r1
 800db2a:	d005      	beq.n	800db38 <mount_volume.constprop.0+0x288>
 800db2c:	4620      	mov	r0, r4
 800db2e:	f7f8 ffbf 	bl	8006ab0 <move_window.part.0.lto_priv.0>
				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
 800db32:	2800      	cmp	r0, #0
 800db34:	f47f af69 	bne.w	800da0a <mount_volume.constprop.0+0x15a>
			if (fs->win[i] == ET_BITMAP) break;			/* Is it a bitmap entry? */
 800db38:	1963      	adds	r3, r4, r5
 800db3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
 800db3e:	f105 0220 	add.w	r2, r5, #32
			if (fs->win[i] == ET_BITMAP) break;			/* Is it a bitmap entry? */
 800db42:	2b81      	cmp	r3, #129	; 0x81
 800db44:	d030      	beq.n	800dba8 <mount_volume.constprop.0+0x2f8>
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
 800db46:	f3c2 0508 	ubfx	r5, r2, #0, #9
			if (i == 0) {
 800db4a:	e7dc      	b.n	800db06 <mount_volume.constprop.0+0x256>
 800db4c:	20001ac8 	.word	0x20001ac8
 800db50:	200008e8 	.word	0x200008e8
 800db54:	0ffffff5 	.word	0x0ffffff5
 800db58:	20001acc 	.word	0x20001acc
 800db5c:	7ffffffd 	.word	0x7ffffffd
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800db60:	eb01 000e 	add.w	r0, r1, lr
 800db64:	62a0      	str	r0, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800db66:	eb01 000c 	add.w	r0, r1, ip
 800db6a:	6320      	str	r0, [r4, #48]	; 0x30
	rv = rv << 8 | ptr[0];
 800db6c:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800db70:	f108 0202 	add.w	r2, r8, #2
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800db74:	4338      	orrs	r0, r7
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800db76:	61e2      	str	r2, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800db78:	6261      	str	r1, [r4, #36]	; 0x24
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800db7a:	f47f af53 	bne.w	800da24 <mount_volume.constprop.0+0x174>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800db7e:	0092      	lsls	r2, r2, #2
	rv = rv << 8 | ptr[0];
 800db80:	6ea0      	ldr	r0, [r4, #104]	; 0x68
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800db82:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 800db86:	ebb3 2f52 	cmp.w	r3, r2, lsr #9
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800db8a:	62e0      	str	r0, [r4, #44]	; 0x2c
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800db8c:	f4ff af4a 	bcc.w	800da24 <mount_volume.constprop.0+0x174>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800db90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
 800db94:	2080      	movs	r0, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800db96:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800db9a:	e9c4 3305 	strd	r3, r3, [r4, #20]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800db9e:	2a01      	cmp	r2, #1
		fs->fsi_flag = 0x80;
 800dba0:	7120      	strb	r0, [r4, #4]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800dba2:	d035      	beq.n	800dc10 <mount_volume.constprop.0+0x360>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800dba4:	2203      	movs	r2, #3
 800dba6:	e726      	b.n	800d9f6 <mount_volume.constprop.0+0x146>
		bcl = ld_dword(fs->win + i + 20);				/* Bitmap cluster */
 800dba8:	f104 073c 	add.w	r7, r4, #60	; 0x3c
	rv = rv << 8 | ptr[0];
 800dbac:	197a      	adds	r2, r7, r5
 800dbae:	6955      	ldr	r5, [r2, #20]
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;	/* (Wrong cluster#) */
 800dbb0:	2d01      	cmp	r5, #1
 800dbb2:	f67f af37 	bls.w	800da24 <mount_volume.constprop.0+0x174>
 800dbb6:	69e3      	ldr	r3, [r4, #28]
 800dbb8:	429d      	cmp	r5, r3
 800dbba:	f4bf af33 	bcs.w	800da24 <mount_volume.constprop.0+0x174>
		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
 800dbbe:	8962      	ldrh	r2, [r4, #10]
 800dbc0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800dbc2:	1ea9      	subs	r1, r5, #2
 800dbc4:	fb01 3302 	mla	r3, r1, r2, r3
 800dbc8:	6363      	str	r3, [r4, #52]	; 0x34
 800dbca:	e002      	b.n	800dbd2 <mount_volume.constprop.0+0x322>
			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented? */
 800dbcc:	42ab      	cmp	r3, r5
 800dbce:	f47f af29 	bne.w	800da24 <mount_volume.constprop.0+0x174>
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
 800dbd2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (sect != fs->winsect) {	/* Window offset changed? */
 800dbd4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
 800dbd6:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sect != fs->winsect) {	/* Window offset changed? */
 800dbda:	4299      	cmp	r1, r3
 800dbdc:	d005      	beq.n	800dbea <mount_volume.constprop.0+0x33a>
 800dbde:	4620      	mov	r0, r4
 800dbe0:	f7f8 ff66 	bl	8006ab0 <move_window.part.0.lto_priv.0>
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
 800dbe4:	2800      	cmp	r0, #0
 800dbe6:	f47f af10 	bne.w	800da0a <mount_volume.constprop.0+0x15a>
			cv = ld_dword(fs->win + bcl % (SS(fs) / 4) * 4);
 800dbea:	f005 037f 	and.w	r3, r5, #127	; 0x7f
	rv = rv << 8 | ptr[0];
 800dbee:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented? */
 800dbf2:	3501      	adds	r5, #1
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 800dbf4:	1c5a      	adds	r2, r3, #1
 800dbf6:	d1e9      	bne.n	800dbcc <mount_volume.constprop.0+0x31c>
 800dbf8:	2204      	movs	r2, #4
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800dbfa:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800dbfe:	e6fa      	b.n	800d9f6 <mount_volume.constprop.0+0x146>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800dc00:	2f00      	cmp	r7, #0
 800dc02:	f43f af0f 	beq.w	800da24 <mount_volume.constprop.0+0x174>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800dc06:	442a      	add	r2, r5
 800dc08:	62e2      	str	r2, [r4, #44]	; 0x2c
 800dc0a:	2102      	movs	r1, #2
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800dc0c:	0042      	lsls	r2, r0, #1
 800dc0e:	e6e6      	b.n	800d9de <mount_volume.constprop.0+0x12e>
 800dc10:	4620      	mov	r0, r4
 800dc12:	3101      	adds	r1, #1
 800dc14:	f7f8 ff4c 	bl	8006ab0 <move_window.part.0.lto_priv.0>
			&& move_window(fs, bsect + 1) == FR_OK)
 800dc18:	2800      	cmp	r0, #0
 800dc1a:	d1c3      	bne.n	800dba4 <mount_volume.constprop.0+0x2f4>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800dc1c:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800dc20:	f8b4 123a 	ldrh.w	r1, [r4, #570]	; 0x23a
			fs->fsi_flag = 0;
 800dc24:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800dc26:	4291      	cmp	r1, r2
 800dc28:	d1bc      	bne.n	800dba4 <mount_volume.constprop.0+0x2f4>
	rv = rv << 8 | ptr[0];
 800dc2a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800dc2c:	4b09      	ldr	r3, [pc, #36]	; (800dc54 <mount_volume.constprop.0+0x3a4>)
 800dc2e:	429a      	cmp	r2, r3
 800dc30:	d1b8      	bne.n	800dba4 <mount_volume.constprop.0+0x2f4>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800dc32:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
	rv = rv << 8 | ptr[0];
 800dc36:	f8d4 2220 	ldr.w	r2, [r4, #544]	; 0x220
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800dc3a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800dc3e:	3320      	adds	r3, #32
 800dc40:	429a      	cmp	r2, r3
 800dc42:	d1af      	bne.n	800dba4 <mount_volume.constprop.0+0x2f4>
	rv = rv << 8 | ptr[0];
 800dc44:	f8d4 1224 	ldr.w	r1, [r4, #548]	; 0x224
 800dc48:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800dc4c:	2203      	movs	r2, #3
 800dc4e:	e9c4 3105 	strd	r3, r1, [r4, #20]
 800dc52:	e6d0      	b.n	800d9f6 <mount_volume.constprop.0+0x146>
 800dc54:	41615252 	.word	0x41615252
	...

0800dc60 <InsertHandler>:
static void InsertHandler(eventid_t id) {
 800dc60:	b530      	push	{r4, r5, lr}
  if (sdcConnect(&SDCD1))
 800dc62:	4815      	ldr	r0, [pc, #84]	; (800dcb8 <InsertHandler+0x58>)
static void InsertHandler(eventid_t id) {
 800dc64:	b085      	sub	sp, #20
  if (sdcConnect(&SDCD1))
 800dc66:	f7f5 fe83 	bl	8003970 <sdcConnect>
 800dc6a:	b108      	cbz	r0, 800dc70 <InsertHandler+0x10>
}
 800dc6c:	b005      	add	sp, #20
 800dc6e:	bd30      	pop	{r4, r5, pc}

/*-----------------------------------------------------------------------*/
/* Mount/Unmount a Logical Drive                                         */
/*-----------------------------------------------------------------------*/

FRESULT f_mount (
 800dc70:	4b12      	ldr	r3, [pc, #72]	; (800dcbc <InsertHandler+0x5c>)
 800dc72:	4a13      	ldr	r2, [pc, #76]	; (800dcc0 <InsertHandler+0x60>)
 800dc74:	4604      	mov	r4, r0
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800dc76:	a801      	add	r0, sp, #4
 800dc78:	e9cd 3202 	strd	r3, r2, [sp, #8]
	const TCHAR *rp = path;
 800dc7c:	9301      	str	r3, [sp, #4]
	vol = get_ldnumber(&rp);
 800dc7e:	f7f8 fef7 	bl	8006a70 <get_ldnumber.lto_priv.0>
	if (vol < 0) return FR_INVALID_DRIVE;
 800dc82:	1e03      	subs	r3, r0, #0
 800dc84:	db14      	blt.n	800dcb0 <InsertHandler+0x50>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800dc86:	4d0f      	ldr	r5, [pc, #60]	; (800dcc4 <InsertHandler+0x64>)
 800dc88:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]

	if (cfs) {
 800dc8c:	b102      	cbz	r2, 800dc90 <InsertHandler+0x30>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800dc8e:	7014      	strb	r4, [r2, #0]
	}

	if (fs) {
 800dc90:	9a03      	ldr	r2, [sp, #12]
 800dc92:	b10a      	cbz	r2, 800dc98 <InsertHandler+0x38>
		fs->fs_type = 0;				/* Clear new fs object */
 800dc94:	2100      	movs	r1, #0
 800dc96:	7011      	strb	r1, [r2, #0]
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 800dc98:	a903      	add	r1, sp, #12
 800dc9a:	a802      	add	r0, sp, #8
	FatFs[vol] = fs;					/* Register new fs object */
 800dc9c:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 800dca0:	f7ff fe06 	bl	800d8b0 <mount_volume.constprop.0>
  if (err != FR_OK) {
 800dca4:	b920      	cbnz	r0, 800dcb0 <InsertHandler+0x50>
  fs_ready = TRUE;
 800dca6:	2201      	movs	r2, #1
 800dca8:	4b07      	ldr	r3, [pc, #28]	; (800dcc8 <InsertHandler+0x68>)
 800dcaa:	701a      	strb	r2, [r3, #0]
}
 800dcac:	b005      	add	sp, #20
 800dcae:	bd30      	pop	{r4, r5, pc}
    sdcDisconnect(&SDCD1);
 800dcb0:	4801      	ldr	r0, [pc, #4]	; (800dcb8 <InsertHandler+0x58>)
 800dcb2:	f7f5 fa9d 	bl	80031f0 <sdcDisconnect>
    return;
 800dcb6:	e7d9      	b.n	800dc6c <InsertHandler+0xc>
 800dcb8:	200008e8 	.word	0x200008e8
 800dcbc:	08012f3c 	.word	0x08012f3c
 800dcc0:	20001ad0 	.word	0x20001ad0
 800dcc4:	20001ac8 	.word	0x20001ac8
 800dcc8:	20002400 	.word	0x20002400
 800dccc:	00000000 	.word	0x00000000

0800dcd0 <scan_files.constprop.0>:
static FRESULT scan_files(BaseSequentialStream *chp, char *path) {
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcd6:	4aa4      	ldr	r2, [pc, #656]	; (800df68 <scan_files.constprop.0+0x298>)
 800dcd8:	b0a1      	sub	sp, #132	; 0x84


	if (!dp) return FR_INVALID_OBJECT;

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
 800dcda:	a90a      	add	r1, sp, #40	; 0x28
 800dcdc:	a80b      	add	r0, sp, #44	; 0x2c
 800dcde:	920b      	str	r2, [sp, #44]	; 0x2c
 800dce0:	9303      	str	r3, [sp, #12]
 800dce2:	f7ff fde5 	bl	800d8b0 <mount_volume.constprop.0>
	if (res == FR_OK) {
 800dce6:	4605      	mov	r5, r0
 800dce8:	b118      	cbz	r0, 800dcf2 <scan_files.constprop.0+0x22>
}
 800dcea:	4628      	mov	r0, r5
 800dcec:	b021      	add	sp, #132	; 0x84
 800dcee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->obj.fs = fs;
 800dcf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcf4:	2208      	movs	r2, #8
 800dcf6:	f44f 618c 	mov.w	r1, #1120	; 0x460
 800dcfa:	930c      	str	r3, [sp, #48]	; 0x30
 800dcfc:	f7f7 fd80 	bl	8005800 <chHeapAllocAligned>
		INIT_NAMBUF(fs);
 800dd00:	9004      	str	r0, [sp, #16]
 800dd02:	2800      	cmp	r0, #0
 800dd04:	d03b      	beq.n	800dd7e <scan_files.constprop.0+0xae>
 800dd06:	9904      	ldr	r1, [sp, #16]
 800dd08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dd0a:	f501 7300 	add.w	r3, r1, #512	; 0x200
 800dd0e:	e9c2 1303 	strd	r1, r3, [r2, #12]
	FATFS *fs = dp->obj.fs;
 800dd12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd14:	9301      	str	r3, [sp, #4]
 800dd16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd18:	461f      	mov	r7, r3
		while (IsSeparator(*path)) path++;	/* Strip separators */
 800dd1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd1e:	2a2f      	cmp	r2, #47	; 0x2f
 800dd20:	d0fa      	beq.n	800dd18 <scan_files.constprop.0+0x48>
 800dd22:	2a5c      	cmp	r2, #92	; 0x5c
 800dd24:	d0f8      	beq.n	800dd18 <scan_files.constprop.0+0x48>
		dp->obj.sclust = 0;					/* Start from the root directory */
 800dd26:	2300      	movs	r3, #0
 800dd28:	930e      	str	r3, [sp, #56]	; 0x38
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
 800dd2a:	9313      	str	r3, [sp, #76]	; 0x4c
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800dd2c:	783b      	ldrb	r3, [r7, #0]
 800dd2e:	2b1f      	cmp	r3, #31
 800dd30:	d92a      	bls.n	800dd88 <scan_files.constprop.0+0xb8>
	FATFS *fs = dp->obj.fs;
 800dd32:	f8dd a004 	ldr.w	sl, [sp, #4]
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
 800dd36:	4656      	mov	r6, sl
 800dd38:	46ba      	mov	sl, r7
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 800dd3a:	2500      	movs	r5, #0
 800dd3c:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 800dd40:	f10a 0701 	add.w	r7, sl, #1
 800dd44:	f1ab 0802 	sub.w	r8, fp, #2
	wc = (BYTE)*p++;			/* Get a byte */
 800dd48:	46ba      	mov	sl, r7
 800dd4a:	b29c      	uxth	r4, r3
	if (wc != 0) {
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d152      	bne.n	800ddf6 <scan_files.constprop.0+0x126>
		cf = NS_LAST;			/* Last segment */
 800dd50:	2404      	movs	r4, #4
	while (di) {					/* Snip off trailing spaces and dots if exist */
 800dd52:	b14d      	cbz	r5, 800dd68 <scan_files.constprop.0+0x98>
 800dd54:	eb0b 0245 	add.w	r2, fp, r5, lsl #1
		wc = lfn[di - 1];
 800dd58:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (wc != ' ' && wc != '.') break;
 800dd5c:	2b20      	cmp	r3, #32
 800dd5e:	d001      	beq.n	800dd64 <scan_files.constprop.0+0x94>
 800dd60:	2b2e      	cmp	r3, #46	; 0x2e
 800dd62:	d179      	bne.n	800de58 <scan_files.constprop.0+0x188>
	while (di) {					/* Snip off trailing spaces and dots if exist */
 800dd64:	3d01      	subs	r5, #1
 800dd66:	d1f7      	bne.n	800dd58 <scan_files.constprop.0+0x88>
	lfn[di] = 0;							/* LFN is created into the working buffer */
 800dd68:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 800dd6a:	2506      	movs	r5, #6
/*------------------------------------------------------------------------*/
/* Free a memory block                                                    */
/*------------------------------------------------------------------------*/
void ff_memfree(void *mblock) {

  chHeapFree(mblock);
 800dd6c:	9804      	ldr	r0, [sp, #16]
	lfn[di] = 0;							/* LFN is created into the working buffer */
 800dd6e:	f8ab 3000 	strh.w	r3, [fp]
 800dd72:	f7f7 fde5 	bl	8005940 <chHeapFree>
 800dd76:	4628      	mov	r0, r5
 800dd78:	b021      	add	sp, #132	; 0x84
 800dd7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
	if (res == FR_OK) {
		if (!fno) {
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_NAMBUF(fs);
 800dd7e:	2511      	movs	r5, #17
 800dd80:	4628      	mov	r0, r5
 800dd82:	b021      	add	sp, #132	; 0x84
 800dd84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->fn[NSFLAG] = NS_NONAME;
 800dd88:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 800dd8a:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800dd8e:	4658      	mov	r0, fp
		dp->fn[NSFLAG] = NS_NONAME;
 800dd90:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
		res = dir_sdi(dp, 0);
 800dd94:	f7ff fbb4 	bl	800d500 <dir_sdi.constprop.0>
		if (res == FR_OK) {						/* Follow completed */
 800dd98:	4605      	mov	r5, r0
 800dd9a:	2800      	cmp	r0, #0
 800dd9c:	f040 8425 	bne.w	800e5ea <scan_files.constprop.0+0x91a>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800dda0:	f89d 407b 	ldrb.w	r4, [sp, #123]	; 0x7b
 800dda4:	0627      	lsls	r7, r4, #24
 800dda6:	f100 83dc 	bmi.w	800e562 <scan_files.constprop.0+0x892>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 800ddaa:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800ddae:	06de      	lsls	r6, r3, #27
 800ddb0:	d51c      	bpl.n	800ddec <scan_files.constprop.0+0x11c>
					if (fs->fs_type == FS_EXFAT) {
 800ddb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddb4:	781a      	ldrb	r2, [r3, #0]
 800ddb6:	2a04      	cmp	r2, #4
 800ddb8:	f000 83c4 	beq.w	800e544 <scan_files.constprop.0+0x874>
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800ddbc:	981b      	ldr	r0, [sp, #108]	; 0x6c
	if (fs->fs_type == FS_FAT32) {
 800ddbe:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800ddc0:	8b41      	ldrh	r1, [r0, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ddc2:	bf04      	itt	eq
 800ddc4:	8a82      	ldrheq	r2, [r0, #20]
 800ddc6:	ea41 4102 	orreq.w	r1, r1, r2, lsl #16
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800ddca:	910e      	str	r1, [sp, #56]	; 0x38
				dp->obj.id = fs->id;
 800ddcc:	88db      	ldrh	r3, [r3, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800ddce:	4658      	mov	r0, fp
				dp->obj.id = fs->id;
 800ddd0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800ddd4:	f7ff fb94 	bl	800d500 <dir_sdi.constprop.0>
 800ddd8:	4604      	mov	r4, r0
 800ddda:	9804      	ldr	r0, [sp, #16]
 800dddc:	f7f7 fdb0 	bl	8005940 <chHeapFree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800dde0:	2c04      	cmp	r4, #4
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800dde2:	46a0      	mov	r8, r4
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800dde4:	f040 8239 	bne.w	800e25a <scan_files.constprop.0+0x58a>
 800dde8:	2505      	movs	r5, #5
 800ddea:	e77e      	b.n	800dcea <scan_files.constprop.0+0x1a>
 800ddec:	9804      	ldr	r0, [sp, #16]
 800ddee:	f7f7 fda7 	bl	8005940 <chHeapFree>
					res = FR_NO_PATH;
 800ddf2:	2505      	movs	r5, #5
 800ddf4:	e779      	b.n	800dcea <scan_files.constprop.0+0x1a>
			if (oem < 0x100) c = p[oem - 0x80];
 800ddf6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
	if (oem < 0x80) {	/* ASCII? */
 800ddfa:	2c7f      	cmp	r4, #127	; 0x7f
			if (oem < 0x100) c = p[oem - 0x80];
 800ddfc:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
	if (oem < 0x80) {	/* ASCII? */
 800de00:	d903      	bls.n	800de0a <scan_files.constprop.0+0x13a>
			if (oem < 0x100) c = p[oem - 0x80];
 800de02:	4a5a      	ldr	r2, [pc, #360]	; (800df6c <scan_files.constprop.0+0x29c>)
 800de04:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 800de08:	b30c      	cbz	r4, 800de4e <scan_files.constprop.0+0x17e>
		if (wc < ' ' || IsSeparator(wc)) break;	/* Break if end of the path or a separator is found */
 800de0a:	2c1f      	cmp	r4, #31
 800de0c:	d9a0      	bls.n	800dd50 <scan_files.constprop.0+0x80>
 800de0e:	2c2f      	cmp	r4, #47	; 0x2f
 800de10:	d010      	beq.n	800de34 <scan_files.constprop.0+0x164>
 800de12:	2c5c      	cmp	r4, #92	; 0x5c
 800de14:	d00e      	beq.n	800de34 <scan_files.constprop.0+0x164>
		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800de16:	2c7f      	cmp	r4, #127	; 0x7f
 800de18:	d804      	bhi.n	800de24 <scan_files.constprop.0+0x154>
 800de1a:	4621      	mov	r1, r4
 800de1c:	4854      	ldr	r0, [pc, #336]	; (800df70 <scan_files.constprop.0+0x2a0>)
 800de1e:	f7f2 fb21 	bl	8000464 <strchr>
 800de22:	b9a0      	cbnz	r0, 800de4e <scan_files.constprop.0+0x17e>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800de24:	2dff      	cmp	r5, #255	; 0xff
 800de26:	d012      	beq.n	800de4e <scan_files.constprop.0+0x17e>
		lfn[di++] = wc;				/* Store the Unicode character */
 800de28:	f828 4f02 	strh.w	r4, [r8, #2]!
	wc = (BYTE)*p++;			/* Get a byte */
 800de2c:	f817 3b01 	ldrb.w	r3, [r7], #1
		lfn[di++] = wc;				/* Store the Unicode character */
 800de30:	3501      	adds	r5, #1
		uc = tchar2uni(&p);			/* Get a character */
 800de32:	e789      	b.n	800dd48 <scan_files.constprop.0+0x78>
		while (IsSeparator(*p)) p++;	/* Skip duplicated separators if exist */
 800de34:	783b      	ldrb	r3, [r7, #0]
 800de36:	46ba      	mov	sl, r7
 800de38:	2b2f      	cmp	r3, #47	; 0x2f
 800de3a:	f107 0701 	add.w	r7, r7, #1
 800de3e:	d0f9      	beq.n	800de34 <scan_files.constprop.0+0x164>
 800de40:	2b5c      	cmp	r3, #92	; 0x5c
 800de42:	d0f7      	beq.n	800de34 <scan_files.constprop.0+0x164>
		if (IsTerminator(*p)) cf = NS_LAST;	/* Ignore terminating separator */
 800de44:	2b1f      	cmp	r3, #31
 800de46:	bf8c      	ite	hi
 800de48:	2400      	movhi	r4, #0
 800de4a:	2404      	movls	r4, #4
 800de4c:	e781      	b.n	800dd52 <scan_files.constprop.0+0x82>
 800de4e:	2506      	movs	r5, #6
 800de50:	9804      	ldr	r0, [sp, #16]
 800de52:	f7f7 fd75 	bl	8005940 <chHeapFree>
 800de56:	e748      	b.n	800dcea <scan_files.constprop.0+0x1a>
	lfn[di] = 0;							/* LFN is created into the working buffer */
 800de58:	2200      	movs	r2, #0
 800de5a:	f82b 2015 	strh.w	r2, [fp, r5, lsl #1]
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 800de5e:	f8bb 3000 	ldrh.w	r3, [fp]
 800de62:	2b20      	cmp	r3, #32
 800de64:	bf08      	it	eq
 800de66:	f10b 0302 	addeq.w	r3, fp, #2
 800de6a:	f040 8127 	bne.w	800e0bc <scan_files.constprop.0+0x3ec>
 800de6e:	4619      	mov	r1, r3
 800de70:	f833 0b02 	ldrh.w	r0, [r3], #2
 800de74:	4617      	mov	r7, r2
 800de76:	2820      	cmp	r0, #32
 800de78:	f102 0201 	add.w	r2, r2, #1
 800de7c:	d0f7      	beq.n	800de6e <scan_files.constprop.0+0x19e>
		wc = lfn[si++];					/* Get an LFN character */
 800de7e:	3702      	adds	r7, #2
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 800de80:	f044 0403 	orr.w	r4, r4, #3
 800de84:	eb0b 0345 	add.w	r3, fp, r5, lsl #1
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 800de88:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 800de8c:	2a2e      	cmp	r2, #46	; 0x2e
 800de8e:	d001      	beq.n	800de94 <scan_files.constprop.0+0x1c4>
 800de90:	3d01      	subs	r5, #1
 800de92:	d1f9      	bne.n	800de88 <scan_files.constprop.0+0x1b8>
	memset(dp->fn, ' ', 11);
 800de94:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
 800de98:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 800de9c:	f8cd 3077 	str.w	r3, [sp, #119]	; 0x77
		wc = lfn[si++];					/* Get an LFN character */
 800dea0:	8809      	ldrh	r1, [r1, #0]
		if (wc == 0) break;				/* Break on end of the LFN */
 800dea2:	2900      	cmp	r1, #0
 800dea4:	d04c      	beq.n	800df40 <scan_files.constprop.0+0x270>
	i = b = 0; ni = 8;
 800dea6:	f04f 0800 	mov.w	r8, #0
 800deaa:	f04f 0908 	mov.w	r9, #8
 800deae:	4642      	mov	r2, r8
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 800deb0:	2920      	cmp	r1, #32
 800deb2:	f000 80e3 	beq.w	800e07c <scan_files.constprop.0+0x3ac>
 800deb6:	292e      	cmp	r1, #46	; 0x2e
 800deb8:	f000 80e3 	beq.w	800e082 <scan_files.constprop.0+0x3b2>
		if (i >= ni || si == di) {		/* End of field? */
 800debc:	454a      	cmp	r2, r9
 800debe:	f080 80ef 	bcs.w	800e0a0 <scan_files.constprop.0+0x3d0>
 800dec2:	42bd      	cmp	r5, r7
 800dec4:	f000 80df 	beq.w	800e086 <scan_files.constprop.0+0x3b6>
		if (wc >= 0x80) {	/* Is this an extended character? */
 800dec8:	297f      	cmp	r1, #127	; 0x7f
 800deca:	f200 811b 	bhi.w	800e104 <scan_files.constprop.0+0x434>
			if (wc == 0 || strchr("+,;=[]", (int)wc)) {	/* Replace illegal characters for SFN */
 800dece:	4829      	ldr	r0, [pc, #164]	; (800df74 <scan_files.constprop.0+0x2a4>)
 800ded0:	9205      	str	r2, [sp, #20]
 800ded2:	9102      	str	r1, [sp, #8]
 800ded4:	f7f2 fac6 	bl	8000464 <strchr>
 800ded8:	9902      	ldr	r1, [sp, #8]
 800deda:	9a05      	ldr	r2, [sp, #20]
 800dedc:	2800      	cmp	r0, #0
 800dede:	f000 8342 	beq.w	800e566 <scan_files.constprop.0+0x896>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800dee2:	215f      	movs	r1, #95	; 0x5f
 800dee4:	f044 0403 	orr.w	r4, r4, #3
		dp->fn[i++] = (BYTE)wc;
 800dee8:	f102 0380 	add.w	r3, r2, #128	; 0x80
 800deec:	446b      	add	r3, sp
 800deee:	f803 1c10 	strb.w	r1, [r3, #-16]
 800def2:	3201      	adds	r2, #1
		wc = lfn[si++];					/* Get an LFN character */
 800def4:	f83b 1017 	ldrh.w	r1, [fp, r7, lsl #1]
 800def8:	3701      	adds	r7, #1
		if (wc == 0) break;				/* Break on end of the LFN */
 800defa:	2900      	cmp	r1, #0
 800defc:	d1d8      	bne.n	800deb0 <scan_files.constprop.0+0x1e0>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800defe:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 800df02:	2be5      	cmp	r3, #229	; 0xe5
 800df04:	bf04      	itt	eq
 800df06:	2305      	moveq	r3, #5
 800df08:	f88d 3070 	strbeq.w	r3, [sp, #112]	; 0x70
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 800df0c:	f1b9 0f08 	cmp.w	r9, #8
 800df10:	f000 80ec 	beq.w	800e0ec <scan_files.constprop.0+0x41c>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 800df14:	f008 030c 	and.w	r3, r8, #12
 800df18:	2b0c      	cmp	r3, #12
 800df1a:	f000 80cc 	beq.w	800e0b6 <scan_files.constprop.0+0x3e6>
 800df1e:	f008 0303 	and.w	r3, r8, #3
 800df22:	2b03      	cmp	r3, #3
 800df24:	f000 80c7 	beq.w	800e0b6 <scan_files.constprop.0+0x3e6>
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 800df28:	07a2      	lsls	r2, r4, #30
 800df2a:	d409      	bmi.n	800df40 <scan_files.constprop.0+0x270>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 800df2c:	f018 0f01 	tst.w	r8, #1
 800df30:	bf18      	it	ne
 800df32:	f044 0410 	orrne.w	r4, r4, #16
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 800df36:	f018 0f04 	tst.w	r8, #4
 800df3a:	bf18      	it	ne
 800df3c:	f044 0408 	orrne.w	r4, r4, #8
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800df40:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800df44:	4658      	mov	r0, fp
	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 800df46:	f88d 407b 	strb.w	r4, [sp, #123]	; 0x7b
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800df4a:	f7ff fad9 	bl	800d500 <dir_sdi.constprop.0>
	if (res != FR_OK) return res;
 800df4e:	2800      	cmp	r0, #0
 800df50:	d175      	bne.n	800e03e <scan_files.constprop.0+0x36e>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800df52:	7833      	ldrb	r3, [r6, #0]
 800df54:	2b04      	cmp	r3, #4
 800df56:	f000 80ea 	beq.w	800e12e <scan_files.constprop.0+0x45e>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800df5a:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800df5e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800df62:	464c      	mov	r4, r9
 800df64:	971f      	str	r7, [sp, #124]	; 0x7c
 800df66:	e010      	b.n	800df8a <scan_files.constprop.0+0x2ba>
 800df68:	20001ee0 	.word	0x20001ee0
 800df6c:	08012668 	.word	0x08012668
 800df70:	08012f40 	.word	0x08012f40
 800df74:	08012f4c 	.word	0x08012f4c
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800df78:	290f      	cmp	r1, #15
 800df7a:	d04a      	beq.n	800e012 <scan_files.constprop.0+0x342>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800df7c:	24ff      	movs	r4, #255	; 0xff
 800df7e:	971f      	str	r7, [sp, #124]	; 0x7c
		res = dir_next(dp, 0);	/* Next entry */
 800df80:	4658      	mov	r0, fp
 800df82:	f7ff fa6d 	bl	800d460 <dir_next.constprop.0>
	} while (res == FR_OK);
 800df86:	2800      	cmp	r0, #0
 800df88:	d159      	bne.n	800e03e <scan_files.constprop.0+0x36e>
		res = move_window(fs, dp->sect);
 800df8a:	991a      	ldr	r1, [sp, #104]	; 0x68
	if (sect != fs->winsect) {	/* Window offset changed? */
 800df8c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800df8e:	4299      	cmp	r1, r3
 800df90:	d004      	beq.n	800df9c <scan_files.constprop.0+0x2cc>
 800df92:	4630      	mov	r0, r6
 800df94:	f7f8 fd8c 	bl	8006ab0 <move_window.part.0.lto_priv.0>
		if (res != FR_OK) break;
 800df98:	2800      	cmp	r0, #0
 800df9a:	d150      	bne.n	800e03e <scan_files.constprop.0+0x36e>
		c = dp->dir[DIR_Name];
 800df9c:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800df9e:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	f000 8315 	beq.w	800e5d0 <scan_files.constprop.0+0x900>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800dfa6:	7aea      	ldrb	r2, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800dfa8:	2be5      	cmp	r3, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800dfaa:	f002 013f 	and.w	r1, r2, #63	; 0x3f
 800dfae:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800dfb2:	d0e3      	beq.n	800df7c <scan_files.constprop.0+0x2ac>
 800dfb4:	0710      	lsls	r0, r2, #28
 800dfb6:	d4df      	bmi.n	800df78 <scan_files.constprop.0+0x2a8>
			if (a == AM_LFN) {			/* An LFN entry is found */
 800dfb8:	290f      	cmp	r1, #15
 800dfba:	d02a      	beq.n	800e012 <scan_files.constprop.0+0x342>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800dfbc:	2c00      	cmp	r4, #0
 800dfbe:	d047      	beq.n	800e050 <scan_files.constprop.0+0x380>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800dfc0:	f89d 407b 	ldrb.w	r4, [sp, #123]	; 0x7b
 800dfc4:	07e1      	lsls	r1, r4, #31
 800dfc6:	d4d9      	bmi.n	800df7c <scan_files.constprop.0+0x2ac>
 800dfc8:	4628      	mov	r0, r5
 800dfca:	220b      	movs	r2, #11
 800dfcc:	a91c      	add	r1, sp, #112	; 0x70
 800dfce:	f7f2 f94d 	bl	800026c <memcmp>
 800dfd2:	2800      	cmp	r0, #0
 800dfd4:	d1d2      	bne.n	800df7c <scan_files.constprop.0+0x2ac>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 800dfd6:	0763      	lsls	r3, r4, #29
 800dfd8:	f53f aee4 	bmi.w	800dda4 <scan_files.constprop.0+0xd4>
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800dfdc:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800dfe0:	06db      	lsls	r3, r3, #27
 800dfe2:	f140 82ad 	bpl.w	800e540 <scan_files.constprop.0+0x870>
			if (fs->fs_type == FS_EXFAT) {	/* Save containing directory information for next dir */
 800dfe6:	9b01      	ldr	r3, [sp, #4]
 800dfe8:	7819      	ldrb	r1, [r3, #0]
 800dfea:	2904      	cmp	r1, #4
 800dfec:	d06d      	beq.n	800e0ca <scan_files.constprop.0+0x3fa>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800dfee:	9b18      	ldr	r3, [sp, #96]	; 0x60
	if (fs->fs_type == FS_FAT32) {
 800dff0:	2903      	cmp	r1, #3
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800dff2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dff6:	9b01      	ldr	r3, [sp, #4]
 800dff8:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800dffc:	4413      	add	r3, r2
	cl = ld_word(dir + DIR_FstClusLO);
 800dffe:	8b5a      	ldrh	r2, [r3, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e000:	bf04      	itt	eq
 800e002:	8a9b      	ldrheq	r3, [r3, #20]
 800e004:	ea42 4203 	orreq.w	r2, r2, r3, lsl #16
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e008:	920e      	str	r2, [sp, #56]	; 0x38
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 800e00a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	wc = (BYTE)*p++;			/* Get a byte */
 800e00c:	f89a 3000 	ldrb.w	r3, [sl]
 800e010:	e693      	b.n	800dd3a <scan_files.constprop.0+0x6a>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e012:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 800e016:	0651      	lsls	r1, r2, #25
 800e018:	d4b2      	bmi.n	800df80 <scan_files.constprop.0+0x2b0>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e01a:	065a      	lsls	r2, r3, #25
 800e01c:	d52b      	bpl.n	800e076 <scan_files.constprop.0+0x3a6>
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e01e:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e022:	9b18      	ldr	r3, [sp, #96]	; 0x60
						sum = dp->dir[LDIR_Chksum];
 800e024:	f895 900d 	ldrb.w	r9, [r5, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e028:	931f      	str	r3, [sp, #124]	; 0x7c
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e02a:	7b6b      	ldrb	r3, [r5, #13]
 800e02c:	454b      	cmp	r3, r9
 800e02e:	f000 80cf 	beq.w	800e1d0 <scan_files.constprop.0+0x500>
		res = dir_next(dp, 0);	/* Next entry */
 800e032:	4658      	mov	r0, fp
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e034:	24ff      	movs	r4, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
 800e036:	f7ff fa13 	bl	800d460 <dir_next.constprop.0>
	} while (res == FR_OK);
 800e03a:	2800      	cmp	r0, #0
 800e03c:	d0a5      	beq.n	800df8a <scan_files.constprop.0+0x2ba>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e03e:	2804      	cmp	r0, #4
 800e040:	4680      	mov	r8, r0
 800e042:	f000 82c5 	beq.w	800e5d0 <scan_files.constprop.0+0x900>
 800e046:	9804      	ldr	r0, [sp, #16]
 800e048:	f7f7 fc7a 	bl	8005940 <chHeapFree>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e04c:	4645      	mov	r5, r8
 800e04e:	e64c      	b.n	800dcea <scan_files.constprop.0+0x1a>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e050:	462a      	mov	r2, r5
 800e052:	4623      	mov	r3, r4
 800e054:	f105 010b 	add.w	r1, r5, #11
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e058:	01dc      	lsls	r4, r3, #7
 800e05a:	ea44 0453 	orr.w	r4, r4, r3, lsr #1
 800e05e:	f812 3b01 	ldrb.w	r3, [r2], #1
 800e062:	441c      	add	r4, r3
	} while (--n);
 800e064:	428a      	cmp	r2, r1
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e066:	f004 03ff 	and.w	r3, r4, #255	; 0xff
	} while (--n);
 800e06a:	d1f5      	bne.n	800e058 <scan_files.constprop.0+0x388>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e06c:	454b      	cmp	r3, r9
 800e06e:	d1a7      	bne.n	800dfc0 <scan_files.constprop.0+0x2f0>
			ns = dp->fn[NSFLAG];
 800e070:	f89d 407b 	ldrb.w	r4, [sp, #123]	; 0x7b
 800e074:	e7af      	b.n	800dfd6 <scan_files.constprop.0+0x306>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e076:	42a3      	cmp	r3, r4
 800e078:	d1db      	bne.n	800e032 <scan_files.constprop.0+0x362>
 800e07a:	e7d6      	b.n	800e02a <scan_files.constprop.0+0x35a>
			cf |= NS_LOSS | NS_LFN;
 800e07c:	f044 0403 	orr.w	r4, r4, #3
			continue;
 800e080:	e738      	b.n	800def4 <scan_files.constprop.0+0x224>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 800e082:	42bd      	cmp	r5, r7
 800e084:	d1fa      	bne.n	800e07c <scan_files.constprop.0+0x3ac>
			if (ni == 11) {				/* Name extension overflow? */
 800e086:	f1b9 0f0b 	cmp.w	r9, #11
 800e08a:	f000 8274 	beq.w	800e576 <scan_files.constprop.0+0x8a6>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 800e08e:	ea4f 0888 	mov.w	r8, r8, lsl #2
			continue;
 800e092:	462f      	mov	r7, r5
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 800e094:	f04f 090b 	mov.w	r9, #11
 800e098:	2208      	movs	r2, #8
 800e09a:	fa5f f888 	uxtb.w	r8, r8
			continue;
 800e09e:	e729      	b.n	800def4 <scan_files.constprop.0+0x224>
			if (ni == 11) {				/* Name extension overflow? */
 800e0a0:	f1b9 0f0b 	cmp.w	r9, #11
 800e0a4:	f000 8267 	beq.w	800e576 <scan_files.constprop.0+0x8a6>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
 800e0a8:	42bd      	cmp	r5, r7
 800e0aa:	d0f0      	beq.n	800e08e <scan_files.constprop.0+0x3be>
 800e0ac:	f044 0403 	orr.w	r4, r4, #3
			if (si > di) break;						/* No name extension? */
 800e0b0:	f4ff af25 	bcc.w	800defe <scan_files.constprop.0+0x22e>
 800e0b4:	e7eb      	b.n	800e08e <scan_files.constprop.0+0x3be>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 800e0b6:	f044 0402 	orr.w	r4, r4, #2
 800e0ba:	e741      	b.n	800df40 <scan_files.constprop.0+0x270>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 800e0bc:	2b2e      	cmp	r3, #46	; 0x2e
 800e0be:	4659      	mov	r1, fp
 800e0c0:	f04f 0701 	mov.w	r7, #1
 800e0c4:	f47f aede 	bne.w	800de84 <scan_files.constprop.0+0x1b4>
 800e0c8:	e6da      	b.n	800de80 <scan_files.constprop.0+0x1b0>
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 800e0ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e0cc:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800e0d0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e0d4:	4313      	orrs	r3, r2
 800e0d6:	9315      	str	r3, [sp, #84]	; 0x54
				dp->obj.c_scl = dp->obj.sclust;
 800e0d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 800e0da:	4659      	mov	r1, fp
				dp->obj.c_scl = dp->obj.sclust;
 800e0dc:	9314      	str	r3, [sp, #80]	; 0x50
				dp->obj.c_ofs = dp->blk_ofs;
 800e0de:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e0e0:	9316      	str	r3, [sp, #88]	; 0x58
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 800e0e2:	9b01      	ldr	r3, [sp, #4]
 800e0e4:	6918      	ldr	r0, [r3, #16]
 800e0e6:	f7fb fab3 	bl	8009650 <init_alloc_info.isra.0>
 800e0ea:	e78e      	b.n	800e00a <scan_files.constprop.0+0x33a>
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 800e0ec:	ea4f 0888 	mov.w	r8, r8, lsl #2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 800e0f0:	f008 030c 	and.w	r3, r8, #12
 800e0f4:	2b0c      	cmp	r3, #12
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 800e0f6:	fa5f f888 	uxtb.w	r8, r8
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 800e0fa:	d0dc      	beq.n	800e0b6 <scan_files.constprop.0+0x3e6>
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e0fc:	07a1      	lsls	r1, r4, #30
 800e0fe:	f57f af1a 	bpl.w	800df36 <scan_files.constprop.0+0x266>
 800e102:	e71d      	b.n	800df40 <scan_files.constprop.0+0x270>
			cf |= NS_LFN;	/* LFN entry needs to be created */
 800e104:	2300      	movs	r3, #0
 800e106:	20c7      	movs	r0, #199	; 0xc7
 800e108:	f8df c29c 	ldr.w	ip, [pc, #668]	; 800e3a8 <scan_files.constprop.0+0x6d8>
 800e10c:	f044 0402 	orr.w	r4, r4, #2
 800e110:	e005      	b.n	800e11e <scan_files.constprop.0+0x44e>
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
 800e112:	3301      	adds	r3, #1
 800e114:	2b80      	cmp	r3, #128	; 0x80
 800e116:	f43f aee4 	beq.w	800dee2 <scan_files.constprop.0+0x212>
 800e11a:	f83c 0f02 	ldrh.w	r0, [ip, #2]!
 800e11e:	4281      	cmp	r1, r0
 800e120:	d1f7      	bne.n	800e112 <scan_files.constprop.0+0x442>
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
 800e122:	49a2      	ldr	r1, [pc, #648]	; (800e3ac <scan_files.constprop.0+0x6dc>)
 800e124:	5cc9      	ldrb	r1, [r1, r3]
			if (wc == 0 || strchr("+,;=[]", (int)wc)) {	/* Replace illegal characters for SFN */
 800e126:	2900      	cmp	r1, #0
 800e128:	f43f aedb 	beq.w	800dee2 <scan_files.constprop.0+0x212>
 800e12c:	e6cf      	b.n	800dece <scan_files.constprop.0+0x1fe>
	while ((chr = *name++) != 0) {
 800e12e:	68f5      	ldr	r5, [r6, #12]
 800e130:	f835 1b02 	ldrh.w	r1, [r5], #2
 800e134:	2900      	cmp	r1, #0
 800e136:	f000 8254 	beq.w	800e5e2 <scan_files.constprop.0+0x912>
	WORD sum = 0;
 800e13a:	4604      	mov	r4, r0
 800e13c:	4608      	mov	r0, r1
 800e13e:	f7f8 fe27 	bl	8006d90 <ff_wtoupper.part.0>
 800e142:	4603      	mov	r3, r0
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800e144:	b2da      	uxtb	r2, r3
 800e146:	eb02 0254 	add.w	r2, r2, r4, lsr #1
 800e14a:	eb02 32c4 	add.w	r2, r2, r4, lsl #15
 800e14e:	b292      	uxth	r2, r2
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800e150:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800e154:	eb03 0352 	add.w	r3, r3, r2, lsr #1
	while ((chr = *name++) != 0) {
 800e158:	f835 0b02 	ldrh.w	r0, [r5], #2
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800e15c:	eb03 33c2 	add.w	r3, r3, r2, lsl #15
 800e160:	b29c      	uxth	r4, r3
	while ((chr = *name++) != 0) {
 800e162:	2800      	cmp	r0, #0
 800e164:	d1eb      	bne.n	800e13e <scan_files.constprop.0+0x46e>
 800e166:	9402      	str	r4, [sp, #8]
 800e168:	f8cd a014 	str.w	sl, [sp, #20]
		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 800e16c:	4658      	mov	r0, fp
 800e16e:	f7ff fa37 	bl	800d5e0 <dir_read.constprop.0>
 800e172:	2800      	cmp	r0, #0
 800e174:	f47f af63 	bne.w	800e03e <scan_files.constprop.0+0x36e>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800e178:	6937      	ldr	r7, [r6, #16]
 800e17a:	9a02      	ldr	r2, [sp, #8]
 800e17c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e17e:	4293      	cmp	r3, r2
 800e180:	d1f4      	bne.n	800e16c <scan_files.constprop.0+0x49c>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800e182:	f897 8023 	ldrb.w	r8, [r7, #35]	; 0x23
 800e186:	f1b8 0f00 	cmp.w	r8, #0
 800e18a:	f000 8216 	beq.w	800e5ba <scan_files.constprop.0+0x8ea>
 800e18e:	4604      	mov	r4, r0
 800e190:	2540      	movs	r5, #64	; 0x40
				if ((di % SZDIRE) == 0) di += 2;
 800e192:	06eb      	lsls	r3, r5, #27
 800e194:	bf08      	it	eq
 800e196:	3502      	addeq	r5, #2
 800e198:	5b78      	ldrh	r0, [r7, r5]
 800e19a:	f7f8 fdf9 	bl	8006d90 <ff_wtoupper.part.0>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800e19e:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 800e1a2:	4681      	mov	r9, r0
 800e1a4:	f83a 0014 	ldrh.w	r0, [sl, r4, lsl #1]
 800e1a8:	f7f8 fdf2 	bl	8006d90 <ff_wtoupper.part.0>
 800e1ac:	4548      	cmp	r0, r9
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800e1ae:	f105 0502 	add.w	r5, r5, #2
 800e1b2:	f104 0401 	add.w	r4, r4, #1
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800e1b6:	d1d9      	bne.n	800e16c <scan_files.constprop.0+0x49c>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800e1b8:	4544      	cmp	r4, r8
 800e1ba:	d1ea      	bne.n	800e192 <scan_files.constprop.0+0x4c2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800e1bc:	eb0a 0344 	add.w	r3, sl, r4, lsl #1
 800e1c0:	881b      	ldrh	r3, [r3, #0]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d1d2      	bne.n	800e16c <scan_files.constprop.0+0x49c>
			ns = dp->fn[NSFLAG];
 800e1c6:	f8dd a014 	ldr.w	sl, [sp, #20]
 800e1ca:	f89d 407b 	ldrb.w	r4, [sp, #123]	; 0x7b
 800e1ce:	e702      	b.n	800dfd6 <scan_files.constprop.0+0x306>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e1d0:	8b6b      	ldrh	r3, [r5, #26]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	f47f af2d 	bne.w	800e032 <scan_files.constprop.0+0x362>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e1d8:	782b      	ldrb	r3, [r5, #0]
 800e1da:	2201      	movs	r2, #1
 800e1dc:	4619      	mov	r1, r3
 800e1de:	f001 083f 	and.w	r8, r1, #63	; 0x3f
 800e1e2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800e1e6:	eb08 0148 	add.w	r1, r8, r8, lsl #1
 800e1ea:	9307      	str	r3, [sp, #28]
 800e1ec:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 800e1f0:	4b6f      	ldr	r3, [pc, #444]	; (800e3b0 <scan_files.constprop.0+0x6e0>)
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e1f2:	68f1      	ldr	r1, [r6, #12]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e1f4:	9408      	str	r4, [sp, #32]
 800e1f6:	9606      	str	r6, [sp, #24]
 800e1f8:	462c      	mov	r4, r5
 800e1fa:	4610      	mov	r0, r2
 800e1fc:	461d      	mov	r5, r3
 800e1fe:	460e      	mov	r6, r1
 800e200:	4613      	mov	r3, r2
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e202:	9109      	str	r1, [sp, #36]	; 0x24
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e204:	f8cd a008 	str.w	sl, [sp, #8]
 800e208:	f8cd 9014 	str.w	r9, [sp, #20]
 800e20c:	e015      	b.n	800e23a <scan_files.constprop.0+0x56a>
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e20e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800e212:	d81c      	bhi.n	800e24e <scan_files.constprop.0+0x57e>
 800e214:	4648      	mov	r0, r9
 800e216:	f7f8 fdbb 	bl	8006d90 <ff_wtoupper.part.0>
 800e21a:	4684      	mov	ip, r0
 800e21c:	f836 0018 	ldrh.w	r0, [r6, r8, lsl #1]
 800e220:	46e0      	mov	r8, ip
 800e222:	f7f8 fdb5 	bl	8006d90 <ff_wtoupper.part.0>
 800e226:	4540      	cmp	r0, r8
 800e228:	d111      	bne.n	800e24e <scan_files.constprop.0+0x57e>
 800e22a:	4648      	mov	r0, r9
 800e22c:	46d0      	mov	r8, sl
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e22e:	4b61      	ldr	r3, [pc, #388]	; (800e3b4 <scan_files.constprop.0+0x6e4>)
 800e230:	429d      	cmp	r5, r3
 800e232:	f000 81ab 	beq.w	800e58c <scan_files.constprop.0+0x8bc>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e236:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800e23a:	f834 9003 	ldrh.w	r9, [r4, r3]
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e23e:	f108 0a01 	add.w	sl, r8, #1
		if (wc != 0) {
 800e242:	2800      	cmp	r0, #0
 800e244:	d1e3      	bne.n	800e20e <scan_files.constprop.0+0x53e>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e246:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e24a:	4599      	cmp	r9, r3
 800e24c:	d0ef      	beq.n	800e22e <scan_files.constprop.0+0x55e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e24e:	24ff      	movs	r4, #255	; 0xff
 800e250:	e9dd 9605 	ldrd	r9, r6, [sp, #20]
 800e254:	f8dd a008 	ldr.w	sl, [sp, #8]
 800e258:	e692      	b.n	800df80 <scan_files.constprop.0+0x2b0>
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
 800e25a:	2c00      	cmp	r4, #0
 800e25c:	f47f aef6 	bne.w	800e04c <scan_files.constprop.0+0x37c>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e260:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e262:	b185      	cbz	r5, 800e286 <scan_files.constprop.0+0x5b6>
    i = strlen(path);
 800e264:	4854      	ldr	r0, [pc, #336]	; (800e3b8 <scan_files.constprop.0+0x6e8>)
 800e266:	f7f2 fa9f 	bl	80007a8 <strlen>
	fno->fname[0] = 0;			/* Invaidate file info */
 800e26a:	4c54      	ldr	r4, [pc, #336]	; (800e3bc <scan_files.constprop.0+0x6ec>)
 800e26c:	e9cd b001 	strd	fp, r0, [sp, #4]
 800e270:	f8dd b00c 	ldr.w	fp, [sp, #12]
        chprintf(chp, "%s/%s\r\n", path, fn);
 800e274:	f104 091a 	add.w	r9, r4, #26
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e278:	782b      	ldrb	r3, [r5, #0]
 800e27a:	b123      	cbz	r3, 800e286 <scan_files.constprop.0+0x5b6>
 800e27c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800e280:	88eb      	ldrh	r3, [r5, #6]
 800e282:	429a      	cmp	r2, r3
 800e284:	d004      	beq.n	800e290 <scan_files.constprop.0+0x5c0>
	FRESULT res = FR_INVALID_OBJECT;
 800e286:	2509      	movs	r5, #9
}
 800e288:	4628      	mov	r0, r5
 800e28a:	b021      	add	sp, #132	; 0x84
 800e28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (pdrv) {
 800e290:	786d      	ldrb	r5, [r5, #1]
 800e292:	2d00      	cmp	r5, #0
 800e294:	d1f7      	bne.n	800e286 <scan_files.constprop.0+0x5b6>
    if (blkIsWriteProtected(&FATFS_HAL_DEVICE))
 800e296:	4a4a      	ldr	r2, [pc, #296]	; (800e3c0 <scan_files.constprop.0+0x6f0>)
 800e298:	6813      	ldr	r3, [r2, #0]
    if (blkGetDriverState(&FATFS_HAL_DEVICE) != BLK_READY)
 800e29a:	7916      	ldrb	r6, [r2, #4]
    if (blkIsWriteProtected(&FATFS_HAL_DEVICE))
 800e29c:	4610      	mov	r0, r2
 800e29e:	689b      	ldr	r3, [r3, #8]
 800e2a0:	4798      	blx	r3
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e2a2:	2e05      	cmp	r6, #5
 800e2a4:	d1ef      	bne.n	800e286 <scan_files.constprop.0+0x5b6>
 800e2a6:	4628      	mov	r0, r5
 800e2a8:	2208      	movs	r2, #8
 800e2aa:	f44f 618c 	mov.w	r1, #1120	; 0x460
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e2ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e2b0:	f7f7 faa6 	bl	8005800 <chHeapAllocAligned>
			INIT_NAMBUF(fs);
 800e2b4:	4606      	mov	r6, r0
 800e2b6:	2800      	cmp	r0, #0
 800e2b8:	f43f ad61 	beq.w	800dd7e <scan_files.constprop.0+0xae>
 800e2bc:	f500 7300 	add.w	r3, r0, #512	; 0x200
 800e2c0:	60e8      	str	r0, [r5, #12]
 800e2c2:	612b      	str	r3, [r5, #16]
			res = DIR_READ_FILE(dp);		/* Read an item */
 800e2c4:	9801      	ldr	r0, [sp, #4]
 800e2c6:	f7ff f98b 	bl	800d5e0 <dir_read.constprop.0>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
			if (res == FR_OK) {				/* A valid entry is found */
 800e2ca:	f010 0cfb 	ands.w	ip, r0, #251	; 0xfb
			res = DIR_READ_FILE(dp);		/* Read an item */
 800e2ce:	4605      	mov	r5, r0
			if (res == FR_OK) {				/* A valid entry is found */
 800e2d0:	d003      	beq.n	800e2da <scan_files.constprop.0+0x60a>
 800e2d2:	4630      	mov	r0, r6
 800e2d4:	f7f7 fb34 	bl	8005940 <chHeapFree>
 800e2d8:	e507      	b.n	800dcea <scan_files.constprop.0+0x1a>
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 800e2da:	9b1a      	ldr	r3, [sp, #104]	; 0x68
	FATFS *fs = dp->obj.fs;
 800e2dc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	fno->fname[0] = 0;			/* Invaidate file info */
 800e2e0:	f884 c01a 	strb.w	ip, [r4, #26]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	f000 8084 	beq.w	800e3f2 <scan_files.constprop.0+0x722>
	if (fs->fs_type == FS_EXFAT) {	/* exFAT volume */
 800e2ea:	f898 3000 	ldrb.w	r3, [r8]
 800e2ee:	2b04      	cmp	r3, #4
 800e2f0:	f000 80da 	beq.w	800e4a8 <scan_files.constprop.0+0x7d8>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800e2f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e2f6:	3301      	adds	r3, #1
 800e2f8:	d035      	beq.n	800e366 <scan_files.constprop.0+0x696>
			while (fs->lfnbuf[si] != 0) {
 800e2fa:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 800e2fe:	f8be 3000 	ldrh.w	r3, [lr]
 800e302:	b353      	cbz	r3, 800e35a <scan_files.constprop.0+0x68a>
			si = di = 0;
 800e304:	2500      	movs	r5, #0
			while (fs->lfnbuf[si] != 0) {
 800e306:	f04f 0a02 	mov.w	sl, #2
			hs = 0;
 800e30a:	462f      	mov	r7, r5
 800e30c:	e00d      	b.n	800e32a <scan_files.constprop.0+0x65a>
				nw = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
 800e30e:	f7f8 fb7f 	bl	8006a10 <put_utf.lto_priv.0>
				if (nw == 0) { di = 0; break; }	/* Buffer overflow or wrong char? */
 800e312:	2800      	cmp	r0, #0
 800e314:	f000 80c6 	beq.w	800e4a4 <scan_files.constprop.0+0x7d4>
 800e318:	f8d8 e00c 	ldr.w	lr, [r8, #12]
				hs = 0;
 800e31c:	2700      	movs	r7, #0
			while (fs->lfnbuf[si] != 0) {
 800e31e:	f83e 300a 	ldrh.w	r3, [lr, sl]
				di += nw;
 800e322:	4405      	add	r5, r0
			while (fs->lfnbuf[si] != 0) {
 800e324:	f10a 0a02 	add.w	sl, sl, #2
 800e328:	b1b3      	cbz	r3, 800e358 <scan_files.constprop.0+0x688>
				nw = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
 800e32a:	f105 011a 	add.w	r1, r5, #26
				if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 800e32e:	f503 5c20 	add.w	ip, r3, #10240	; 0x2800
				nw = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
 800e332:	f1c5 02ff 	rsb	r2, r5, #255	; 0xff
 800e336:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
 800e33a:	4421      	add	r1, r4
				if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 800e33c:	fa1f fc8c 	uxth.w	ip, ip
 800e340:	2f00      	cmp	r7, #0
 800e342:	d1e4      	bne.n	800e30e <scan_files.constprop.0+0x63e>
 800e344:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
 800e348:	d2e1      	bcs.n	800e30e <scan_files.constprop.0+0x63e>
 800e34a:	461f      	mov	r7, r3
			while (fs->lfnbuf[si] != 0) {
 800e34c:	f83e 300a 	ldrh.w	r3, [lr, sl]
 800e350:	f10a 0a02 	add.w	sl, sl, #2
 800e354:	2b00      	cmp	r3, #0
 800e356:	d1e8      	bne.n	800e32a <scan_files.constprop.0+0x65a>
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
 800e358:	b107      	cbz	r7, 800e35c <scan_files.constprop.0+0x68c>
			si = di = 0;
 800e35a:	2500      	movs	r5, #0
			fno->fname[di] = 0;		/* Terminate the LFN (null string means LFN is invalid) */
 800e35c:	2300      	movs	r3, #0
 800e35e:	4425      	add	r5, r4
 800e360:	76ab      	strb	r3, [r5, #26]
	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
 800e362:	f894 c01a 	ldrb.w	ip, [r4, #26]
		wc = dp->dir[si++];			/* Get a char */
 800e366:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800e368:	2000      	movs	r0, #0
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
 800e36a:	f04f 082e 	mov.w	r8, #46	; 0x2e
 800e36e:	1e6a      	subs	r2, r5, #1
 800e370:	f105 0e0a 	add.w	lr, r5, #10
 800e374:	e004      	b.n	800e380 <scan_files.constprop.0+0x6b0>
		fno->altname[di++] = (TCHAR)wc;	/* Store it without any conversion */
 800e376:	1821      	adds	r1, r4, r0
 800e378:	734b      	strb	r3, [r1, #13]
 800e37a:	3001      	adds	r0, #1
	while (si < 11) {		/* Get SFN from SFN entry */
 800e37c:	4572      	cmp	r2, lr
 800e37e:	d06a      	beq.n	800e456 <scan_files.constprop.0+0x786>
 800e380:	4611      	mov	r1, r2
		wc = dp->dir[si++];			/* Get a char */
 800e382:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		if (wc == ' ') continue;	/* Skip padding spaces */
 800e386:	2b20      	cmp	r3, #32
		wc = dp->dir[si++];			/* Get a char */
 800e388:	b29f      	uxth	r7, r3
		if (wc == ' ') continue;	/* Skip padding spaces */
 800e38a:	d0f7      	beq.n	800e37c <scan_files.constprop.0+0x6ac>
		if (wc == RDDEM) wc = DDEM;	/* Restore replaced DDEM character */
 800e38c:	2f05      	cmp	r7, #5
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
 800e38e:	f1a1 0107 	sub.w	r1, r1, #7
		if (wc == RDDEM) wc = DDEM;	/* Restore replaced DDEM character */
 800e392:	bf08      	it	eq
 800e394:	23e5      	moveq	r3, #229	; 0xe5
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
 800e396:	42a9      	cmp	r1, r5
 800e398:	d1ed      	bne.n	800e376 <scan_files.constprop.0+0x6a6>
 800e39a:	280b      	cmp	r0, #11
 800e39c:	d8eb      	bhi.n	800e376 <scan_files.constprop.0+0x6a6>
 800e39e:	1821      	adds	r1, r4, r0
 800e3a0:	f881 800d 	strb.w	r8, [r1, #13]
 800e3a4:	3001      	adds	r0, #1
 800e3a6:	e7e6      	b.n	800e376 <scan_files.constprop.0+0x6a6>
 800e3a8:	08012668 	.word	0x08012668
 800e3ac:	0801321c 	.word	0x0801321c
 800e3b0:	0801329c 	.word	0x0801329c
 800e3b4:	080132a8 	.word	0x080132a8
 800e3b8:	20001ee0 	.word	0x20001ee0
 800e3bc:	200022e0 	.word	0x200022e0
 800e3c0:	200008e8 	.word	0x200008e8
			fno->fname[di++] = '?';
 800e3c4:	233f      	movs	r3, #63	; 0x3f
 800e3c6:	f04f 0c01 	mov.w	ip, #1
 800e3ca:	76a3      	strb	r3, [r4, #26]
		fno->fname[di] = 0;	/* Terminate the LFN */
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	44a4      	add	ip, r4
 800e3d0:	f88c 301a 	strb.w	r3, [ip, #26]
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
 800e3d4:	7b2b      	ldrb	r3, [r5, #12]
 800e3d6:	b903      	cbnz	r3, 800e3da <scan_files.constprop.0+0x70a>
 800e3d8:	7363      	strb	r3, [r4, #13]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 800e3da:	2200      	movs	r2, #0
	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;			/* Attribute */
 800e3dc:	7aeb      	ldrb	r3, [r5, #11]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 800e3de:	6062      	str	r2, [r4, #4]
	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;			/* Attribute */
 800e3e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e3e4:	7323      	strb	r3, [r4, #12]
	rv = rv << 8 | ptr[0];
 800e3e6:	69eb      	ldr	r3, [r5, #28]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 800e3e8:	6023      	str	r3, [r4, #0]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 800e3ea:	8aeb      	ldrh	r3, [r5, #22]
 800e3ec:	8163      	strh	r3, [r4, #10]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 800e3ee:	8b2b      	ldrh	r3, [r5, #24]
 800e3f0:	8123      	strh	r3, [r4, #8]
				get_fileinfo(dp, fno);		/* Get the object information */
				res = dir_next(dp, 0);		/* Increment index for next */
 800e3f2:	9801      	ldr	r0, [sp, #4]
 800e3f4:	f7ff f834 	bl	800d460 <dir_next.constprop.0>
 800e3f8:	4605      	mov	r5, r0
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800e3fa:	2d04      	cmp	r5, #4
 800e3fc:	4630      	mov	r0, r6
 800e3fe:	d04e      	beq.n	800e49e <scan_files.constprop.0+0x7ce>
 800e400:	f7f7 fa9e 	bl	8005940 <chHeapFree>
    while (((res = f_readdir(&dir, &fno)) == FR_OK) && fno.fname[0]) {
 800e404:	2d00      	cmp	r5, #0
 800e406:	f47f ac70 	bne.w	800dcea <scan_files.constprop.0+0x1a>
 800e40a:	7ea5      	ldrb	r5, [r4, #26]
 800e40c:	2d00      	cmp	r5, #0
 800e40e:	f43f ac6c 	beq.w	800dcea <scan_files.constprop.0+0x1a>
      if (fno.fattrib & AM_DIR) {
 800e412:	7b23      	ldrb	r3, [r4, #12]
 800e414:	06dd      	lsls	r5, r3, #27
 800e416:	d517      	bpl.n	800e448 <scan_files.constprop.0+0x778>
        *(path + i) = '/';
 800e418:	232f      	movs	r3, #47	; 0x2f
 800e41a:	9d02      	ldr	r5, [sp, #8]
 800e41c:	4a77      	ldr	r2, [pc, #476]	; (800e5fc <scan_files.constprop.0+0x92c>)
        strcpy(path + i + 1, fn);
 800e41e:	1c68      	adds	r0, r5, #1
        *(path + i) = '/';
 800e420:	5553      	strb	r3, [r2, r5]
        strcpy(path + i + 1, fn);
 800e422:	4649      	mov	r1, r9
 800e424:	4410      	add	r0, r2
 800e426:	4616      	mov	r6, r2
 800e428:	f7f2 f960 	bl	80006ec <strcpy>
        res = scan_files(chp, path);
 800e42c:	4658      	mov	r0, fp
 800e42e:	f7ff fc4f 	bl	800dcd0 <scan_files.constprop.0>
        *(path + i) = '\0';
 800e432:	2300      	movs	r3, #0
 800e434:	5573      	strb	r3, [r6, r5]
        if (res != FR_OK)
 800e436:	4605      	mov	r5, r0
 800e438:	2800      	cmp	r0, #0
 800e43a:	f47f ac56 	bne.w	800dcea <scan_files.constprop.0+0x1a>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e43e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e440:	2d00      	cmp	r5, #0
 800e442:	f47f af19 	bne.w	800e278 <scan_files.constprop.0+0x5a8>
 800e446:	e71e      	b.n	800e286 <scan_files.constprop.0+0x5b6>
        chprintf(chp, "%s/%s\r\n", path, fn);
 800e448:	464b      	mov	r3, r9
 800e44a:	4658      	mov	r0, fp
 800e44c:	4a6b      	ldr	r2, [pc, #428]	; (800e5fc <scan_files.constprop.0+0x92c>)
 800e44e:	496c      	ldr	r1, [pc, #432]	; (800e600 <scan_files.constprop.0+0x930>)
 800e450:	f7f7 fdce 	bl	8005ff0 <chprintf>
 800e454:	e7f3      	b.n	800e43e <scan_files.constprop.0+0x76e>
	fno->altname[di] = 0;	/* Terminate the SFN  (null string means SFN is invalid) */
 800e456:	2200      	movs	r2, #0
 800e458:	1823      	adds	r3, r4, r0
 800e45a:	735a      	strb	r2, [r3, #13]
	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
 800e45c:	f1bc 0f00 	cmp.w	ip, #0
 800e460:	d1bb      	bne.n	800e3da <scan_files.constprop.0+0x70a>
		if (di == 0) {	/* If LFN and SFN both are invalid, this object is inaccesible */
 800e462:	2800      	cmp	r0, #0
 800e464:	d0ae      	beq.n	800e3c4 <scan_files.constprop.0+0x6f4>
			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
 800e466:	7b63      	ldrb	r3, [r4, #13]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d0af      	beq.n	800e3cc <scan_files.constprop.0+0x6fc>
 800e46c:	2008      	movs	r0, #8
 800e46e:	4965      	ldr	r1, [pc, #404]	; (800e604 <scan_files.constprop.0+0x934>)
 800e470:	e00e      	b.n	800e490 <scan_files.constprop.0+0x7c0>
				if (IsUpper(wc) && (dp->dir[DIR_NTres] & lcf)) wc += 0x20;
 800e472:	2a19      	cmp	r2, #25
 800e474:	d805      	bhi.n	800e482 <scan_files.constprop.0+0x7b2>
 800e476:	7b2a      	ldrb	r2, [r5, #12]
				fno->fname[di] = (TCHAR)wc;
 800e478:	f103 0720 	add.w	r7, r3, #32
				if (IsUpper(wc) && (dp->dir[DIR_NTres] & lcf)) wc += 0x20;
 800e47c:	4210      	tst	r0, r2
 800e47e:	d000      	beq.n	800e482 <scan_files.constprop.0+0x7b2>
				fno->fname[di] = (TCHAR)wc;
 800e480:	b2fb      	uxtb	r3, r7
 800e482:	734b      	strb	r3, [r1, #13]
			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
 800e484:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e488:	f10c 0c01 	add.w	ip, ip, #1
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d09d      	beq.n	800e3cc <scan_files.constprop.0+0x6fc>
				wc = (WCHAR)fno->altname[si];
 800e490:	b29a      	uxth	r2, r3
				if (wc == '.') lcf = NS_EXT;
 800e492:	2b2e      	cmp	r3, #46	; 0x2e
				if (IsUpper(wc) && (dp->dir[DIR_NTres] & lcf)) wc += 0x20;
 800e494:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
				if (wc == '.') lcf = NS_EXT;
 800e498:	d1eb      	bne.n	800e472 <scan_files.constprop.0+0x7a2>
 800e49a:	2010      	movs	r0, #16
 800e49c:	e7f1      	b.n	800e482 <scan_files.constprop.0+0x7b2>
 800e49e:	f7f7 fa4f 	bl	8005940 <chHeapFree>
 800e4a2:	e7b2      	b.n	800e40a <scan_files.constprop.0+0x73a>
				if (nw == 0) { di = 0; break; }	/* Buffer overflow or wrong char? */
 800e4a4:	4605      	mov	r5, r0
 800e4a6:	e757      	b.n	800e358 <scan_files.constprop.0+0x688>
		while (nc < fs->dirbuf[XDIR_NumName]) {
 800e4a8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e4ac:	f893 1023 	ldrb.w	r1, [r3, #35]	; 0x23
 800e4b0:	461a      	mov	r2, r3
 800e4b2:	b371      	cbz	r1, 800e512 <scan_files.constprop.0+0x842>
		si = SZDIRE * 2; di = 0;	/* 1st C1 entry in the entry block */
 800e4b4:	4665      	mov	r5, ip
 800e4b6:	2740      	movs	r7, #64	; 0x40
		hs = 0;
 800e4b8:	4661      	mov	r1, ip
		UINT nc = 0;
 800e4ba:	46e2      	mov	sl, ip
 800e4bc:	e013      	b.n	800e4e6 <scan_files.constprop.0+0x816>
			nw = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
 800e4be:	f105 011a 	add.w	r1, r5, #26
 800e4c2:	4421      	add	r1, r4
 800e4c4:	f1c5 02ff 	rsb	r2, r5, #255	; 0xff
 800e4c8:	f7f8 faa2 	bl	8006a10 <put_utf.lto_priv.0>
			if (nw == 0) { di = 0; break; }			/* Buffer overflow or wrong char? */
 800e4cc:	b1f8      	cbz	r0, 800e50e <scan_files.constprop.0+0x83e>
			hs = 0;
 800e4ce:	2100      	movs	r1, #0
 800e4d0:	f8d8 3010 	ldr.w	r3, [r8, #16]
			di += nw;
 800e4d4:	4405      	add	r5, r0
		while (nc < fs->dirbuf[XDIR_NumName]) {
 800e4d6:	f893 0023 	ldrb.w	r0, [r3, #35]	; 0x23
 800e4da:	461a      	mov	r2, r3
 800e4dc:	4582      	cmp	sl, r0
 800e4de:	d267      	bcs.n	800e5b0 <scan_files.constprop.0+0x8e0>
			if (si >= MAXDIRB(FF_MAX_LFN)) { di = 0; break; }	/* Truncated directory block? */
 800e4e0:	f5b7 7f18 	cmp.w	r7, #608	; 0x260
 800e4e4:	d215      	bcs.n	800e512 <scan_files.constprop.0+0x842>
			if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800e4e6:	06f8      	lsls	r0, r7, #27
 800e4e8:	bf08      	it	eq
 800e4ea:	3702      	addeq	r7, #2
 800e4ec:	f833 c007 	ldrh.w	ip, [r3, r7]
			wc = ld_word(fs->dirbuf + si); si += 2; nc++;	/* Get a character */
 800e4f0:	f10a 0a01 	add.w	sl, sl, #1
			if (hs == 0 && IsSurrogate(wc)) {		/* Is it a surrogate? */
 800e4f4:	f50c 5220 	add.w	r2, ip, #10240	; 0x2800
			nw = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
 800e4f8:	ea4c 4001 	orr.w	r0, ip, r1, lsl #16
			if (hs == 0 && IsSurrogate(wc)) {		/* Is it a surrogate? */
 800e4fc:	b292      	uxth	r2, r2
			wc = ld_word(fs->dirbuf + si); si += 2; nc++;	/* Get a character */
 800e4fe:	3702      	adds	r7, #2
			if (hs == 0 && IsSurrogate(wc)) {		/* Is it a surrogate? */
 800e500:	2900      	cmp	r1, #0
 800e502:	d1dc      	bne.n	800e4be <scan_files.constprop.0+0x7ee>
 800e504:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800e508:	d2d9      	bcs.n	800e4be <scan_files.constprop.0+0x7ee>
 800e50a:	4661      	mov	r1, ip
 800e50c:	e7e3      	b.n	800e4d6 <scan_files.constprop.0+0x806>
		fno->fattrib = fs->dirbuf[XDIR_Attr] & AM_MASKX;		/* Attribute */
 800e50e:	f8d8 2010 	ldr.w	r2, [r8, #16]
		if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800e512:	233f      	movs	r3, #63	; 0x3f
 800e514:	2501      	movs	r5, #1
 800e516:	76a3      	strb	r3, [r4, #26]
		fno->fname[di] = 0;						/* Terminate the name */
 800e518:	2300      	movs	r3, #0
 800e51a:	4425      	add	r5, r4
 800e51c:	76ab      	strb	r3, [r5, #26]
		fno->altname[0] = 0;					/* exFAT does not support SFN */
 800e51e:	7363      	strb	r3, [r4, #13]
		fno->fattrib = fs->dirbuf[XDIR_Attr] & AM_MASKX;		/* Attribute */
 800e520:	7911      	ldrb	r1, [r2, #4]
 800e522:	f001 0037 	and.w	r0, r1, #55	; 0x37
		fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 800e526:	06c9      	lsls	r1, r1, #27
 800e528:	bf4e      	itee	mi
 800e52a:	4619      	movmi	r1, r3
	rv = rv << 8 | ptr[0];
 800e52c:	6b93      	ldrpl	r3, [r2, #56]	; 0x38
 800e52e:	6bd1      	ldrpl	r1, [r2, #60]	; 0x3c
		fno->fattrib = fs->dirbuf[XDIR_Attr] & AM_MASKX;		/* Attribute */
 800e530:	7320      	strb	r0, [r4, #12]
		fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 800e532:	e9c4 3100 	strd	r3, r1, [r4]
		fno->ftime = ld_word(fs->dirbuf + XDIR_ModTime + 0);	/* Time */
 800e536:	8993      	ldrh	r3, [r2, #12]
 800e538:	8163      	strh	r3, [r4, #10]
		fno->fdate = ld_word(fs->dirbuf + XDIR_ModTime + 2);	/* Date */
 800e53a:	89d3      	ldrh	r3, [r2, #14]
 800e53c:	8123      	strh	r3, [r4, #8]
		return;
 800e53e:	e758      	b.n	800e3f2 <scan_files.constprop.0+0x722>
				res = FR_NO_PATH; break;
 800e540:	2505      	movs	r5, #5
 800e542:	e485      	b.n	800de50 <scan_files.constprop.0+0x180>
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
 800e544:	6918      	ldr	r0, [r3, #16]
						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 800e546:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e548:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800e54c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e550:	4313      	orrs	r3, r2
 800e552:	9315      	str	r3, [sp, #84]	; 0x54
						dp->obj.c_scl = dp->obj.sclust;							/* Get containing directory inforamation */
 800e554:	9b0e      	ldr	r3, [sp, #56]	; 0x38
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
 800e556:	4659      	mov	r1, fp
						dp->obj.c_scl = dp->obj.sclust;							/* Get containing directory inforamation */
 800e558:	9314      	str	r3, [sp, #80]	; 0x50
						dp->obj.c_ofs = dp->blk_ofs;
 800e55a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e55c:	9316      	str	r3, [sp, #88]	; 0x58
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
 800e55e:	f7fb f877 	bl	8009650 <init_alloc_info.isra.0>
				dp->obj.id = fs->id;
 800e562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e564:	e432      	b.n	800ddcc <scan_files.constprop.0+0xfc>
				if (IsUpper(wc)) {		/* ASCII upper case? */
 800e566:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 800e56a:	2b19      	cmp	r3, #25
 800e56c:	d827      	bhi.n	800e5be <scan_files.constprop.0+0x8ee>
					b |= 2;
 800e56e:	f048 0802 	orr.w	r8, r8, #2
		dp->fn[i++] = (BYTE)wc;
 800e572:	b2c9      	uxtb	r1, r1
 800e574:	e4b8      	b.n	800dee8 <scan_files.constprop.0+0x218>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e576:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
				cf |= NS_LOSS | NS_LFN;
 800e57a:	f044 0403 	orr.w	r4, r4, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e57e:	2be5      	cmp	r3, #229	; 0xe5
 800e580:	f47f acc8 	bne.w	800df14 <scan_files.constprop.0+0x244>
 800e584:	2305      	movs	r3, #5
 800e586:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800e58a:	e4c3      	b.n	800df14 <scan_files.constprop.0+0x244>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e58c:	9b07      	ldr	r3, [sp, #28]
 800e58e:	f8dd a008 	ldr.w	sl, [sp, #8]
 800e592:	065d      	lsls	r5, r3, #25
 800e594:	9c08      	ldr	r4, [sp, #32]
 800e596:	e9dd 9605 	ldrd	r9, r6, [sp, #20]
 800e59a:	d506      	bpl.n	800e5aa <scan_files.constprop.0+0x8da>
 800e59c:	b128      	cbz	r0, 800e5aa <scan_files.constprop.0+0x8da>
 800e59e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5a0:	f833 3018 	ldrh.w	r3, [r3, r8, lsl #1]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	f47f ad44 	bne.w	800e032 <scan_files.constprop.0+0x362>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e5aa:	3c01      	subs	r4, #1
 800e5ac:	b2e4      	uxtb	r4, r4
 800e5ae:	e4e7      	b.n	800df80 <scan_files.constprop.0+0x2b0>
		if (hs != 0) di = 0;					/* Broken surrogate pair? */
 800e5b0:	2900      	cmp	r1, #0
 800e5b2:	d1ae      	bne.n	800e512 <scan_files.constprop.0+0x842>
		if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800e5b4:	2d00      	cmp	r5, #0
 800e5b6:	d1af      	bne.n	800e518 <scan_files.constprop.0+0x848>
 800e5b8:	e7ab      	b.n	800e512 <scan_files.constprop.0+0x842>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800e5ba:	68f3      	ldr	r3, [r6, #12]
 800e5bc:	e600      	b.n	800e1c0 <scan_files.constprop.0+0x4f0>
				if (IsLower(wc)) {		/* ASCII lower case? */
 800e5be:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 800e5c2:	2b19      	cmp	r3, #25
					b |= 1; wc -= 0x20;
 800e5c4:	bf9c      	itt	ls
 800e5c6:	3920      	subls	r1, #32
 800e5c8:	f048 0801 	orrls.w	r8, r8, #1
		dp->fn[i++] = (BYTE)wc;
 800e5cc:	b2c9      	uxtb	r1, r1
 800e5ce:	e48b      	b.n	800dee8 <scan_files.constprop.0+0x218>
			ns = dp->fn[NSFLAG];
 800e5d0:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e5d4:	075a      	lsls	r2, r3, #29
 800e5d6:	f57f ac09 	bpl.w	800ddec <scan_files.constprop.0+0x11c>
 800e5da:	9804      	ldr	r0, [sp, #16]
 800e5dc:	f7f7 f9b0 	bl	8005940 <chHeapFree>
 800e5e0:	e402      	b.n	800dde8 <scan_files.constprop.0+0x118>
	WORD sum = 0;
 800e5e2:	9102      	str	r1, [sp, #8]
 800e5e4:	f8cd a014 	str.w	sl, [sp, #20]
 800e5e8:	e5c0      	b.n	800e16c <scan_files.constprop.0+0x49c>
 800e5ea:	9804      	ldr	r0, [sp, #16]
 800e5ec:	f7f7 f9a8 	bl	8005940 <chHeapFree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800e5f0:	2d04      	cmp	r5, #4
 800e5f2:	f43f abf9 	beq.w	800dde8 <scan_files.constprop.0+0x118>
 800e5f6:	f7ff bb78 	b.w	800dcea <scan_files.constprop.0+0x1a>
 800e5fa:	bf00      	nop
 800e5fc:	20001ee0 	.word	0x20001ee0
 800e600:	08012f54 	.word	0x08012f54
 800e604:	200022ed 	.word	0x200022ed
	...

0800e610 <cmd_tree>:
  if (argc > 0) {
 800e610:	2900      	cmp	r1, #0
 800e612:	dc79      	bgt.n	800e708 <cmd_tree+0xf8>
  if (!fs_ready) {
 800e614:	4b56      	ldr	r3, [pc, #344]	; (800e770 <cmd_tree+0x160>)
 800e616:	781b      	ldrb	r3, [r3, #0]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d056      	beq.n	800e6ca <cmd_tree+0xba>
static void cmd_tree(BaseSequentialStream *chp, int argc, char *argv[]) {
 800e61c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e620:	4b54      	ldr	r3, [pc, #336]	; (800e774 <cmd_tree+0x164>)
 800e622:	b091      	sub	sp, #68	; 0x44
 800e624:	4606      	mov	r6, r0
	UINT i;
	FFOBJID obj;


	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
 800e626:	a902      	add	r1, sp, #8
 800e628:	a803      	add	r0, sp, #12
 800e62a:	9303      	str	r3, [sp, #12]
 800e62c:	f7ff f940 	bl	800d8b0 <mount_volume.constprop.0>
	if (res == FR_OK) {
 800e630:	2800      	cmp	r0, #0
 800e632:	d162      	bne.n	800e6fa <cmd_tree+0xea>
		*fatfs = fs;				/* Return ptr to the fs object */
 800e634:	f8dd 8008 	ldr.w	r8, [sp, #8]
		/* If free_clst is valid, return it without full FAT scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800e638:	e9d8 7506 	ldrd	r7, r5, [r8, #24]
 800e63c:	1eac      	subs	r4, r5, #2
 800e63e:	42a7      	cmp	r7, r4
 800e640:	d92a      	bls.n	800e698 <cmd_tree+0x88>
			*nclst = fs->free_clst;
		} else {
			/* Scan FAT to obtain number of free clusters */
			nfree = 0;
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
 800e642:	f898 3000 	ldrb.w	r3, [r8]
 800e646:	2b01      	cmp	r3, #1
 800e648:	d042      	beq.n	800e6d0 <cmd_tree+0xc0>
					if (stat == 1) { res = FR_INT_ERR; break; }
					if (stat == 0) nfree++;
				} while (++clst < fs->n_fatent);
			} else {
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan allocation bitmap */
 800e64a:	2b04      	cmp	r3, #4
 800e64c:	d066      	beq.n	800e71c <cmd_tree+0x10c>
				} else
#endif
				{	/* FAT16/32: Scan WORD/DWORD FAT entries */
					clst = fs->n_fatent;	/* Number of entries */
					sect = fs->fatbase;		/* Top of the FAT */
					i = 0;					/* Offset in the sector */
 800e64e:	4604      	mov	r4, r0
					sect = fs->fatbase;		/* Top of the FAT */
 800e650:	4640      	mov	r0, r8
			nfree = 0;
 800e652:	4627      	mov	r7, r4
					sect = fs->fatbase;		/* Top of the FAT */
 800e654:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
					do {	/* Counts numbuer of entries with zero in the FAT */
						if (i == 0) {
 800e658:	b954      	cbnz	r4, 800e670 <cmd_tree+0x60>
	if (sect != fs->winsect) {	/* Window offset changed? */
 800e65a:	6b83      	ldr	r3, [r0, #56]	; 0x38
							res = move_window(fs, sect++);
 800e65c:	f101 0901 	add.w	r9, r1, #1
	if (sect != fs->winsect) {	/* Window offset changed? */
 800e660:	4299      	cmp	r1, r3
 800e662:	d059      	beq.n	800e718 <cmd_tree+0x108>
 800e664:	f7f8 fa24 	bl	8006ab0 <move_window.part.0.lto_priv.0>
							if (res != FR_OK) break;
 800e668:	2800      	cmp	r0, #0
 800e66a:	d146      	bne.n	800e6fa <cmd_tree+0xea>
							res = move_window(fs, sect++);
 800e66c:	4649      	mov	r1, r9
						}
						if (fs->fs_type == FS_FAT16) {
 800e66e:	9802      	ldr	r0, [sp, #8]
 800e670:	7803      	ldrb	r3, [r0, #0]
 800e672:	2b02      	cmp	r3, #2
							if (ld_word(fs->win + i) == 0) nfree++;
 800e674:	eb00 0304 	add.w	r3, r0, r4
						if (fs->fs_type == FS_FAT16) {
 800e678:	d049      	beq.n	800e70e <cmd_tree+0xfe>
	rv = rv << 8 | ptr[0];
 800e67a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
							i += 2;
						} else {
							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
							i += 4;
 800e67c:	3404      	adds	r4, #4
							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
 800e67e:	f033 4370 	bics.w	r3, r3, #4026531840	; 0xf0000000
 800e682:	bf08      	it	eq
 800e684:	3701      	addeq	r7, #1
						}
						i %= SS(fs);
					} while (--clst);
 800e686:	3d01      	subs	r5, #1
						i %= SS(fs);
 800e688:	f3c4 0408 	ubfx	r4, r4, #0, #9
					} while (--clst);
 800e68c:	d1e4      	bne.n	800e658 <cmd_tree+0x48>
				}
			}
			if (res == FR_OK) {		/* Update parameters if succeeded */
				*nclst = nfree;			/* Return the free clusters */
				fs->free_clst = nfree;	/* Now free_clst is valid */
				fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 800e68e:	7903      	ldrb	r3, [r0, #4]
				fs->free_clst = nfree;	/* Now free_clst is valid */
 800e690:	6187      	str	r7, [r0, #24]
				fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 800e692:	f043 0301 	orr.w	r3, r3, #1
 800e696:	7103      	strb	r3, [r0, #4]
  chprintf(chp,
 800e698:	2400      	movs	r4, #0
  chprintf(chp,
 800e69a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800e69e:	463a      	mov	r2, r7
 800e6a0:	0258      	lsls	r0, r3, #9
 800e6a2:	9000      	str	r0, [sp, #0]
 800e6a4:	4934      	ldr	r1, [pc, #208]	; (800e778 <cmd_tree+0x168>)
 800e6a6:	4630      	mov	r0, r6
 800e6a8:	f7f7 fca2 	bl	8005ff0 <chprintf>
  chprintf(chp,
 800e6ac:	4623      	mov	r3, r4
 800e6ae:	4622      	mov	r2, r4
 800e6b0:	4932      	ldr	r1, [pc, #200]	; (800e77c <cmd_tree+0x16c>)
 800e6b2:	4630      	mov	r0, r6
 800e6b4:	9400      	str	r4, [sp, #0]
 800e6b6:	f7f7 fc9b 	bl	8005ff0 <chprintf>
  fbuff[0] = 0;
 800e6ba:	4b31      	ldr	r3, [pc, #196]	; (800e780 <cmd_tree+0x170>)
  scan_files(chp, (char *)fbuff);
 800e6bc:	4630      	mov	r0, r6
  fbuff[0] = 0;
 800e6be:	701c      	strb	r4, [r3, #0]
  scan_files(chp, (char *)fbuff);
 800e6c0:	f7ff fb06 	bl	800dcd0 <scan_files.constprop.0>
}
 800e6c4:	b011      	add	sp, #68	; 0x44
 800e6c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    chprintf(chp, "File System not mounted\r\n");
 800e6ca:	492e      	ldr	r1, [pc, #184]	; (800e784 <cmd_tree+0x174>)
 800e6cc:	f7f7 bc90 	b.w	8005ff0 <chprintf>
				clst = 2; obj.fs = fs;
 800e6d0:	2402      	movs	r4, #2
			nfree = 0;
 800e6d2:	4607      	mov	r7, r0
				clst = 2; obj.fs = fs;
 800e6d4:	f8cd 8010 	str.w	r8, [sp, #16]
 800e6d8:	e007      	b.n	800e6ea <cmd_tree+0xda>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800e6da:	2801      	cmp	r0, #1
 800e6dc:	d00d      	beq.n	800e6fa <cmd_tree+0xea>
					if (stat == 0) nfree++;
 800e6de:	b900      	cbnz	r0, 800e6e2 <cmd_tree+0xd2>
 800e6e0:	3701      	adds	r7, #1
				} while (++clst < fs->n_fatent);
 800e6e2:	9802      	ldr	r0, [sp, #8]
 800e6e4:	69c3      	ldr	r3, [r0, #28]
 800e6e6:	429c      	cmp	r4, r3
 800e6e8:	d2d1      	bcs.n	800e68e <cmd_tree+0x7e>
					stat = get_fat(&obj, clst);
 800e6ea:	4621      	mov	r1, r4
 800e6ec:	a804      	add	r0, sp, #16
 800e6ee:	f7f8 fa2f 	bl	8006b50 <get_fat.lto_priv.0>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800e6f2:	1c43      	adds	r3, r0, #1
				} while (++clst < fs->n_fatent);
 800e6f4:	f104 0401 	add.w	r4, r4, #1
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800e6f8:	d1ef      	bne.n	800e6da <cmd_tree+0xca>
    chprintf(chp, "FS: f_getfree() failed\r\n");
 800e6fa:	4630      	mov	r0, r6
 800e6fc:	4922      	ldr	r1, [pc, #136]	; (800e788 <cmd_tree+0x178>)
 800e6fe:	f7f7 fc77 	bl	8005ff0 <chprintf>
}
 800e702:	b011      	add	sp, #68	; 0x44
 800e704:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    chprintf(chp, "Usage: tree\r\n");
 800e708:	4920      	ldr	r1, [pc, #128]	; (800e78c <cmd_tree+0x17c>)
 800e70a:	f7f7 bc71 	b.w	8005ff0 <chprintf>
							if (ld_word(fs->win + i) == 0) nfree++;
 800e70e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e710:	b903      	cbnz	r3, 800e714 <cmd_tree+0x104>
 800e712:	3701      	adds	r7, #1
							i += 2;
 800e714:	3402      	adds	r4, #2
 800e716:	e7b6      	b.n	800e686 <cmd_tree+0x76>
							res = move_window(fs, sect++);
 800e718:	4649      	mov	r1, r9
 800e71a:	e7a9      	b.n	800e670 <cmd_tree+0x60>
					i = 0;						/* Offset in the sector */
 800e71c:	4605      	mov	r5, r0
					sect = fs->bitbase;			/* Bitmap sector */
 800e71e:	4640      	mov	r0, r8
			nfree = 0;
 800e720:	462f      	mov	r7, r5
					sect = fs->bitbase;			/* Bitmap sector */
 800e722:	f8d8 1034 	ldr.w	r1, [r8, #52]	; 0x34
						if (i == 0) {
 800e726:	b955      	cbnz	r5, 800e73e <cmd_tree+0x12e>
	if (sect != fs->winsect) {	/* Window offset changed? */
 800e728:	6b83      	ldr	r3, [r0, #56]	; 0x38
							res = move_window(fs, sect++);
 800e72a:	f101 0901 	add.w	r9, r1, #1
	if (sect != fs->winsect) {	/* Window offset changed? */
 800e72e:	4299      	cmp	r1, r3
 800e730:	d01c      	beq.n	800e76c <cmd_tree+0x15c>
 800e732:	f7f8 f9bd 	bl	8006ab0 <move_window.part.0.lto_priv.0>
							if (res != FR_OK) break;
 800e736:	2800      	cmp	r0, #0
 800e738:	d1df      	bne.n	800e6fa <cmd_tree+0xea>
							res = move_window(fs, sect++);
 800e73a:	4649      	mov	r1, r9
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800e73c:	9802      	ldr	r0, [sp, #8]
 800e73e:	1943      	adds	r3, r0, r5
 800e740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e744:	f1a4 0208 	sub.w	r2, r4, #8
 800e748:	2c00      	cmp	r4, #0
 800e74a:	d0a0      	beq.n	800e68e <cmd_tree+0x7e>
							if (!(bm & 1)) nfree++;
 800e74c:	f013 0f01 	tst.w	r3, #1
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800e750:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
							if (!(bm & 1)) nfree++;
 800e754:	bf08      	it	eq
 800e756:	3701      	addeq	r7, #1
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800e758:	4294      	cmp	r4, r2
							bm >>= 1;
 800e75a:	ea4f 0353 	mov.w	r3, r3, lsr #1
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800e75e:	d1f3      	bne.n	800e748 <cmd_tree+0x138>
						i = (i + 1) % SS(fs);
 800e760:	3501      	adds	r5, #1
 800e762:	f3c5 0508 	ubfx	r5, r5, #0, #9
					} while (clst);
 800e766:	2c00      	cmp	r4, #0
 800e768:	d1dd      	bne.n	800e726 <cmd_tree+0x116>
 800e76a:	e790      	b.n	800e68e <cmd_tree+0x7e>
							res = move_window(fs, sect++);
 800e76c:	4649      	mov	r1, r9
 800e76e:	e7e6      	b.n	800e73e <cmd_tree+0x12e>
 800e770:	20002400 	.word	0x20002400
 800e774:	08012f3c 	.word	0x08012f3c
 800e778:	08012f88 	.word	0x08012f88
 800e77c:	08012fcc 	.word	0x08012fcc
 800e780:	20001ee0 	.word	0x20001ee0
 800e784:	08012f6c 	.word	0x08012f6c
 800e788:	08012ff4 	.word	0x08012ff4
 800e78c:	08012f5c 	.word	0x08012f5c

0800e790 <chThdCreateFromMemoryPool.constprop.0>:
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 800e790:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e794:	2330      	movs	r3, #48	; 0x30
 800e796:	4607      	mov	r7, r0
 800e798:	460e      	mov	r6, r1
 800e79a:	4615      	mov	r5, r2
 800e79c:	b087      	sub	sp, #28
 800e79e:	f383 8811 	msr	BASEPRI, r3
  objp = mp->next;
 800e7a2:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800e810 <chThdCreateFromMemoryPool.constprop.0+0x80>
 800e7a6:	f8d8 4000 	ldr.w	r4, [r8]
  if (objp != NULL) {
 800e7aa:	b334      	cbz	r4, 800e7fa <chThdCreateFromMemoryPool.constprop.0+0x6a>
    mp->next = mp->next->next;
 800e7ac:	6823      	ldr	r3, [r4, #0]
 800e7ae:	f8c8 3000 	str.w	r3, [r8]
 800e7b2:	f04f 0900 	mov.w	r9, #0
 800e7b6:	f389 8811 	msr	BASEPRI, r9
  void *wbase, *wend;

  chDbgCheck(mp != NULL);

  wbase = chPoolAlloc(mp);
  if (wbase == NULL) {
 800e7ba:	b1d4      	cbz	r4, 800e7f2 <chThdCreateFromMemoryPool.constprop.0+0x62>
    return NULL;
  }
  wend = (void *)((uint8_t *)wbase + mp->object_size);
 800e7bc:	f8d8 0004 	ldr.w	r0, [r8, #4]

  thread_descriptor_t td = THD_DESCRIPTOR(name, wbase, wend, prio, pf, arg);
 800e7c0:	4b14      	ldr	r3, [pc, #80]	; (800e814 <chThdCreateFromMemoryPool.constprop.0+0x84>)
  wend = (void *)((uint8_t *)wbase + mp->object_size);
 800e7c2:	4420      	add	r0, r4
  thread_descriptor_t td = THD_DESCRIPTOR(name, wbase, wend, prio, pf, arg);
 800e7c4:	e9cd 3504 	strd	r3, r5, [sp, #16]
 800e7c8:	e9cd 7400 	strd	r7, r4, [sp]
 800e7cc:	9603      	str	r6, [sp, #12]
 800e7ce:	2330      	movs	r3, #48	; 0x30
 800e7d0:	9002      	str	r0, [sp, #8]
 800e7d2:	f383 8811 	msr	BASEPRI, r3
#if CH_DBG_FILL_THREADS == TRUE
  __thd_stackfill((uint8_t *)wbase, (uint8_t *)wend);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 800e7d6:	4668      	mov	r0, sp
 800e7d8:	f7f5 fef2 	bl	80045c0 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_MPOOL;
 800e7dc:	2302      	movs	r3, #2
  tp->mpool = mp;
  chSchWakeupS(tp, MSG_OK);
 800e7de:	4649      	mov	r1, r9
  tp->flags = CH_FLAG_MODE_MPOOL;
 800e7e0:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
  tp->mpool = mp;
 800e7e4:	f8c0 8048 	str.w	r8, [r0, #72]	; 0x48
  tp = chThdCreateSuspendedI(&td);
 800e7e8:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 800e7ea:	f7f5 fdb9 	bl	8004360 <chSchWakeupS>
 800e7ee:	f389 8811 	msr	BASEPRI, r9
  chSysUnlock();

  return tp;
}
 800e7f2:	4620      	mov	r0, r4
 800e7f4:	b007      	add	sp, #28
 800e7f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if (mp->provider != NULL) {
 800e7fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e7fe:	b123      	cbz	r3, 800e80a <chThdCreateFromMemoryPool.constprop.0+0x7a>
    objp = mp->provider(mp->object_size, mp->align);
 800e800:	e9d8 0101 	ldrd	r0, r1, [r8, #4]
 800e804:	4798      	blx	r3
 800e806:	4604      	mov	r4, r0
 800e808:	e7d3      	b.n	800e7b2 <chThdCreateFromMemoryPool.constprop.0+0x22>
 800e80a:	f384 8811 	msr	BASEPRI, r4
 800e80e:	e7f0      	b.n	800e7f2 <chThdCreateFromMemoryPool.constprop.0+0x62>
 800e810:	20001214 	.word	0x20001214
 800e814:	08001351 	.word	0x08001351
	...

0800e820 <chEvtWaitOneTimeout.constprop.0>:
  return __sch_get_currthread();
 800e820:	4a11      	ldr	r2, [pc, #68]	; (800e868 <chEvtWaitOneTimeout.constprop.0+0x48>)
eventmask_t chEvtWaitOneTimeout(eventmask_t events, sysinterval_t timeout) {
 800e822:	b538      	push	{r3, r4, r5, lr}
 800e824:	2330      	movs	r3, #48	; 0x30
 800e826:	68d5      	ldr	r5, [r2, #12]
 800e828:	f383 8811 	msr	BASEPRI, r3
  m = currtp->epending & events;
 800e82c:	6bec      	ldr	r4, [r5, #60]	; 0x3c
  if (m == (eventmask_t)0) {
 800e82e:	b96c      	cbnz	r4, 800e84c <chEvtWaitOneTimeout.constprop.0+0x2c>
    if (TIME_IMMEDIATE == timeout) {
 800e830:	b910      	cbnz	r0, 800e838 <chEvtWaitOneTimeout.constprop.0+0x18>
 800e832:	f380 8811 	msr	BASEPRI, r0
}
 800e836:	bd38      	pop	{r3, r4, r5, pc}
    currtp->u.ewmask = events;
 800e838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 800e83c:	4601      	mov	r1, r0
    currtp->u.ewmask = events;
 800e83e:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 800e840:	200a      	movs	r0, #10
 800e842:	f7f4 fa4d 	bl	8002ce0 <chSchGoSleepTimeoutS>
 800e846:	2800      	cmp	r0, #0
 800e848:	db09      	blt.n	800e85e <chEvtWaitOneTimeout.constprop.0+0x3e>
    m = currtp->epending & events;
 800e84a:	6bec      	ldr	r4, [r5, #60]	; 0x3c
  m ^= m & (m - (eventmask_t)1);
 800e84c:	4260      	negs	r0, r4
  currtp->epending &= ~m;
 800e84e:	ea24 0300 	bic.w	r3, r4, r0
 800e852:	63eb      	str	r3, [r5, #60]	; 0x3c
  m ^= m & (m - (eventmask_t)1);
 800e854:	4020      	ands	r0, r4
 800e856:	2300      	movs	r3, #0
 800e858:	f383 8811 	msr	BASEPRI, r3
}
 800e85c:	bd38      	pop	{r3, r4, r5, pc}
 800e85e:	f384 8811 	msr	BASEPRI, r4
      return (eventmask_t)0;
 800e862:	4620      	mov	r0, r4
}
 800e864:	bd38      	pop	{r3, r4, r5, pc}
 800e866:	bf00      	nop
 800e868:	20001050 	.word	0x20001050
 800e86c:	00000000 	.word	0x00000000

0800e870 <chEvtWaitOne.constprop.0>:
eventmask_t chEvtWaitOne(eventmask_t events) {
 800e870:	b538      	push	{r3, r4, r5, lr}
 800e872:	4b12      	ldr	r3, [pc, #72]	; (800e8bc <chEvtWaitOne.constprop.0+0x4c>)
 800e874:	2230      	movs	r2, #48	; 0x30
 800e876:	68dc      	ldr	r4, [r3, #12]
 800e878:	f382 8811 	msr	BASEPRI, r2
  m = currtp->epending & events;
 800e87c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  if (m == (eventmask_t)0) {
 800e87e:	b140      	cbz	r0, 800e892 <chEvtWaitOne.constprop.0+0x22>
  m ^= m & (m - (eventmask_t)1);
 800e880:	4243      	negs	r3, r0
  currtp->epending &= ~m;
 800e882:	ea20 0203 	bic.w	r2, r0, r3
 800e886:	63e2      	str	r2, [r4, #60]	; 0x3c
  m ^= m & (m - (eventmask_t)1);
 800e888:	4018      	ands	r0, r3
 800e88a:	2300      	movs	r3, #0
 800e88c:	f383 8811 	msr	BASEPRI, r3
}
 800e890:	bd38      	pop	{r3, r4, r5, pc}
  otp->state = newstate;
 800e892:	220a      	movs	r2, #10
    currtp->u.ewmask = events;
 800e894:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  ntp->state = CH_STATE_CURRENT;
 800e898:	f04f 0c01 	mov.w	ip, #1
  thread_t *otp = __instance_get_currthread(oip);
 800e89c:	68d9      	ldr	r1, [r3, #12]
  ch_priority_queue_t *p = pqp->next;
 800e89e:	6818      	ldr	r0, [r3, #0]
 800e8a0:	62e5      	str	r5, [r4, #44]	; 0x2c
  otp->state = newstate;
 800e8a2:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pqp->next       = p->next;
 800e8a6:	6802      	ldr	r2, [r0, #0]
  pqp->next->prev = pqp;
 800e8a8:	6053      	str	r3, [r2, #4]
  pqp->next       = p->next;
 800e8aa:	601a      	str	r2, [r3, #0]
  ntp->state = CH_STATE_CURRENT;
 800e8ac:	f880 c028 	strb.w	ip, [r0, #40]	; 0x28
  __instance_set_currthread(oip, ntp);
 800e8b0:	60d8      	str	r0, [r3, #12]
  chSysSwitch(ntp, otp);
 800e8b2:	f7f1 fcc5 	bl	8000240 <__port_switch>
    m = currtp->epending & events;
 800e8b6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800e8b8:	e7e2      	b.n	800e880 <chEvtWaitOne.constprop.0+0x10>
 800e8ba:	bf00      	nop
 800e8bc:	20001050 	.word	0x20001050

0800e8c0 <chSemResetWithMessage.constprop.0>:
void chSemResetWithMessage(semaphore_t *sp, cnt_t n, msg_t msg) {
 800e8c0:	b538      	push	{r3, r4, r5, lr}
 800e8c2:	2330      	movs	r3, #48	; 0x30
 800e8c4:	f383 8811 	msr	BASEPRI, r3
  while (ch_queue_notempty(&sp->queue)) {
 800e8c8:	6803      	ldr	r3, [r0, #0]
  sp->cnt = n;
 800e8ca:	6081      	str	r1, [r0, #8]
  while (ch_queue_notempty(&sp->queue)) {
 800e8cc:	4298      	cmp	r0, r3
 800e8ce:	d018      	beq.n	800e902 <chSemResetWithMessage.constprop.0+0x42>
  tp->state = CH_STATE_READY;
 800e8d0:	f04f 0c00 	mov.w	ip, #0
    chSchReadyI(threadref(ch_queue_lifo_remove(&sp->queue)))->u.rdymsg = msg;
 800e8d4:	f06f 0501 	mvn.w	r5, #1
  ch_queue_t *p = qp->prev;
 800e8d8:	6843      	ldr	r3, [r0, #4]
  qp->prev       = p->prev;
 800e8da:	6859      	ldr	r1, [r3, #4]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800e8dc:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800e8de:	689c      	ldr	r4, [r3, #8]
  qp->prev       = p->prev;
 800e8e0:	6041      	str	r1, [r0, #4]
  qp->prev->next = qp;
 800e8e2:	6008      	str	r0, [r1, #0]
  tp->state = CH_STATE_READY;
 800e8e4:	f883 c028 	strb.w	ip, [r3, #40]	; 0x28
    pqp = pqp->next;
 800e8e8:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800e8ea:	6891      	ldr	r1, [r2, #8]
 800e8ec:	42a1      	cmp	r1, r4
 800e8ee:	d2fb      	bcs.n	800e8e8 <chSemResetWithMessage.constprop.0+0x28>
  while (ch_queue_notempty(&sp->queue)) {
 800e8f0:	6804      	ldr	r4, [r0, #0]
  p->prev       = pqp->prev;
 800e8f2:	6851      	ldr	r1, [r2, #4]
 800e8f4:	42a0      	cmp	r0, r4
 800e8f6:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 800e8fa:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 800e8fc:	6053      	str	r3, [r2, #4]
    chSchReadyI(threadref(ch_queue_lifo_remove(&sp->queue)))->u.rdymsg = msg;
 800e8fe:	62dd      	str	r5, [r3, #44]	; 0x2c
  while (ch_queue_notempty(&sp->queue)) {
 800e900:	d1ea      	bne.n	800e8d8 <chSemResetWithMessage.constprop.0+0x18>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800e902:	4b06      	ldr	r3, [pc, #24]	; (800e91c <chSemResetWithMessage.constprop.0+0x5c>)
 800e904:	681a      	ldr	r2, [r3, #0]
 800e906:	68db      	ldr	r3, [r3, #12]
 800e908:	6892      	ldr	r2, [r2, #8]
 800e90a:	689b      	ldr	r3, [r3, #8]
 800e90c:	429a      	cmp	r2, r3
 800e90e:	d901      	bls.n	800e914 <chSemResetWithMessage.constprop.0+0x54>
    __sch_reschedule_ahead();
 800e910:	f7f5 faa6 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 800e914:	2300      	movs	r3, #0
 800e916:	f383 8811 	msr	BASEPRI, r3
}
 800e91a:	bd38      	pop	{r3, r4, r5, pc}
 800e91c:	20001050 	.word	0x20001050

0800e920 <rt_test_012_007_execute.lto_priv.0>:
static void rt_test_012_007_execute(void) {
 800e920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 800e924:	2400      	movs	r4, #0
  test_set_step(1);
 800e926:	f04f 0801 	mov.w	r8, #1
 800e92a:	4f4f      	ldr	r7, [pc, #316]	; (800ea68 <rt_test_012_007_execute.lto_priv.0+0x148>)
static void rt_test_012_007_execute(void) {
 800e92c:	b082      	sub	sp, #8
  return chThdGetSelfX()->hdr.pqueue.prio;
 800e92e:	68fb      	ldr	r3, [r7, #12]
  test_set_step(1);
 800e930:	4e4e      	ldr	r6, [pc, #312]	; (800ea6c <rt_test_012_007_execute.lto_priv.0+0x14c>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 800e932:	689a      	ldr	r2, [r3, #8]
 800e934:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800e938:	4b4d      	ldr	r3, [pc, #308]	; (800ea70 <rt_test_012_007_execute.lto_priv.0+0x150>)
 800e93a:	3205      	adds	r2, #5
 800e93c:	9400      	str	r4, [sp, #0]
 800e93e:	484d      	ldr	r0, [pc, #308]	; (800ea74 <rt_test_012_007_execute.lto_priv.0+0x154>)
  test_set_step(1);
 800e940:	f8c6 8000 	str.w	r8, [r6]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 800e944:	f7f5 fe84 	bl	8004650 <chThdCreateStatic>
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	4d4b      	ldr	r5, [pc, #300]	; (800ea78 <rt_test_012_007_execute.lto_priv.0+0x158>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 800e94c:	689a      	ldr	r2, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 800e94e:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 800e950:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800e954:	4b46      	ldr	r3, [pc, #280]	; (800ea70 <rt_test_012_007_execute.lto_priv.0+0x150>)
 800e956:	9400      	str	r4, [sp, #0]
 800e958:	3204      	adds	r2, #4
 800e95a:	4848      	ldr	r0, [pc, #288]	; (800ea7c <rt_test_012_007_execute.lto_priv.0+0x15c>)
 800e95c:	f7f5 fe78 	bl	8004650 <chThdCreateStatic>
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
 800e964:	689a      	ldr	r2, [r3, #8]
 800e966:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800e96a:	4b41      	ldr	r3, [pc, #260]	; (800ea70 <rt_test_012_007_execute.lto_priv.0+0x150>)
 800e96c:	9400      	str	r4, [sp, #0]
 800e96e:	3203      	adds	r2, #3
 800e970:	4843      	ldr	r0, [pc, #268]	; (800ea80 <rt_test_012_007_execute.lto_priv.0+0x160>)
 800e972:	f7f5 fe6d 	bl	8004650 <chThdCreateStatic>
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 800e97a:	689a      	ldr	r2, [r3, #8]
 800e97c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800e980:	4b3b      	ldr	r3, [pc, #236]	; (800ea70 <rt_test_012_007_execute.lto_priv.0+0x150>)
 800e982:	9400      	str	r4, [sp, #0]
 800e984:	3202      	adds	r2, #2
 800e986:	483f      	ldr	r0, [pc, #252]	; (800ea84 <rt_test_012_007_execute.lto_priv.0+0x164>)
 800e988:	f7f5 fe62 	bl	8004650 <chThdCreateStatic>
 800e98c:	68fb      	ldr	r3, [r7, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 800e98e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800e992:	689a      	ldr	r2, [r3, #8]
 800e994:	9400      	str	r4, [sp, #0]
 800e996:	4b36      	ldr	r3, [pc, #216]	; (800ea70 <rt_test_012_007_execute.lto_priv.0+0x150>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 800e998:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 800e99a:	4442      	add	r2, r8
 800e99c:	483a      	ldr	r0, [pc, #232]	; (800ea88 <rt_test_012_007_execute.lto_priv.0+0x168>)
 800e99e:	f7f5 fe57 	bl	8004650 <chThdCreateStatic>
  test_set_step(2);
 800e9a2:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 800e9a4:	6128      	str	r0, [r5, #16]
  test_set_step(2);
 800e9a6:	6033      	str	r3, [r6, #0]
 800e9a8:	2530      	movs	r5, #48	; 0x30
 800e9aa:	f385 8811 	msr	BASEPRI, r5
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800e9ae:	2008      	movs	r0, #8
 800e9b0:	4641      	mov	r1, r8
 800e9b2:	f7f4 f995 	bl	8002ce0 <chSchGoSleepTimeoutS>
 800e9b6:	f384 8811 	msr	BASEPRI, r4
 800e9ba:	f385 8811 	msr	BASEPRI, r5
 800e9be:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 800e9c2:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800e9c4:	b2ad      	uxth	r5, r5
 800e9c6:	f384 8811 	msr	BASEPRI, r4
  chSemResetWithMessage(sp, n, MSG_RESET);
 800e9ca:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800ea8c <rt_test_012_007_execute.lto_priv.0+0x16c>
 800e9ce:	2100      	movs	r1, #0
 800e9d0:	4640      	mov	r0, r8
 800e9d2:	f7ff ff75 	bl	800e8c0 <chSemResetWithMessage.constprop.0>
 800e9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      n++;
 800e9d8:	3401      	adds	r4, #1
 800e9da:	1b5b      	subs	r3, r3, r5
    } while (chVTIsSystemTimeWithinX(start, end));
 800e9dc:	b29b      	uxth	r3, r3
 800e9de:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800e9e2:	d3f4      	bcc.n	800e9ce <rt_test_012_007_execute.lto_priv.0+0xae>
  test_set_step(3);
 800e9e4:	4d24      	ldr	r5, [pc, #144]	; (800ea78 <rt_test_012_007_execute.lto_priv.0+0x158>)
 800e9e6:	2203      	movs	r2, #3
 800e9e8:	462b      	mov	r3, r5
 800e9ea:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800e9ee:	2000      	movs	r0, #0
 800e9f0:	f105 0714 	add.w	r7, r5, #20
 800e9f4:	6032      	str	r2, [r6, #0]
    if (threads[i])
 800e9f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9fa:	b14a      	cbz	r2, 800ea10 <rt_test_012_007_execute.lto_priv.0+0xf0>
 800e9fc:	f38c 8811 	msr	BASEPRI, ip
  tp->flags |= CH_FLAG_TERMINATE;
 800ea00:	f892 1029 	ldrb.w	r1, [r2, #41]	; 0x29
 800ea04:	f041 0104 	orr.w	r1, r1, #4
 800ea08:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
 800ea0c:	f380 8811 	msr	BASEPRI, r0
  for (i = 0; i < MAX_THREADS; i++)
 800ea10:	42bb      	cmp	r3, r7
 800ea12:	d1f0      	bne.n	800e9f6 <rt_test_012_007_execute.lto_priv.0+0xd6>
 800ea14:	2100      	movs	r1, #0
 800ea16:	481d      	ldr	r0, [pc, #116]	; (800ea8c <rt_test_012_007_execute.lto_priv.0+0x16c>)
 800ea18:	f7ff ff52 	bl	800e8c0 <chSemResetWithMessage.constprop.0>
      threads[i] = NULL;
 800ea1c:	f04f 0800 	mov.w	r8, #0
    if (threads[i] != NULL) {
 800ea20:	f855 0b04 	ldr.w	r0, [r5], #4
 800ea24:	b118      	cbz	r0, 800ea2e <rt_test_012_007_execute.lto_priv.0+0x10e>
      chThdWait(threads[i]);
 800ea26:	f7f6 fffb 	bl	8005a20 <chThdWait>
      threads[i] = NULL;
 800ea2a:	f845 8c04 	str.w	r8, [r5, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 800ea2e:	42bd      	cmp	r5, r7
 800ea30:	d1f6      	bne.n	800ea20 <rt_test_012_007_execute.lto_priv.0+0x100>
  test_set_step(4);
 800ea32:	2304      	movs	r3, #4
  test_printf("%s", msgp);
 800ea34:	4916      	ldr	r1, [pc, #88]	; (800ea90 <rt_test_012_007_execute.lto_priv.0+0x170>)
 800ea36:	4817      	ldr	r0, [pc, #92]	; (800ea94 <rt_test_012_007_execute.lto_priv.0+0x174>)
 800ea38:	6033      	str	r3, [r6, #0]
 800ea3a:	f7f9 fa01 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 800ea3e:	4621      	mov	r1, r4
 800ea40:	4815      	ldr	r0, [pc, #84]	; (800ea98 <rt_test_012_007_execute.lto_priv.0+0x178>)
 800ea42:	f7f9 f9fd 	bl	8007e40 <test_printf>
    test_printn(n * 6);
 800ea46:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  test_printf("%s", msgp);
 800ea4a:	4914      	ldr	r1, [pc, #80]	; (800ea9c <rt_test_012_007_execute.lto_priv.0+0x17c>)
 800ea4c:	4811      	ldr	r0, [pc, #68]	; (800ea94 <rt_test_012_007_execute.lto_priv.0+0x174>)
 800ea4e:	f7f9 f9f7 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 800ea52:	0061      	lsls	r1, r4, #1
 800ea54:	4810      	ldr	r0, [pc, #64]	; (800ea98 <rt_test_012_007_execute.lto_priv.0+0x178>)
 800ea56:	f7f9 f9f3 	bl	8007e40 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800ea5a:	4911      	ldr	r1, [pc, #68]	; (800eaa0 <rt_test_012_007_execute.lto_priv.0+0x180>)
 800ea5c:	4811      	ldr	r0, [pc, #68]	; (800eaa4 <rt_test_012_007_execute.lto_priv.0+0x184>)
}
 800ea5e:	b002      	add	sp, #8
 800ea60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea64:	f7f9 b9ec 	b.w	8007e40 <test_printf>
 800ea68:	20001050 	.word	0x20001050
 800ea6c:	200010f4 	.word	0x200010f4
 800ea70:	080017b1 	.word	0x080017b1
 800ea74:	20001240 	.word	0x20001240
 800ea78:	20001ab0 	.word	0x20001ab0
 800ea7c:	200013f0 	.word	0x200013f0
 800ea80:	200015a0 	.word	0x200015a0
 800ea84:	20001750 	.word	0x20001750
 800ea88:	20001900 	.word	0x20001900
 800ea8c:	20001230 	.word	0x20001230
 800ea90:	08010f7c 	.word	0x08010f7c
 800ea94:	080103f8 	.word	0x080103f8
 800ea98:	08010890 	.word	0x08010890
 800ea9c:	08013010 	.word	0x08013010
 800eaa0:	08010f98 	.word	0x08010f98
 800eaa4:	08013080 	.word	0x08013080
	...

0800eab0 <vt_insert_first.constprop.0>:
  vtlp->lasttime = now;
 800eab0:	4b1e      	ldr	r3, [pc, #120]	; (800eb2c <vt_insert_first.constprop.0+0x7c>)
 800eab2:	f5b2 4f7f 	cmp.w	r2, #65280	; 0xff00
static void vt_insert_first(virtual_timers_list_t *vtlp,
 800eab6:	b5f0      	push	{r4, r5, r6, r7, lr}
  dlp->next       = dlp->prev->next;
 800eab8:	691d      	ldr	r5, [r3, #16]
  vtlp->lasttime = now;
 800eaba:	8399      	strh	r1, [r3, #28]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800eabc:	f04f 0402 	mov.w	r4, #2
  dlp->delta      = delta;
 800eac0:	6082      	str	r2, [r0, #8]
 800eac2:	bf28      	it	cs
 800eac4:	f44f 427f 	movcs.w	r2, #65280	; 0xff00
 800eac8:	42a2      	cmp	r2, r4
 800eaca:	bf38      	it	cc
 800eacc:	4622      	movcc	r2, r4
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800eace:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
  STM32_ST_TIM->SR     = 0;
 800ead2:	2600      	movs	r6, #0
  dlp->prev       = dlhp;
 800ead4:	f103 0710 	add.w	r7, r3, #16
  dlp->next       = dlp->prev->next;
 800ead8:	e9c0 5700 	strd	r5, r7, [r0]
  dlp->next->prev = dlp;
 800eadc:	6068      	str	r0, [r5, #4]
  dlhp->next      = dlp;
 800eade:	6118      	str	r0, [r3, #16]
  return systime + (systime_t)interval;
 800eae0:	1888      	adds	r0, r1, r2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800eae2:	b280      	uxth	r0, r0
 800eae4:	f8cc 0034 	str.w	r0, [ip, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 800eae8:	f8cc 6010 	str.w	r6, [ip, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800eaec:	f8cc 400c 	str.w	r4, [ip, #12]
  return (systime_t)STM32_ST_TIM->CNT;
 800eaf0:	f8dc 0024 	ldr.w	r0, [ip, #36]	; 0x24
 800eaf4:	b280      	uxth	r0, r0
  return (sysinterval_t)((systime_t)(end - start));
 800eaf6:	eba0 0e01 	sub.w	lr, r0, r1
 800eafa:	fa1f fe8e 	uxth.w	lr, lr
    if (likely(chTimeDiffX(now, newnow) < delay)) {
 800eafe:	4572      	cmp	r2, lr
 800eb00:	d902      	bls.n	800eb08 <vt_insert_first.constprop.0+0x58>
}
 800eb02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb04:	4601      	mov	r1, r0
 800eb06:	4610      	mov	r0, r2
    currdelta += (sysinterval_t)1;
 800eb08:	3401      	adds	r4, #1
  return systime + (systime_t)interval;
 800eb0a:	4421      	add	r1, r4
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800eb0c:	b289      	uxth	r1, r1
 800eb0e:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 800eb12:	f8dc 2024 	ldr.w	r2, [ip, #36]	; 0x24
 800eb16:	b292      	uxth	r2, r2
  return (sysinterval_t)((systime_t)(end - start));
 800eb18:	1a11      	subs	r1, r2, r0
 800eb1a:	b289      	uxth	r1, r1
    if (likely(chTimeDiffX(now, newnow) < delay)) {
 800eb1c:	42a1      	cmp	r1, r4
 800eb1e:	d2f1      	bcs.n	800eb04 <vt_insert_first.constprop.0+0x54>
  currcore->rfcu.mask |= mask;
 800eb20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb22:	f042 0201 	orr.w	r2, r2, #1
 800eb26:	635a      	str	r2, [r3, #52]	; 0x34
}
 800eb28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb2a:	bf00      	nop
 800eb2c:	20001050 	.word	0x20001050

0800eb30 <vt_enqueue.constprop.0>:
  return (bool)(dlhp == dlhp->next);
 800eb30:	4a2f      	ldr	r2, [pc, #188]	; (800ebf0 <vt_enqueue.constprop.0+0xc0>)
static void vt_enqueue(virtual_timers_list_t *vtlp,
 800eb32:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb34:	4613      	mov	r3, r2
 800eb36:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
 800eb3a:	f853 5f10 	ldr.w	r5, [r3, #16]!
 800eb3e:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    if (ch_dlist_isempty(&vtlp->dlist)) {
 800eb42:	429d      	cmp	r5, r3
 800eb44:	fa1f fc84 	uxth.w	ip, r4
 800eb48:	d049      	beq.n	800ebde <vt_enqueue.constprop.0+0xae>
 800eb4a:	8b93      	ldrh	r3, [r2, #28]
    if (delta < vtlp->dlist.next->delta) {
 800eb4c:	68ac      	ldr	r4, [r5, #8]
 800eb4e:	ebac 0303 	sub.w	r3, ip, r3
 800eb52:	b29b      	uxth	r3, r3
      delta = delay;
 800eb54:	18cb      	adds	r3, r1, r3
 800eb56:	bf28      	it	cs
 800eb58:	460b      	movcs	r3, r1
    if (delta < vtlp->dlist.next->delta) {
 800eb5a:	429c      	cmp	r4, r3
 800eb5c:	4606      	mov	r6, r0
 800eb5e:	d903      	bls.n	800eb68 <vt_enqueue.constprop.0+0x38>
 800eb60:	e011      	b.n	800eb86 <vt_enqueue.constprop.0+0x56>
    dlp = dlp->next;
 800eb62:	682d      	ldr	r5, [r5, #0]
    delta -= dlp->delta;
 800eb64:	1b1b      	subs	r3, r3, r4
  while (likely(dlp->delta < delta)) {
 800eb66:	68ac      	ldr	r4, [r5, #8]
 800eb68:	429c      	cmp	r4, r3
 800eb6a:	d3fa      	bcc.n	800eb62 <vt_enqueue.constprop.0+0x32>
  dlp->prev       = dlp->next->prev;
 800eb6c:	6869      	ldr	r1, [r5, #4]
  dlp->delta      = delta;
 800eb6e:	60b3      	str	r3, [r6, #8]
  dlp->prev       = dlp->next->prev;
 800eb70:	e9c6 5100 	strd	r5, r1, [r6]
  dlp->prev->next = dlp;
 800eb74:	600e      	str	r6, [r1, #0]
  dlp->delta -= delta;
 800eb76:	68a9      	ldr	r1, [r5, #8]
  dlhp->prev      = dlp;
 800eb78:	606e      	str	r6, [r5, #4]
  dlp->delta -= delta;
 800eb7a:	1acb      	subs	r3, r1, r3
  dlhp->delta = (sysinterval_t)-1;
 800eb7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  dlp->delta -= delta;
 800eb80:	60ab      	str	r3, [r5, #8]
  dlhp->delta = (sysinterval_t)-1;
 800eb82:	6191      	str	r1, [r2, #24]
}
 800eb84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb86:	f5b1 4f7f 	cmp.w	r1, #65280	; 0xff00
 800eb8a:	bf28      	it	cs
 800eb8c:	f44f 417f 	movcs.w	r1, #65280	; 0xff00
 800eb90:	2902      	cmp	r1, #2
 800eb92:	bf38      	it	cc
 800eb94:	2102      	movcc	r1, #2
  return systime + (systime_t)interval;
 800eb96:	eb0c 0001 	add.w	r0, ip, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800eb9a:	b280      	uxth	r0, r0
 800eb9c:	f8ce 0034 	str.w	r0, [lr, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 800eba0:	f8de 0024 	ldr.w	r0, [lr, #36]	; 0x24
 800eba4:	b280      	uxth	r0, r0
  return (sysinterval_t)((systime_t)(end - start));
 800eba6:	eba0 0c0c 	sub.w	ip, r0, ip
 800ebaa:	fa1f fc8c 	uxth.w	ip, ip
    if (likely(nowdelta < delay)) {
 800ebae:	458c      	cmp	ip, r1
 800ebb0:	d3da      	bcc.n	800eb68 <vt_enqueue.constprop.0+0x38>
 800ebb2:	2102      	movs	r1, #2
    currdelta += (sysinterval_t)1;
 800ebb4:	3101      	adds	r1, #1
  return systime + (systime_t)interval;
 800ebb6:	eb00 0c01 	add.w	ip, r0, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800ebba:	fa1f f78c 	uxth.w	r7, ip
 800ebbe:	f8ce 7034 	str.w	r7, [lr, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 800ebc2:	f8de 7024 	ldr.w	r7, [lr, #36]	; 0x24
 800ebc6:	fa1f fc87 	uxth.w	ip, r7
  return (sysinterval_t)((systime_t)(end - start));
 800ebca:	ebac 0000 	sub.w	r0, ip, r0
 800ebce:	b280      	uxth	r0, r0
    if (likely(nowdelta < delay)) {
 800ebd0:	4288      	cmp	r0, r1
 800ebd2:	d20a      	bcs.n	800ebea <vt_enqueue.constprop.0+0xba>
 800ebd4:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800ebd6:	f041 0101 	orr.w	r1, r1, #1
 800ebda:	6351      	str	r1, [r2, #52]	; 0x34
}
 800ebdc:	e7c4      	b.n	800eb68 <vt_enqueue.constprop.0+0x38>
      vt_insert_first(vtlp, vtp, now, delay);
 800ebde:	460a      	mov	r2, r1
}
 800ebe0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      vt_insert_first(vtlp, vtp, now, delay);
 800ebe4:	4661      	mov	r1, ip
 800ebe6:	f7ff bf63 	b.w	800eab0 <vt_insert_first.constprop.0>
 800ebea:	4660      	mov	r0, ip
 800ebec:	e7e2      	b.n	800ebb4 <vt_enqueue.constprop.0+0x84>
 800ebee:	bf00      	nop
 800ebf0:	20001050 	.word	0x20001050
	...

0800ec00 <rt_test_012_009_execute.lto_priv.0>:
  test_set_step(1);
 800ec00:	2101      	movs	r1, #1
static void rt_test_012_009_execute(void) {
 800ec02:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_set_step(1);
 800ec06:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800ecac <rt_test_012_009_execute.lto_priv.0+0xac>
 800ec0a:	2730      	movs	r7, #48	; 0x30
 800ec0c:	f8c8 1000 	str.w	r1, [r8]
 800ec10:	f387 8811 	msr	BASEPRI, r7
 800ec14:	2008      	movs	r0, #8
 800ec16:	f7f4 f863 	bl	8002ce0 <chSchGoSleepTimeoutS>
 800ec1a:	f04f 0a00 	mov.w	sl, #0
 800ec1e:	f38a 8811 	msr	BASEPRI, sl
 800ec22:	f387 8811 	msr	BASEPRI, r7
 800ec26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ec2a:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800ec2c:	b2b6      	uxth	r6, r6
 800ec2e:	f38a 8811 	msr	BASEPRI, sl
  return systime + (systime_t)interval;
 800ec32:	f8df 907c 	ldr.w	r9, [pc, #124]	; 800ecb0 <rt_test_012_009_execute.lto_priv.0+0xb0>
 800ec36:	4d1f      	ldr	r5, [pc, #124]	; (800ecb4 <rt_test_012_009_execute.lto_priv.0+0xb4>)
 800ec38:	4c1f      	ldr	r4, [pc, #124]	; (800ecb8 <rt_test_012_009_execute.lto_priv.0+0xb8>)
 800ec3a:	f387 8811 	msr	BASEPRI, r7
  vtp->par     = par;
 800ec3e:	f04f 0b00 	mov.w	fp, #0
  vt_enqueue(vtlp, vtp, delay);
 800ec42:	4648      	mov	r0, r9
 800ec44:	2101      	movs	r1, #1
  vtp->par     = par;
 800ec46:	e9c9 5b03 	strd	r5, fp, [r9, #12]
  vtp->reload  = (sysinterval_t)0;
 800ec4a:	f8c9 b014 	str.w	fp, [r9, #20]
  vt_enqueue(vtlp, vtp, delay);
 800ec4e:	f7ff ff6f 	bl	800eb30 <vt_enqueue.constprop.0>
 800ec52:	f242 7110 	movw	r1, #10000	; 0x2710
 800ec56:	4620      	mov	r0, r4
  vtp->func    = vtfunc;
 800ec58:	e9c4 5b03 	strd	r5, fp, [r4, #12]
  vtp->reload  = (sysinterval_t)0;
 800ec5c:	f8c4 b014 	str.w	fp, [r4, #20]
  vt_enqueue(vtlp, vtp, delay);
 800ec60:	f7ff ff66 	bl	800eb30 <vt_enqueue.constprop.0>
      chVTDoResetI(&vt1);
 800ec64:	4648      	mov	r0, r9
 800ec66:	f7f3 ffe3 	bl	8002c30 <chVTDoResetI>
      chVTDoResetI(&vt2);
 800ec6a:	4620      	mov	r0, r4
 800ec6c:	f7f3 ffe0 	bl	8002c30 <chVTDoResetI>
 800ec70:	f38b 8811 	msr	BASEPRI, fp
 800ec74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ec78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      n++;
 800ec7a:	f10a 0a01 	add.w	sl, sl, #1
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 800ec7e:	1b9b      	subs	r3, r3, r6
    } while (chVTIsSystemTimeWithinX(start, end));
 800ec80:	b29b      	uxth	r3, r3
 800ec82:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ec86:	d3d8      	bcc.n	800ec3a <rt_test_012_009_execute.lto_priv.0+0x3a>
  test_set_step(2);
 800ec88:	2302      	movs	r3, #2
  test_printf("%s", msgp);
 800ec8a:	490c      	ldr	r1, [pc, #48]	; (800ecbc <rt_test_012_009_execute.lto_priv.0+0xbc>)
 800ec8c:	480c      	ldr	r0, [pc, #48]	; (800ecc0 <rt_test_012_009_execute.lto_priv.0+0xc0>)
 800ec8e:	f8c8 3000 	str.w	r3, [r8]
 800ec92:	f7f9 f8d5 	bl	8007e40 <test_printf>
  test_printf("%u", n);
 800ec96:	ea4f 014a 	mov.w	r1, sl, lsl #1
 800ec9a:	480a      	ldr	r0, [pc, #40]	; (800ecc4 <rt_test_012_009_execute.lto_priv.0+0xc4>)
 800ec9c:	f7f9 f8d0 	bl	8007e40 <test_printf>
}
 800eca0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800eca4:	4908      	ldr	r1, [pc, #32]	; (800ecc8 <rt_test_012_009_execute.lto_priv.0+0xc8>)
 800eca6:	4809      	ldr	r0, [pc, #36]	; (800eccc <rt_test_012_009_execute.lto_priv.0+0xcc>)
 800eca8:	f7f9 b8ca 	b.w	8007e40 <test_printf>
 800ecac:	200010f4 	.word	0x200010f4
 800ecb0:	200026a0 	.word	0x200026a0
 800ecb4:	080013d1 	.word	0x080013d1
 800ecb8:	200026b8 	.word	0x200026b8
 800ecbc:	08010f7c 	.word	0x08010f7c
 800ecc0:	080103f8 	.word	0x080103f8
 800ecc4:	08010890 	.word	0x08010890
 800ecc8:	08013024 	.word	0x08013024
 800eccc:	08013080 	.word	0x08013080

0800ecd0 <job_slow>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 800ecd0:	4b18      	ldr	r3, [pc, #96]	; (800ed34 <job_slow+0x64>)
static void job_slow(void *arg) {
 800ecd2:	b510      	push	{r4, lr}
 800ecd4:	68da      	ldr	r2, [r3, #12]
 800ecd6:	f103 0120 	add.w	r1, r3, #32
 800ecda:	428a      	cmp	r2, r1
 800ecdc:	b086      	sub	sp, #24
 800ecde:	d202      	bcs.n	800ece6 <job_slow+0x16>
    *chtest.tokp++ = token;
 800ece0:	1c51      	adds	r1, r2, #1
 800ece2:	60d9      	str	r1, [r3, #12]
  test_emit_token((int)arg);
 800ece4:	7010      	strb	r0, [r2, #0]
 800ece6:	2330      	movs	r3, #48	; 0x30
 800ece8:	f383 8811 	msr	BASEPRI, r3
  vtp->reload  = (sysinterval_t)0;
 800ecec:	2300      	movs	r3, #0
  thread_t *tp = __instance_get_currthread(currcore);
 800ecee:	4c12      	ldr	r4, [pc, #72]	; (800ed38 <job_slow+0x68>)
  vtp->func    = vtfunc;
 800ecf0:	4a12      	ldr	r2, [pc, #72]	; (800ed3c <job_slow+0x6c>)
  vtp->par     = par;
 800ecf2:	68e1      	ldr	r1, [r4, #12]
  vt_enqueue(vtlp, vtp, delay);
 800ecf4:	4668      	mov	r0, sp
  vtp->func    = vtfunc;
 800ecf6:	e9cd 2103 	strd	r2, r1, [sp, #12]
  vt_enqueue(vtlp, vtp, delay);
 800ecfa:	2114      	movs	r1, #20
  vtp->reload  = (sysinterval_t)0;
 800ecfc:	9305      	str	r3, [sp, #20]
  vt_enqueue(vtlp, vtp, delay);
 800ecfe:	f7ff ff17 	bl	800eb30 <vt_enqueue.constprop.0>
  otp->state = newstate;
 800ed02:	2308      	movs	r3, #8
  ntp->state = CH_STATE_CURRENT;
 800ed04:	2201      	movs	r2, #1
  thread_t *otp = __instance_get_currthread(oip);
 800ed06:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 800ed08:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 800ed0a:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
  pqp->next       = p->next;
 800ed0e:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 800ed10:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 800ed12:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  pqp->next       = p->next;
 800ed16:	6023      	str	r3, [r4, #0]
  __instance_set_currthread(oip, ntp);
 800ed18:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 800ed1a:	f7f1 fa91 	bl	8000240 <__port_switch>
    if (chVTIsArmedI(&vt)) {
 800ed1e:	9b00      	ldr	r3, [sp, #0]
 800ed20:	b113      	cbz	r3, 800ed28 <job_slow+0x58>
      chVTDoResetI(&vt);
 800ed22:	4668      	mov	r0, sp
 800ed24:	f7f3 ff84 	bl	8002c30 <chVTDoResetI>
 800ed28:	2300      	movs	r3, #0
 800ed2a:	f383 8811 	msr	BASEPRI, r3
}
 800ed2e:	b006      	add	sp, #24
 800ed30:	bd10      	pop	{r4, pc}
 800ed32:	bf00      	nop
 800ed34:	200010f4 	.word	0x200010f4
 800ed38:	20001050 	.word	0x20001050
 800ed3c:	080013e1 	.word	0x080013e1

0800ed40 <main>:
  rccResetAPB1(0xFFFFFFFF);
 800ed40:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800ed44:	2400      	movs	r4, #0
 800ed46:	4816      	ldr	r0, [pc, #88]	; (800eda0 <main+0x60>)
}

/*
 * Application entry point.
 */
int main(void) {
 800ed48:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800ed4c:	6903      	ldr	r3, [r0, #16]
 800ed4e:	6106      	str	r6, [r0, #16]
 800ed50:	f8d0 c010 	ldr.w	ip, [r0, #16]
 800ed54:	6104      	str	r4, [r0, #16]
 800ed56:	f8d0 c010 	ldr.w	ip, [r0, #16]
  dma.allocated_mask = 0U;
 800ed5a:	f8df 8048 	ldr.w	r8, [pc, #72]	; 800eda4 <main+0x64>
  rccResetAPB2(0xFFFFFFFF);
 800ed5e:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 800ed62:	60c6      	str	r6, [r0, #12]
 800ed64:	68c6      	ldr	r6, [r0, #12]
 800ed66:	60c4      	str	r4, [r0, #12]
 800ed68:	68c6      	ldr	r6, [r0, #12]
  dma.isr_mask       = 0U;
 800ed6a:	f8c8 4004 	str.w	r4, [r8, #4]
  rccEnablePWRInterface(true);
 800ed6e:	69c6      	ldr	r6, [r0, #28]
  PWR->CR |= PWR_CR_DBP;
 800ed70:	4f0d      	ldr	r7, [pc, #52]	; (800eda8 <main+0x68>)
  rccEnablePWRInterface(true);
 800ed72:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
 800ed76:	61c6      	str	r6, [r0, #28]
 800ed78:	69c6      	ldr	r6, [r0, #28]
  rccEnableBKPInterface(true);
 800ed7a:	69c6      	ldr	r6, [r0, #28]
 800ed7c:	4643      	mov	r3, r8
 800ed7e:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
 800ed82:	61c6      	str	r6, [r0, #28]
 800ed84:	69c0      	ldr	r0, [r0, #28]
  PWR->CR |= PWR_CR_DBP;
 800ed86:	6838      	ldr	r0, [r7, #0]
 800ed88:	4a08      	ldr	r2, [pc, #32]	; (800edac <main+0x6c>)
 800ed8a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800ed8e:	6038      	str	r0, [r7, #0]
 800ed90:	4907      	ldr	r1, [pc, #28]	; (800edb0 <main+0x70>)
 800ed92:	b093      	sub	sp, #76	; 0x4c
 800ed94:	f108 0560 	add.w	r5, r8, #96	; 0x60
  dma.allocated_mask = 0U;
 800ed98:	f8c8 4000 	str.w	r4, [r8]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 800ed9c:	e00b      	b.n	800edb6 <main+0x76>
 800ed9e:	bf00      	nop
 800eda0:	40021000 	.word	0x40021000
 800eda4:	20001140 	.word	0x20001140
 800eda8:	40007000 	.word	0x40007000
 800edac:	08011a98 	.word	0x08011a98
 800edb0:	40020008 	.word	0x40020008
    _stm32_dma_streams[i].channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 800edb4:	6851      	ldr	r1, [r2, #4]
 800edb6:	600c      	str	r4, [r1, #0]
    dma.streams[i].func = NULL;
 800edb8:	f843 4f08 	str.w	r4, [r3, #8]!
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 800edbc:	429d      	cmp	r5, r3
 800edbe:	f102 0210 	add.w	r2, r2, #16
 800edc2:	d1f7      	bne.n	800edb4 <main+0x74>
  DMA1->IFCR = 0xFFFFFFFFU;
 800edc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC) ||   \
    defined(__CORE_CM23_H_GENERIC)
  NVIC->__IPR[_IP_IDX(n)] = (NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                            (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800edc8:	2260      	movs	r2, #96	; 0x60
#endif
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800edca:	f04f 0c40 	mov.w	ip, #64	; 0x40
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800edce:	4fd5      	ldr	r7, [pc, #852]	; (800f124 <main+0x3e4>)
 800edd0:	49d5      	ldr	r1, [pc, #852]	; (800f128 <main+0x3e8>)
  DMA2->IFCR = 0xFFFFFFFFU;
 800edd2:	f8df e358 	ldr.w	lr, [pc, #856]	; 800f12c <main+0x3ec>
  DMA1->IFCR = 0xFFFFFFFFU;
 800edd6:	604b      	str	r3, [r1, #4]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800edd8:	f44f 7500 	mov.w	r5, #512	; 0x200
  DMA2->IFCR = 0xFFFFFFFFU;
 800eddc:	f8ce 3004 	str.w	r3, [lr, #4]
 800ede0:	f44f 7180 	mov.w	r1, #256	; 0x100
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800ede4:	f887 2306 	strb.w	r2, [r7, #774]	; 0x306
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800ede8:	f44f 6980 	mov.w	r9, #1024	; 0x400
 800edec:	f8c7 c180 	str.w	ip, [r7, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800edf0:	f8c7 c000 	str.w	ip, [r7]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800edf4:	f04f 0c80 	mov.w	ip, #128	; 0x80
 800edf8:	f44f 0a00 	mov.w	sl, #8388608	; 0x800000
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800edfc:	f887 2307 	strb.w	r2, [r7, #775]	; 0x307
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800ee00:	f8c7 c180 	str.w	ip, [r7, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800ee04:	f8c7 c000 	str.w	ip, [r7]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800ee08:	f887 2308 	strb.w	r2, [r7, #776]	; 0x308
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800ee0c:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800ee10:	6039      	str	r1, [r7, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800ee12:	f887 2309 	strb.w	r2, [r7, #777]	; 0x309
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800ee16:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800ee1a:	603d      	str	r5, [r7, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800ee1c:	f887 230a 	strb.w	r2, [r7, #778]	; 0x30a
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800ee20:	f8c7 9180 	str.w	r9, [r7, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800ee24:	f8c7 9000 	str.w	r9, [r7]
#endif

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, true);
 800ee28:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800ee2c:	f887 2317 	strb.w	r2, [r7, #791]	; 0x317
 800ee30:	f509 3903 	add.w	r9, r9, #134144	; 0x20c00
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800ee34:	f8c7 a180 	str.w	sl, [r7, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800ee38:	f8c7 a000 	str.w	sl, [r7]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800ee3c:	f887 2328 	strb.w	r2, [r7, #808]	; 0x328
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800ee40:	f8c7 1184 	str.w	r1, [r7, #388]	; 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800ee44:	6079      	str	r1, [r7, #4]
 800ee46:	f8d9 2018 	ldr.w	r2, [r9, #24]

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 800ee4a:	f5ae 4e7c 	sub.w	lr, lr, #64512	; 0xfc00
  rccEnableAPB2(APB2_EN_MASK, true);
 800ee4e:	f442 72fe 	orr.w	r2, r2, #508	; 0x1fc
 800ee52:	f042 0201 	orr.w	r2, r2, #1
 800ee56:	f8c9 2018 	str.w	r2, [r9, #24]
 800ee5a:	f8d9 2018 	ldr.w	r2, [r9, #24]
  GPIOA->CRH = config->PAData.crh;
 800ee5e:	4ab4      	ldr	r2, [pc, #720]	; (800f130 <main+0x3f0>)
  GPIOA->ODR = config->PAData.odr;
 800ee60:	f8ce 300c 	str.w	r3, [lr, #12]
  GPIOA->CRH = config->PAData.crh;
 800ee64:	f8ce 2004 	str.w	r2, [lr, #4]
  GPIOA->CRL = config->PAData.crl;
 800ee68:	4ab2      	ldr	r2, [pc, #712]	; (800f134 <main+0x3f4>)
  GPIOB->ODR = config->PBData.odr;
 800ee6a:	f8df c2cc 	ldr.w	ip, [pc, #716]	; 800f138 <main+0x3f8>
  GPIOA->CRL = config->PAData.crl;
 800ee6e:	f8ce 2000 	str.w	r2, [lr]
  GPIOB->CRH = config->PBData.crh;
 800ee72:	f10e 4e87 	add.w	lr, lr, #1132462080	; 0x43800000
 800ee76:	f50e 2e23 	add.w	lr, lr, #667648	; 0xa3000
 800ee7a:	f20e 7eb4 	addw	lr, lr, #1972	; 0x7b4
  GPIOB->ODR = config->PBData.odr;
 800ee7e:	f8cc 300c 	str.w	r3, [ip, #12]
  GPIOB->CRH = config->PBData.crh;
 800ee82:	f8cc e004 	str.w	lr, [ip, #4]
  GPIOB->CRL = config->PBData.crl;
 800ee86:	f8df e2b4 	ldr.w	lr, [pc, #692]	; 800f13c <main+0x3fc>
  sdcp->vmt      = &sdc_vmt;
 800ee8a:	4dad      	ldr	r5, [pc, #692]	; (800f140 <main+0x400>)
 800ee8c:	f8cc e000 	str.w	lr, [ip]
  sdcp->state    = BLK_STOP;
 800ee90:	f04f 0e01 	mov.w	lr, #1
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
 800ee94:	f10c 6c89 	add.w	ip, ip, #71827456	; 0x4480000
  GPIOC->ODR = config->PCData.odr;
 800ee98:	49aa      	ldr	r1, [pc, #680]	; (800f144 <main+0x404>)
  GPIOC->CRH = config->PCData.crh;
 800ee9a:	f50c 3c2b 	add.w	ip, ip, #175104	; 0x2ac00
 800ee9e:	f20c 3cbb 	addw	ip, ip, #955	; 0x3bb
  GPIOC->ODR = config->PCData.odr;
 800eea2:	60cb      	str	r3, [r1, #12]
 800eea4:	f885 e004 	strb.w	lr, [r5, #4]
  sdcp->capacity = 0;
 800eea8:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
  sdcp->errors   = SDC_NO_ERROR;
 800eeac:	636c      	str	r4, [r5, #52]	; 0x34
  SDCD1.thread = NULL;
 800eeae:	63ec      	str	r4, [r5, #60]	; 0x3c
  SDCD1.dma    = NULL;
 800eeb0:	646c      	str	r4, [r5, #68]	; 0x44
  GPIOC->CRH = config->PCData.crh;
 800eeb2:	f8c1 c004 	str.w	ip, [r1, #4]
  GPIOC->CRL = config->PCData.crl;
 800eeb6:	f8df c290 	ldr.w	ip, [pc, #656]	; 800f148 <main+0x408>
  GPIOD->ODR = config->PDData.odr;
 800eeba:	4aa4      	ldr	r2, [pc, #656]	; (800f14c <main+0x40c>)
  GPIOC->CRL = config->PCData.crl;
 800eebc:	f8c1 c000 	str.w	ip, [r1]
  GPIOD->CRH = config->PDData.crh;
 800eec0:	f04f 3cbb 	mov.w	ip, #3149642683	; 0xbbbbbbbb
  GPIOD->CRL = config->PDData.crl;
 800eec4:	49a2      	ldr	r1, [pc, #648]	; (800f150 <main+0x410>)
  GPIOD->ODR = config->PDData.odr;
 800eec6:	60d3      	str	r3, [r2, #12]
  GPIOD->CRH = config->PDData.crh;
 800eec8:	f8c2 c004 	str.w	ip, [r2, #4]
  GPIOD->CRL = config->PDData.crl;
 800eecc:	6011      	str	r1, [r2, #0]
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 800eece:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
  GPIOE->CRH = config->PEData.crh;
  GPIOE->CRL = config->PEData.crl;
#if STM32_HAS_GPIOF || defined(__DOXYGEN__)
  GPIOF->ODR = config->PFData.odr;
 800eed2:	f46f 7370 	mvn.w	r3, #960	; 0x3c0
 800eed6:	f8df b27c 	ldr.w	fp, [pc, #636]	; 800f154 <main+0x414>
  GPIOE->CRH = config->PEData.crh;
 800eeda:	f8c2 c404 	str.w	ip, [r2, #1028]	; 0x404
  GPIOE->CRL = config->PEData.crl;
 800eede:	f8c2 c400 	str.w	ip, [r2, #1024]	; 0x400
  GPIOF->ODR = config->PFData.odr;
 800eee2:	f8cb 300c 	str.w	r3, [fp, #12]
  GPIOF->CRH = config->PFData.crh;
  GPIOF->CRL = config->PFData.crl;
#if STM32_HAS_GPIOG || defined(__DOXYGEN__)
  GPIOG->ODR = config->PGData.odr;
 800eee6:	f46f 6300 	mvn.w	r3, #2048	; 0x800
  GPIOE->ODR = config->PEData.odr;
 800eeea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  GPIOF->CRH = config->PFData.crh;
 800eeee:	4a9a      	ldr	r2, [pc, #616]	; (800f158 <main+0x418>)
  GPIOG->ODR = config->PGData.odr;
 800eef0:	f10a 5a7e 	add.w	sl, sl, #1065353216	; 0x3f800000
  GPIOF->CRH = config->PFData.crh;
 800eef4:	f8cb 2004 	str.w	r2, [fp, #4]
  GPIOF->CRL = config->PFData.crl;
 800eef8:	4a98      	ldr	r2, [pc, #608]	; (800f15c <main+0x41c>)
  GPIOG->ODR = config->PGData.odr;
 800eefa:	f50a 3a90 	add.w	sl, sl, #73728	; 0x12000
  GPIOF->CRL = config->PFData.crl;
 800eefe:	f8cb 2000 	str.w	r2, [fp]
  GPIOG->ODR = config->PGData.odr;
 800ef02:	f8ca 300c 	str.w	r3, [sl, #12]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800ef06:	f06f 036f 	mvn.w	r3, #111	; 0x6f
  GPIOG->CRH = config->PGData.crh;
 800ef0a:	f102 5284 	add.w	r2, r2, #276824064	; 0x10800000
 800ef0e:	f502 2277 	add.w	r2, r2, #1011712	; 0xf7000
 800ef12:	f602 72f9 	addw	r2, r2, #4089	; 0xff9
 800ef16:	f8ca 2004 	str.w	r2, [sl, #4]
  GPIOG->CRL = config->PGData.crl;
 800ef1a:	f502 02e1 	add.w	r2, r2, #7372800	; 0x708000
 800ef1e:	3207      	adds	r2, #7
 800ef20:	f8ca 2000 	str.w	r2, [sl]
  usbp->state        = USB_STOP;
 800ef24:	4e8e      	ldr	r6, [pc, #568]	; (800f160 <main+0x420>)
  sdcp->vmt      = &sdc_vmt;
 800ef26:	4a8f      	ldr	r2, [pc, #572]	; (800f164 <main+0x424>)
 800ef28:	4630      	mov	r0, r6
 800ef2a:	602a      	str	r2, [r5, #0]
 800ef2c:	f887 3331 	strb.w	r3, [r7, #817]	; 0x331
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800ef30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  SDCD1.sdio   = SDIO;
 800ef34:	4a8c      	ldr	r2, [pc, #560]	; (800f168 <main+0x428>)
 800ef36:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    usbp->in_params[i]  = NULL;
 800ef3a:	2100      	movs	r1, #0
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800ef3c:	607b      	str	r3, [r7, #4]
  usbp->state        = USB_STOP;
 800ef3e:	f800 eb2c 	strb.w	lr, [r0], #44
 800ef42:	64aa      	str	r2, [r5, #72]	; 0x48
    usbp->in_params[i]  = NULL;
 800ef44:	2238      	movs	r2, #56	; 0x38
 800ef46:	f7f1 fa3b 	bl	80003c0 <memset>
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800ef4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800ef4e:	2301      	movs	r3, #1
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800ef50:	f648 4e9f 	movw	lr, #35999	; 0x8c9f
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800ef54:	f64f 7cff 	movw	ip, #65535	; 0xffff
  ST_ENABLE_CLOCK();
 800ef58:	f8d9 101c 	ldr.w	r1, [r9, #28]
  usbp->transmitting = 0;
 800ef5c:	e9c6 4401 	strd	r4, r4, [r6, #4]
 800ef60:	f041 0101 	orr.w	r1, r1, #1
 800ef64:	f8c9 101c 	str.w	r1, [r9, #28]
 800ef68:	f8d9 101c 	ldr.w	r1, [r9, #28]
  ch_system.state = ch_sys_initializing;
 800ef6c:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 800f16c <main+0x42c>
  ST_ENABLE_STOP();
 800ef70:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800f170 <main+0x430>
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  tcp->offset = (rtcnt_t)0;
 800ef74:	e9c9 4401 	strd	r4, r4, [r9, #4]
 800ef78:	f8db 1004 	ldr.w	r1, [fp, #4]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800ef7c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800ef80:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800ef84:	f8cb 1004 	str.w	r1, [fp, #4]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800ef88:	f8c2 e028 	str.w	lr, [r2, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800ef8c:	f8c2 c02c 	str.w	ip, [r2, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 800ef90:	6194      	str	r4, [r2, #24]
  STM32_ST_TIM->CCR[0] = 0;
 800ef92:	6354      	str	r4, [r2, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 800ef94:	60d4      	str	r4, [r2, #12]
  STM32_ST_TIM->CR2    = 0;
 800ef96:	6054      	str	r4, [r2, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800ef98:	6153      	str	r3, [r2, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 800ef9a:	6013      	str	r3, [r2, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800ef9c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800efa0:	f887 331c 	strb.w	r3, [r7, #796]	; 0x31c
 800efa4:	f04f 0301 	mov.w	r3, #1
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800efa8:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800efac:	6038      	str	r0, [r7, #0]
 800efae:	f889 3000 	strb.w	r3, [r9]
  tmp->best       = (rtcnt_t)-1;
 800efb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  tmp->cumulative = (rttime_t)0;
 800efb6:	2200      	movs	r2, #0
  tmp->worst      = (rtcnt_t)0;
 800efb8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
  tmp->cumulative = (rttime_t)0;
 800efbc:	2300      	movs	r3, #0
}
 800efbe:	f04f 0a04 	mov.w	sl, #4
  tmp->n          = (ucnt_t)0;
 800efc2:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  tmp->cumulative = (rttime_t)0;
 800efc6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800efca:	af0c      	add	r7, sp, #48	; 0x30
  chTMObjectInit(&tm);
  i = TM_CALIBRATION_LOOP;
  do {
    chTMStartMeasurementX(&tm);
 800efcc:	4638      	mov	r0, r7
 800efce:	f7f5 fc57 	bl	8004880 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 800efd2:	4638      	mov	r0, r7
 800efd4:	f7f5 fc5c 	bl	8004890 <chTMStopMeasurementX>
    i--;
  } while (i > 0U);
 800efd8:	f1ba 0a01 	subs.w	sl, sl, #1
 800efdc:	d1f6      	bne.n	800efcc <main+0x28c>
  mp->align = align;
 800efde:	2204      	movs	r2, #4
  mp->object_size = size;
 800efe0:	2014      	movs	r0, #20
 800efe2:	211c      	movs	r1, #28
  qp->next = qp;
 800efe4:	4b63      	ldr	r3, [pc, #396]	; (800f174 <main+0x434>)
  ch_memcore.basemem = __heap_base__;
 800efe6:	f8df c190 	ldr.w	ip, [pc, #400]	; 800f178 <main+0x438>
 800efea:	6198      	str	r0, [r3, #24]
  mp->align = align;
 800efec:	61da      	str	r2, [r3, #28]
 800efee:	4863      	ldr	r0, [pc, #396]	; (800f17c <main+0x43c>)
 800eff0:	635a      	str	r2, [r3, #52]	; 0x34
  ch_memcore.topmem  = __heap_end__;
 800eff2:	4a63      	ldr	r2, [pc, #396]	; (800f180 <main+0x440>)
  mp->object_size = size;
 800eff4:	6319      	str	r1, [r3, #48]	; 0x30
  default_heap.provider = chCoreAllocAlignedWithOffset;
 800eff6:	4963      	ldr	r1, [pc, #396]	; (800f184 <main+0x444>)
 800eff8:	e9cc 0200 	strd	r0, r2, [ip]
  map->size = (size_t)(ch_memcore.topmem - ch_memcore.basemem);
 800effc:	1a12      	subs	r2, r2, r0
 800effe:	608a      	str	r2, [r1, #8]
  mp->provider = provider;
 800f000:	4a61      	ldr	r2, [pc, #388]	; (800f188 <main+0x448>)
  core_id = port_get_core_id();
#else
  core_id = 0U;
#endif
  chDbgAssert(ch_system.instances[core_id] == NULL, "instance already registered");
  ch_system.instances[core_id] = oip;
 800f002:	4c62      	ldr	r4, [pc, #392]	; (800f18c <main+0x44c>)
 800f004:	621a      	str	r2, [r3, #32]
 800f006:	639a      	str	r2, [r3, #56]	; 0x38
  tcp->offset = tm.best;
 800f008:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  map->base = ch_memcore.basemem;
 800f00a:	6048      	str	r0, [r1, #4]
 800f00c:	f8c9 2008 	str.w	r2, [r9, #8]
 800f010:	4a5f      	ldr	r2, [pc, #380]	; (800f190 <main+0x450>)
  qp->prev = qp;
 800f012:	e9c3 3300 	strd	r3, r3, [r3]
 800f016:	600a      	str	r2, [r1, #0]

  /* Core associated to this instance.*/
  oip->core_id = core_id;

  /* Keeping a reference to the configuration data.*/
  oip->config = oicp;
 800f018:	4a5e      	ldr	r2, [pc, #376]	; (800f194 <main+0x454>)
  mp->owner = NULL;
 800f01a:	f8c3 a008 	str.w	sl, [r3, #8]
 800f01e:	63a2      	str	r2, [r4, #56]	; 0x38
  qp->next = qp;
 800f020:	f101 0214 	add.w	r2, r1, #20
  qp->prev = qp;
 800f024:	e9c1 2205 	strd	r2, r2, [r1, #20]
  dlp->next = (dyn_element_t *)dlp;
 800f028:	f103 0210 	add.w	r2, r3, #16
 800f02c:	611a      	str	r2, [r3, #16]
 800f02e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800f032:	625a      	str	r2, [r3, #36]	; 0x24
 800f034:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800f038:	629a      	str	r2, [r3, #40]	; 0x28
 800f03a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800f03e:	63da      	str	r2, [r3, #60]	; 0x3c
 800f040:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800f044:	641a      	str	r2, [r3, #64]	; 0x40
 800f046:	f103 0244 	add.w	r2, r3, #68	; 0x44
  mp->next = NULL;
 800f04a:	f8c3 a014 	str.w	sl, [r3, #20]
 800f04e:	f8c3 a02c 	str.w	sl, [r3, #44]	; 0x2c
  H_FREE_PAGES(&default_heap.header) = 0;
 800f052:	e9c1 aa03 	strd	sl, sl, [r1, #12]
 800f056:	f8c1 a01c 	str.w	sl, [r1, #28]
  ch_system.instances[core_id] = oip;
 800f05a:	f8c9 4004 	str.w	r4, [r9, #4]
  oip->core_id = core_id;
 800f05e:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
 800f062:	645a      	str	r2, [r3, #68]	; 0x44
 800f064:	2030      	movs	r0, #48	; 0x30
 800f066:	f380 8811 	msr	BASEPRI, r0
  __ASM volatile ("cpsie i" : : : "memory");
 800f06a:	b662      	cpsie	i
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800f06c:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  pqp->prio = (tprio_t)0;
 800f070:	e9c4 4a01 	strd	r4, sl, [r4, #4]
  tp->epending          = (eventmask_t)0;
 800f074:	e9c4 aa1e 	strd	sl, sl, [r4, #120]	; 0x78
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800f078:	4b47      	ldr	r3, [pc, #284]	; (800f198 <main+0x458>)
 *
 * @notapi
 */
static inline void __rfcu_object_init(rfcu_t *rfcup) {

  rfcup->mask = (rfcu_mask_t)0;
 800f07a:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
 800f07e:	68d9      	ldr	r1, [r3, #12]
  reg_value  =  (reg_value                                   |
 800f080:	4a46      	ldr	r2, [pc, #280]	; (800f19c <main+0x45c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800f082:	ea01 010c 	and.w	r1, r1, ip
  reg_value  =  (reg_value                                   |
 800f086:	430a      	orrs	r2, r1
  oip->rlist.current->wabase = oicp->mainthread_base;
  oip->rlist.current->waend  = oicp->mainthread_end;
#endif

  /* Setting up the caller as current thread.*/
  oip->rlist.current->state = CH_STATE_CURRENT;
 800f088:	2101      	movs	r1, #1
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f08a:	f04f 0b20 	mov.w	fp, #32

  ch_dlist_init(&vtlp->dlist);
#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  vtlp->lasttime = (systime_t)0;
 800f08e:	f8a4 a01c 	strh.w	sl, [r4, #28]
  tp->owner             = oip;
 800f092:	6564      	str	r4, [r4, #84]	; 0x54
  SCB->AIRCR =  reg_value;
 800f094:	60da      	str	r2, [r3, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800f096:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800f09a:	f8df c104 	ldr.w	ip, [pc, #260]	; 800f1a0 <main+0x460>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800f09e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800f0a2:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800f0a6:	f8dc 2000 	ldr.w	r2, [ip]
 800f0aa:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
 800f0ae:	430a      	orrs	r2, r1
 800f0b0:	f8cc 2000 	str.w	r2, [ip]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f0b4:	f883 b01f 	strb.w	fp, [r3, #31]
 800f0b8:	f883 0022 	strb.w	r0, [r3, #34]	; 0x22
  tp->hdr.pqueue.prio   = prio;
 800f0bc:	2380      	movs	r3, #128	; 0x80
 800f0be:	f8de b024 	ldr.w	fp, [lr, #36]	; 0x24
 800f0c2:	6463      	str	r3, [r4, #68]	; 0x44
  tp->realprio          = prio;
 800f0c4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  tp->name              = name;
 800f0c8:	4b36      	ldr	r3, [pc, #216]	; (800f1a4 <main+0x464>)
  dlhp->delta = (sysinterval_t)-1;
 800f0ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f0ce:	65a3      	str	r3, [r4, #88]	; 0x58
  dlhp->next  = dlhp;
 800f0d0:	f104 0310 	add.w	r3, r4, #16
  dlhp->prev  = dlhp;
 800f0d4:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->next       = qp;
 800f0d8:	f104 0328 	add.w	r3, r4, #40	; 0x28
  p->prev       = qp->prev;
 800f0dc:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  p->prev->next = p;
 800f0e0:	f104 034c 	add.w	r3, r4, #76	; 0x4c
  qp->prev      = p;
 800f0e4:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
  qp->next = qp;
 800f0e8:	f104 0370 	add.w	r3, r4, #112	; 0x70
  qp->prev = qp;
 800f0ec:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  lp->next = lp;
 800f0f0:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800f0f4:	66e3      	str	r3, [r4, #108]	; 0x6c
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
#if CH_CFG_USE_TIMESTAMP == TRUE
  vtlp->laststamp = (systimestamp_t)chVTGetSystemTimeX();
 800f0f6:	4653      	mov	r3, sl
  dlhp->delta = (sysinterval_t)-1;
 800f0f8:	61a2      	str	r2, [r4, #24]
 800f0fa:	fa1f f28b 	uxth.w	r2, fp
 800f0fe:	e9c4 2308 	strd	r2, r3, [r4, #32]
  oip->rlist.current->wabase = oicp->mainthread_base;
 800f102:	4b29      	ldr	r3, [pc, #164]	; (800f1a8 <main+0x468>)
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
 800f104:	f104 0e3c 	add.w	lr, r4, #60	; 0x3c
  pqp->next = pqp;
 800f108:	6024      	str	r4, [r4, #0]
 *
 * @notapi
 */
static inline void __dbg_object_init(system_debug_t *sdp) {

  sdp->panic_msg = NULL;
 800f10a:	f8c4 a088 	str.w	sl, [r4, #136]	; 0x88
 800f10e:	f8c4 e00c 	str.w	lr, [r4, #12]
  oip->rlist.current->wabase = oicp->mainthread_base;
 800f112:	65e3      	str	r3, [r4, #92]	; 0x5c
  oip->rlist.current->waend  = oicp->mainthread_end;
 800f114:	4b25      	ldr	r3, [pc, #148]	; (800f1ac <main+0x46c>)
  /* User instance initialization hook.*/
  CH_CFG_OS_INSTANCE_INIT_HOOK(oip);

#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
    thread_descriptor_t idle_descriptor = {
 800f116:	f8df c098 	ldr.w	ip, [pc, #152]	; 800f1b0 <main+0x470>
  oip->rlist.current->waend  = oicp->mainthread_end;
 800f11a:	6623      	str	r3, [r4, #96]	; 0x60
    thread_descriptor_t idle_descriptor = {
 800f11c:	4b25      	ldr	r3, [pc, #148]	; (800f1b4 <main+0x474>)
  return chSchReadyI(chThdCreateSuspendedI(tdp));
 800f11e:	4638      	mov	r0, r7
 800f120:	e04a      	b.n	800f1b8 <main+0x478>
 800f122:	bf00      	nop
 800f124:	e000e100 	.word	0xe000e100
 800f128:	40020000 	.word	0x40020000
 800f12c:	40020400 	.word	0x40020400
 800f130:	444884bb 	.word	0x444884bb
 800f134:	b4b84b34 	.word	0xb4b84b34
 800f138:	40010c00 	.word	0x40010c00
 800f13c:	ff844383 	.word	0xff844383
 800f140:	200008e8 	.word	0x200008e8
 800f144:	40011000 	.word	0x40011000
 800f148:	43808888 	.word	0x43808888
 800f14c:	40011400 	.word	0x40011400
 800f150:	b4bb4bbb 	.word	0xb4bb4bbb
 800f154:	40011c00 	.word	0x40011c00
 800f158:	bbbb8833 	.word	0xbbbb8833
 800f15c:	33bbbbbb 	.word	0x33bbbbbb
 800f160:	20000fc4 	.word	0x20000fc4
 800f164:	08013324 	.word	0x08013324
 800f168:	40018000 	.word	0x40018000
 800f16c:	200010e8 	.word	0x200010e8
 800f170:	e0042000 	.word	0xe0042000
 800f174:	20001e90 	.word	0x20001e90
 800f178:	200010e0 	.word	0x200010e0
 800f17c:	20002e10 	.word	0x20002e10
 800f180:	20018000 	.word	0x20018000
 800f184:	2000111c 	.word	0x2000111c
 800f188:	08000d61 	.word	0x08000d61
 800f18c:	20001050 	.word	0x20001050
 800f190:	08000c81 	.word	0x08000c81
 800f194:	080132ac 	.word	0x080132ac
 800f198:	e000ed00 	.word	0xe000ed00
 800f19c:	05fa0300 	.word	0x05fa0300
 800f1a0:	e0001000 	.word	0xe0001000
 800f1a4:	080132c0 	.word	0x080132c0
 800f1a8:	20000400 	.word	0x20000400
 800f1ac:	20000800 	.word	0x20000800
 800f1b0:	20001d60 	.word	0x20001d60
 800f1b4:	08013030 	.word	0x08013030
 800f1b8:	e9cd 3c0c 	strd	r3, ip, [sp, #48]	; 0x30
 800f1bc:	f50c 7398 	add.w	r3, ip, #304	; 0x130
 800f1c0:	930e      	str	r3, [sp, #56]	; 0x38
 800f1c2:	4bc2      	ldr	r3, [pc, #776]	; (800f4cc <main+0x78c>)
  oip->rlist.current->state = CH_STATE_CURRENT;
 800f1c4:	f8a4 1064 	strh.w	r1, [r4, #100]	; 0x64
  tp->refs              = (trefs_t)1;
 800f1c8:	f884 1066 	strb.w	r1, [r4, #102]	; 0x66
    thread_descriptor_t idle_descriptor = {
 800f1cc:	9310      	str	r3, [sp, #64]	; 0x40
 800f1ce:	910f      	str	r1, [sp, #60]	; 0x3c
 800f1d0:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  return chSchReadyI(chThdCreateSuspendedI(tdp));
 800f1d4:	f7f5 f9f4 	bl	80045c0 <chThdCreateSuspendedI>
 800f1d8:	4603      	mov	r3, r0
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800f1da:	6982      	ldr	r2, [r0, #24]
  tp->state = CH_STATE_READY;
 800f1dc:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
  } while (unlikely(pqp->prio >= p->prio));
 800f1e0:	6880      	ldr	r0, [r0, #8]
    pqp = pqp->next;
 800f1e2:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800f1e4:	6891      	ldr	r1, [r2, #8]
 800f1e6:	4281      	cmp	r1, r0
 800f1e8:	d2fb      	bcs.n	800f1e2 <main+0x4a2>
  ch_system.state = ch_sys_running;
 800f1ea:	2102      	movs	r1, #2
  p->prev       = pqp->prev;
 800f1ec:	6850      	ldr	r0, [r2, #4]
  p->next       = pqp;
 800f1ee:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
 800f1f0:	6058      	str	r0, [r3, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800f1f2:	f04f 0a00 	mov.w	sl, #0
  p->prev->next = p;
 800f1f6:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 800f1f8:	6053      	str	r3, [r2, #4]
 800f1fa:	f889 1000 	strb.w	r1, [r9]
 800f1fe:	f38a 8811 	msr	BASEPRI, sl
  sdup->state = SDU_STOP;
 800f202:	2301      	movs	r3, #1
  sdup->vmt = &vmt;
 800f204:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800f4d0 <main+0x790>
  ibqp->bsize     = size + sizeof (size_t);
 800f208:	f44f 7082 	mov.w	r0, #260	; 0x104
 800f20c:	464a      	mov	r2, r9
  sdup->state = SDU_STOP;
 800f20e:	f889 3008 	strb.w	r3, [r9, #8]
  ibqp->suspended = suspended;
 800f212:	f889 3014 	strb.w	r3, [r9, #20]
  obqp->suspended = suspended;
 800f216:	f889 304c 	strb.w	r3, [r9, #76]	; 0x4c
  ibqp->notify    = infy;
 800f21a:	4bae      	ldr	r3, [pc, #696]	; (800f4d4 <main+0x794>)
  sdup->vmt = &vmt;
 800f21c:	f8df c2b8 	ldr.w	ip, [pc, #696]	; 800f4d8 <main+0x798>
 800f220:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
  obqp->notify    = onfy;
 800f224:	4bad      	ldr	r3, [pc, #692]	; (800f4dc <main+0x79c>)
 800f226:	f842 cb04 	str.w	ip, [r2], #4
 800f22a:	f8c9 3074 	str.w	r3, [r9, #116]	; 0x74
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 800f22e:	f509 7321 	add.w	r3, r9, #644	; 0x284
  obqp->bwrptr    = bp;
 800f232:	e9c9 3315 	strd	r3, r3, [r9, #84]	; 0x54
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 800f236:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
  obqp->buffers   = bp;
 800f23a:	f8c9 3068 	str.w	r3, [r9, #104]	; 0x68
  ibqp->brdptr    = bp;
 800f23e:	f109 037c 	add.w	r3, r9, #124	; 0x7c
  ibqp->bwrptr    = bp;
 800f242:	e9c9 3307 	strd	r3, r3, [r9, #28]
  ibqp->buffers   = bp;
 800f246:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
  qp->next = qp;
 800f24a:	f109 030c 	add.w	r3, r9, #12
  qp->prev = qp;
 800f24e:	e9c9 3303 	strd	r3, r3, [r9, #12]
  qp->next = qp;
 800f252:	f109 0344 	add.w	r3, r9, #68	; 0x44
  qp->prev = qp;
 800f256:	e9c9 3311 	strd	r3, r3, [r9, #68]	; 0x44
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 800f25a:	f209 438c 	addw	r3, r9, #1164	; 0x48c
  ibqp->bcounter  = 0;
 800f25e:	f8c9 a018 	str.w	sl, [r9, #24]
 800f262:	f04f 0b30 	mov.w	fp, #48	; 0x30
  ibqp->top       = NULL;
 800f266:	e9c9 aa0d 	strd	sl, sl, [r9, #52]	; 0x34
  obqp->top       = NULL;
 800f26a:	e9c9 aa1b 	strd	sl, sl, [r9, #108]	; 0x6c
  ibqp->bn        = n;
 800f26e:	f8c9 102c 	str.w	r1, [r9, #44]	; 0x2c
  obqp->bcounter  = n;
 800f272:	f8c9 1050 	str.w	r1, [r9, #80]	; 0x50
  obqp->bn        = n;
 800f276:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
  ibqp->link      = link;
 800f27a:	f8c9 9040 	str.w	r9, [r9, #64]	; 0x40
  obqp->link      = link;
 800f27e:	f8c9 9078 	str.w	r9, [r9, #120]	; 0x78
  esp->next = (event_listener_t *)esp;
 800f282:	f8c9 2004 	str.w	r2, [r9, #4]
  ibqp->bsize     = size + sizeof (size_t);
 800f286:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
  obqp->bsize     = size + sizeof (size_t);
 800f28a:	f8c9 0060 	str.w	r0, [r9, #96]	; 0x60
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 800f28e:	f8c9 305c 	str.w	r3, [r9, #92]	; 0x5c
 800f292:	f38b 8811 	msr	BASEPRI, fp
  sdup->config = config;
 800f296:	4b92      	ldr	r3, [pc, #584]	; (800f4e0 <main+0x7a0>)
  sdup->state = SDU_READY;
 800f298:	f889 1008 	strb.w	r1, [r9, #8]
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 800f29c:	f8c6 902c 	str.w	r9, [r6, #44]	; 0x2c
  usbp->out_params[config->bulk_out - 1U] = sdup;
 800f2a0:	f8c6 9048 	str.w	r9, [r6, #72]	; 0x48
    usbp->in_params[config->int_in - 1U]  = sdup;
 800f2a4:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30
  sdup->config = config;
 800f2a8:	f8c9 348c 	str.w	r3, [r9, #1164]	; 0x48c
 800f2ac:	f38a 8811 	msr	BASEPRI, sl
  /*
   * Activates the USB driver and then the USB bus pull-up on D+.
   * Note, a delay is inserted in order to not have to disconnect the cable
   * after a reset.
   */
  usbDisconnectBus(serusbcfg.usbp);
 800f2b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800f2b4:	4b8b      	ldr	r3, [pc, #556]	; (800f4e4 <main+0x7a4>)
 800f2b6:	611a      	str	r2, [r3, #16]
 800f2b8:	f38b 8811 	msr	BASEPRI, fp
 800f2bc:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800f2c0:	2008      	movs	r0, #8
 800f2c2:	f7f3 fd0d 	bl	8002ce0 <chSchGoSleepTimeoutS>
 800f2c6:	f38a 8811 	msr	BASEPRI, sl
 800f2ca:	f38b 8811 	msr	BASEPRI, fp
  usbp->config = config;
 800f2ce:	4b86      	ldr	r3, [pc, #536]	; (800f4e8 <main+0x7a8>)
    usbp->epc[i] = NULL;
 800f2d0:	2220      	movs	r2, #32
 800f2d2:	4651      	mov	r1, sl
 800f2d4:	4885      	ldr	r0, [pc, #532]	; (800f4ec <main+0x7ac>)
  usbp->config = config;
 800f2d6:	6073      	str	r3, [r6, #4]
    usbp->epc[i] = NULL;
 800f2d8:	f7f1 f872 	bl	80003c0 <memset>
  if (usbp->state == USB_STOP) {
 800f2dc:	f896 e000 	ldrb.w	lr, [r6]
 800f2e0:	f1be 0f01 	cmp.w	lr, #1
 800f2e4:	d139      	bne.n	800f35a <main+0x61a>
  usbp->pmnext = 64U;
 800f2e6:	2340      	movs	r3, #64	; 0x40
 800f2e8:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
      rccEnableUSB(true);
 800f2ec:	4b80      	ldr	r3, [pc, #512]	; (800f4f0 <main+0x7b0>)
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800f2ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800f2f2:	69d9      	ldr	r1, [r3, #28]
 800f2f4:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800f2f8:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800f2fc:	61d9      	str	r1, [r3, #28]
 800f2fe:	69d9      	ldr	r1, [r3, #28]
      rccResetUSB();
 800f300:	6919      	ldr	r1, [r3, #16]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800f302:	f04f 0bd0 	mov.w	fp, #208	; 0xd0
 800f306:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800f30a:	6119      	str	r1, [r3, #16]
 800f30c:	6919      	ldr	r1, [r3, #16]
      STM32_USB->CNTR = CNTR_FRES;
 800f30e:	4a79      	ldr	r2, [pc, #484]	; (800f4f4 <main+0x7b4>)
      rccResetUSB();
 800f310:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800f314:	6119      	str	r1, [r3, #16]
 800f316:	f06f 011f 	mvn.w	r1, #31
 800f31a:	691b      	ldr	r3, [r3, #16]
 800f31c:	4b76      	ldr	r3, [pc, #472]	; (800f4f8 <main+0x7b8>)
      STM32_USB->CNTR = CNTR_FRES;
 800f31e:	f8c2 e040 	str.w	lr, [r2, #64]	; 0x40
 800f322:	f883 b313 	strb.w	fp, [r3, #787]	; 0x313
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800f326:	f8c3 c180 	str.w	ip, [r3, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800f32a:	f8c3 c000 	str.w	ip, [r3]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800f32e:	f883 1314 	strb.w	r1, [r3, #788]	; 0x314
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800f332:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800f336:	6018      	str	r0, [r3, #0]
  STM32_USB->DADDR  = DADDR_EF;
 800f338:	2380      	movs	r3, #128	; 0x80
      STM32_USB->CNTR = 0U;
 800f33a:	f8c2 a040 	str.w	sl, [r2, #64]	; 0x40
  STM32_USB->BTABLE = BTABLE_ADDR;
 800f33e:	f8c2 a050 	str.w	sl, [r2, #80]	; 0x50
  STM32_USB->ISTR   = 0U;
 800f342:	f8c2 a044 	str.w	sl, [r2, #68]	; 0x44
  STM32_USB->DADDR  = DADDR_EF;
 800f346:	64d3      	str	r3, [r2, #76]	; 0x4c
  STM32_USB->CNTR = cntr;
 800f348:	f44f 433e 	mov.w	r3, #48640	; 0xbe00
 800f34c:	6413      	str	r3, [r2, #64]	; 0x40
  usbp->epc[0] = &ep0config;
 800f34e:	4b6b      	ldr	r3, [pc, #428]	; (800f4fc <main+0x7bc>)
  usb_lld_init_endpoint(usbp, 0U);
 800f350:	4651      	mov	r1, sl
 800f352:	486b      	ldr	r0, [pc, #428]	; (800f500 <main+0x7c0>)
  usbp->epc[0] = &ep0config;
 800f354:	60f3      	str	r3, [r6, #12]
  usb_lld_init_endpoint(usbp, 0U);
 800f356:	f7f3 fa13 	bl	8002780 <usb_lld_init_endpoint>
    usbp->state = USB_READY;
 800f35a:	2302      	movs	r3, #2
 800f35c:	2200      	movs	r2, #0
 800f35e:	7033      	strb	r3, [r6, #0]
 800f360:	f382 8811 	msr	BASEPRI, r2
  chThdSleepMilliseconds(1500);
  usbStart(serusbcfg.usbp, &usbcfg);
  usbConnectBus(serusbcfg.usbp);
 800f364:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800f368:	4b5e      	ldr	r3, [pc, #376]	; (800f4e4 <main+0x7a4>)
 800f36a:	4e66      	ldr	r6, [pc, #408]	; (800f504 <main+0x7c4>)
 800f36c:	6159      	str	r1, [r3, #20]
 800f36e:	2330      	movs	r3, #48	; 0x30
 800f370:	6036      	str	r6, [r6, #0]
 800f372:	f383 8811 	msr	BASEPRI, r3
  sdcp->dmamode = STM32_DMA_CR_CHSEL(SDIO_DMA_CHANNEL) |
 800f376:	f44f 536a 	mov.w	r3, #14976	; 0x3a80
 800f37a:	642b      	str	r3, [r5, #64]	; 0x40
    sdcp->config = &sdc_default_cfg;
 800f37c:	4b62      	ldr	r3, [pc, #392]	; (800f508 <main+0x7c8>)
 800f37e:	62eb      	str	r3, [r5, #44]	; 0x2c
  if (sdcp->state == BLK_STOP) {
 800f380:	792b      	ldrb	r3, [r5, #4]
 800f382:	2b01      	cmp	r3, #1
 800f384:	f000 80da 	beq.w	800f53c <main+0x7fc>
  sdcp->sdio->POWER  = 0U;
 800f388:	2300      	movs	r3, #0
  sdcp->sdio->ICR    = SDIO_ICR_ALL_FLAGS;
 800f38a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    sdcp->state = BLK_ACTIVE;
 800f38e:	2002      	movs	r0, #2
  sdcp->sdio->POWER  = 0U;
 800f390:	6caa      	ldr	r2, [r5, #72]	; 0x48
 800f392:	6013      	str	r3, [r2, #0]
  sdcp->sdio->CLKCR  = 0U;
 800f394:	6053      	str	r3, [r2, #4]
  sdcp->sdio->DCTRL  = 0U;
 800f396:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f398:	7128      	strb	r0, [r5, #4]
  sdcp->sdio->DTIMER = 0U;
 800f39a:	6253      	str	r3, [r2, #36]	; 0x24
  sdcp->sdio->ICR    = SDIO_ICR_ALL_FLAGS;
 800f39c:	6391      	str	r1, [r2, #56]	; 0x38
 800f39e:	f383 8811 	msr	BASEPRI, r3
 800f3a2:	f8df a168 	ldr.w	sl, [pc, #360]	; 800f50c <main+0x7cc>
 800f3a6:	f8df 8168 	ldr.w	r8, [pc, #360]	; 800f510 <main+0x7d0>
 800f3aa:	2330      	movs	r3, #48	; 0x30
 800f3ac:	f8ca a000 	str.w	sl, [sl]
 800f3b0:	f8c8 8000 	str.w	r8, [r8]
 800f3b4:	f383 8811 	msr	BASEPRI, r3
  cnt = POLLING_INTERVAL;
 800f3b8:	220a      	movs	r2, #10
 800f3ba:	4b56      	ldr	r3, [pc, #344]	; (800f514 <main+0x7d4>)
  return (bool)(vtp->dlist.next != NULL);
 800f3bc:	4856      	ldr	r0, [pc, #344]	; (800f518 <main+0x7d8>)
 800f3be:	601a      	str	r2, [r3, #0]
  if (chVTIsArmedI(vtp)) {
 800f3c0:	6803      	ldr	r3, [r0, #0]
 800f3c2:	b113      	cbz	r3, 800f3ca <main+0x68a>
    chVTDoResetI(vtp);
 800f3c4:	f7f3 fc34 	bl	8002c30 <chVTDoResetI>
 800f3c8:	4853      	ldr	r0, [pc, #332]	; (800f518 <main+0x7d8>)
  vtp->reload  = (sysinterval_t)0;
 800f3ca:	f04f 0b00 	mov.w	fp, #0
  vtp->func    = vtfunc;
 800f3ce:	4b53      	ldr	r3, [pc, #332]	; (800f51c <main+0x7dc>)
  vtp->par     = par;
 800f3d0:	6105      	str	r5, [r0, #16]
  vtp->func    = vtfunc;
 800f3d2:	60c3      	str	r3, [r0, #12]
  vtp->reload  = (sysinterval_t)0;
 800f3d4:	f8c0 b014 	str.w	fp, [r0, #20]
  vt_enqueue(vtlp, vtp, delay);
 800f3d8:	2114      	movs	r1, #20
 800f3da:	484f      	ldr	r0, [pc, #316]	; (800f518 <main+0x7d8>)
 800f3dc:	f7ff fba8 	bl	800eb30 <vt_enqueue.constprop.0>
 800f3e0:	f38b 8811 	msr	BASEPRI, fp
  tmr_init(&SDCD1);

  /*
   * Creates the blinker thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 800f3e4:	2280      	movs	r2, #128	; 0x80
 800f3e6:	f44f 71b8 	mov.w	r1, #368	; 0x170
 800f3ea:	4b4d      	ldr	r3, [pc, #308]	; (800f520 <main+0x7e0>)
 800f3ec:	f8cd b000 	str.w	fp, [sp]
 800f3f0:	484c      	ldr	r0, [pc, #304]	; (800f524 <main+0x7e4>)
 800f3f2:	f7f5 f92d 	bl	8004650 <chThdCreateStatic>
 800f3f6:	2230      	movs	r2, #48	; 0x30
 800f3f8:	f382 8811 	msr	BASEPRI, r2
  elp->events   = events;
 800f3fc:	2501      	movs	r5, #1
  elp->wflags   = wflags;
 800f3fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  elp->next     = esp->next;
 800f402:	f8da 1000 	ldr.w	r1, [sl]
  elp->flags    = (eventflags_t)0;
 800f406:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  elp->next     = esp->next;
 800f40a:	910c      	str	r1, [sp, #48]	; 0x30
  return __sch_get_currthread();
 800f40c:	68e1      	ldr	r1, [r4, #12]
  esp->next     = elp;
 800f40e:	f8ca 7000 	str.w	r7, [sl]
  elp->events   = events;
 800f412:	e9cd 150d 	strd	r1, r5, [sp, #52]	; 0x34
  elp->wflags   = wflags;
 800f416:	9310      	str	r3, [sp, #64]	; 0x40
 800f418:	f38b 8811 	msr	BASEPRI, fp
 800f41c:	f382 8811 	msr	BASEPRI, r2
  elp->events   = events;
 800f420:	2102      	movs	r1, #2
 800f422:	9109      	str	r1, [sp, #36]	; 0x24
  elp->next     = esp->next;
 800f424:	f8d8 1000 	ldr.w	r1, [r8]
  elp->wflags   = wflags;
 800f428:	e9cd b30a 	strd	fp, r3, [sp, #40]	; 0x28
  elp->next     = esp->next;
 800f42c:	9107      	str	r1, [sp, #28]
 800f42e:	68e1      	ldr	r1, [r4, #12]
  elp->listener = currtp;
 800f430:	9108      	str	r1, [sp, #32]
  esp->next     = elp;
 800f432:	a907      	add	r1, sp, #28
 800f434:	f8c8 1000 	str.w	r1, [r8]
 800f438:	f38b 8811 	msr	BASEPRI, fp
 800f43c:	f382 8811 	msr	BASEPRI, r2
  elp->wflags   = wflags;
 800f440:	9306      	str	r3, [sp, #24]
 800f442:	68e3      	ldr	r3, [r4, #12]
  elp->next     = esp->next;
 800f444:	6832      	ldr	r2, [r6, #0]
  elp->listener = currtp;
 800f446:	9303      	str	r3, [sp, #12]
  elp->events   = events;
 800f448:	2304      	movs	r3, #4
 800f44a:	9304      	str	r3, [sp, #16]
  esp->next     = elp;
 800f44c:	ab02      	add	r3, sp, #8
  elp->flags    = (eventflags_t)0;
 800f44e:	f8cd b014 	str.w	fp, [sp, #20]
  elp->next     = esp->next;
 800f452:	9202      	str	r2, [sp, #8]
  esp->next     = elp;
 800f454:	6033      	str	r3, [r6, #0]
 800f456:	f38b 8811 	msr	BASEPRI, fp
 800f45a:	4f33      	ldr	r7, [pc, #204]	; (800f528 <main+0x7e8>)
 800f45c:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 800f52c <main+0x7ec>
 800f460:	4e33      	ldr	r6, [pc, #204]	; (800f530 <main+0x7f0>)
  chEvtRegister(&inserted_event, &el0, 0);
  chEvtRegister(&removed_event, &el1, 1);
  chEvtRegister(&shell_terminated, &el2, 2);
  while (true) {
    if (!shelltp && (SDU1.config->usbp->state == USB_ACTIVE)) {
      shelltp = chThdCreateFromHeap(NULL, SHELL_WA_SIZE,
 800f462:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f534 <main+0x7f4>
    if (!shelltp && (SDU1.config->usbp->state == USB_ACTIVE)) {
 800f466:	6838      	ldr	r0, [r7, #0]
 800f468:	b1e8      	cbz	r0, 800f4a6 <main+0x766>
                                    "shell", NORMALPRIO + 1,
                                    shellThread, (void *)&shell_cfg1);
    }
    chEvtDispatch(evhndl, chEvtWaitOneTimeout(ALL_EVENTS, TIME_MS2I(500)));
 800f46a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f46e:	f7ff f9d7 	bl	800e820 <chEvtWaitOneTimeout.constprop.0>
  while (events != (eventmask_t)0) {
 800f472:	4682      	mov	sl, r0
 800f474:	2800      	cmp	r0, #0
 800f476:	d0f6      	beq.n	800f466 <main+0x726>
  eid = (eventid_t)0;
 800f478:	2400      	movs	r4, #0
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 800f47a:	fa2a f304 	lsr.w	r3, sl, r4
 800f47e:	07db      	lsls	r3, r3, #31
 800f480:	d50f      	bpl.n	800f4a2 <main+0x762>
      events &= ~EVENT_MASK(eid);
 800f482:	fa05 f204 	lsl.w	r2, r5, r4
      handlers[eid](eid);
 800f486:	4620      	mov	r0, r4
 800f488:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
      events &= ~EVENT_MASK(eid);
 800f48c:	ea2a 0a02 	bic.w	sl, sl, r2
      handlers[eid](eid);
 800f490:	3401      	adds	r4, #1
 800f492:	4798      	blx	r3
  while (events != (eventmask_t)0) {
 800f494:	f1ba 0f00 	cmp.w	sl, #0
 800f498:	d0e5      	beq.n	800f466 <main+0x726>
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 800f49a:	fa2a f304 	lsr.w	r3, sl, r4
 800f49e:	07db      	lsls	r3, r3, #31
 800f4a0:	d4ef      	bmi.n	800f482 <main+0x742>
    eid++;
 800f4a2:	3401      	adds	r4, #1
  while (events != (eventmask_t)0) {
 800f4a4:	e7e9      	b.n	800f47a <main+0x73a>
    if (!shelltp && (SDU1.config->usbp->state == USB_ACTIVE)) {
 800f4a6:	f8d9 348c 	ldr.w	r3, [r9, #1164]	; 0x48c
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	781b      	ldrb	r3, [r3, #0]
 800f4ae:	2b04      	cmp	r3, #4
 800f4b0:	d1db      	bne.n	800f46a <main+0x72a>
      shelltp = chThdCreateFromHeap(NULL, SHELL_WA_SIZE,
 800f4b2:	4c21      	ldr	r4, [pc, #132]	; (800f538 <main+0x7f8>)
 800f4b4:	2381      	movs	r3, #129	; 0x81
 800f4b6:	4642      	mov	r2, r8
 800f4b8:	f44f 610f 	mov.w	r1, #2288	; 0x8f0
 800f4bc:	f8cd b004 	str.w	fp, [sp, #4]
 800f4c0:	9400      	str	r4, [sp, #0]
 800f4c2:	f7f6 fa15 	bl	80058f0 <chThdCreateFromHeap>
 800f4c6:	6038      	str	r0, [r7, #0]
 800f4c8:	e7cf      	b.n	800f46a <main+0x72a>
 800f4ca:	bf00      	nop
 800f4cc:	08000c71 	.word	0x08000c71
 800f4d0:	20000b34 	.word	0x20000b34
 800f4d4:	08001a61 	.word	0x08001a61
 800f4d8:	08013368 	.word	0x08013368
 800f4dc:	08000ab1 	.word	0x08000ab1
 800f4e0:	08013348 	.word	0x08013348
 800f4e4:	40010c00 	.word	0x40010c00
 800f4e8:	08013358 	.word	0x08013358
 800f4ec:	20000fd0 	.word	0x20000fd0
 800f4f0:	40021000 	.word	0x40021000
 800f4f4:	40005c00 	.word	0x40005c00
 800f4f8:	e000e100 	.word	0xe000e100
 800f4fc:	08011e0c 	.word	0x08011e0c
 800f500:	20000fc4 	.word	0x20000fc4
 800f504:	2000123c 	.word	0x2000123c
 800f508:	0801331c 	.word	0x0801331c
 800f50c:	20002444 	.word	0x20002444
 800f510:	200025dc 	.word	0x200025dc
 800f514:	20001ed8 	.word	0x20001ed8
 800f518:	20002688 	.word	0x20002688
 800f51c:	0800f5a1 	.word	0x0800f5a1
 800f520:	08009601 	.word	0x08009601
 800f524:	20002ca0 	.word	0x20002ca0
 800f528:	200025e0 	.word	0x200025e0
 800f52c:	08013350 	.word	0x08013350
 800f530:	080132fc 	.word	0x080132fc
 800f534:	08010388 	.word	0x08010388
 800f538:	08006431 	.word	0x08006431
    if ((dma.allocated_mask & mask) == 0U) {
 800f53c:	f8d8 3000 	ldr.w	r3, [r8]
 800f540:	f413 6080 	ands.w	r0, r3, #1024	; 0x400
 800f544:	d125      	bne.n	800f592 <main+0x852>
      dmaStreamDisable(dmastp);
 800f546:	f44f 4e60 	mov.w	lr, #57344	; 0xe000
      dma.allocated_mask  |= mask;
 800f54a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f54e:	f8c8 3000 	str.w	r3, [r8]
        rccEnableDMA2(true);
 800f552:	4b11      	ldr	r3, [pc, #68]	; (800f598 <main+0x858>)
      dmaStreamDisable(dmastp);
 800f554:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
        rccEnableDMA2(true);
 800f558:	6959      	ldr	r1, [r3, #20]
      dma.streams[i].param = param;
 800f55a:	e9c8 0016 	strd	r0, r0, [r8, #88]	; 0x58
        rccEnableDMA2(true);
 800f55e:	f041 0102 	orr.w	r1, r1, #2
 800f562:	6159      	str	r1, [r3, #20]
      dmaStreamDisable(dmastp);
 800f564:	f502 3201 	add.w	r2, r2, #132096	; 0x20400
        rccEnableDMA2(true);
 800f568:	6959      	ldr	r1, [r3, #20]
      dmaStreamDisable(dmastp);
 800f56a:	f8d2 c044 	ldr.w	ip, [r2, #68]	; 0x44
    dmaStreamSetPeripheral(sdcp->dma, &sdcp->sdio->FIFO);
 800f56e:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800f570:	f02c 0c0f 	bic.w	ip, ip, #15
 800f574:	3180      	adds	r1, #128	; 0x80
 800f576:	f8c2 c044 	str.w	ip, [r2, #68]	; 0x44
 800f57a:	f8c2 e004 	str.w	lr, [r2, #4]
      dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 800f57e:	6450      	str	r0, [r2, #68]	; 0x44
 800f580:	64d1      	str	r1, [r2, #76]	; 0x4c
    rccEnableSDIO(true);
 800f582:	695a      	ldr	r2, [r3, #20]
 800f584:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f588:	615a      	str	r2, [r3, #20]
 800f58a:	695b      	ldr	r3, [r3, #20]
    sdcp->dma = dmaStreamAllocI(STM32_SDC_SDIO_DMA_STREAM,
 800f58c:	4b03      	ldr	r3, [pc, #12]	; (800f59c <main+0x85c>)
 800f58e:	646b      	str	r3, [r5, #68]	; 0x44
 800f590:	e6fa      	b.n	800f388 <main+0x648>
    dmaStreamSetPeripheral(sdcp->dma, &sdcp->sdio->FIFO);
 800f592:	6853      	ldr	r3, [r2, #4]
    sdcp->dma = dmaStreamAllocI(STM32_SDC_SDIO_DMA_STREAM,
 800f594:	646a      	str	r2, [r5, #68]	; 0x44
 800f596:	deff      	udf	#255	; 0xff
 800f598:	40021000 	.word	0x40021000
 800f59c:	08011b38 	.word	0x08011b38

0800f5a0 <tmrfunc>:
                    void *p) {
 800f5a0:	b570      	push	{r4, r5, r6, lr}
 800f5a2:	2330      	movs	r3, #48	; 0x30
 800f5a4:	460c      	mov	r4, r1
 800f5a6:	f383 8811 	msr	BASEPRI, r3
  if (cnt > 0) {
 800f5aa:	4d19      	ldr	r5, [pc, #100]	; (800f610 <tmrfunc+0x70>)
 800f5ac:	682b      	ldr	r3, [r5, #0]
 800f5ae:	b1d3      	cbz	r3, 800f5e6 <tmrfunc+0x46>
    if (blkIsInserted(bbdp)) {
 800f5b0:	680b      	ldr	r3, [r1, #0]
 800f5b2:	4608      	mov	r0, r1
 800f5b4:	685b      	ldr	r3, [r3, #4]
 800f5b6:	4798      	blx	r3
 800f5b8:	b310      	cbz	r0, 800f600 <tmrfunc+0x60>
      if (--cnt == 0) {
 800f5ba:	6829      	ldr	r1, [r5, #0]
 800f5bc:	3901      	subs	r1, #1
 800f5be:	6029      	str	r1, [r5, #0]
 800f5c0:	b309      	cbz	r1, 800f606 <tmrfunc+0x66>
  return (bool)(vtp->dlist.next != NULL);
 800f5c2:	4d14      	ldr	r5, [pc, #80]	; (800f614 <tmrfunc+0x74>)
  if (chVTIsArmedI(vtp)) {
 800f5c4:	682b      	ldr	r3, [r5, #0]
 800f5c6:	b113      	cbz	r3, 800f5ce <tmrfunc+0x2e>
    chVTDoResetI(vtp);
 800f5c8:	4628      	mov	r0, r5
 800f5ca:	f7f3 fb31 	bl	8002c30 <chVTDoResetI>
  vtp->reload  = (sysinterval_t)0;
 800f5ce:	2600      	movs	r6, #0
  vtp->func    = vtfunc;
 800f5d0:	4b11      	ldr	r3, [pc, #68]	; (800f618 <tmrfunc+0x78>)
  vt_enqueue(vtlp, vtp, delay);
 800f5d2:	2114      	movs	r1, #20
 800f5d4:	480f      	ldr	r0, [pc, #60]	; (800f614 <tmrfunc+0x74>)
  vtp->func    = vtfunc;
 800f5d6:	e9c5 3403 	strd	r3, r4, [r5, #12]
  vtp->reload  = (sysinterval_t)0;
 800f5da:	616e      	str	r6, [r5, #20]
  vt_enqueue(vtlp, vtp, delay);
 800f5dc:	f7ff faa8 	bl	800eb30 <vt_enqueue.constprop.0>
 800f5e0:	f386 8811 	msr	BASEPRI, r6
}
 800f5e4:	bd70      	pop	{r4, r5, r6, pc}
    if (!blkIsInserted(bbdp)) {
 800f5e6:	680b      	ldr	r3, [r1, #0]
 800f5e8:	4608      	mov	r0, r1
 800f5ea:	685b      	ldr	r3, [r3, #4]
 800f5ec:	4798      	blx	r3
 800f5ee:	2800      	cmp	r0, #0
 800f5f0:	d1e7      	bne.n	800f5c2 <tmrfunc+0x22>
      cnt = POLLING_INTERVAL;
 800f5f2:	230a      	movs	r3, #10
  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 800f5f4:	4601      	mov	r1, r0
 800f5f6:	4809      	ldr	r0, [pc, #36]	; (800f61c <tmrfunc+0x7c>)
 800f5f8:	602b      	str	r3, [r5, #0]
 800f5fa:	f7f5 fe29 	bl	8005250 <chEvtBroadcastFlagsI>
}
 800f5fe:	e7e0      	b.n	800f5c2 <tmrfunc+0x22>
      cnt = POLLING_INTERVAL;
 800f600:	230a      	movs	r3, #10
 800f602:	602b      	str	r3, [r5, #0]
 800f604:	e7dd      	b.n	800f5c2 <tmrfunc+0x22>
  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 800f606:	4806      	ldr	r0, [pc, #24]	; (800f620 <tmrfunc+0x80>)
 800f608:	f7f5 fe22 	bl	8005250 <chEvtBroadcastFlagsI>
}
 800f60c:	e7d9      	b.n	800f5c2 <tmrfunc+0x22>
 800f60e:	bf00      	nop
 800f610:	20001ed8 	.word	0x20001ed8
 800f614:	20002688 	.word	0x20002688
 800f618:	0800f5a1 	.word	0x0800f5a1
 800f61c:	200025dc 	.word	0x200025dc
 800f620:	20002444 	.word	0x20002444
	...

0800f630 <chPipeWriteTimeout.constprop.0>:
 *                      lower than @p n means that a timeout occurred or the
 *                      pipe went in reset state.
 *
 * @api
 */
size_t chPipeWriteTimeout(pipe_t *pp, const uint8_t *bp,
 800f630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t max = n;

  chDbgCheck(n > 0U);

  /* If the pipe is in reset state then returns immediately.*/
  if (pp->reset) {
 800f634:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 800f72c <chPipeWriteTimeout.constprop.0+0xfc>
size_t chPipeWriteTimeout(pipe_t *pp, const uint8_t *bp,
 800f638:	b083      	sub	sp, #12
  if (pp->reset) {
 800f63a:	f89b 7014 	ldrb.w	r7, [fp, #20]
 800f63e:	b11f      	cbz	r7, 800f648 <chPipeWriteTimeout.constprop.0+0x18>
    return (size_t)0;
 800f640:	2000      	movs	r0, #0
  }

  PW_UNLOCK(pp);

  return max - n;
}
 800f642:	b003      	add	sp, #12
 800f644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f648:	4681      	mov	r9, r0
 800f64a:	f04f 0a30 	mov.w	sl, #48	; 0x30
 800f64e:	f38a 8811 	msr	BASEPRI, sl
  chMtxLockS(mp);
 800f652:	eb0b 000a 	add.w	r0, fp, sl
 800f656:	f7f5 fa93 	bl	8004b80 <chMtxLockS>
 800f65a:	f387 8811 	msr	BASEPRI, r7
 800f65e:	464d      	mov	r5, r9
 800f660:	4e33      	ldr	r6, [pc, #204]	; (800f730 <chPipeWriteTimeout.constprop.0+0x100>)
 800f662:	f10b 0820 	add.w	r8, fp, #32
 800f666:	f38a 8811 	msr	BASEPRI, sl
 800f66a:	4640      	mov	r0, r8
 800f66c:	f7f5 fa88 	bl	8004b80 <chMtxLockS>
 800f670:	f387 8811 	msr	BASEPRI, r7
 */
static inline size_t chPipeGetSize(const pipe_t *pp) {

  /*lint -save -e9033 [10.8] Perfectly safe pointers
    arithmetic.*/
  return (size_t)(pp->top - pp->buffer);
 800f674:	e9db 4300 	ldrd	r4, r3, [fp]
 *
 * @api
 */
static inline size_t chPipeGetUsedCount(const pipe_t *pp) {

  return pp->cnt;
 800f678:	f8db 2010 	ldr.w	r2, [fp, #16]
  return (size_t)(pp->top - pp->buffer);
 800f67c:	1b1c      	subs	r4, r3, r4
 *
 * @api
 */
static inline size_t chPipeGetFreeCount(const pipe_t *pp) {

  return chPipeGetSize(pp) - chPipeGetUsedCount(pp);
 800f67e:	1aa4      	subs	r4, r4, r2
 800f680:	42ac      	cmp	r4, r5
 800f682:	bf28      	it	cs
 800f684:	462c      	movcs	r4, r5
  s1 = (size_t)(pp->top - pp->wrptr);
 800f686:	f8db 0008 	ldr.w	r0, [fp, #8]
  pp->cnt += n;
 800f68a:	4422      	add	r2, r4
  s1 = (size_t)(pp->top - pp->wrptr);
 800f68c:	1a1b      	subs	r3, r3, r0
  if (n < s1) {
 800f68e:	429c      	cmp	r4, r3
  pp->cnt += n;
 800f690:	f8cb 2010 	str.w	r2, [fp, #16]
  if (n < s1) {
 800f694:	d33f      	bcc.n	800f716 <chPipeWriteTimeout.constprop.0+0xe6>
  else if (n > s1) {
 800f696:	d935      	bls.n	800f704 <chPipeWriteTimeout.constprop.0+0xd4>
    memcpy((void *)pp->wrptr, (const void *)bp, s1);
 800f698:	461a      	mov	r2, r3
 800f69a:	4631      	mov	r1, r6
 800f69c:	9301      	str	r3, [sp, #4]
 800f69e:	f7f0 fe19 	bl	80002d4 <memcpy>
    s2 = n - s1;
 800f6a2:	9b01      	ldr	r3, [sp, #4]
    memcpy((void *)pp->buffer, (const void *)bp, s2);
 800f6a4:	f8db 0000 	ldr.w	r0, [fp]
    s2 = n - s1;
 800f6a8:	1ae2      	subs	r2, r4, r3
    memcpy((void *)pp->buffer, (const void *)bp, s2);
 800f6aa:	18f1      	adds	r1, r6, r3
 800f6ac:	9201      	str	r2, [sp, #4]
 800f6ae:	f7f0 fe11 	bl	80002d4 <memcpy>
    pp->wrptr = pp->buffer + s2;
 800f6b2:	f8db 3000 	ldr.w	r3, [fp]
 800f6b6:	9a01      	ldr	r2, [sp, #4]
 800f6b8:	441a      	add	r2, r3
 800f6ba:	f8cb 2008 	str.w	r2, [fp, #8]
  PC_UNLOCK(pp);
 800f6be:	4640      	mov	r0, r8
      bp += done;
 800f6c0:	4426      	add	r6, r4
  PC_UNLOCK(pp);
 800f6c2:	f7f5 faf5 	bl	8004cb0 <chMtxUnlock>
    if (done == (size_t)0) {
 800f6c6:	b96c      	cbnz	r4, 800f6e4 <chPipeWriteTimeout.constprop.0+0xb4>
 800f6c8:	2330      	movs	r3, #48	; 0x30
 800f6ca:	f383 8811 	msr	BASEPRI, r3
 800f6ce:	f384 8811 	msr	BASEPRI, r4
  return max - n;
 800f6d2:	eba9 0905 	sub.w	r9, r9, r5
  PW_UNLOCK(pp);
 800f6d6:	4817      	ldr	r0, [pc, #92]	; (800f734 <chPipeWriteTimeout.constprop.0+0x104>)
 800f6d8:	f7f5 faea 	bl	8004cb0 <chMtxUnlock>
 800f6dc:	4648      	mov	r0, r9
}
 800f6de:	b003      	add	sp, #12
 800f6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n  -= done;
 800f6e4:	1b2d      	subs	r5, r5, r4
 800f6e6:	f38a 8811 	msr	BASEPRI, sl
  if (*trp != NULL) {
 800f6ea:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f6ee:	b120      	cbz	r0, 800f6fa <chPipeWriteTimeout.constprop.0+0xca>
    chSchWakeupS(tp, msg);
 800f6f0:	2100      	movs	r1, #0
    *trp = NULL;
 800f6f2:	f8cb 701c 	str.w	r7, [fp, #28]
    chSchWakeupS(tp, msg);
 800f6f6:	f7f4 fe33 	bl	8004360 <chSchWakeupS>
 800f6fa:	f387 8811 	msr	BASEPRI, r7
  while (n > 0U) {
 800f6fe:	2d00      	cmp	r5, #0
 800f700:	d1b1      	bne.n	800f666 <chPipeWriteTimeout.constprop.0+0x36>
 800f702:	e7e8      	b.n	800f6d6 <chPipeWriteTimeout.constprop.0+0xa6>
    memcpy((void *)pp->wrptr, (const void *)bp, n);
 800f704:	4631      	mov	r1, r6
 800f706:	4622      	mov	r2, r4
 800f708:	f7f0 fde4 	bl	80002d4 <memcpy>
    pp->wrptr = pp->buffer;
 800f70c:	f8db 3000 	ldr.w	r3, [fp]
 800f710:	f8cb 3008 	str.w	r3, [fp, #8]
 800f714:	e7d3      	b.n	800f6be <chPipeWriteTimeout.constprop.0+0x8e>
    memcpy((void *)pp->wrptr, (const void *)bp, n);
 800f716:	4622      	mov	r2, r4
 800f718:	4631      	mov	r1, r6
 800f71a:	f7f0 fddb 	bl	80002d4 <memcpy>
    pp->wrptr += n;
 800f71e:	f8db 3008 	ldr.w	r3, [fp, #8]
 800f722:	4423      	add	r3, r4
 800f724:	f8cb 3008 	str.w	r3, [fp, #8]
 800f728:	e7c9      	b.n	800f6be <chPipeWriteTimeout.constprop.0+0x8e>
 800f72a:	bf00      	nop
 800f72c:	20000894 	.word	0x20000894
 800f730:	08013308 	.word	0x08013308
 800f734:	200008c4 	.word	0x200008c4
	...

0800f740 <chPipeReadTimeout.part.0.constprop.0>:
 *                      lower than @p n means that a timeout occurred or the
 *                      pipe went in reset state.
 *
 * @api
 */
size_t chPipeReadTimeout(pipe_t *pp, uint8_t *bp,
 800f740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f744:	b083      	sub	sp, #12
 800f746:	f04f 0b30 	mov.w	fp, #48	; 0x30
 800f74a:	4607      	mov	r7, r0
 800f74c:	4688      	mov	r8, r1
 800f74e:	9100      	str	r1, [sp, #0]
 800f750:	f38b 8811 	msr	BASEPRI, fp
 800f754:	4831      	ldr	r0, [pc, #196]	; (800f81c <chPipeReadTimeout.part.0.constprop.0+0xdc>)
 800f756:	f7f5 fa13 	bl	8004b80 <chMtxLockS>
 800f75a:	f04f 0900 	mov.w	r9, #0
 800f75e:	f389 8811 	msr	BASEPRI, r9
 800f762:	4d2f      	ldr	r5, [pc, #188]	; (800f820 <chPipeReadTimeout.part.0.constprop.0+0xe0>)
 800f764:	f105 0a20 	add.w	sl, r5, #32
 800f768:	f38b 8811 	msr	BASEPRI, fp
 800f76c:	4650      	mov	r0, sl
 800f76e:	f7f5 fa07 	bl	8004b80 <chMtxLockS>
 800f772:	f389 8811 	msr	BASEPRI, r9
  s1 = (size_t)(pp->top - pp->rdptr);
 800f776:	e9d5 1303 	ldrd	r1, r3, [r5, #12]
 800f77a:	4543      	cmp	r3, r8
 800f77c:	461c      	mov	r4, r3
 800f77e:	bf28      	it	cs
 800f780:	4644      	movcs	r4, r8
 800f782:	686e      	ldr	r6, [r5, #4]
  pp->cnt -= n;
 800f784:	1b1b      	subs	r3, r3, r4
  s1 = (size_t)(pp->top - pp->rdptr);
 800f786:	1a76      	subs	r6, r6, r1
  if (n < s1) {
 800f788:	42b4      	cmp	r4, r6
  pp->cnt -= n;
 800f78a:	612b      	str	r3, [r5, #16]
  if (n < s1) {
 800f78c:	d33e      	bcc.n	800f80c <chPipeReadTimeout.part.0.constprop.0+0xcc>
    s2 = n - s1;
 800f78e:	eba4 0306 	sub.w	r3, r4, r6
 800f792:	9301      	str	r3, [sp, #4]
  else if (n > s1) {
 800f794:	d933      	bls.n	800f7fe <chPipeReadTimeout.part.0.constprop.0+0xbe>
    memcpy((void *)bp, (void *)pp->rdptr, s1);
 800f796:	4632      	mov	r2, r6
 800f798:	4638      	mov	r0, r7
 800f79a:	f7f0 fd9b 	bl	80002d4 <memcpy>
    memcpy((void *)bp, (void *)pp->buffer, s2);
 800f79e:	9b01      	ldr	r3, [sp, #4]
 800f7a0:	6829      	ldr	r1, [r5, #0]
 800f7a2:	461a      	mov	r2, r3
 800f7a4:	19b8      	adds	r0, r7, r6
 800f7a6:	f7f0 fd95 	bl	80002d4 <memcpy>
    pp->rdptr = pp->buffer + s2;
 800f7aa:	682a      	ldr	r2, [r5, #0]
 800f7ac:	9b01      	ldr	r3, [sp, #4]
 800f7ae:	4413      	add	r3, r2
 800f7b0:	60eb      	str	r3, [r5, #12]
  PC_UNLOCK(pp);
 800f7b2:	4650      	mov	r0, sl
        break;
      }
    }
    else {
      n  -= done;
      bp += done;
 800f7b4:	4427      	add	r7, r4
  PC_UNLOCK(pp);
 800f7b6:	f7f5 fa7b 	bl	8004cb0 <chMtxUnlock>
    if (done == (size_t)0) {
 800f7ba:	b97c      	cbnz	r4, 800f7dc <chPipeReadTimeout.part.0.constprop.0+0x9c>
 800f7bc:	2330      	movs	r3, #48	; 0x30
 800f7be:	f383 8811 	msr	BASEPRI, r3
 800f7c2:	f384 8811 	msr	BASEPRI, r4
    }
  }

  PR_UNLOCK(pp);

  return max - n;
 800f7c6:	9b00      	ldr	r3, [sp, #0]
 800f7c8:	eba3 0308 	sub.w	r3, r3, r8
 800f7cc:	9300      	str	r3, [sp, #0]
  PR_UNLOCK(pp);
 800f7ce:	4813      	ldr	r0, [pc, #76]	; (800f81c <chPipeReadTimeout.part.0.constprop.0+0xdc>)
 800f7d0:	f7f5 fa6e 	bl	8004cb0 <chMtxUnlock>
}
 800f7d4:	9800      	ldr	r0, [sp, #0]
 800f7d6:	b003      	add	sp, #12
 800f7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n  -= done;
 800f7dc:	eba8 0804 	sub.w	r8, r8, r4
 800f7e0:	f38b 8811 	msr	BASEPRI, fp
  if (*trp != NULL) {
 800f7e4:	69a8      	ldr	r0, [r5, #24]
 800f7e6:	b120      	cbz	r0, 800f7f2 <chPipeReadTimeout.part.0.constprop.0+0xb2>
    chSchWakeupS(tp, msg);
 800f7e8:	2100      	movs	r1, #0
    *trp = NULL;
 800f7ea:	f8c5 9018 	str.w	r9, [r5, #24]
    chSchWakeupS(tp, msg);
 800f7ee:	f7f4 fdb7 	bl	8004360 <chSchWakeupS>
 800f7f2:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 800f7f6:	f1b8 0f00 	cmp.w	r8, #0
 800f7fa:	d1b5      	bne.n	800f768 <chPipeReadTimeout.part.0.constprop.0+0x28>
 800f7fc:	e7e7      	b.n	800f7ce <chPipeReadTimeout.part.0.constprop.0+0x8e>
    memcpy((void *)bp, (void *)pp->rdptr, n);
 800f7fe:	4622      	mov	r2, r4
 800f800:	4638      	mov	r0, r7
 800f802:	f7f0 fd67 	bl	80002d4 <memcpy>
    pp->rdptr = pp->buffer;
 800f806:	682b      	ldr	r3, [r5, #0]
 800f808:	60eb      	str	r3, [r5, #12]
 800f80a:	e7d2      	b.n	800f7b2 <chPipeReadTimeout.part.0.constprop.0+0x72>
    memcpy((void *)bp, (void *)pp->rdptr, n);
 800f80c:	4622      	mov	r2, r4
 800f80e:	4638      	mov	r0, r7
 800f810:	f7f0 fd60 	bl	80002d4 <memcpy>
    pp->rdptr += n;
 800f814:	68eb      	ldr	r3, [r5, #12]
 800f816:	4423      	add	r3, r4
 800f818:	60eb      	str	r3, [r5, #12]
 800f81a:	e7ca      	b.n	800f7b2 <chPipeReadTimeout.part.0.constprop.0+0x72>
 800f81c:	200008d4 	.word	0x200008d4
 800f820:	20000894 	.word	0x20000894
	...

0800f830 <oslib_test_003_001_execute.lto_priv.0>:
static void oslib_test_003_001_execute(void) {
 800f830:	b5f0      	push	{r4, r5, r6, r7, lr}
  test_set_step(1);
 800f832:	2701      	movs	r7, #1
 800f834:	4d5f      	ldr	r5, [pc, #380]	; (800f9b4 <oslib_test_003_001_execute.lto_priv.0+0x184>)
 800f836:	2630      	movs	r6, #48	; 0x30
static void oslib_test_003_001_execute(void) {
 800f838:	b085      	sub	sp, #20
  test_set_step(1);
 800f83a:	602f      	str	r7, [r5, #0]
 800f83c:	f386 8811 	msr	BASEPRI, r6
 800f840:	4c5d      	ldr	r4, [pc, #372]	; (800f9b8 <oslib_test_003_001_execute.lto_priv.0+0x188>)
 800f842:	f104 0020 	add.w	r0, r4, #32
 800f846:	f7f5 f99b 	bl	8004b80 <chMtxLockS>
 800f84a:	2200      	movs	r2, #0
 800f84c:	f382 8811 	msr	BASEPRI, r2
  pp->wrptr = pp->buffer;
 800f850:	6823      	ldr	r3, [r4, #0]
  pp->reset = true;
 800f852:	7527      	strb	r7, [r4, #20]
  pp->rdptr = pp->buffer;
 800f854:	e9c4 3302 	strd	r3, r3, [r4, #8]
  pp->cnt   = (size_t)0;
 800f858:	6122      	str	r2, [r4, #16]
 800f85a:	f386 8811 	msr	BASEPRI, r6
  if (*trp != NULL) {
 800f85e:	69a3      	ldr	r3, [r4, #24]
 800f860:	b183      	cbz	r3, 800f884 <oslib_test_003_001_execute.lto_priv.0+0x54>
    tp->u.rdymsg = msg;
 800f862:	f06f 0101 	mvn.w	r1, #1
    *trp = NULL;
 800f866:	61a2      	str	r2, [r4, #24]
 800f868:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  } while (unlikely(pqp->prio >= p->prio));
 800f86c:	6898      	ldr	r0, [r3, #8]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800f86e:	699a      	ldr	r2, [r3, #24]
    tp->u.rdymsg = msg;
 800f870:	62d9      	str	r1, [r3, #44]	; 0x2c
    pqp = pqp->next;
 800f872:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800f874:	6891      	ldr	r1, [r2, #8]
 800f876:	4281      	cmp	r1, r0
 800f878:	d2fb      	bcs.n	800f872 <oslib_test_003_001_execute.lto_priv.0+0x42>
  p->prev       = pqp->prev;
 800f87a:	6851      	ldr	r1, [r2, #4]
 800f87c:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 800f880:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 800f882:	6053      	str	r3, [r2, #4]
  if (*trp != NULL) {
 800f884:	69e3      	ldr	r3, [r4, #28]
 800f886:	b18b      	cbz	r3, 800f8ac <oslib_test_003_001_execute.lto_priv.0+0x7c>
    *trp = NULL;
 800f888:	2100      	movs	r1, #0
    tp->u.rdymsg = msg;
 800f88a:	f06f 0601 	mvn.w	r6, #1
 800f88e:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800f890:	6898      	ldr	r0, [r3, #8]
 800f892:	62de      	str	r6, [r3, #44]	; 0x2c
    *trp = NULL;
 800f894:	61e1      	str	r1, [r4, #28]
  tp->state = CH_STATE_READY;
 800f896:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    pqp = pqp->next;
 800f89a:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800f89c:	6891      	ldr	r1, [r2, #8]
 800f89e:	4281      	cmp	r1, r0
 800f8a0:	d2fb      	bcs.n	800f89a <oslib_test_003_001_execute.lto_priv.0+0x6a>
  p->prev       = pqp->prev;
 800f8a2:	6851      	ldr	r1, [r2, #4]
 800f8a4:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 800f8a8:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 800f8aa:	6053      	str	r3, [r2, #4]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800f8ac:	4b43      	ldr	r3, [pc, #268]	; (800f9bc <oslib_test_003_001_execute.lto_priv.0+0x18c>)
 800f8ae:	681a      	ldr	r2, [r3, #0]
 800f8b0:	68db      	ldr	r3, [r3, #12]
 800f8b2:	6892      	ldr	r2, [r2, #8]
 800f8b4:	689b      	ldr	r3, [r3, #8]
 800f8b6:	429a      	cmp	r2, r3
 800f8b8:	d901      	bls.n	800f8be <oslib_test_003_001_execute.lto_priv.0+0x8e>
    __sch_reschedule_ahead();
 800f8ba:	f7f4 fad1 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 800f8be:	2300      	movs	r3, #0
 800f8c0:	f383 8811 	msr	BASEPRI, r3
  PC_UNLOCK(pp);
 800f8c4:	483e      	ldr	r0, [pc, #248]	; (800f9c0 <oslib_test_003_001_execute.lto_priv.0+0x190>)
 800f8c6:	f7f5 f9f3 	bl	8004cb0 <chMtxUnlock>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800f8ca:	6822      	ldr	r2, [r4, #0]
 800f8cc:	68e3      	ldr	r3, [r4, #12]
 800f8ce:	4293      	cmp	r3, r2
 800f8d0:	d006      	beq.n	800f8e0 <oslib_test_003_001_execute.lto_priv.0+0xb0>
  chtest.global_fail     = true;
 800f8d2:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800f8d6:	4a3b      	ldr	r2, [pc, #236]	; (800f9c4 <oslib_test_003_001_execute.lto_priv.0+0x194>)
  chtest.global_fail     = true;
 800f8d8:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800f8da:	60aa      	str	r2, [r5, #8]
}
 800f8dc:	b005      	add	sp, #20
 800f8de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800f8e0:	68a2      	ldr	r2, [r4, #8]
 800f8e2:	4293      	cmp	r3, r2
 800f8e4:	d1f5      	bne.n	800f8d2 <oslib_test_003_001_execute.lto_priv.0+0xa2>
 800f8e6:	6923      	ldr	r3, [r4, #16]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d1f2      	bne.n	800f8d2 <oslib_test_003_001_execute.lto_priv.0+0xa2>
  test_set_step(2);
 800f8ec:	2302      	movs	r3, #2
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800f8ee:	2010      	movs	r0, #16
  test_set_step(2);
 800f8f0:	602b      	str	r3, [r5, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800f8f2:	f7ff fe9d 	bl	800f630 <chPipeWriteTimeout.constprop.0>
  if (!condition) {
 800f8f6:	2800      	cmp	r0, #0
 800f8f8:	d141      	bne.n	800f97e <oslib_test_003_001_execute.lto_priv.0+0x14e>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800f8fa:	6822      	ldr	r2, [r4, #0]
 800f8fc:	68e3      	ldr	r3, [r4, #12]
 800f8fe:	4293      	cmp	r3, r2
 800f900:	d1e7      	bne.n	800f8d2 <oslib_test_003_001_execute.lto_priv.0+0xa2>
 800f902:	68a2      	ldr	r2, [r4, #8]
 800f904:	4293      	cmp	r3, r2
 800f906:	d1e4      	bne.n	800f8d2 <oslib_test_003_001_execute.lto_priv.0+0xa2>
 800f908:	6923      	ldr	r3, [r4, #16]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d1e1      	bne.n	800f8d2 <oslib_test_003_001_execute.lto_priv.0+0xa2>
  test_set_step(3);
 800f90e:	2203      	movs	r2, #3
  if (pp->reset) {
 800f910:	7d23      	ldrb	r3, [r4, #20]
 800f912:	602a      	str	r2, [r5, #0]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d039      	beq.n	800f98c <oslib_test_003_001_execute.lto_priv.0+0x15c>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800f918:	6922      	ldr	r2, [r4, #16]
 800f91a:	2a00      	cmp	r2, #0
 800f91c:	d1d9      	bne.n	800f8d2 <oslib_test_003_001_execute.lto_priv.0+0xa2>
  test_set_step(5);
 800f91e:	2305      	movs	r3, #5
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800f920:	2010      	movs	r0, #16
 *
 * @api
 */
static inline void chPipeResume(pipe_t *pp) {

  pp->reset = false;
 800f922:	7522      	strb	r2, [r4, #20]
  test_set_step(5);
 800f924:	602b      	str	r3, [r5, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800f926:	f7ff fe83 	bl	800f630 <chPipeWriteTimeout.constprop.0>
 800f92a:	2810      	cmp	r0, #16
 800f92c:	d13c      	bne.n	800f9a8 <oslib_test_003_001_execute.lto_priv.0+0x178>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800f92e:	6822      	ldr	r2, [r4, #0]
 800f930:	68e3      	ldr	r3, [r4, #12]
 800f932:	4293      	cmp	r3, r2
 800f934:	d1cd      	bne.n	800f8d2 <oslib_test_003_001_execute.lto_priv.0+0xa2>
 800f936:	68a2      	ldr	r2, [r4, #8]
 800f938:	4293      	cmp	r3, r2
 800f93a:	d1ca      	bne.n	800f8d2 <oslib_test_003_001_execute.lto_priv.0+0xa2>
 800f93c:	6921      	ldr	r1, [r4, #16]
 800f93e:	2910      	cmp	r1, #16
 800f940:	d1c7      	bne.n	800f8d2 <oslib_test_003_001_execute.lto_priv.0+0xa2>
  test_set_step(6);
 800f942:	2206      	movs	r2, #6
 800f944:	7d23      	ldrb	r3, [r4, #20]
 800f946:	602a      	str	r2, [r5, #0]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d12d      	bne.n	800f9a8 <oslib_test_003_001_execute.lto_priv.0+0x178>
 800f94c:	4668      	mov	r0, sp
 800f94e:	f7ff fef7 	bl	800f740 <chPipeReadTimeout.part.0.constprop.0>
 800f952:	2810      	cmp	r0, #16
 800f954:	d128      	bne.n	800f9a8 <oslib_test_003_001_execute.lto_priv.0+0x178>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800f956:	6822      	ldr	r2, [r4, #0]
 800f958:	68e3      	ldr	r3, [r4, #12]
 800f95a:	4293      	cmp	r3, r2
 800f95c:	d1b9      	bne.n	800f8d2 <oslib_test_003_001_execute.lto_priv.0+0xa2>
 800f95e:	68a2      	ldr	r2, [r4, #8]
 800f960:	4293      	cmp	r3, r2
 800f962:	d1b6      	bne.n	800f8d2 <oslib_test_003_001_execute.lto_priv.0+0xa2>
 800f964:	6927      	ldr	r7, [r4, #16]
 800f966:	2f00      	cmp	r7, #0
 800f968:	d1b3      	bne.n	800f8d2 <oslib_test_003_001_execute.lto_priv.0+0xa2>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 800f96a:	4b17      	ldr	r3, [pc, #92]	; (800f9c8 <oslib_test_003_001_execute.lto_priv.0+0x198>)
 800f96c:	9a00      	ldr	r2, [sp, #0]
 800f96e:	429a      	cmp	r2, r3
 800f970:	d032      	beq.n	800f9d8 <oslib_test_003_001_execute.lto_priv.0+0x1a8>
  chtest.global_fail     = true;
 800f972:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800f976:	4a15      	ldr	r2, [pc, #84]	; (800f9cc <oslib_test_003_001_execute.lto_priv.0+0x19c>)
  chtest.global_fail     = true;
 800f978:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800f97a:	60aa      	str	r2, [r5, #8]
 800f97c:	e7ae      	b.n	800f8dc <oslib_test_003_001_execute.lto_priv.0+0xac>
  chtest.global_fail     = true;
 800f97e:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800f982:	4a13      	ldr	r2, [pc, #76]	; (800f9d0 <oslib_test_003_001_execute.lto_priv.0+0x1a0>)
  chtest.global_fail     = true;
 800f984:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800f986:	60aa      	str	r2, [r5, #8]
}
 800f988:	b005      	add	sp, #20
 800f98a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f98c:	2110      	movs	r1, #16
 800f98e:	4668      	mov	r0, sp
 800f990:	f7ff fed6 	bl	800f740 <chPipeReadTimeout.part.0.constprop.0>
  if (!condition) {
 800f994:	2800      	cmp	r0, #0
 800f996:	d1f2      	bne.n	800f97e <oslib_test_003_001_execute.lto_priv.0+0x14e>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800f998:	6823      	ldr	r3, [r4, #0]
 800f99a:	68e2      	ldr	r2, [r4, #12]
 800f99c:	429a      	cmp	r2, r3
 800f99e:	d198      	bne.n	800f8d2 <oslib_test_003_001_execute.lto_priv.0+0xa2>
 800f9a0:	68a2      	ldr	r2, [r4, #8]
 800f9a2:	429a      	cmp	r2, r3
 800f9a4:	d195      	bne.n	800f8d2 <oslib_test_003_001_execute.lto_priv.0+0xa2>
 800f9a6:	e7b7      	b.n	800f918 <oslib_test_003_001_execute.lto_priv.0+0xe8>
  chtest.global_fail     = true;
 800f9a8:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800f9ac:	4a09      	ldr	r2, [pc, #36]	; (800f9d4 <oslib_test_003_001_execute.lto_priv.0+0x1a4>)
  chtest.global_fail     = true;
 800f9ae:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800f9b0:	60aa      	str	r2, [r5, #8]
 800f9b2:	e793      	b.n	800f8dc <oslib_test_003_001_execute.lto_priv.0+0xac>
 800f9b4:	200010f4 	.word	0x200010f4
 800f9b8:	20000894 	.word	0x20000894
 800f9bc:	20001050 	.word	0x20001050
 800f9c0:	200008b4 	.word	0x200008b4
 800f9c4:	08013058 	.word	0x08013058
 800f9c8:	33323130 	.word	0x33323130
 800f9cc:	08013044 	.word	0x08013044
 800f9d0:	08013038 	.word	0x08013038
 800f9d4:	08012cd4 	.word	0x08012cd4
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 800f9d8:	9a01      	ldr	r2, [sp, #4]
 800f9da:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 800f9de:	429a      	cmp	r2, r3
 800f9e0:	d1c7      	bne.n	800f972 <oslib_test_003_001_execute.lto_priv.0+0x142>
 800f9e2:	f103 6330 	add.w	r3, r3, #184549376	; 0xb000000
 800f9e6:	9a02      	ldr	r2, [sp, #8]
 800f9e8:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
 800f9ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f9f0:	429a      	cmp	r2, r3
 800f9f2:	d1be      	bne.n	800f972 <oslib_test_003_001_execute.lto_priv.0+0x142>
 800f9f4:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800f9f8:	9a03      	ldr	r2, [sp, #12]
 800f9fa:	f503 2381 	add.w	r3, r3, #264192	; 0x40800
 800f9fe:	f203 330b 	addw	r3, r3, #779	; 0x30b
 800fa02:	429a      	cmp	r2, r3
 800fa04:	d1b5      	bne.n	800f972 <oslib_test_003_001_execute.lto_priv.0+0x142>
  test_set_step(7);
 800fa06:	2307      	movs	r3, #7
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 4, TIME_IMMEDIATE);
 800fa08:	2004      	movs	r0, #4
  test_set_step(7);
 800fa0a:	602b      	str	r3, [r5, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 4, TIME_IMMEDIATE);
 800fa0c:	f7ff fe10 	bl	800f630 <chPipeWriteTimeout.constprop.0>
  if (!condition) {
 800fa10:	2804      	cmp	r0, #4
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 800fa12:	f04f 0600 	mov.w	r6, #0
 800fa16:	d1c7      	bne.n	800f9a8 <oslib_test_003_001_execute.lto_priv.0+0x178>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 800fa18:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800fa1c:	4293      	cmp	r3, r2
 800fa1e:	f43f af58 	beq.w	800f8d2 <oslib_test_003_001_execute.lto_priv.0+0xa2>
 800fa22:	6822      	ldr	r2, [r4, #0]
 800fa24:	4293      	cmp	r3, r2
 800fa26:	f47f af54 	bne.w	800f8d2 <oslib_test_003_001_execute.lto_priv.0+0xa2>
 800fa2a:	6923      	ldr	r3, [r4, #16]
 800fa2c:	2b04      	cmp	r3, #4
 800fa2e:	f47f af50 	bne.w	800f8d2 <oslib_test_003_001_execute.lto_priv.0+0xa2>
  test_set_step(8);
 800fa32:	2308      	movs	r3, #8
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE - 4, TIME_IMMEDIATE);
 800fa34:	200c      	movs	r0, #12
  test_set_step(8);
 800fa36:	602b      	str	r3, [r5, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE - 4, TIME_IMMEDIATE);
 800fa38:	f7ff fdfa 	bl	800f630 <chPipeWriteTimeout.constprop.0>
 800fa3c:	280c      	cmp	r0, #12
 800fa3e:	d1b3      	bne.n	800f9a8 <oslib_test_003_001_execute.lto_priv.0+0x178>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800fa40:	6822      	ldr	r2, [r4, #0]
 800fa42:	68e3      	ldr	r3, [r4, #12]
 800fa44:	4293      	cmp	r3, r2
 800fa46:	f000 80ef 	beq.w	800fc28 <oslib_test_003_001_execute.lto_priv.0+0x3f8>
 800fa4a:	2000      	movs	r0, #0
 800fa4c:	4993      	ldr	r1, [pc, #588]	; (800fc9c <oslib_test_003_001_execute.lto_priv.0+0x46c>)
 800fa4e:	f7f7 f9ff 	bl	8006e50 <__test_assert>
 800fa52:	2800      	cmp	r0, #0
 800fa54:	f47f af42 	bne.w	800f8dc <oslib_test_003_001_execute.lto_priv.0+0xac>
  test_set_step(9);
 800fa58:	2309      	movs	r3, #9
 800fa5a:	602b      	str	r3, [r5, #0]
 800fa5c:	7d23      	ldrb	r3, [r4, #20]
 800fa5e:	b91b      	cbnz	r3, 800fa68 <oslib_test_003_001_execute.lto_priv.0+0x238>
 800fa60:	2104      	movs	r1, #4
 800fa62:	4668      	mov	r0, sp
 800fa64:	f7ff fe6c 	bl	800f740 <chPipeReadTimeout.part.0.constprop.0>
    test_assert(n == 4, "wrong size");
 800fa68:	f1a0 0e04 	sub.w	lr, r0, #4
 800fa6c:	f1de 0000 	rsbs	r0, lr, #0
 800fa70:	eb40 000e 	adc.w	r0, r0, lr
 800fa74:	498a      	ldr	r1, [pc, #552]	; (800fca0 <oslib_test_003_001_execute.lto_priv.0+0x470>)
 800fa76:	f7f7 f9eb 	bl	8006e50 <__test_assert>
 800fa7a:	2800      	cmp	r0, #0
 800fa7c:	f47f af2e 	bne.w	800f8dc <oslib_test_003_001_execute.lto_priv.0+0xac>
    test_assert((pipe1.rdptr != pipe1.buffer) &&
 800fa80:	6823      	ldr	r3, [r4, #0]
 800fa82:	68e2      	ldr	r2, [r4, #12]
 800fa84:	429a      	cmp	r2, r3
 800fa86:	d003      	beq.n	800fa90 <oslib_test_003_001_execute.lto_priv.0+0x260>
 800fa88:	68a2      	ldr	r2, [r4, #8]
 800fa8a:	4293      	cmp	r3, r2
 800fa8c:	f000 80f5 	beq.w	800fc7a <oslib_test_003_001_execute.lto_priv.0+0x44a>
 800fa90:	4982      	ldr	r1, [pc, #520]	; (800fc9c <oslib_test_003_001_execute.lto_priv.0+0x46c>)
 800fa92:	f7f7 f9dd 	bl	8006e50 <__test_assert>
 800fa96:	2800      	cmp	r0, #0
 800fa98:	f47f af20 	bne.w	800f8dc <oslib_test_003_001_execute.lto_priv.0+0xac>
    test_assert(memcmp(pipe_pattern, buf, 4) == 0, "content mismatch");
 800fa9c:	4669      	mov	r1, sp
 800fa9e:	2204      	movs	r2, #4
 800faa0:	4880      	ldr	r0, [pc, #512]	; (800fca4 <oslib_test_003_001_execute.lto_priv.0+0x474>)
 800faa2:	f7f0 fbe3 	bl	800026c <memcmp>
 800faa6:	fab0 f080 	clz	r0, r0
 800faaa:	497f      	ldr	r1, [pc, #508]	; (800fca8 <oslib_test_003_001_execute.lto_priv.0+0x478>)
 800faac:	0940      	lsrs	r0, r0, #5
 800faae:	f7f7 f9cf 	bl	8006e50 <__test_assert>
 800fab2:	2800      	cmp	r0, #0
 800fab4:	f47f af12 	bne.w	800f8dc <oslib_test_003_001_execute.lto_priv.0+0xac>
  test_set_step(10);
 800fab8:	230a      	movs	r3, #10
 800faba:	602b      	str	r3, [r5, #0]
 800fabc:	7d23      	ldrb	r3, [r4, #20]
 800fabe:	b91b      	cbnz	r3, 800fac8 <oslib_test_003_001_execute.lto_priv.0+0x298>
 800fac0:	210c      	movs	r1, #12
 800fac2:	4668      	mov	r0, sp
 800fac4:	f7ff fe3c 	bl	800f740 <chPipeReadTimeout.part.0.constprop.0>
    test_assert(n == PIPE_SIZE - 4, "wrong size");
 800fac8:	f1a0 010c 	sub.w	r1, r0, #12
 800facc:	4248      	negs	r0, r1
 800face:	4148      	adcs	r0, r1
 800fad0:	4973      	ldr	r1, [pc, #460]	; (800fca0 <oslib_test_003_001_execute.lto_priv.0+0x470>)
 800fad2:	f7f7 f9bd 	bl	8006e50 <__test_assert>
 800fad6:	2800      	cmp	r0, #0
 800fad8:	f47f af00 	bne.w	800f8dc <oslib_test_003_001_execute.lto_priv.0+0xac>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800fadc:	6822      	ldr	r2, [r4, #0]
 800fade:	68e3      	ldr	r3, [r4, #12]
 800fae0:	4293      	cmp	r3, r2
 800fae2:	f000 80bc 	beq.w	800fc5e <oslib_test_003_001_execute.lto_priv.0+0x42e>
 800fae6:	496d      	ldr	r1, [pc, #436]	; (800fc9c <oslib_test_003_001_execute.lto_priv.0+0x46c>)
 800fae8:	f7f7 f9b2 	bl	8006e50 <__test_assert>
 800faec:	2800      	cmp	r0, #0
 800faee:	f47f aef5 	bne.w	800f8dc <oslib_test_003_001_execute.lto_priv.0+0xac>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE - 4) == 0, "content mismatch");
 800faf2:	4669      	mov	r1, sp
 800faf4:	220c      	movs	r2, #12
 800faf6:	486b      	ldr	r0, [pc, #428]	; (800fca4 <oslib_test_003_001_execute.lto_priv.0+0x474>)
 800faf8:	f7f0 fbb8 	bl	800026c <memcmp>
 800fafc:	fab0 f080 	clz	r0, r0
 800fb00:	4969      	ldr	r1, [pc, #420]	; (800fca8 <oslib_test_003_001_execute.lto_priv.0+0x478>)
 800fb02:	0940      	lsrs	r0, r0, #5
 800fb04:	f7f7 f9a4 	bl	8006e50 <__test_assert>
 800fb08:	2800      	cmp	r0, #0
 800fb0a:	f47f aee7 	bne.w	800f8dc <oslib_test_003_001_execute.lto_priv.0+0xac>
  test_set_step(11);
 800fb0e:	230b      	movs	r3, #11
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 5, TIME_IMMEDIATE);
 800fb10:	2005      	movs	r0, #5
  test_set_step(11);
 800fb12:	602b      	str	r3, [r5, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 5, TIME_IMMEDIATE);
 800fb14:	f7ff fd8c 	bl	800f630 <chPipeWriteTimeout.constprop.0>
    test_assert(n == 5, "wrong size");
 800fb18:	1f42      	subs	r2, r0, #5
 800fb1a:	4250      	negs	r0, r2
 800fb1c:	4150      	adcs	r0, r2
 800fb1e:	4960      	ldr	r1, [pc, #384]	; (800fca0 <oslib_test_003_001_execute.lto_priv.0+0x470>)
 800fb20:	f7f7 f996 	bl	8006e50 <__test_assert>
 800fb24:	2800      	cmp	r0, #0
 800fb26:	f47f aed9 	bne.w	800f8dc <oslib_test_003_001_execute.lto_priv.0+0xac>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 800fb2a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800fb2e:	4293      	cmp	r3, r2
 800fb30:	d003      	beq.n	800fb3a <oslib_test_003_001_execute.lto_priv.0+0x30a>
 800fb32:	6822      	ldr	r2, [r4, #0]
 800fb34:	4293      	cmp	r3, r2
 800fb36:	f000 809b 	beq.w	800fc70 <oslib_test_003_001_execute.lto_priv.0+0x440>
 800fb3a:	4958      	ldr	r1, [pc, #352]	; (800fc9c <oslib_test_003_001_execute.lto_priv.0+0x46c>)
 800fb3c:	f7f7 f988 	bl	8006e50 <__test_assert>
 800fb40:	2800      	cmp	r0, #0
 800fb42:	f47f aecb 	bne.w	800f8dc <oslib_test_003_001_execute.lto_priv.0+0xac>
  test_set_step(12);
 800fb46:	230c      	movs	r3, #12
 800fb48:	602b      	str	r3, [r5, #0]
 800fb4a:	7d23      	ldrb	r3, [r4, #20]
 800fb4c:	b91b      	cbnz	r3, 800fb56 <oslib_test_003_001_execute.lto_priv.0+0x326>
 800fb4e:	2105      	movs	r1, #5
 800fb50:	4668      	mov	r0, sp
 800fb52:	f7ff fdf5 	bl	800f740 <chPipeReadTimeout.part.0.constprop.0>
    test_assert(n == 5, "wrong size");
 800fb56:	f1a0 0e05 	sub.w	lr, r0, #5
 800fb5a:	f1de 0000 	rsbs	r0, lr, #0
 800fb5e:	eb40 000e 	adc.w	r0, r0, lr
 800fb62:	494f      	ldr	r1, [pc, #316]	; (800fca0 <oslib_test_003_001_execute.lto_priv.0+0x470>)
 800fb64:	f7f7 f974 	bl	8006e50 <__test_assert>
 800fb68:	2800      	cmp	r0, #0
 800fb6a:	f47f aeb7 	bne.w	800f8dc <oslib_test_003_001_execute.lto_priv.0+0xac>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800fb6e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800fb72:	4293      	cmp	r3, r2
 800fb74:	d06b      	beq.n	800fc4e <oslib_test_003_001_execute.lto_priv.0+0x41e>
 800fb76:	4949      	ldr	r1, [pc, #292]	; (800fc9c <oslib_test_003_001_execute.lto_priv.0+0x46c>)
 800fb78:	f7f7 f96a 	bl	8006e50 <__test_assert>
 800fb7c:	2800      	cmp	r0, #0
 800fb7e:	f47f aead 	bne.w	800f8dc <oslib_test_003_001_execute.lto_priv.0+0xac>
    test_assert(memcmp(pipe_pattern, buf, 5) == 0, "content mismatch");
 800fb82:	4669      	mov	r1, sp
 800fb84:	2205      	movs	r2, #5
 800fb86:	4847      	ldr	r0, [pc, #284]	; (800fca4 <oslib_test_003_001_execute.lto_priv.0+0x474>)
 800fb88:	f7f0 fb70 	bl	800026c <memcmp>
 800fb8c:	fab0 f080 	clz	r0, r0
 800fb90:	4945      	ldr	r1, [pc, #276]	; (800fca8 <oslib_test_003_001_execute.lto_priv.0+0x478>)
 800fb92:	0940      	lsrs	r0, r0, #5
 800fb94:	f7f7 f95c 	bl	8006e50 <__test_assert>
 800fb98:	2800      	cmp	r0, #0
 800fb9a:	f47f ae9f 	bne.w	800f8dc <oslib_test_003_001_execute.lto_priv.0+0xac>
  test_set_step(13);
 800fb9e:	230d      	movs	r3, #13
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800fba0:	2010      	movs	r0, #16
  test_set_step(13);
 800fba2:	602b      	str	r3, [r5, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800fba4:	f7ff fd44 	bl	800f630 <chPipeWriteTimeout.constprop.0>
    test_assert(n == PIPE_SIZE, "wrong size");
 800fba8:	f1a0 0c10 	sub.w	ip, r0, #16
 800fbac:	f1dc 0000 	rsbs	r0, ip, #0
 800fbb0:	eb40 000c 	adc.w	r0, r0, ip
 800fbb4:	493a      	ldr	r1, [pc, #232]	; (800fca0 <oslib_test_003_001_execute.lto_priv.0+0x470>)
 800fbb6:	f7f7 f94b 	bl	8006e50 <__test_assert>
 800fbba:	2800      	cmp	r0, #0
 800fbbc:	f47f ae8e 	bne.w	800f8dc <oslib_test_003_001_execute.lto_priv.0+0xac>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800fbc0:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800fbc4:	4293      	cmp	r3, r2
 800fbc6:	d039      	beq.n	800fc3c <oslib_test_003_001_execute.lto_priv.0+0x40c>
 800fbc8:	4934      	ldr	r1, [pc, #208]	; (800fc9c <oslib_test_003_001_execute.lto_priv.0+0x46c>)
 800fbca:	f7f7 f941 	bl	8006e50 <__test_assert>
 800fbce:	2800      	cmp	r0, #0
 800fbd0:	f47f ae84 	bne.w	800f8dc <oslib_test_003_001_execute.lto_priv.0+0xac>
  test_set_step(14);
 800fbd4:	230e      	movs	r3, #14
 800fbd6:	602b      	str	r3, [r5, #0]
 800fbd8:	7d23      	ldrb	r3, [r4, #20]
 800fbda:	b923      	cbnz	r3, 800fbe6 <oslib_test_003_001_execute.lto_priv.0+0x3b6>
 800fbdc:	2110      	movs	r1, #16
 800fbde:	4668      	mov	r0, sp
 800fbe0:	f7ff fdae 	bl	800f740 <chPipeReadTimeout.part.0.constprop.0>
 800fbe4:	4607      	mov	r7, r0
    test_assert(n == PIPE_SIZE, "wrong size");
 800fbe6:	f1a7 0310 	sub.w	r3, r7, #16
 800fbea:	4258      	negs	r0, r3
 800fbec:	4158      	adcs	r0, r3
 800fbee:	492c      	ldr	r1, [pc, #176]	; (800fca0 <oslib_test_003_001_execute.lto_priv.0+0x470>)
 800fbf0:	f7f7 f92e 	bl	8006e50 <__test_assert>
 800fbf4:	2800      	cmp	r0, #0
 800fbf6:	f47f ae71 	bne.w	800f8dc <oslib_test_003_001_execute.lto_priv.0+0xac>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800fbfa:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800fbfe:	4293      	cmp	r3, r2
 800fc00:	d043      	beq.n	800fc8a <oslib_test_003_001_execute.lto_priv.0+0x45a>
 800fc02:	4630      	mov	r0, r6
 800fc04:	4925      	ldr	r1, [pc, #148]	; (800fc9c <oslib_test_003_001_execute.lto_priv.0+0x46c>)
 800fc06:	f7f7 f923 	bl	8006e50 <__test_assert>
 800fc0a:	2800      	cmp	r0, #0
 800fc0c:	f47f ae66 	bne.w	800f8dc <oslib_test_003_001_execute.lto_priv.0+0xac>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 800fc10:	4669      	mov	r1, sp
 800fc12:	2210      	movs	r2, #16
 800fc14:	4823      	ldr	r0, [pc, #140]	; (800fca4 <oslib_test_003_001_execute.lto_priv.0+0x474>)
 800fc16:	f7f0 fb29 	bl	800026c <memcmp>
 800fc1a:	fab0 f080 	clz	r0, r0
 800fc1e:	4922      	ldr	r1, [pc, #136]	; (800fca8 <oslib_test_003_001_execute.lto_priv.0+0x478>)
 800fc20:	0940      	lsrs	r0, r0, #5
 800fc22:	f7f7 f915 	bl	8006e50 <__test_assert>
 800fc26:	e659      	b.n	800f8dc <oslib_test_003_001_execute.lto_priv.0+0xac>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800fc28:	68a2      	ldr	r2, [r4, #8]
 800fc2a:	4293      	cmp	r3, r2
 800fc2c:	f47f af0d 	bne.w	800fa4a <oslib_test_003_001_execute.lto_priv.0+0x21a>
 800fc30:	6920      	ldr	r0, [r4, #16]
 800fc32:	f1a0 0310 	sub.w	r3, r0, #16
 800fc36:	4258      	negs	r0, r3
 800fc38:	4158      	adcs	r0, r3
 800fc3a:	e707      	b.n	800fa4c <oslib_test_003_001_execute.lto_priv.0+0x21c>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800fc3c:	6822      	ldr	r2, [r4, #0]
 800fc3e:	4293      	cmp	r3, r2
 800fc40:	d0c2      	beq.n	800fbc8 <oslib_test_003_001_execute.lto_priv.0+0x398>
 800fc42:	6920      	ldr	r0, [r4, #16]
 800fc44:	f1a0 0210 	sub.w	r2, r0, #16
 800fc48:	4250      	negs	r0, r2
 800fc4a:	4150      	adcs	r0, r2
 800fc4c:	e7bc      	b.n	800fbc8 <oslib_test_003_001_execute.lto_priv.0+0x398>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800fc4e:	6822      	ldr	r2, [r4, #0]
 800fc50:	4293      	cmp	r3, r2
 800fc52:	d090      	beq.n	800fb76 <oslib_test_003_001_execute.lto_priv.0+0x346>
 800fc54:	6920      	ldr	r0, [r4, #16]
 800fc56:	fab0 f080 	clz	r0, r0
 800fc5a:	0940      	lsrs	r0, r0, #5
 800fc5c:	e78b      	b.n	800fb76 <oslib_test_003_001_execute.lto_priv.0+0x346>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800fc5e:	68a2      	ldr	r2, [r4, #8]
 800fc60:	4293      	cmp	r3, r2
 800fc62:	f47f af40 	bne.w	800fae6 <oslib_test_003_001_execute.lto_priv.0+0x2b6>
 800fc66:	6920      	ldr	r0, [r4, #16]
 800fc68:	fab0 f080 	clz	r0, r0
 800fc6c:	0940      	lsrs	r0, r0, #5
 800fc6e:	e73a      	b.n	800fae6 <oslib_test_003_001_execute.lto_priv.0+0x2b6>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 800fc70:	6920      	ldr	r0, [r4, #16]
 800fc72:	1f43      	subs	r3, r0, #5
 800fc74:	4258      	negs	r0, r3
 800fc76:	4158      	adcs	r0, r3
 800fc78:	e75f      	b.n	800fb3a <oslib_test_003_001_execute.lto_priv.0+0x30a>
    test_assert((pipe1.rdptr != pipe1.buffer) &&
 800fc7a:	6920      	ldr	r0, [r4, #16]
 800fc7c:	f1a0 0c0c 	sub.w	ip, r0, #12
 800fc80:	f1dc 0000 	rsbs	r0, ip, #0
 800fc84:	eb40 000c 	adc.w	r0, r0, ip
 800fc88:	e702      	b.n	800fa90 <oslib_test_003_001_execute.lto_priv.0+0x260>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800fc8a:	6822      	ldr	r2, [r4, #0]
 800fc8c:	4293      	cmp	r3, r2
 800fc8e:	d0b8      	beq.n	800fc02 <oslib_test_003_001_execute.lto_priv.0+0x3d2>
 800fc90:	6926      	ldr	r6, [r4, #16]
 800fc92:	fab6 f686 	clz	r6, r6
 800fc96:	0976      	lsrs	r6, r6, #5
 800fc98:	e7b3      	b.n	800fc02 <oslib_test_003_001_execute.lto_priv.0+0x3d2>
 800fc9a:	bf00      	nop
 800fc9c:	08013058 	.word	0x08013058
 800fca0:	08012cd4 	.word	0x08012cd4
 800fca4:	08013308 	.word	0x08013308
 800fca8:	08013044 	.word	0x08013044
 800fcac:	00000000 	.word	0x00000000

0800fcb0 <oslib_test_003_002_execute.lto_priv.0>:

static void oslib_test_003_002_execute(void) {

  /* [3.2.1] Reading while pipe is empty.*/
  test_set_step(1);
 800fcb0:	2201      	movs	r2, #1
static void oslib_test_003_002_execute(void) {
 800fcb2:	b530      	push	{r4, r5, lr}
 800fcb4:	4c1a      	ldr	r4, [pc, #104]	; (800fd20 <oslib_test_003_002_execute.lto_priv.0+0x70>)
  test_set_step(1);
 800fcb6:	4d1b      	ldr	r5, [pc, #108]	; (800fd24 <oslib_test_003_002_execute.lto_priv.0+0x74>)
 800fcb8:	7d23      	ldrb	r3, [r4, #20]
static void oslib_test_003_002_execute(void) {
 800fcba:	b085      	sub	sp, #20
  test_set_step(1);
 800fcbc:	602a      	str	r2, [r5, #0]
 800fcbe:	b153      	cbz	r3, 800fcd6 <oslib_test_003_002_execute.lto_priv.0+0x26>
    size_t n;
    uint8_t buf[PIPE_SIZE];

    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
    test_assert(n == 0, "wrong size");
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800fcc0:	6822      	ldr	r2, [r4, #0]
 800fcc2:	68e3      	ldr	r3, [r4, #12]
 800fcc4:	4293      	cmp	r3, r2
 800fcc6:	d013      	beq.n	800fcf0 <oslib_test_003_002_execute.lto_priv.0+0x40>
  chtest.global_fail     = true;
 800fcc8:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800fccc:	4a16      	ldr	r2, [pc, #88]	; (800fd28 <oslib_test_003_002_execute.lto_priv.0+0x78>)
  chtest.global_fail     = true;
 800fcce:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800fcd0:	60aa      	str	r2, [r5, #8]
                (pipe1.wrptr == pipe1.buffer) &&
                (pipe1.cnt == PIPE_SIZE / 2),
                "invalid pipe state");
  }
  test_end_step(2);
}
 800fcd2:	b005      	add	sp, #20
 800fcd4:	bd30      	pop	{r4, r5, pc}
 800fcd6:	2110      	movs	r1, #16
 800fcd8:	4668      	mov	r0, sp
 800fcda:	f7ff fd31 	bl	800f740 <chPipeReadTimeout.part.0.constprop.0>
  if (!condition) {
 800fcde:	2800      	cmp	r0, #0
 800fce0:	d0ee      	beq.n	800fcc0 <oslib_test_003_002_execute.lto_priv.0+0x10>
  chtest.global_fail     = true;
 800fce2:	f240 1301 	movw	r3, #257	; 0x101
  chtest.failure_message = msg;
 800fce6:	4a11      	ldr	r2, [pc, #68]	; (800fd2c <oslib_test_003_002_execute.lto_priv.0+0x7c>)
  chtest.global_fail     = true;
 800fce8:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800fcea:	60aa      	str	r2, [r5, #8]
 800fcec:	b005      	add	sp, #20
 800fcee:	bd30      	pop	{r4, r5, pc}
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800fcf0:	68a2      	ldr	r2, [r4, #8]
 800fcf2:	4293      	cmp	r3, r2
 800fcf4:	d1e8      	bne.n	800fcc8 <oslib_test_003_002_execute.lto_priv.0+0x18>
 800fcf6:	6923      	ldr	r3, [r4, #16]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d1e5      	bne.n	800fcc8 <oslib_test_003_002_execute.lto_priv.0+0x18>
  test_set_step(2);
 800fcfc:	2302      	movs	r3, #2
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800fcfe:	2010      	movs	r0, #16
  test_set_step(2);
 800fd00:	602b      	str	r3, [r5, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800fd02:	f7ff fc95 	bl	800f630 <chPipeWriteTimeout.constprop.0>
  if (!condition) {
 800fd06:	2808      	cmp	r0, #8
 800fd08:	d1eb      	bne.n	800fce2 <oslib_test_003_002_execute.lto_priv.0+0x32>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800fd0a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800fd0e:	4293      	cmp	r3, r2
 800fd10:	d1da      	bne.n	800fcc8 <oslib_test_003_002_execute.lto_priv.0+0x18>
 800fd12:	6822      	ldr	r2, [r4, #0]
 800fd14:	4293      	cmp	r3, r2
 800fd16:	d1d7      	bne.n	800fcc8 <oslib_test_003_002_execute.lto_priv.0+0x18>
 800fd18:	6923      	ldr	r3, [r4, #16]
 800fd1a:	2b08      	cmp	r3, #8
 800fd1c:	d1d4      	bne.n	800fcc8 <oslib_test_003_002_execute.lto_priv.0+0x18>
 800fd1e:	e7d8      	b.n	800fcd2 <oslib_test_003_002_execute.lto_priv.0+0x22>
 800fd20:	20000894 	.word	0x20000894
 800fd24:	200010f4 	.word	0x200010f4
 800fd28:	08013058 	.word	0x08013058
 800fd2c:	08012cd4 	.word	0x08012cd4

0800fd30 <chSemSignalWait.constprop.0.isra.0>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 800fd30:	b538      	push	{r3, r4, r5, lr}
 800fd32:	2330      	movs	r3, #48	; 0x30
 800fd34:	f383 8811 	msr	BASEPRI, r3
              ((sps->cnt < (cnt_t)0) && ch_queue_notempty(&sps->queue)),
              "inconsistent semaphore");
  chDbgAssert(((spw->cnt >= (cnt_t)0) && ch_queue_isempty(&spw->queue)) ||
              ((spw->cnt < (cnt_t)0) && ch_queue_notempty(&spw->queue)),
              "inconsistent semaphore");
  if (++sps->cnt <= (cnt_t)0) {
 800fd38:	4b22      	ldr	r3, [pc, #136]	; (800fdc4 <chSemSignalWait.constprop.0.isra.0+0x94>)
 800fd3a:	689a      	ldr	r2, [r3, #8]
 800fd3c:	1c51      	adds	r1, r2, #1
 800fd3e:	2900      	cmp	r1, #0
 800fd40:	6099      	str	r1, [r3, #8]
 800fd42:	dd2a      	ble.n	800fd9a <chSemSignalWait.constprop.0.isra.0+0x6a>
    chSchReadyI(threadref(ch_queue_fifo_remove(&sps->queue)))->u.rdymsg = MSG_OK;
  }
  if (--spw->cnt < (cnt_t)0) {
 800fd44:	2a00      	cmp	r2, #0
 800fd46:	609a      	str	r2, [r3, #8]
 800fd48:	db0c      	blt.n	800fd64 <chSemSignalWait.constprop.0.isra.0+0x34>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800fd4a:	4b1f      	ldr	r3, [pc, #124]	; (800fdc8 <chSemSignalWait.constprop.0.isra.0+0x98>)
 800fd4c:	681a      	ldr	r2, [r3, #0]
 800fd4e:	68db      	ldr	r3, [r3, #12]
 800fd50:	6892      	ldr	r2, [r2, #8]
 800fd52:	689b      	ldr	r3, [r3, #8]
 800fd54:	429a      	cmp	r2, r3
 800fd56:	d901      	bls.n	800fd5c <chSemSignalWait.constprop.0.isra.0+0x2c>
    __sch_reschedule_ahead();
 800fd58:	f7f4 f882 	bl	8003e60 <__sch_reschedule_ahead.lto_priv.0>
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	f383 8811 	msr	BASEPRI, r3
    msg = MSG_OK;
  }
  chSysUnlock();

  return msg;
}
 800fd62:	bd38      	pop	{r3, r4, r5, pc}
  otp->state = newstate;
 800fd64:	f04f 0e05 	mov.w	lr, #5
  ntp->state = CH_STATE_CURRENT;
 800fd68:	f04f 0c01 	mov.w	ip, #1
 800fd6c:	4a16      	ldr	r2, [pc, #88]	; (800fdc8 <chSemSignalWait.constprop.0.isra.0+0x98>)
  p->prev       = qp->prev;
 800fd6e:	6858      	ldr	r0, [r3, #4]
 800fd70:	68d1      	ldr	r1, [r2, #12]
  p->next       = qp;
 800fd72:	600b      	str	r3, [r1, #0]
  p->prev       = qp->prev;
 800fd74:	6048      	str	r0, [r1, #4]
  p->prev->next = p;
 800fd76:	6001      	str	r1, [r0, #0]
  ch_priority_queue_t *p = pqp->next;
 800fd78:	6810      	ldr	r0, [r2, #0]
  otp->state = newstate;
 800fd7a:	f881 e028 	strb.w	lr, [r1, #40]	; 0x28
    currtp->u.wtsemp = spw;
 800fd7e:	62cb      	str	r3, [r1, #44]	; 0x2c
  qp->prev      = p;
 800fd80:	6059      	str	r1, [r3, #4]
  pqp->next       = p->next;
 800fd82:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 800fd84:	605a      	str	r2, [r3, #4]
  pqp->next       = p->next;
 800fd86:	6013      	str	r3, [r2, #0]
  ntp->state = CH_STATE_CURRENT;
 800fd88:	f880 c028 	strb.w	ip, [r0, #40]	; 0x28
  __instance_set_currthread(oip, ntp);
 800fd8c:	60d0      	str	r0, [r2, #12]
  chSysSwitch(ntp, otp);
 800fd8e:	f7f0 fa57 	bl	8000240 <__port_switch>
 800fd92:	2300      	movs	r3, #0
 800fd94:	f383 8811 	msr	BASEPRI, r3
}
 800fd98:	bd38      	pop	{r3, r4, r5, pc}
  tp->state = CH_STATE_READY;
 800fd9a:	2400      	movs	r4, #0
  ch_queue_t *p = qp->next;
 800fd9c:	6819      	ldr	r1, [r3, #0]
  qp->next       = p->next;
 800fd9e:	6808      	ldr	r0, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800fda0:	688d      	ldr	r5, [r1, #8]
  qp->next->prev = qp;
 800fda2:	6043      	str	r3, [r0, #4]
  qp->next       = p->next;
 800fda4:	6018      	str	r0, [r3, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800fda6:	6988      	ldr	r0, [r1, #24]
  tp->state = CH_STATE_READY;
 800fda8:	f881 4028 	strb.w	r4, [r1, #40]	; 0x28
    pqp = pqp->next;
 800fdac:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800fdae:	6884      	ldr	r4, [r0, #8]
 800fdb0:	42ac      	cmp	r4, r5
 800fdb2:	d2fb      	bcs.n	800fdac <chSemSignalWait.constprop.0.isra.0+0x7c>
  p->prev       = pqp->prev;
 800fdb4:	6844      	ldr	r4, [r0, #4]
 800fdb6:	e9c1 0400 	strd	r0, r4, [r1]
  p->prev->next = p;
 800fdba:	6021      	str	r1, [r4, #0]
    chSchReadyI(threadref(ch_queue_fifo_remove(&sps->queue)))->u.rdymsg = MSG_OK;
 800fdbc:	2400      	movs	r4, #0
  pqp->prev     = p;
 800fdbe:	6041      	str	r1, [r0, #4]
 800fdc0:	62cc      	str	r4, [r1, #44]	; 0x2c
 800fdc2:	e7bf      	b.n	800fd44 <chSemSignalWait.constprop.0.isra.0+0x14>
 800fdc4:	20001224 	.word	0x20001224
 800fdc8:	20001050 	.word	0x20001050
 800fdcc:	00000000 	.word	0x00000000

0800fdd0 <test_execute_inner.isra.0>:
static bool test_execute_inner(const testsuite_t *tsp) {
 800fdd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdd4:	4680      	mov	r8, r0
 800fdd6:	b089      	sub	sp, #36	; 0x24
  test_printf(TEST_CFG_EOL_STRING);
 800fdd8:	489f      	ldr	r0, [pc, #636]	; (8010058 <test_execute_inner.isra.0+0x288>)
 800fdda:	f7f8 f831 	bl	8007e40 <test_printf>
  if (tsp->name != NULL) {
 800fdde:	f8d8 1000 	ldr.w	r1, [r8]
 800fde2:	2900      	cmp	r1, #0
 800fde4:	f000 8134 	beq.w	8010050 <test_execute_inner.isra.0+0x280>
    test_printf("*** %s"TEST_CFG_EOL_STRING, tsp->name);
 800fde8:	489c      	ldr	r0, [pc, #624]	; (801005c <test_execute_inner.isra.0+0x28c>)
 800fdea:	f7f8 f829 	bl	8007e40 <test_printf>
  test_printf("***"TEST_CFG_EOL_STRING);
 800fdee:	489c      	ldr	r0, [pc, #624]	; (8010060 <test_execute_inner.isra.0+0x290>)
 800fdf0:	f7f8 f826 	bl	8007e40 <test_printf>
  test_printf("*** Compiled:     %s"TEST_CFG_EOL_STRING, __DATE__ " - " __TIME__);
 800fdf4:	499b      	ldr	r1, [pc, #620]	; (8010064 <test_execute_inner.isra.0+0x294>)
 800fdf6:	489c      	ldr	r0, [pc, #624]	; (8010068 <test_execute_inner.isra.0+0x298>)
 800fdf8:	f7f8 f822 	bl	8007e40 <test_printf>
  test_printf("*** Platform:     %s"TEST_CFG_EOL_STRING, PLATFORM_NAME);
 800fdfc:	499b      	ldr	r1, [pc, #620]	; (801006c <test_execute_inner.isra.0+0x29c>)
 800fdfe:	489c      	ldr	r0, [pc, #624]	; (8010070 <test_execute_inner.isra.0+0x2a0>)
 800fe00:	f7f8 f81e 	bl	8007e40 <test_printf>
  test_printf("*** Test Board:   %s"TEST_CFG_EOL_STRING, BOARD_NAME);
 800fe04:	499b      	ldr	r1, [pc, #620]	; (8010074 <test_execute_inner.isra.0+0x2a4>)
 800fe06:	489c      	ldr	r0, [pc, #624]	; (8010078 <test_execute_inner.isra.0+0x2a8>)
 800fe08:	f7f8 f81a 	bl	8007e40 <test_printf>
    test_printf("***"TEST_CFG_EOL_STRING);
 800fe0c:	4894      	ldr	r0, [pc, #592]	; (8010060 <test_execute_inner.isra.0+0x290>)
 800fe0e:	f7f8 f817 	bl	8007e40 <test_printf>
    test_printf("*** Text size:    %u bytes"TEST_CFG_EOL_STRING, &__text_end__   - &__text_base__);
 800fe12:	4b9a      	ldr	r3, [pc, #616]	; (801007c <test_execute_inner.isra.0+0x2ac>)
 800fe14:	499a      	ldr	r1, [pc, #616]	; (8010080 <test_execute_inner.isra.0+0x2b0>)
 800fe16:	489b      	ldr	r0, [pc, #620]	; (8010084 <test_execute_inner.isra.0+0x2b4>)
 800fe18:	1ac9      	subs	r1, r1, r3
 800fe1a:	f7f8 f811 	bl	8007e40 <test_printf>
    test_printf("*** RO data size: %u bytes"TEST_CFG_EOL_STRING, &__rodata_end__ - &__rodata_base__);
 800fe1e:	4b9a      	ldr	r3, [pc, #616]	; (8010088 <test_execute_inner.isra.0+0x2b8>)
 800fe20:	499a      	ldr	r1, [pc, #616]	; (801008c <test_execute_inner.isra.0+0x2bc>)
 800fe22:	489b      	ldr	r0, [pc, #620]	; (8010090 <test_execute_inner.isra.0+0x2c0>)
 800fe24:	1ac9      	subs	r1, r1, r3
 800fe26:	f7f8 f80b 	bl	8007e40 <test_printf>
    test_printf("*** Data size:    %u bytes"TEST_CFG_EOL_STRING, &__data_end__   - &__data_base__);
 800fe2a:	4b9a      	ldr	r3, [pc, #616]	; (8010094 <test_execute_inner.isra.0+0x2c4>)
 800fe2c:	499a      	ldr	r1, [pc, #616]	; (8010098 <test_execute_inner.isra.0+0x2c8>)
 800fe2e:	489b      	ldr	r0, [pc, #620]	; (801009c <test_execute_inner.isra.0+0x2cc>)
 800fe30:	1ac9      	subs	r1, r1, r3
 800fe32:	f7f8 f805 	bl	8007e40 <test_printf>
    test_printf("*** BSS size:     %u bytes"TEST_CFG_EOL_STRING, &__bss_end__    - &__bss_base__);
 800fe36:	4b9a      	ldr	r3, [pc, #616]	; (80100a0 <test_execute_inner.isra.0+0x2d0>)
 800fe38:	499a      	ldr	r1, [pc, #616]	; (80100a4 <test_execute_inner.isra.0+0x2d4>)
 800fe3a:	489b      	ldr	r0, [pc, #620]	; (80100a8 <test_execute_inner.isra.0+0x2d8>)
 800fe3c:	1ac9      	subs	r1, r1, r3
 800fe3e:	f7f7 ffff 	bl	8007e40 <test_printf>
  test_printf(TEST_CFG_EOL_STRING);
 800fe42:	4885      	ldr	r0, [pc, #532]	; (8010058 <test_execute_inner.isra.0+0x288>)
 800fe44:	f7f7 fffc 	bl	8007e40 <test_printf>
  chtest.global_fail = false;
 800fe48:	2300      	movs	r3, #0
  while (tsp->sequences[tseq] != NULL) {
 800fe4a:	f8d8 2004 	ldr.w	r2, [r8, #4]
  chtest.global_fail = false;
 800fe4e:	f8df 925c 	ldr.w	r9, [pc, #604]	; 80100ac <test_execute_inner.isra.0+0x2dc>
  while (tsp->sequences[tseq] != NULL) {
 800fe52:	6812      	ldr	r2, [r2, #0]
  chtest.global_fail = false;
 800fe54:	f889 3004 	strb.w	r3, [r9, #4]
  while (tsp->sequences[tseq] != NULL) {
 800fe58:	2a00      	cmp	r2, #0
 800fe5a:	f000 80c8 	beq.w	800ffee <test_execute_inner.isra.0+0x21e>
 800fe5e:	469b      	mov	fp, r3
 800fe60:	4f93      	ldr	r7, [pc, #588]	; (80100b0 <test_execute_inner.isra.0+0x2e0>)
  tseq = 0U;
 800fe62:	9301      	str	r3, [sp, #4]
  if (chtest.putchar != NULL) {
 800fe64:	244c      	movs	r4, #76	; 0x4c
 800fe66:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800fe6a:	b18b      	cbz	r3, 800fe90 <test_execute_inner.isra.0+0xc0>
    chtest.putchar(c);
 800fe6c:	203d      	movs	r0, #61	; 0x3d
 800fe6e:	4798      	blx	r3
  if (chtest.putchar != NULL) {
 800fe70:	f8d9 3020 	ldr.w	r3, [r9, #32]
  for (i = 0; i < 76; i++) {
 800fe74:	3c01      	subs	r4, #1
 800fe76:	d1f8      	bne.n	800fe6a <test_execute_inner.isra.0+0x9a>
 800fe78:	250a      	movs	r5, #10
  while ((c = *s) != '\0') {
 800fe7a:	200d      	movs	r0, #13
 800fe7c:	4c8d      	ldr	r4, [pc, #564]	; (80100b4 <test_execute_inner.isra.0+0x2e4>)
 800fe7e:	b103      	cbz	r3, 800fe82 <test_execute_inner.isra.0+0xb2>
    chtest.putchar(c);
 800fe80:	4798      	blx	r3
 800fe82:	b15d      	cbz	r5, 800fe9c <test_execute_inner.isra.0+0xcc>
  if (chtest.putchar != NULL) {
 800fe84:	4628      	mov	r0, r5
 800fe86:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800fe8a:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800fe8e:	e7f6      	b.n	800fe7e <test_execute_inner.isra.0+0xae>
  for (i = 0; i < 76; i++) {
 800fe90:	3c01      	subs	r4, #1
 800fe92:	d1ef      	bne.n	800fe74 <test_execute_inner.isra.0+0xa4>
 800fe94:	250a      	movs	r5, #10
  while ((c = *s) != '\0') {
 800fe96:	200d      	movs	r0, #13
 800fe98:	4c86      	ldr	r4, [pc, #536]	; (80100b4 <test_execute_inner.isra.0+0x2e4>)
 800fe9a:	e7f0      	b.n	800fe7e <test_execute_inner.isra.0+0xae>
    test_printf("=== Test Sequence %u (%s)"TEST_CFG_EOL_STRING, tseq + 1U, tsp->sequences[tseq]->name);
 800fe9c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fea0:	9901      	ldr	r1, [sp, #4]
 800fea2:	f853 300b 	ldr.w	r3, [r3, fp]
 800fea6:	3101      	adds	r1, #1
 800fea8:	681a      	ldr	r2, [r3, #0]
 800feaa:	4883      	ldr	r0, [pc, #524]	; (80100b8 <test_execute_inner.isra.0+0x2e8>)
 800feac:	9101      	str	r1, [sp, #4]
 800feae:	f7f7 ffc7 	bl	8007e40 <test_printf>
    while (tsp->sequences[tseq]->cases[tcase] != NULL) {
 800feb2:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800feb6:	f852 300b 	ldr.w	r3, [r2, fp]
 800feba:	685b      	ldr	r3, [r3, #4]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	f000 808e 	beq.w	800ffe0 <test_execute_inner.isra.0+0x210>
 800fec4:	244c      	movs	r4, #76	; 0x4c
 800fec6:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800feca:	00ae      	lsls	r6, r5, #2
 800fecc:	b193      	cbz	r3, 800fef4 <test_execute_inner.isra.0+0x124>
    chtest.putchar(c);
 800fece:	202d      	movs	r0, #45	; 0x2d
 800fed0:	4798      	blx	r3
  if (chtest.putchar != NULL) {
 800fed2:	f8d9 3020 	ldr.w	r3, [r9, #32]
  for (i = 0; i < 76; i++) {
 800fed6:	3c01      	subs	r4, #1
 800fed8:	d1f8      	bne.n	800fecc <test_execute_inner.isra.0+0xfc>
 800feda:	240a      	movs	r4, #10
  while ((c = *s) != '\0') {
 800fedc:	200d      	movs	r0, #13
 800fede:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 80100b4 <test_execute_inner.isra.0+0x2e4>
 800fee2:	b103      	cbz	r3, 800fee6 <test_execute_inner.isra.0+0x116>
    chtest.putchar(c);
 800fee4:	4798      	blx	r3
 800fee6:	b164      	cbz	r4, 800ff02 <test_execute_inner.isra.0+0x132>
  if (chtest.putchar != NULL) {
 800fee8:	4620      	mov	r0, r4
 800feea:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800feee:	f81a 4f01 	ldrb.w	r4, [sl, #1]!
 800fef2:	e7f6      	b.n	800fee2 <test_execute_inner.isra.0+0x112>
  for (i = 0; i < 76; i++) {
 800fef4:	3c01      	subs	r4, #1
 800fef6:	d1ee      	bne.n	800fed6 <test_execute_inner.isra.0+0x106>
 800fef8:	240a      	movs	r4, #10
  while ((c = *s) != '\0') {
 800fefa:	200d      	movs	r0, #13
 800fefc:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 80100b4 <test_execute_inner.isra.0+0x2e4>
 800ff00:	e7ef      	b.n	800fee2 <test_execute_inner.isra.0+0x112>
      test_printf("--- Test Case %u.%u (%s)"TEST_CFG_EOL_STRING, tseq + 1U, tcase + 1U, tsp->sequences[tseq]->cases[tcase]->name);
 800ff02:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ff06:	3501      	adds	r5, #1
 800ff08:	f853 300b 	ldr.w	r3, [r3, fp]
 800ff0c:	462a      	mov	r2, r5
 800ff0e:	685b      	ldr	r3, [r3, #4]
 800ff10:	9901      	ldr	r1, [sp, #4]
 800ff12:	599b      	ldr	r3, [r3, r6]
 800ff14:	4869      	ldr	r0, [pc, #420]	; (80100bc <test_execute_inner.isra.0+0x2ec>)
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	f7f7 ff92 	bl	8007e40 <test_printf>
 800ff1c:	2330      	movs	r3, #48	; 0x30
 800ff1e:	f383 8811 	msr	BASEPRI, r3
  vtp->func    = vtfunc;
 800ff22:	4b67      	ldr	r3, [pc, #412]	; (80100c0 <test_execute_inner.isra.0+0x2f0>)
  vt_enqueue(vtlp, vtp, delay);
 800ff24:	f44f 71c8 	mov.w	r1, #400	; 0x190
  vtp->func    = vtfunc;
 800ff28:	9305      	str	r3, [sp, #20]
  vtp->par     = par;
 800ff2a:	68fb      	ldr	r3, [r7, #12]
  vt_enqueue(vtlp, vtp, delay);
 800ff2c:	a802      	add	r0, sp, #8
  vtp->par     = par;
 800ff2e:	9306      	str	r3, [sp, #24]
  vtp->reload  = (sysinterval_t)0;
 800ff30:	9407      	str	r4, [sp, #28]
  vt_enqueue(vtlp, vtp, delay);
 800ff32:	f7fe fdfd 	bl	800eb30 <vt_enqueue.constprop.0>
  otp->state = newstate;
 800ff36:	2308      	movs	r3, #8
  ntp->state = CH_STATE_CURRENT;
 800ff38:	2201      	movs	r2, #1
  thread_t *otp = __instance_get_currthread(oip);
 800ff3a:	68f9      	ldr	r1, [r7, #12]
  ch_priority_queue_t *p = pqp->next;
 800ff3c:	6838      	ldr	r0, [r7, #0]
  otp->state = newstate;
 800ff3e:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
  pqp->next       = p->next;
 800ff42:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 800ff44:	605f      	str	r7, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 800ff46:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  pqp->next       = p->next;
 800ff4a:	603b      	str	r3, [r7, #0]
  __instance_set_currthread(oip, ntp);
 800ff4c:	60f8      	str	r0, [r7, #12]
  chSysSwitch(ntp, otp);
 800ff4e:	f7f0 f977 	bl	8000240 <__port_switch>
    if (chVTIsArmedI(&vt)) {
 800ff52:	9b02      	ldr	r3, [sp, #8]
 800ff54:	b113      	cbz	r3, 800ff5c <test_execute_inner.isra.0+0x18c>
      chVTDoResetI(&vt);
 800ff56:	a802      	add	r0, sp, #8
 800ff58:	f7f2 fe6a 	bl	8002c30 <chVTDoResetI>
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	f383 8811 	msr	BASEPRI, r3
      test_execute_case(tsp->sequences[tseq]->cases[tcase]);
 800ff62:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800ff66:	f852 200b 	ldr.w	r2, [r2, fp]
 800ff6a:	6852      	ldr	r2, [r2, #4]
 800ff6c:	5994      	ldr	r4, [r2, r6]
  chtest.local_fail = false;
 800ff6e:	f889 3005 	strb.w	r3, [r9, #5]
  chtest.tokp = chtest.tokens_buffer;
 800ff72:	4b54      	ldr	r3, [pc, #336]	; (80100c4 <test_execute_inner.isra.0+0x2f4>)
 800ff74:	f8c9 300c 	str.w	r3, [r9, #12]
  if (tcp->setup != NULL) {
 800ff78:	6863      	ldr	r3, [r4, #4]
 800ff7a:	b103      	cbz	r3, 800ff7e <test_execute_inner.isra.0+0x1ae>
    tcp->setup();
 800ff7c:	4798      	blx	r3
  tcp->execute();
 800ff7e:	68e3      	ldr	r3, [r4, #12]
 800ff80:	4798      	blx	r3
  if (tcp->teardown != NULL) {
 800ff82:	68a3      	ldr	r3, [r4, #8]
 800ff84:	b103      	cbz	r3, 800ff88 <test_execute_inner.isra.0+0x1b8>
    tcp->teardown();
 800ff86:	4798      	blx	r3
      if (chtest.local_fail) {
 800ff88:	f899 3005 	ldrb.w	r3, [r9, #5]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d044      	beq.n	801001a <test_execute_inner.isra.0+0x24a>
        test_printf("--- Result: FAILURE (#%u [", chtest.current_step, "", chtest.failure_message);
 800ff90:	4a4d      	ldr	r2, [pc, #308]	; (80100c8 <test_execute_inner.isra.0+0x2f8>)
 800ff92:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800ff96:	f8d9 1000 	ldr.w	r1, [r9]
 800ff9a:	484c      	ldr	r0, [pc, #304]	; (80100cc <test_execute_inner.isra.0+0x2fc>)
 800ff9c:	f7f7 ff50 	bl	8007e40 <test_printf>
  while (cp < chtest.tokp) {
 800ffa0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800ffa4:	4a47      	ldr	r2, [pc, #284]	; (80100c4 <test_execute_inner.isra.0+0x2f4>)
 800ffa6:	4293      	cmp	r3, r2
 800ffa8:	d90b      	bls.n	800ffc2 <test_execute_inner.isra.0+0x1f2>
  char *cp = chtest.tokens_buffer;
 800ffaa:	4c46      	ldr	r4, [pc, #280]	; (80100c4 <test_execute_inner.isra.0+0x2f4>)
 800ffac:	f8d9 3020 	ldr.w	r3, [r9, #32]
    test_putchar(*cp++);
 800ffb0:	3401      	adds	r4, #1
 800ffb2:	b113      	cbz	r3, 800ffba <test_execute_inner.isra.0+0x1ea>
    chtest.putchar(c);
 800ffb4:	f814 0c01 	ldrb.w	r0, [r4, #-1]
 800ffb8:	4798      	blx	r3
  while (cp < chtest.tokp) {
 800ffba:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800ffbe:	429c      	cmp	r4, r3
 800ffc0:	d3f4      	bcc.n	800ffac <test_execute_inner.isra.0+0x1dc>
        test_printf("] \"%s\")"TEST_CFG_EOL_STRING, chtest.failure_message);
 800ffc2:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800ffc6:	4842      	ldr	r0, [pc, #264]	; (80100d0 <test_execute_inner.isra.0+0x300>)
 800ffc8:	f7f7 ff3a 	bl	8007e40 <test_printf>
    while (tsp->sequences[tseq]->cases[tcase] != NULL) {
 800ffcc:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800ffd0:	f852 300b 	ldr.w	r3, [r2, fp]
 800ffd4:	685b      	ldr	r3, [r3, #4]
 800ffd6:	441e      	add	r6, r3
 800ffd8:	6873      	ldr	r3, [r6, #4]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	f47f af72 	bne.w	800fec4 <test_execute_inner.isra.0+0xf4>
  while (tsp->sequences[tseq] != NULL) {
 800ffe0:	f10b 0b04 	add.w	fp, fp, #4
 800ffe4:	f852 300b 	ldr.w	r3, [r2, fp]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	f47f af3b 	bne.w	800fe64 <test_execute_inner.isra.0+0x94>
  if (chtest.putchar != NULL) {
 800ffee:	244c      	movs	r4, #76	; 0x4c
 800fff0:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800fff4:	b1ab      	cbz	r3, 8010022 <test_execute_inner.isra.0+0x252>
    chtest.putchar(c);
 800fff6:	202d      	movs	r0, #45	; 0x2d
 800fff8:	4798      	blx	r3
  if (chtest.putchar != NULL) {
 800fffa:	f8d9 3020 	ldr.w	r3, [r9, #32]
  for (i = 0; i < 76; i++) {
 800fffe:	3c01      	subs	r4, #1
 8010000:	d1f8      	bne.n	800fff4 <test_execute_inner.isra.0+0x224>
 8010002:	240a      	movs	r4, #10
  while ((c = *s) != '\0') {
 8010004:	200d      	movs	r0, #13
 8010006:	4d2b      	ldr	r5, [pc, #172]	; (80100b4 <test_execute_inner.isra.0+0x2e4>)
 8010008:	b103      	cbz	r3, 801000c <test_execute_inner.isra.0+0x23c>
    chtest.putchar(c);
 801000a:	4798      	blx	r3
 801000c:	b17c      	cbz	r4, 801002e <test_execute_inner.isra.0+0x25e>
  if (chtest.putchar != NULL) {
 801000e:	4620      	mov	r0, r4
 8010010:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8010014:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8010018:	e7f6      	b.n	8010008 <test_execute_inner.isra.0+0x238>
        test_printf("--- Result: SUCCESS"TEST_CFG_EOL_STRING);
 801001a:	482e      	ldr	r0, [pc, #184]	; (80100d4 <test_execute_inner.isra.0+0x304>)
 801001c:	f7f7 ff10 	bl	8007e40 <test_printf>
 8010020:	e7d4      	b.n	800ffcc <test_execute_inner.isra.0+0x1fc>
  for (i = 0; i < 76; i++) {
 8010022:	3c01      	subs	r4, #1
 8010024:	d1eb      	bne.n	800fffe <test_execute_inner.isra.0+0x22e>
 8010026:	240a      	movs	r4, #10
  while ((c = *s) != '\0') {
 8010028:	200d      	movs	r0, #13
 801002a:	4d22      	ldr	r5, [pc, #136]	; (80100b4 <test_execute_inner.isra.0+0x2e4>)
 801002c:	e7ec      	b.n	8010008 <test_execute_inner.isra.0+0x238>
  test_printf(TEST_CFG_EOL_STRING);
 801002e:	480a      	ldr	r0, [pc, #40]	; (8010058 <test_execute_inner.isra.0+0x288>)
 8010030:	f7f7 ff06 	bl	8007e40 <test_printf>
  test_printf("Final result: %s"TEST_CFG_EOL_STRING,
 8010034:	f899 1004 	ldrb.w	r1, [r9, #4]
 8010038:	4a27      	ldr	r2, [pc, #156]	; (80100d8 <test_execute_inner.isra.0+0x308>)
 801003a:	4b28      	ldr	r3, [pc, #160]	; (80100dc <test_execute_inner.isra.0+0x30c>)
 801003c:	4828      	ldr	r0, [pc, #160]	; (80100e0 <test_execute_inner.isra.0+0x310>)
 801003e:	2900      	cmp	r1, #0
 8010040:	bf14      	ite	ne
 8010042:	4611      	movne	r1, r2
 8010044:	4619      	moveq	r1, r3
}
 8010046:	b009      	add	sp, #36	; 0x24
 8010048:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_printf("Final result: %s"TEST_CFG_EOL_STRING,
 801004c:	f7f7 bef8 	b.w	8007e40 <test_printf>
    test_printf("*** Test Suite"TEST_CFG_EOL_STRING);
 8010050:	4824      	ldr	r0, [pc, #144]	; (80100e4 <test_execute_inner.isra.0+0x314>)
 8010052:	f7f7 fef5 	bl	8007e40 <test_printf>
 8010056:	e6ca      	b.n	800fdee <test_execute_inner.isra.0+0x1e>
 8010058:	080131b8 	.word	0x080131b8
 801005c:	0801307c 	.word	0x0801307c
 8010060:	0801309c 	.word	0x0801309c
 8010064:	080130a4 	.word	0x080130a4
 8010068:	080130bc 	.word	0x080130bc
 801006c:	080104c4 	.word	0x080104c4
 8010070:	080130d4 	.word	0x080130d4
 8010074:	080104f0 	.word	0x080104f0
 8010078:	080130ec 	.word	0x080130ec
 801007c:	08000160 	.word	0x08000160
 8010080:	08010138 	.word	0x08010138
 8010084:	08013104 	.word	0x08013104
 8010088:	08010138 	.word	0x08010138
 801008c:	08013390 	.word	0x08013390
 8010090:	08013124 	.word	0x08013124
 8010094:	20000800 	.word	0x20000800
 8010098:	200008e4 	.word	0x200008e4
 801009c:	08013144 	.word	0x08013144
 80100a0:	200008e8 	.word	0x200008e8
 80100a4:	20002e10 	.word	0x20002e10
 80100a8:	08013164 	.word	0x08013164
 80100ac:	200010f4 	.word	0x200010f4
 80100b0:	20001050 	.word	0x20001050
 80100b4:	080131b9 	.word	0x080131b9
 80100b8:	08013184 	.word	0x08013184
 80100bc:	080131a0 	.word	0x080131a0
 80100c0:	080013e1 	.word	0x080013e1
 80100c4:	20001104 	.word	0x20001104
 80100c8:	08010400 	.word	0x08010400
 80100cc:	080131bc 	.word	0x080131bc
 80100d0:	080131d8 	.word	0x080131d8
 80100d4:	080131e4 	.word	0x080131e4
 80100d8:	0801306c 	.word	0x0801306c
 80100dc:	08013074 	.word	0x08013074
 80100e0:	080131fc 	.word	0x080131fc
 80100e4:	08013088 	.word	0x08013088
	...

080100f0 <sdu_start_receive.isra.0>:
static bool sdu_start_receive(SerialUSBDriver *sdup) {
 80100f0:	b410      	push	{r4}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 80100f2:	f8d0 348c 	ldr.w	r3, [r0, #1164]	; 0x48c
 80100f6:	681c      	ldr	r4, [r3, #0]
 80100f8:	7822      	ldrb	r2, [r4, #0]
 80100fa:	2a04      	cmp	r2, #4
 80100fc:	d102      	bne.n	8010104 <sdu_start_receive.isra.0+0x14>
 80100fe:	7a02      	ldrb	r2, [r0, #8]
 8010100:	2a02      	cmp	r2, #2
 8010102:	d001      	beq.n	8010108 <sdu_start_receive.isra.0+0x18>
}
 8010104:	bc10      	pop	{r4}
 8010106:	4770      	bx	lr
  if (usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 8010108:	2201      	movs	r2, #1
 801010a:	7959      	ldrb	r1, [r3, #5]
 801010c:	f8b4 c00a 	ldrh.w	ip, [r4, #10]
 8010110:	fa02 f301 	lsl.w	r3, r2, r1
 8010114:	ea13 0f0c 	tst.w	r3, ip
 8010118:	d1f4      	bne.n	8010104 <sdu_start_receive.isra.0+0x14>
  if (ibqIsFullI(ibqp)) {
 801011a:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
 801011e:	429a      	cmp	r2, r3
 8010120:	d006      	beq.n	8010130 <sdu_start_receive.isra.0+0x40>
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 8010122:	4620      	mov	r0, r4
 8010124:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 8010128:	bc10      	pop	{r4}
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 801012a:	3204      	adds	r2, #4
 801012c:	f7f1 bc68 	b.w	8001a00 <usbStartReceiveI>
 8010130:	6983      	ldr	r3, [r0, #24]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d1e6      	bne.n	8010104 <sdu_start_receive.isra.0+0x14>
 8010136:	e7f4      	b.n	8010122 <sdu_start_receive.isra.0+0x32>
